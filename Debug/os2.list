
os2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08009bf8  08009bf8  00019bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d80  08009d80  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d80  08009d80  00019d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d88  08009d88  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d88  08009d88  00019d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042ac  2000001c  08009dac  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042c8  08009dac  000242c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a11  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003078  00000000  00000000  00036a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00039ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003adf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002203d  00000000  00000000  0003bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001417e  00000000  00000000  0005e02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d33ce  00000000  00000000  000721ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000510c  00000000  00000000  001455cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009be0 	.word	0x08009be0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08009be0 	.word	0x08009be0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <vApplicationGetIdleTaskMemory+0x30>)
 8000d6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000038 	.word	0x20000038
 8000d84:	2000008c 	.word	0x2000008c

08000d88 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d8c:	f3bf 8f4f 	dsb	sy
}
 8000d90:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <__NVIC_SystemReset+0x24>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d9a:	4904      	ldr	r1, [pc, #16]	; (8000dac <__NVIC_SystemReset+0x24>)
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_SystemReset+0x28>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000da2:	f3bf 8f4f 	dsb	sy
}
 8000da6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <__NVIC_SystemReset+0x20>
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	05fa0004 	.word	0x05fa0004

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b0cc      	sub	sp, #304	; 0x130
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f003 f8e9 	bl	8003f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f953 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 fbff 	bl	80015c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000dc6:	f000 fb7f 	bl	80014c8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000dca:	f000 fa0d 	bl	80011e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dce:	f000 fa83 	bl	80012d8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000dd2:	f000 fba3 	bl	800151c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000dd6:	f000 fbcb 	bl	8001570 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000dda:	f000 fb4b 	bl	8001474 <MX_UART5_Init>
  MX_TIM2_Init();
 8000dde:	f000 f9af 	bl	8001140 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000de2:	f000 faf1 	bl	80013c8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8000de6:	2202      	movs	r2, #2
 8000de8:	4985      	ldr	r1, [pc, #532]	; (8001000 <main+0x24c>)
 8000dea:	4886      	ldr	r0, [pc, #536]	; (8001004 <main+0x250>)
 8000dec:	f005 fc0b 	bl	8006606 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CameraUARTSem */
  osSemaphoreDef(CameraUARTSem);
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  CameraUARTSemHandle = osSemaphoreCreate(osSemaphore(CameraUARTSem), 1);
 8000dfc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e00:	2101      	movs	r1, #1
 8000e02:	4618      	mov	r0, r3
 8000e04:	f006 fa0b 	bl	800721e <osSemaphoreCreate>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a7f      	ldr	r2, [pc, #508]	; (8001008 <main+0x254>)
 8000e0c:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReadySem */
  osSemaphoreDef(GyroReadySem);
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  GyroReadySemHandle = osSemaphoreCreate(osSemaphore(GyroReadySem), 1);
 8000e1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f006 f9fc 	bl	800721e <osSemaphoreCreate>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a78      	ldr	r2, [pc, #480]	; (800100c <main+0x258>)
 8000e2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of CriticalDistanceSem */
  osSemaphoreDef(CriticalDistanceSem);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  CriticalDistanceSemHandle = osSemaphoreCreate(osSemaphore(CriticalDistanceSem), 1);
 8000e38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f006 f9ed 	bl	800721e <osSemaphoreCreate>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a72      	ldr	r2, [pc, #456]	; (8001010 <main+0x25c>)
 8000e48:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageSem */
  osSemaphoreDef(MileageSem);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  MileageSemHandle = osSemaphoreCreate(osSemaphore(MileageSem), 1);
 8000e56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 f9de 	bl	800721e <osSemaphoreCreate>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a6b      	ldr	r2, [pc, #428]	; (8001014 <main+0x260>)
 8000e66:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageNegSem */
  osSemaphoreDef(MileageNegSem);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  MileageNegSemHandle = osSemaphoreCreate(osSemaphore(MileageNegSem), 1);
 8000e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f006 f9cf 	bl	800721e <osSemaphoreCreate>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a65      	ldr	r2, [pc, #404]	; (8001018 <main+0x264>)
 8000e84:	6013      	str	r3, [r2, #0]

  /* definition and creation of ApriltagSem */
  osSemaphoreDef(ApriltagSem);
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ApriltagSemHandle = osSemaphoreCreate(osSemaphore(ApriltagSem), 1);
 8000e92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e96:	2101      	movs	r1, #1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f006 f9c0 	bl	800721e <osSemaphoreCreate>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a5e      	ldr	r2, [pc, #376]	; (800101c <main+0x268>)
 8000ea2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Stream */
  osThreadDef(Stream, StreamTask, osPriorityNormal, 0, 128);
 8000ea4:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <main+0x26c>)
 8000ea6:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8000eaa:	461d      	mov	r5, r3
 8000eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StreamHandle = osThreadCreate(osThread(Stream), NULL);
 8000eb8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f006 f961 	bl	8007186 <osThreadCreate>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a57      	ldr	r2, [pc, #348]	; (8001024 <main+0x270>)
 8000ec8:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReceive */
  osThreadDef(GyroReceive, GyroReceiveTask, osPriorityNormal, 0, 128);
 8000eca:	4b57      	ldr	r3, [pc, #348]	; (8001028 <main+0x274>)
 8000ecc:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GyroReceiveHandle = osThreadCreate(osThread(GyroReceive), NULL);
 8000ede:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 f94e 	bl	8007186 <osThreadCreate>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a4f      	ldr	r2, [pc, #316]	; (800102c <main+0x278>)
 8000eee:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistanceCheck */
  osThreadDef(DistanceCheck, DistanceCheckTask, osPriorityNormal, 0, 128);
 8000ef0:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <main+0x27c>)
 8000ef2:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DistanceCheckHandle = osThreadCreate(osThread(DistanceCheck), NULL);
 8000f04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 f93b 	bl	8007186 <osThreadCreate>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a48      	ldr	r2, [pc, #288]	; (8001034 <main+0x280>)
 8000f14:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mileage */
  osThreadDef(Mileage, MileageTask, osPriorityNormal, 0, 128);
 8000f16:	4b48      	ldr	r3, [pc, #288]	; (8001038 <main+0x284>)
 8000f18:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MileageHandle = osThreadCreate(osThread(Mileage), NULL);
 8000f2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 f928 	bl	8007186 <osThreadCreate>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a40      	ldr	r2, [pc, #256]	; (800103c <main+0x288>)
 8000f3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GoStraight */
  osThreadDef(GoStraight, GoStraightTask, osPriorityNormal, 0, 128);
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <main+0x28c>)
 8000f3e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000f42:	461d      	mov	r5, r3
 8000f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GoStraightHandle = osThreadCreate(osThread(GoStraight), NULL);
 8000f50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 f915 	bl	8007186 <osThreadCreate>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a39      	ldr	r2, [pc, #228]	; (8001044 <main+0x290>)
 8000f60:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineSearch */
  osThreadDef(LineSearch, LineSearchTask, osPriorityNormal, 0, 128);
 8000f62:	4b39      	ldr	r3, [pc, #228]	; (8001048 <main+0x294>)
 8000f64:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f68:	461d      	mov	r5, r3
 8000f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineSearchHandle = osThreadCreate(osThread(LineSearch), NULL);
 8000f76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 f902 	bl	8007186 <osThreadCreate>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a31      	ldr	r2, [pc, #196]	; (800104c <main+0x298>)
 8000f86:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineSearch2 */
  osThreadDef(LineSearch2, LineSearch2Task, osPriorityNormal, 0, 128);
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <main+0x29c>)
 8000f8a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f8e:	461d      	mov	r5, r3
 8000f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineSearch2Handle = osThreadCreate(osThread(LineSearch2), NULL);
 8000f9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 f8ef 	bl	8007186 <osThreadCreate>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <main+0x2a0>)
 8000fac:	6013      	str	r3, [r2, #0]

  /* definition and creation of PIDCamera */
  osThreadDef(PIDCamera, PIDCameraTask, osPriorityNormal, 0, 128);
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	4a29      	ldr	r2, [pc, #164]	; (8001058 <main+0x2a4>)
 8000fb4:	461c      	mov	r4, r3
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PIDCameraHandle = osThreadCreate(osThread(PIDCamera), NULL);
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f006 f8db 	bl	8007186 <osThreadCreate>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a22      	ldr	r2, [pc, #136]	; (800105c <main+0x2a8>)
 8000fd4:	6013      	str	r3, [r2, #0]

  /* definition and creation of PIDCamera2 */
  osThreadDef(PIDCamera2, PIDCamera2Task, osPriorityNormal, 0, 128);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <main+0x2ac>)
 8000fda:	461c      	mov	r4, r3
 8000fdc:	4615      	mov	r5, r2
 8000fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PIDCamera2Handle = osThreadCreate(osThread(PIDCamera2), NULL);
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f006 f8c9 	bl	8007186 <osThreadCreate>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <main+0x2b0>)
 8000ff8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ffa:	f006 f8ad 	bl	8007158 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <main+0x24a>
 8001000:	2000028c 	.word	0x2000028c
 8001004:	20004230 	.word	0x20004230
 8001008:	200040ec 	.word	0x200040ec
 800100c:	200041dc 	.word	0x200041dc
 8001010:	20004008 	.word	0x20004008
 8001014:	200041d4 	.word	0x200041d4
 8001018:	200041e4 	.word	0x200041e4
 800101c:	200041e0 	.word	0x200041e0
 8001020:	08009c60 	.word	0x08009c60
 8001024:	200041d0 	.word	0x200041d0
 8001028:	08009c7c 	.word	0x08009c7c
 800102c:	20004278 	.word	0x20004278
 8001030:	08009c98 	.word	0x08009c98
 8001034:	200040f0 	.word	0x200040f0
 8001038:	08009cb4 	.word	0x08009cb4
 800103c:	2000400c 	.word	0x2000400c
 8001040:	08009cd0 	.word	0x08009cd0
 8001044:	200040f4 	.word	0x200040f4
 8001048:	08009cec 	.word	0x08009cec
 800104c:	200040e8 	.word	0x200040e8
 8001050:	08009d08 	.word	0x08009d08
 8001054:	20004188 	.word	0x20004188
 8001058:	08009d24 	.word	0x08009d24
 800105c:	200040e4 	.word	0x200040e4
 8001060:	08009d40 	.word	0x08009d40
 8001064:	20004274 	.word	0x20004274

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f008 fdaa 	bl	8009bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <SystemClock_Config+0xd0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <SystemClock_Config+0xd0>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <SystemClock_Config+0xd0>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <SystemClock_Config+0xd4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <SystemClock_Config+0xd4>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <SystemClock_Config+0xd4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010dc:	23a8      	movs	r3, #168	; 0xa8
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fad5 	bl	800469c <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f002 fc0a 	bl	8003910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001108:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2105      	movs	r1, #5
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fd36 	bl	8004b8c <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001126:	f002 fbf3 	bl	8003910 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800112a:	f003 fe15 	bl	8004d58 <HAL_RCC_EnableCSS>
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2224      	movs	r2, #36	; 0x24
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f008 fd3e 	bl	8009bd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_TIM2_Init+0xa4>)
 800115e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001162:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_TIM2_Init+0xa4>)
 8001166:	2203      	movs	r2, #3
 8001168:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_TIM2_Init+0xa4>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_TIM2_Init+0xa4>)
 8001172:	f241 3287 	movw	r2, #4999	; 0x1387
 8001176:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_TIM2_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_TIM2_Init+0xa4>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001184:	2303      	movs	r3, #3
 8001186:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800118c:	2301      	movs	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800119c:	2301      	movs	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_TIM2_Init+0xa4>)
 80011b0:	f004 f922 	bl	80053f8 <HAL_TIM_Encoder_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011ba:	f002 fba9 	bl	8003910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_TIM2_Init+0xa4>)
 80011cc:	f005 f80a 	bl	80061e4 <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011d6:	f002 fb9b 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3730      	adds	r7, #48	; 0x30
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200041e8 	.word	0x200041e8

080011e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800121a:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <MX_TIM3_Init+0xec>)
 800121c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 601-1;
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <MX_TIM3_Init+0xe8>)
 8001220:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001224:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <MX_TIM3_Init+0xe8>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800122e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001232:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <MX_TIM3_Init+0xe8>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001240:	4823      	ldr	r0, [pc, #140]	; (80012d0 <MX_TIM3_Init+0xe8>)
 8001242:	f003 fef8 	bl	8005036 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800124c:	f002 fb60 	bl	8003910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125a:	4619      	mov	r1, r3
 800125c:	481c      	ldr	r0, [pc, #112]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800125e:	f004 fbc5 	bl	80059ec <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001268:	f002 fb52 	bl	8003910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800126c:	4818      	ldr	r0, [pc, #96]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800126e:	f003 ffa1 	bl	80051b4 <HAL_TIM_PWM_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001278:	f002 fb4a 	bl	8003910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	4619      	mov	r1, r3
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800128c:	f004 ffaa 	bl	80061e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001296:	f002 fb3b 	bl	8003910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129a:	2360      	movs	r3, #96	; 0x60
 800129c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM3_Init+0xe8>)
 80012b2:	f004 fadd 	bl	8005870 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012bc:	f002 fb28 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM3_Init+0xe8>)
 80012c2:	f002 fc13 	bl	8003aec <HAL_TIM_MspPostInit>

}
 80012c6:	bf00      	nop
 80012c8:	3738      	adds	r7, #56	; 0x38
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200040f8 	.word	0x200040f8
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <MX_TIM4_Init+0xe8>)
 800130a:	4a2e      	ldr	r2, [pc, #184]	; (80013c4 <MX_TIM4_Init+0xec>)
 800130c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 601-1;
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <MX_TIM4_Init+0xe8>)
 8001310:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001314:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <MX_TIM4_Init+0xe8>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <MX_TIM4_Init+0xe8>)
 800131e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001322:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <MX_TIM4_Init+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <MX_TIM4_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001330:	4823      	ldr	r0, [pc, #140]	; (80013c0 <MX_TIM4_Init+0xe8>)
 8001332:	f003 fe80 	bl	8005036 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800133c:	f002 fae8 	bl	8003910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134a:	4619      	mov	r1, r3
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <MX_TIM4_Init+0xe8>)
 800134e:	f004 fb4d 	bl	80059ec <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001358:	f002 fada 	bl	8003910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800135c:	4818      	ldr	r0, [pc, #96]	; (80013c0 <MX_TIM4_Init+0xe8>)
 800135e:	f003 ff29 	bl	80051b4 <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001368:	f002 fad2 	bl	8003910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4619      	mov	r1, r3
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <MX_TIM4_Init+0xe8>)
 800137c:	f004 ff32 	bl	80061e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001386:	f002 fac3 	bl	8003910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	; (80013c0 <MX_TIM4_Init+0xe8>)
 80013a2:	f004 fa65 	bl	8005870 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013ac:	f002 fab0 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <MX_TIM4_Init+0xe8>)
 80013b2:	f002 fb9b 	bl	8003aec <HAL_TIM_MspPostInit>

}
 80013b6:	bf00      	nop
 80013b8:	3738      	adds	r7, #56	; 0x38
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20004058 	.word	0x20004058
 80013c4:	40000800 	.word	0x40000800

080013c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	; 0x30
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2224      	movs	r2, #36	; 0x24
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f008 fbfa 	bl	8009bd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_TIM8_Init+0xa4>)
 80013e6:	4a22      	ldr	r2, [pc, #136]	; (8001470 <MX_TIM8_Init+0xa8>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_TIM8_Init+0xa4>)
 80013ec:	2203      	movs	r2, #3
 80013ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_TIM8_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 150;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM8_Init+0xa4>)
 80013f8:	2296      	movs	r2, #150	; 0x96
 80013fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_TIM8_Init+0xa4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_TIM8_Init+0xa4>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_TIM8_Init+0xa4>)
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800140e:	2303      	movs	r3, #3
 8001410:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001426:	2301      	movs	r3, #1
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_TIM8_Init+0xa4>)
 800143a:	f003 ffdd 	bl	80053f8 <HAL_TIM_Encoder_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 8001444:	f002 fa64 	bl	8003910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM8_Init+0xa4>)
 8001456:	f004 fec5 	bl	80061e4 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8001460:	f002 fa56 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3730      	adds	r7, #48	; 0x30
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20004010 	.word	0x20004010
 8001470:	40010400 	.word	0x40010400

08001474 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_UART5_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_UART5_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_UART5_Init+0x4c>)
 8001480:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001484:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_UART5_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_UART5_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_UART5_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_UART5_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_UART5_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_UART5_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_UART5_Init+0x4c>)
 80014ac:	f004 ff2a 	bl	8006304 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80014b6:	f002 fa2b 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20004144 	.word	0x20004144
 80014c4:	40005000 	.word	0x40005000

080014c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_USART1_UART_Init+0x50>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 8001500:	f004 ff00 	bl	8006304 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800150a:	f002 fa01 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000418c 	.word	0x2000418c
 8001518:	40011000 	.word	0x40011000

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART2_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001554:	f004 fed6 	bl	8006304 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f002 f9d7 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20004230 	.word	0x20004230
 800156c:	40004400 	.word	0x40004400

08001570 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_USART3_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 80015a8:	f004 feac 	bl	8006304 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f002 f9ad 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200040a0 	.word	0x200040a0
 80015c0:	40004800 	.word	0x40004800

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	; 0x30
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <MX_GPIO_Init+0x144>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a49      	ldr	r2, [pc, #292]	; (8001708 <MX_GPIO_Init+0x144>)
 80015e4:	f043 0320 	orr.w	r3, r3, #32
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <MX_GPIO_Init+0x144>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	4b43      	ldr	r3, [pc, #268]	; (8001708 <MX_GPIO_Init+0x144>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a42      	ldr	r2, [pc, #264]	; (8001708 <MX_GPIO_Init+0x144>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b40      	ldr	r3, [pc, #256]	; (8001708 <MX_GPIO_Init+0x144>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <MX_GPIO_Init+0x144>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a3b      	ldr	r2, [pc, #236]	; (8001708 <MX_GPIO_Init+0x144>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b39      	ldr	r3, [pc, #228]	; (8001708 <MX_GPIO_Init+0x144>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <MX_GPIO_Init+0x144>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a34      	ldr	r2, [pc, #208]	; (8001708 <MX_GPIO_Init+0x144>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <MX_GPIO_Init+0x144>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <MX_GPIO_Init+0x144>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <MX_GPIO_Init+0x144>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <MX_GPIO_Init+0x144>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <MX_GPIO_Init+0x144>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a26      	ldr	r2, [pc, #152]	; (8001708 <MX_GPIO_Init+0x144>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <MX_GPIO_Init+0x144>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LEDBlue_Pin|LEDGreen_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001688:	4820      	ldr	r0, [pc, #128]	; (800170c <MX_GPIO_Init+0x148>)
 800168a:	f002 ffd3 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rightPWMGND_GPIO_Port, rightPWMGND_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001694:	481e      	ldr	r0, [pc, #120]	; (8001710 <MX_GPIO_Init+0x14c>)
 8001696:	f002 ffcd 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(leftPWMGND_GPIO_Port, leftPWMGND_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a0:	481c      	ldr	r0, [pc, #112]	; (8001714 <MX_GPIO_Init+0x150>)
 80016a2:	f002 ffc7 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDBlue_Pin LEDGreen_Pin */
  GPIO_InitStruct.Pin = LEDBlue_Pin|LEDGreen_Pin;
 80016a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	4813      	ldr	r0, [pc, #76]	; (800170c <MX_GPIO_Init+0x148>)
 80016c0:	f002 fe1c 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : rightPWMGND_Pin */
  GPIO_InitStruct.Pin = rightPWMGND_Pin;
 80016c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ce:	2302      	movs	r3, #2
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(rightPWMGND_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <MX_GPIO_Init+0x14c>)
 80016de:	f002 fe0d 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : leftPWMGND_Pin */
  GPIO_InitStruct.Pin = leftPWMGND_Pin;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ec:	2302      	movs	r3, #2
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftPWMGND_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <MX_GPIO_Init+0x150>)
 80016fc:	f002 fdfe 	bl	80042fc <HAL_GPIO_Init>

}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40021400 	.word	0x40021400
 8001710:	40020c00 	.word	0x40020c00
 8001714:	40020000 	.word	0x40020000

08001718 <Car_Initial>:

/* USER CODE BEGIN 4 */
void Car_Initial(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 800171c:	f007 ff1a 	bl	8009554 <vPortEnterCritical>
	state=Initial;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <Car_Initial+0x50>)
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
	temp_state = Unknow;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <Car_Initial+0x54>)
 8001728:	2216      	movs	r2, #22
 800172a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);//�?????????????????????????????????????????????????????????????????????????????启左侧PWM
 800172c:	2100      	movs	r1, #0
 800172e:	4810      	ldr	r0, [pc, #64]	; (8001770 <Car_Initial+0x58>)
 8001730:	f003 fd9a 	bl	8005268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);//�?????????????????????????????????????????????????????????????????????????????启右侧PWM
 8001734:	2100      	movs	r1, #0
 8001736:	480f      	ldr	r0, [pc, #60]	; (8001774 <Car_Initial+0x5c>)
 8001738:	f003 fd96 	bl	8005268 <HAL_TIM_PWM_Start>
	taskEXIT_CRITICAL();
 800173c:	f007 ff3a 	bl	80095b4 <vPortExitCritical>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001740:	213c      	movs	r1, #60	; 0x3c
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <Car_Initial+0x60>)
 8001744:	f003 fefe 	bl	8005544 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,500);
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <Car_Initial+0x60>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8001752:	4809      	ldr	r0, [pc, #36]	; (8001778 <Car_Initial+0x60>)
 8001754:	f003 fcbe 	bl	80050d4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001758:	2202      	movs	r2, #2
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <Car_Initial+0x64>)
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <Car_Initial+0x68>)
 800175e:	f004 ff52 	bl	8006606 <HAL_UART_Receive_IT>
	//vTaskSuspend(UART_RTHandle);//Suspend UART R and T
	//vTaskSuspend(PIDCameraHandle);//Suspend PID module
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20004140 	.word	0x20004140
 800176c:	200041d8 	.word	0x200041d8
 8001770:	200040f8 	.word	0x200040f8
 8001774:	20004058 	.word	0x20004058
 8001778:	200041e8 	.word	0x200041e8
 800177c:	2000028c 	.word	0x2000028c
 8001780:	20004230 	.word	0x20004230

08001784 <Car_Stop>:

void Car_Stop(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 8001788:	f007 fee4 	bl	8009554 <vPortEnterCritical>
	PWM_SET_LEFT(1);
 800178c:	2001      	movs	r0, #1
 800178e:	f000 ff0b 	bl	80025a8 <PWM_SET_LEFT>
	PWM_SET_RIGHT(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f000 ff40 	bl	8002618 <PWM_SET_RIGHT>
	taskEXIT_CRITICAL();
 8001798:	f007 ff0c 	bl	80095b4 <vPortExitCritical>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <delay>:

void delay(uint32_t time_ms)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	uint32_t PreviousWakeTime=osKernelSysTick();
 80017a8:	f005 fcdd 	bl	8007166 <osKernelSysTick>
 80017ac:	4603      	mov	r3, r0
 80017ae:	60fb      	str	r3, [r7, #12]
	osDelayUntil(&PreviousWakeTime, time_ms);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fde8 	bl	800738c <osDelayUntil>
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <Angle_Diff>:

float Angle_Diff(float target, float input)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ce:	edc7 0a00 	vstr	s1, [r7]
	float Error;
	if(target >= 180)
 80017d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001884 <Angle_Diff+0xc0>
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	db08      	blt.n	80017f6 <Angle_Diff+0x32>
		target=-360+target;
 80017e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001888 <Angle_Diff+0xc4>
 80017ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80017f4:	e010      	b.n	8001818 <Angle_Diff+0x54>
	else if(target <=-180)
 80017f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800188c <Angle_Diff+0xc8>
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d807      	bhi.n	8001818 <Angle_Diff+0x54>
		target=360+target;
 8001808:	edd7 7a01 	vldr	s15, [r7, #4]
 800180c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001888 <Angle_Diff+0xc4>
 8001810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001814:	edc7 7a01 	vstr	s15, [r7, #4]
	Error = target - input;
 8001818:	ed97 7a01 	vldr	s14, [r7, #4]
 800181c:	edd7 7a00 	vldr	s15, [r7]
 8001820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001824:	edc7 7a03 	vstr	s15, [r7, #12]
		if(Error >= 180)
 8001828:	edd7 7a03 	vldr	s15, [r7, #12]
 800182c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001884 <Angle_Diff+0xc0>
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	db08      	blt.n	800184c <Angle_Diff+0x88>
			Error=Error-360;
 800183a:	edd7 7a03 	vldr	s15, [r7, #12]
 800183e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001888 <Angle_Diff+0xc4>
 8001842:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001846:	edc7 7a03 	vstr	s15, [r7, #12]
 800184a:	e010      	b.n	800186e <Angle_Diff+0xaa>
		else if(Error <= -180)
 800184c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001850:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800188c <Angle_Diff+0xc8>
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	d807      	bhi.n	800186e <Angle_Diff+0xaa>
			Error=Error+360;
 800185e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001862:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001888 <Angle_Diff+0xc4>
 8001866:	ee77 7a87 	vadd.f32	s15, s15, s14
 800186a:	edc7 7a03 	vstr	s15, [r7, #12]
	return Error;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	ee07 3a90 	vmov	s15, r3
}
 8001874:	eeb0 0a67 	vmov.f32	s0, s15
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	43340000 	.word	0x43340000
 8001888:	43b40000 	.word	0x43b40000
 800188c:	c3340000 	.word	0xc3340000

08001890 <PID_Turning>:
// 		}
// 	 }
//}

int PID_Turning(float increment_angle,float Accept_Error)//If we want to turn right, parameter is negative
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b092      	sub	sp, #72	; 0x48
 8001894:	af00      	add	r7, sp, #0
 8001896:	ed87 0a01 	vstr	s0, [r7, #4]
 800189a:	edc7 0a00 	vstr	s1, [r7]

	float PID_target=0;
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	647b      	str	r3, [r7, #68]	; 0x44
	float PID_Error_Last=0;
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	643b      	str	r3, [r7, #64]	; 0x40
	float initial_yaw=0;
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	float PID_Output=0,PID_Input=0;;
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
	float Error = 0, Error_Total=0;
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	63bb      	str	r3, [r7, #56]	; 0x38
	float KP=15, KI=2, KD=4;
 80018c8:	4baf      	ldr	r3, [pc, #700]	; (8001b88 <PID_Turning+0x2f8>)
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80018d6:	617b      	str	r3, [r7, #20]
	int t=0;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
	float pwm_left=0,pwm_right=0;
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
	uint8_t Flag=0; //Indicate that if verifying process begin.
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Car_Stop();
 80018ee:	f7ff ff49 	bl	8001784 <Car_Stop>
	//delay(1500);
	for(int i=0;i<10;i++)			//Get average initial direction
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f6:	e012      	b.n	800191e <PID_Turning+0x8e>
	{
			osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 80018f8:	4ba4      	ldr	r3, [pc, #656]	; (8001b8c <PID_Turning+0x2fc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	4618      	mov	r0, r3
 8001902:	f005 fcbf 	bl	8007284 <osSemaphoreWait>
			initial_yaw+=angle.z;
 8001906:	4ba2      	ldr	r3, [pc, #648]	; (8001b90 <PID_Turning+0x300>)
 8001908:	edd3 7a02 	vldr	s15, [r3, #8]
 800190c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001914:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for(int i=0;i<10;i++)			//Get average initial direction
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	3301      	adds	r3, #1
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	2b09      	cmp	r3, #9
 8001922:	dde9      	ble.n	80018f8 <PID_Turning+0x68>
	}
	initial_yaw=initial_yaw/10;
 8001924:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001928:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800192c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001930:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	PID_target=initial_yaw + increment_angle;
 8001934:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001938:	edd7 7a01 	vldr	s15, [r7, #4]
 800193c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001940:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(PID_target > 180)
 8001944:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001948:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001b94 <PID_Turning+0x304>
 800194c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001954:	dd07      	ble.n	8001966 <PID_Turning+0xd6>
		PID_target=-360+PID_target;
 8001956:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800195a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001b98 <PID_Turning+0x308>
 800195e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001962:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(PID_target <-180)
 8001966:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800196a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001b9c <PID_Turning+0x30c>
 800196e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	d507      	bpl.n	8001988 <PID_Turning+0xf8>
		PID_target=360+PID_target;
 8001978:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800197c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001b98 <PID_Turning+0x308>
 8001980:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001984:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for(;;)
  {
	  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001988:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <PID_Turning+0x2fc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	4618      	mov	r0, r3
 8001992:	f005 fc77 	bl	8007284 <osSemaphoreWait>
	  	 PID_Input = angle.z;
 8001996:	4b7e      	ldr	r3, [pc, #504]	; (8001b90 <PID_Turning+0x300>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
	  	 Error=Angle_Diff(PID_target, PID_Input);
 800199c:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80019a0:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80019a4:	f7ff ff0e 	bl	80017c4 <Angle_Diff>
 80019a8:	ed87 0a08 	vstr	s0, [r7, #32]
	  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 80019ac:	edd7 7a00 	vldr	s15, [r7]
 80019b0:	eef1 7a67 	vneg.f32	s15, s15
 80019b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80019b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	dd17      	ble.n	80019f2 <PID_Turning+0x162>
 80019c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80019c6:	edd7 7a00 	vldr	s15, [r7]
 80019ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	d50e      	bpl.n	80019f2 <PID_Turning+0x162>
 80019d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <PID_Turning+0x162>
	  	 {
	  		 t++;
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	3301      	adds	r3, #1
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
	  		if(t>2)
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	dd04      	ble.n	80019f2 <PID_Turning+0x162>
	  		{
	  			Flag = 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
	  		}
	  	 }
	  	 if(Flag)
 80019f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d026      	beq.n	8001a48 <PID_Turning+0x1b8>
	  	 {
	  		if(t>Angle_stable_cycles)
 80019fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	dd06      	ble.n	8001a0e <PID_Turning+0x17e>
	  		{
	  			Flag=0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
	  			return 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e0b7      	b.n	8001b7e <PID_Turning+0x2ee>
	  		}
	  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 8001a0e:	edd7 7a00 	vldr	s15, [r7]
 8001a12:	eef1 7a67 	vneg.f32	s15, s15
 8001a16:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	dd0c      	ble.n	8001a3e <PID_Turning+0x1ae>
 8001a24:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a28:	edd7 7a00 	vldr	s15, [r7]
 8001a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d503      	bpl.n	8001a3e <PID_Turning+0x1ae>
	  		{
	  			t++;
 8001a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a38:	3301      	adds	r3, #1
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3c:	e004      	b.n	8001a48 <PID_Turning+0x1b8>
	  		}
	  		else
	  		{
	  			Flag=0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
	  		}
	  	 }
	  	 Error_Total=Error_Total+KI*Error;
 8001a48:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	     PID_Output = KP * Error  +
 8001a60:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a64:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a68:	ee27 7a27 	vmul.f32	s14, s14, s15
	 				  KD * (Error - PID_Error_Last ) +
 8001a6c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001a70:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	     PID_Output = KP * Error  +
 8001a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a84:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
					  Error_Total;
	     PID_Error_Last = Error;
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	643b      	str	r3, [r7, #64]	; 0x40
	     pwm_right =   PID_Output;
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	60fb      	str	r3, [r7, #12]
	     pwm_left  = - PID_Output;
 8001a98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a9c:	eef1 7a67 	vneg.f32	s15, s15
 8001aa0:	edc7 7a04 	vstr	s15, [r7, #16]
	     pwm_right += pwm_right>0 ?PWM_Lowest:-PWM_Lowest;
 8001aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	dd02      	ble.n	8001ab8 <PID_Turning+0x228>
 8001ab2:	eddf 7a38 	vldr	s15, [pc, #224]	; 8001b94 <PID_Turning+0x304>
 8001ab6:	e001      	b.n	8001abc <PID_Turning+0x22c>
 8001ab8:	eddf 7a38 	vldr	s15, [pc, #224]	; 8001b9c <PID_Turning+0x30c>
 8001abc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	edc7 7a03 	vstr	s15, [r7, #12]
	     pwm_left  += pwm_left>0  ?PWM_Lowest:-PWM_Lowest;
 8001ac8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	dd02      	ble.n	8001adc <PID_Turning+0x24c>
 8001ad6:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8001b94 <PID_Turning+0x304>
 8001ada:	e001      	b.n	8001ae0 <PID_Turning+0x250>
 8001adc:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8001b9c <PID_Turning+0x30c>
 8001ae0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae8:	edc7 7a04 	vstr	s15, [r7, #16]
	     pwm_right =  pwm_right>= PWM_Higest?PWM_Higest:pwm_right;
 8001aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001ba0 <PID_Turning+0x310>
 8001af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	db01      	blt.n	8001b02 <PID_Turning+0x272>
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <PID_Turning+0x314>)
 8001b00:	e000      	b.n	8001b04 <PID_Turning+0x274>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	60fb      	str	r3, [r7, #12]
	     pwm_right =  pwm_right<= -PWM_Higest?-PWM_Higest:pwm_right;
 8001b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001ba8 <PID_Turning+0x318>
 8001b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	d801      	bhi.n	8001b1c <PID_Turning+0x28c>
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <PID_Turning+0x31c>)
 8001b1a:	e000      	b.n	8001b1e <PID_Turning+0x28e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	60fb      	str	r3, [r7, #12]
	     pwm_left  =  pwm_left >= PWM_Higest?PWM_Higest:pwm_left;
 8001b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b24:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001ba0 <PID_Turning+0x310>
 8001b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	db01      	blt.n	8001b36 <PID_Turning+0x2a6>
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <PID_Turning+0x314>)
 8001b34:	e000      	b.n	8001b38 <PID_Turning+0x2a8>
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	613b      	str	r3, [r7, #16]
	     pwm_left  =  pwm_left <= -PWM_Higest?-PWM_Higest:pwm_left;// 限幅
 8001b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b3e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ba8 <PID_Turning+0x318>
 8001b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d801      	bhi.n	8001b50 <PID_Turning+0x2c0>
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <PID_Turning+0x31c>)
 8001b4e:	e000      	b.n	8001b52 <PID_Turning+0x2c2>
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	613b      	str	r3, [r7, #16]
	    	 taskENTER_CRITICAL();
 8001b54:	f007 fcfe 	bl	8009554 <vPortEnterCritical>
	    	 PWM_SET_RIGHT ((int32_t)   pwm_right);
 8001b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b60:	ee17 0a90 	vmov	r0, s15
 8001b64:	f000 fd58 	bl	8002618 <PWM_SET_RIGHT>
	    	 PWM_SET_LEFT  ((int32_t)   pwm_left );
 8001b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b70:	ee17 0a90 	vmov	r0, s15
 8001b74:	f000 fd18 	bl	80025a8 <PWM_SET_LEFT>
	    	 taskEXIT_CRITICAL();
 8001b78:	f007 fd1c 	bl	80095b4 <vPortExitCritical>
	  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001b7c:	e704      	b.n	8001988 <PID_Turning+0xf8>
  }

}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3748      	adds	r7, #72	; 0x48
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	41700000 	.word	0x41700000
 8001b8c:	200041dc 	.word	0x200041dc
 8001b90:	20000290 	.word	0x20000290
 8001b94:	43340000 	.word	0x43340000
 8001b98:	43b40000 	.word	0x43b40000
 8001b9c:	c3340000 	.word	0xc3340000
 8001ba0:	44fa0000 	.word	0x44fa0000
 8001ba4:	44fa0000 	.word	0x44fa0000
 8001ba8:	c4fa0000 	.word	0xc4fa0000
 8001bac:	c4fa0000 	.word	0xc4fa0000

08001bb0 <PID_Straight>:

void PID_Straight(float speed)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b092      	sub	sp, #72	; 0x48
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	ed87 0a01 	vstr	s0, [r7, #4]
					float PID_target=0;
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
					float PID_Error_Last=0;
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
					float initial_yaw=0;
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	643b      	str	r3, [r7, #64]	; 0x40
					float PID_Output=0,PID_Input=0;
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
					float Error = 0, Error_Total=0,Error_Total_Total=0;
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
					float KP=15, KI=6, KD=10, KI2=0.013;
 8001bea:	4b6b      	ldr	r3, [pc, #428]	; (8001d98 <PID_Straight+0x1e8>)
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <PID_Straight+0x1ec>)
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <PID_Straight+0x1f0>)
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <PID_Straight+0x1f4>)
 8001bf8:	617b      	str	r3, [r7, #20]
					int32_t pwm_right=0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
					int32_t pwm_left=0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
					//uint8_t Flag=0; //Indicate that if verifying process begin.
					Car_Stop();
 8001c02:	f7ff fdbf 	bl	8001784 <Car_Stop>
					if (PID_Straight_Reset_Flag)
 8001c06:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <PID_Straight+0x1f8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 80bb 	bne.w	8001d86 <PID_Straight+0x1d6>
						return;
					osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001c10:	4b66      	ldr	r3, [pc, #408]	; (8001dac <PID_Straight+0x1fc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f005 fb33 	bl	8007284 <osSemaphoreWait>
					for(int i=0;i<10;i++)			//Get average initial direction
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
 8001c22:	e015      	b.n	8001c50 <PID_Straight+0xa0>
					{
							osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001c24:	4b61      	ldr	r3, [pc, #388]	; (8001dac <PID_Straight+0x1fc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f005 fb29 	bl	8007284 <osSemaphoreWait>
							initial_yaw+=angle.z;
 8001c32:	4b5f      	ldr	r3, [pc, #380]	; (8001db0 <PID_Straight+0x200>)
 8001c34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c38:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c40:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
							delay(10);
 8001c44:	200a      	movs	r0, #10
 8001c46:	f7ff fdab 	bl	80017a0 <delay>
					for(int i=0;i<10;i++)			//Get average initial direction
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c52:	2b09      	cmp	r3, #9
 8001c54:	dde6      	ble.n	8001c24 <PID_Straight+0x74>
					}
					initial_yaw=initial_yaw/10;
 8001c56:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c5a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c62:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
					PID_target=initial_yaw;
 8001c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
				  for(;;)
				  {
					  	 if (PID_Straight_Reset_Flag)
 8001c6a:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <PID_Straight+0x1f8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 808b 	bne.w	8001d8a <PID_Straight+0x1da>
					  		 return;
		  	  	  	  	 //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green
					  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001c74:	4b4d      	ldr	r3, [pc, #308]	; (8001dac <PID_Straight+0x1fc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f005 fb01 	bl	8007284 <osSemaphoreWait>
					  	 PID_Input = angle.z;
 8001c82:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <PID_Straight+0x200>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
					  	 Error=Angle_Diff(PID_target, PID_Input);
 8001c88:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001c8c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001c90:	f7ff fd98 	bl	80017c4 <Angle_Diff>
 8001c94:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					  	 Error_Total=Error_Total+KI*Error;
 8001c98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					     Error_Total_Total= Error_Total_Total+KI2*Error_Total;
 8001cb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cb4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					     PID_Output = KP * Error  +
 8001cc8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ccc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
					 				  KD * (Error - PID_Error_Last ) +
 8001cd4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001cd8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cdc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ce0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
					     PID_Output = KP * Error  +
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
									  Error_Total;
					     PID_Error_Last = Error;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	647b      	str	r3, [r7, #68]	; 0x44

					     pwm_right=	speed+	(int32_t) 	PID_Output;
 8001cfc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d14:	ee17 3a90 	vmov	r3, s15
 8001d18:	613b      	str	r3, [r7, #16]
					     pwm_left=	speed-	(int32_t)  	PID_Output;
 8001d1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d32:	ee17 3a90 	vmov	r3, s15
 8001d36:	60fb      	str	r3, [r7, #12]
					     pwm_right = pwm_right<PWM_Lowest ? PWM_Lowest : pwm_right;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	2bb4      	cmp	r3, #180	; 0xb4
 8001d3c:	bfb8      	it	lt
 8001d3e:	23b4      	movlt	r3, #180	; 0xb4
 8001d40:	613b      	str	r3, [r7, #16]
					     pwm_right = pwm_right>PWM_Higest ? PWM_Higest : pwm_right;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d48:	bfa8      	it	ge
 8001d4a:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 8001d4e:	613b      	str	r3, [r7, #16]
					     pwm_left = pwm_left<PWM_Lowest ? PWM_Lowest : pwm_left;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2bb4      	cmp	r3, #180	; 0xb4
 8001d54:	bfb8      	it	lt
 8001d56:	23b4      	movlt	r3, #180	; 0xb4
 8001d58:	60fb      	str	r3, [r7, #12]
					     pwm_left = pwm_left>PWM_Higest ? PWM_Higest : pwm_left;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d60:	bfa8      	it	ge
 8001d62:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 8001d66:	60fb      	str	r3, [r7, #12]
					     if (PID_Straight_Reset_Flag)
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <PID_Straight+0x1f8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10e      	bne.n	8001d8e <PID_Straight+0x1de>
					     	return;
					     taskENTER_CRITICAL();
 8001d70:	f007 fbf0 	bl	8009554 <vPortEnterCritical>
					     PWM_SET_RIGHT (pwm_right);
 8001d74:	6938      	ldr	r0, [r7, #16]
 8001d76:	f000 fc4f 	bl	8002618 <PWM_SET_RIGHT>
					     PWM_SET_LEFT(pwm_left);
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fc14 	bl	80025a8 <PWM_SET_LEFT>
					     taskEXIT_CRITICAL();
 8001d80:	f007 fc18 	bl	80095b4 <vPortExitCritical>
					  	 if (PID_Straight_Reset_Flag)
 8001d84:	e771      	b.n	8001c6a <PID_Straight+0xba>
						return;
 8001d86:	bf00      	nop
 8001d88:	e002      	b.n	8001d90 <PID_Straight+0x1e0>
					  		 return;
 8001d8a:	bf00      	nop
 8001d8c:	e000      	b.n	8001d90 <PID_Straight+0x1e0>
					     	return;
 8001d8e:	bf00      	nop
					     }
}
 8001d90:	3748      	adds	r7, #72	; 0x48
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	41700000 	.word	0x41700000
 8001d9c:	40c00000 	.word	0x40c00000
 8001da0:	41200000 	.word	0x41200000
 8001da4:	3c54fdf4 	.word	0x3c54fdf4
 8001da8:	20000008 	.word	0x20000008
 8001dac:	200041dc 	.word	0x200041dc
 8001db0:	20000290 	.word	0x20000290

08001db4 <PID_Line_Follow>:

float PID_Line_Follow(float Accept_Error)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	ed87 0a01 	vstr	s0, [r7, #4]
#define MAX_TIME 250
			volatile uint16_t PID_Target=0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	837b      	strh	r3, [r7, #26]
		    volatile float Kp = 3, Ki = 0, Kd =0;     // PID系数
 8001dc2:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <PID_Line_Follow+0x1d0>)
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
			float PID_Error_Last=0;
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
			float PID_Output=0;                    // PWM输出占空
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
			float Error = 0, Error_Total=0,First_Error=0;
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
			int32_t PID_Input=0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001df4:	2202      	movs	r2, #2
 8001df6:	4964      	ldr	r1, [pc, #400]	; (8001f88 <PID_Line_Follow+0x1d4>)
 8001df8:	4864      	ldr	r0, [pc, #400]	; (8001f8c <PID_Line_Follow+0x1d8>)
 8001dfa:	f004 fc04 	bl	8006606 <HAL_UART_Receive_IT>
			//delay(100);
			osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8001dfe:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <PID_Line_Follow+0x1dc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f04f 31ff 	mov.w	r1, #4294967295
 8001e06:	4618      	mov	r0, r3
 8001e08:	f005 fa3c 	bl	8007284 <osSemaphoreWait>
						  	 for(int i = 0;i<3;i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e10:	e011      	b.n	8001e36 <PID_Line_Follow+0x82>
						  	 {
						  		 //osSemaphoreRelease(GyroReadySemHandle);
						  		osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8001e12:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <PID_Line_Follow+0x1dc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f005 fa32 	bl	8007284 <osSemaphoreWait>
						  		 PID_Input = (Camera_Data & (0x07FF))-1000;
 8001e20:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <PID_Line_Follow+0x1e0>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e2a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
						  	 for(int i = 0;i<3;i++)
 8001e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e32:	3301      	adds	r3, #1
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	ddea      	ble.n	8001e12 <PID_Line_Follow+0x5e>
						  		 //osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
						  	 }
						  	 PID_Input/=3;
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	4a56      	ldr	r2, [pc, #344]	; (8001f98 <PID_Line_Follow+0x1e4>)
 8001e40:	fb82 1203 	smull	r1, r2, r2, r3
 8001e44:	17db      	asrs	r3, r3, #31
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
			First_Error= PID_Target - PID_Input;
 8001e4a:	8b7b      	ldrh	r3, [r7, #26]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5c:	edc7 7a07 	vstr	s15, [r7, #28]
			Error=PID_Target - PID_Input;
 8001e60:	8b7b      	ldrh	r3, [r7, #26]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

			  	 Error = PID_Target - PID_Input;		  // 偏差 = 目标 - 实际
 8001e76:	8b7b      	ldrh	r3, [r7, #26]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			  	 Error_Total=Error_Total+Ki*Error;
 8001e8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea0:	edc7 7a08 	vstr	s15, [r7, #32]
			  	 PID_Output = Kp * Error  +
 8001ea4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ea8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001eac:	ee27 7a27 	vmul.f32	s14, s14, s15
			  				  Kd * (Error - PID_Error_Last ) +
 8001eb0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001eb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001eb8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ebc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  	 PID_Output = Kp * Error  +
 8001ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			  				  Error_Total;
			  	 PID_Error_Last = Error;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
			     if(PID_Output > MAX_TIME) 			PID_Output =	MAX_TIME;	    // 限幅
 8001ed8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001edc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f9c <PID_Line_Follow+0x1e8>
 8001ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	dd02      	ble.n	8001ef0 <PID_Line_Follow+0x13c>
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <PID_Line_Follow+0x1ec>)
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
 8001eee:	e00a      	b.n	8001f06 <PID_Line_Follow+0x152>
			     else if(PID_Output <-(MAX_TIME)) 	PID_Output = 	-MAX_TIME;
 8001ef0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ef4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001fa4 <PID_Line_Follow+0x1f0>
 8001ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	d501      	bpl.n	8001f06 <PID_Line_Follow+0x152>
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <PID_Line_Follow+0x1f4>)
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34

			     if(PID_Output>0)
 8001f06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f12:	dd0b      	ble.n	8001f2c <PID_Line_Follow+0x178>
			     {
			    	 taskENTER_CRITICAL();
 8001f14:	f007 fb1e 	bl	8009554 <vPortEnterCritical>
			    	 PWM_SET_RIGHT (PWM_Lowest+700);
 8001f18:	f44f 705c 	mov.w	r0, #880	; 0x370
 8001f1c:	f000 fb7c 	bl	8002618 <PWM_SET_RIGHT>
			    	 PWM_SET_LEFT  (PWM_Lowest-700);
 8001f20:	4822      	ldr	r0, [pc, #136]	; (8001fac <PID_Line_Follow+0x1f8>)
 8001f22:	f000 fb41 	bl	80025a8 <PWM_SET_LEFT>
			    	 taskEXIT_CRITICAL();
 8001f26:	f007 fb45 	bl	80095b4 <vPortExitCritical>
 8001f2a:	e00a      	b.n	8001f42 <PID_Line_Follow+0x18e>
			     }
			     else
			     {
			    	 taskENTER_CRITICAL();
 8001f2c:	f007 fb12 	bl	8009554 <vPortEnterCritical>
			    	 PWM_SET_RIGHT (-PWM_Lowest-700);
 8001f30:	481f      	ldr	r0, [pc, #124]	; (8001fb0 <PID_Line_Follow+0x1fc>)
 8001f32:	f000 fb71 	bl	8002618 <PWM_SET_RIGHT>
			    	 PWM_SET_LEFT  (PWM_Lowest+700);
 8001f36:	f44f 705c 	mov.w	r0, #880	; 0x370
 8001f3a:	f000 fb35 	bl	80025a8 <PWM_SET_LEFT>
			    	 taskEXIT_CRITICAL();
 8001f3e:	f007 fb39 	bl	80095b4 <vPortExitCritical>
			     }
			     PID_Output=PID_Output>0?PID_Output:-PID_Output;
 8001f42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	dd02      	ble.n	8001f56 <PID_Line_Follow+0x1a2>
 8001f50:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f54:	e003      	b.n	8001f5e <PID_Line_Follow+0x1aa>
 8001f56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f5a:	eef1 7a67 	vneg.f32	s15, s15
 8001f5e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			     delay((uint32_t) PID_Output);
 8001f62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6a:	ee17 0a90 	vmov	r0, s15
 8001f6e:	f7ff fc17 	bl	80017a0 <delay>
			     return First_Error;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	ee07 3a90 	vmov	s15, r3
}
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	3738      	adds	r7, #56	; 0x38
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40400000 	.word	0x40400000
 8001f88:	2000028c 	.word	0x2000028c
 8001f8c:	20004230 	.word	0x20004230
 8001f90:	200040ec 	.word	0x200040ec
 8001f94:	2000028e 	.word	0x2000028e
 8001f98:	55555556 	.word	0x55555556
 8001f9c:	437a0000 	.word	0x437a0000
 8001fa0:	437a0000 	.word	0x437a0000
 8001fa4:	c37a0000 	.word	0xc37a0000
 8001fa8:	c37a0000 	.word	0xc37a0000
 8001fac:	fffffdf8 	.word	0xfffffdf8
 8001fb0:	fffffc90 	.word	0xfffffc90

08001fb4 <PID_Apriltag>:

int PID_Apriltag(float Accept_Error)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	ed87 0a01 	vstr	s0, [r7, #4]

	float PID_target=0;
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
	float PID_Error_Last=0;
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
	float PID_Output=0,PID_Input=0;;
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
	float Error = 0, Error_Total=0;
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float KP=2, KI=0.1, KD=1;
 8001fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	4b7e      	ldr	r3, [pc, #504]	; (80021e4 <PID_Apriltag+0x230>)
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ff0:	60fb      	str	r3, [r7, #12]
	int t=0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t Flag=0; //Indicate that if verifying process begin.
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Car_Stop();
 8001ffc:	f7ff fbc2 	bl	8001784 <Car_Stop>
 	osSemaphoreWait(ApriltagSemHandle, 1000);
 8002000:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <PID_Apriltag+0x234>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002008:	4618      	mov	r0, r3
 800200a:	f005 f93b 	bl	8007284 <osSemaphoreWait>
	//delay(1500);
  for(;;)
  {
//	  	 osSemaphoreWait(ApriltagSemHandle, 0);
//	  	 osSemaphoreWait(ApriltagSemHandle, osWaitForever);
	  	 osSemaphoreWait(CameraUARTSemHandle, 0);
 800200e:	4b77      	ldr	r3, [pc, #476]	; (80021ec <PID_Apriltag+0x238>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f005 f935 	bl	8007284 <osSemaphoreWait>
	  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 800201a:	4b74      	ldr	r3, [pc, #464]	; (80021ec <PID_Apriltag+0x238>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f04f 31ff 	mov.w	r1, #4294967295
 8002022:	4618      	mov	r0, r3
 8002024:	f005 f92e 	bl	8007284 <osSemaphoreWait>
	  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 8002028:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <PID_Apriltag+0x23c>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002032:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203e:	edc7 7a07 	vstr	s15, [r7, #28]
	  	 Error=PID_target - PID_Input;
 8002042:	ed97 7a08 	vldr	s14, [r7, #32]
 8002046:	edd7 7a07 	vldr	s15, [r7, #28]
 800204a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204e:	edc7 7a06 	vstr	s15, [r7, #24]
	  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 8002052:	edd7 7a01 	vldr	s15, [r7, #4]
 8002056:	eef1 7a67 	vneg.f32	s15, s15
 800205a:	ed97 7a06 	vldr	s14, [r7, #24]
 800205e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	dd17      	ble.n	8002098 <PID_Apriltag+0xe4>
 8002068:	ed97 7a06 	vldr	s14, [r7, #24]
 800206c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002078:	d50e      	bpl.n	8002098 <PID_Apriltag+0xe4>
 800207a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <PID_Apriltag+0xe4>
	  	 {
	  		 t++;
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	3301      	adds	r3, #1
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
	  		if(t>3)
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	2b03      	cmp	r3, #3
 800208c:	dd04      	ble.n	8002098 <PID_Apriltag+0xe4>
	  		{
	  			Flag = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
	  		}
	  	 }
	  	 if(Flag)
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209c:	2b00      	cmp	r3, #0
 800209e:	d026      	beq.n	80020ee <PID_Apriltag+0x13a>
	  	 {
	  		if(t>3)
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	dd06      	ble.n	80020b4 <PID_Apriltag+0x100>
	  		{
	  			Flag=0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
	  			return 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e092      	b.n	80021da <PID_Apriltag+0x226>
	  		}
	  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 80020b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020b8:	eef1 7a67 	vneg.f32	s15, s15
 80020bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80020c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	dd0c      	ble.n	80020e4 <PID_Apriltag+0x130>
 80020ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80020ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d503      	bpl.n	80020e4 <PID_Apriltag+0x130>
	  		{
	  			t++;
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	3301      	adds	r3, #1
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e2:	e004      	b.n	80020ee <PID_Apriltag+0x13a>
	  		}
	  		else
	  		{
	  			Flag=0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
	  		}
	  	 }
	  	 Error_Total=Error_Total+KI*Error;
 80020ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80020f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80020fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002102:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     PID_Output = KP * Error  +
 8002106:	ed97 7a05 	vldr	s14, [r7, #20]
 800210a:	edd7 7a06 	vldr	s15, [r7, #24]
 800210e:	ee27 7a27 	vmul.f32	s14, s14, s15
	 				  KD * (Error - PID_Error_Last ) +
 8002112:	edd7 6a06 	vldr	s13, [r7, #24]
 8002116:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800211a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800211e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002122:	ee66 7aa7 	vmul.f32	s15, s13, s15
	     PID_Output = KP * Error  +
 8002126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
					  Error_Total;
	     PID_Error_Last = Error;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
	     if(PID_Output < 0)
 800213a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800213e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	d513      	bpl.n	8002170 <PID_Apriltag+0x1bc>
	     {
	    	 PID_Output-=PWM_Lowest;
 8002148:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800214c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80021f4 <PID_Apriltag+0x240>
 8002150:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002154:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    	 if(-PID_Output > PWM_Higest)
 8002158:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800215c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80021f8 <PID_Apriltag+0x244>
 8002160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	d520      	bpl.n	80021ac <PID_Apriltag+0x1f8>
	    	 	PID_Output=-PWM_Higest;
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <PID_Apriltag+0x248>)
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
 800216e:	e01d      	b.n	80021ac <PID_Apriltag+0x1f8>
	     }

	     else if(PID_Output > 0)
 8002170:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217c:	dd13      	ble.n	80021a6 <PID_Apriltag+0x1f2>
	     {
	    	 PID_Output+=PWM_Lowest;
 800217e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002182:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80021f4 <PID_Apriltag+0x240>
 8002186:	ee77 7a87 	vadd.f32	s15, s15, s14
 800218a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    	 if(-PID_Output > PWM_Higest)
 800218e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002192:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80021f8 <PID_Apriltag+0x244>
 8002196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	d505      	bpl.n	80021ac <PID_Apriltag+0x1f8>
	    	 	PID_Output=-PWM_Higest;
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <PID_Apriltag+0x248>)
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
 80021a4:	e002      	b.n	80021ac <PID_Apriltag+0x1f8>
	     }
	     else
	    	PID_Output=0;
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
	    	 taskENTER_CRITICAL();
 80021ac:	f007 f9d2 	bl	8009554 <vPortEnterCritical>
	    	 PWM_SET_RIGHT ((int32_t) (-PID_Output));
 80021b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021b4:	eef1 7a67 	vneg.f32	s15, s15
 80021b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021bc:	ee17 0a90 	vmov	r0, s15
 80021c0:	f000 fa2a 	bl	8002618 <PWM_SET_RIGHT>
	    	 PWM_SET_LEFT  ((int32_t)   PID_Output );
 80021c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021cc:	ee17 0a90 	vmov	r0, s15
 80021d0:	f000 f9ea 	bl	80025a8 <PWM_SET_LEFT>
	    	 taskEXIT_CRITICAL();
 80021d4:	f007 f9ee 	bl	80095b4 <vPortExitCritical>
	  	 osSemaphoreWait(CameraUARTSemHandle, 0);
 80021d8:	e719      	b.n	800200e <PID_Apriltag+0x5a>
	     }
	     delay(2);

}
 80021da:	4618      	mov	r0, r3
 80021dc:	3738      	adds	r7, #56	; 0x38
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	3dcccccd 	.word	0x3dcccccd
 80021e8:	200041e0 	.word	0x200041e0
 80021ec:	200040ec 	.word	0x200040ec
 80021f0:	2000028e 	.word	0x2000028e
 80021f4:	43340000 	.word	0x43340000
 80021f8:	c4fa0000 	.word	0xc4fa0000
 80021fc:	c4fa0000 	.word	0xc4fa0000

08002200 <Apriltag_Verify>:

int Apriltag_Verify(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
	int sem_count=0;
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
	for(int i=0;i<10;i++)
 800220a:	2300      	movs	r3, #0
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	e00f      	b.n	8002230 <Apriltag_Verify+0x30>
	{
		if(osSemaphoreWait(ApriltagSemHandle, 500)==0)
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <Apriltag_Verify+0x4c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002218:	4618      	mov	r0, r3
 800221a:	f005 f833 	bl	8007284 <osSemaphoreWait>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <Apriltag_Verify+0x2a>
			sem_count++;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3301      	adds	r3, #1
 8002228:	607b      	str	r3, [r7, #4]
	for(int i=0;i<10;i++)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b09      	cmp	r3, #9
 8002234:	ddec      	ble.n	8002210 <Apriltag_Verify+0x10>
	}
	if(sem_count>8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b08      	cmp	r3, #8
 800223a:	dd01      	ble.n	8002240 <Apriltag_Verify+0x40>
		return 1;
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <Apriltag_Verify+0x42>
	else
		return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200041e0 	.word	0x200041e0

08002250 <Software_Reset>:

void Software_Reset()
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	2301      	movs	r3, #1
 8002258:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f383 8813 	msr	FAULTMASK, r3
}
 8002260:	bf00      	nop
	__set_FAULTMASK(1);
	NVIC_SystemReset();
 8002262:	f7fe fd91 	bl	8000d88 <__NVIC_SystemReset>
	...

08002268 <Ultrasonic_Feedback>:
}

Distance Ultrasonic_Feedback(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
	uint8_t info=0xA0;
 800226e:	23a0      	movs	r3, #160	; 0xa0
 8002270:	74fb      	strb	r3, [r7, #19]
	uint8_t Rx_Buf[3]={0,0,0};
 8002272:	4a2d      	ldr	r2, [pc, #180]	; (8002328 <Ultrasonic_Feedback+0xc0>)
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4611      	mov	r1, r2
 800227c:	8019      	strh	r1, [r3, #0]
 800227e:	3302      	adds	r3, #2
 8002280:	0c12      	lsrs	r2, r2, #16
 8002282:	701a      	strb	r2, [r3, #0]
	uint32_t Data=0x00000000;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
	Distance distance={0.0,0.0};
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
	taskENTER_CRITICAL();
 8002294:	f007 f95e 	bl	8009554 <vPortEnterCritical>
	HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
 8002298:	f107 0113 	add.w	r1, r7, #19
 800229c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a0:	2201      	movs	r2, #1
 80022a2:	4822      	ldr	r0, [pc, #136]	; (800232c <Ultrasonic_Feedback+0xc4>)
 80022a4:	f004 f87b 	bl	800639e <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 80022a8:	f007 f984 	bl	80095b4 <vPortExitCritical>
	delay(200);
 80022ac:	20c8      	movs	r0, #200	; 0xc8
 80022ae:	f7ff fa77 	bl	80017a0 <delay>
	taskENTER_CRITICAL();
 80022b2:	f007 f94f 	bl	8009554 <vPortEnterCritical>
	HAL_UART_Receive(&huart5,(uint8_t*) &Rx_Buf,3,1);
 80022b6:	f107 0110 	add.w	r1, r7, #16
 80022ba:	2301      	movs	r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	481b      	ldr	r0, [pc, #108]	; (800232c <Ultrasonic_Feedback+0xc4>)
 80022c0:	f004 f8ff 	bl	80064c2 <HAL_UART_Receive>
	taskEXIT_CRITICAL();
 80022c4:	f007 f976 	bl	80095b4 <vPortExitCritical>
	Data=Data | (((uint32_t) (Rx_Buf[0]))<<16);
 80022c8:	7c3b      	ldrb	r3, [r7, #16]
 80022ca:	041b      	lsls	r3, r3, #16
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61fb      	str	r3, [r7, #28]
	Data=Data | (((uint32_t) (Rx_Buf[1]))<<8);
 80022d2:	7c7b      	ldrb	r3, [r7, #17]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61fb      	str	r3, [r7, #28]
	Data=Data |((uint32_t) (Rx_Buf[2]));
 80022dc:	7cbb      	ldrb	r3, [r7, #18]
 80022de:	461a      	mov	r2, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61fb      	str	r3, [r7, #28]
	//HAL_UART_Transmit(&huart1, (uint8_t *) &Data, 4, 0xFFFF);
	distance.front=Data/1000;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <Ultrasonic_Feedback+0xc8>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f8:	edc7 7a02 	vstr	s15, [r7, #8]
	return distance;
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	f107 0208 	add.w	r2, r7, #8
 8002304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002308:	e883 0003 	stmia.w	r3, {r0, r1}
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	ee07 2a10 	vmov	s14, r2
 8002314:	ee07 3a90 	vmov	s15, r3
}
 8002318:	eeb0 0a47 	vmov.f32	s0, s14
 800231c:	eef0 0a67 	vmov.f32	s1, s15
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	08009d5c 	.word	0x08009d5c
 800232c:	20004144 	.word	0x20004144
 8002330:	10624dd3 	.word	0x10624dd3

08002334 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  	if (huart->Instance==USART2){
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <HAL_UART_RxCpltCallback+0xcc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d157      	bne.n	80023f6 <HAL_UART_RxCpltCallback+0xc2>
  		//osSemaphoreWait(CameraUARTSemHandle, 0);
  		Camera_Data=0x0000;
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <HAL_UART_RxCpltCallback+0xd0>)
 8002348:	2200      	movs	r2, #0
 800234a:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data | (((uint16_t) (Rx_Buf[0]))<<8);
 800234c:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <HAL_UART_RxCpltCallback+0xd4>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b21a      	sxth	r2, r3
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_UART_RxCpltCallback+0xd0>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	b21b      	sxth	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b21b      	sxth	r3, r3
 8002362:	b29a      	uxth	r2, r3
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_UART_RxCpltCallback+0xd0>)
 8002366:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data|((uint16_t) (Rx_Buf[1]));
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_UART_RxCpltCallback+0xd4>)
 800236a:	785b      	ldrb	r3, [r3, #1]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	b29a      	uxth	r2, r3
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_UART_RxCpltCallback+0xd0>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <HAL_UART_RxCpltCallback+0xd0>)
 800237c:	801a      	strh	r2, [r3, #0]
  		osSemaphoreRelease(CameraUARTSemHandle);
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_UART_RxCpltCallback+0xd8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f004 ffcc 	bl	8007320 <osSemaphoreRelease>
  		if((Camera_Data & 0xF800) == 0)
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_UART_RxCpltCallback+0xd0>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8002392:	2b00      	cmp	r3, #0
 8002394:	d110      	bne.n	80023b8 <HAL_UART_RxCpltCallback+0x84>
  		{
  			  		//Data=Data & (0x07F0);
  			  		//HAL_UART_Transmit(&huart1, (uint8_t*) &Camera_Data,2,10);
  			  		//HAL_UART_AbortReceive_IT(&huart1);
  			  		Rx_Buf[0]=0;
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <HAL_UART_RxCpltCallback+0xd4>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
  			  		Rx_Buf[1]=0;
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_UART_RxCpltCallback+0xd4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	705a      	strb	r2, [r3, #1]
  			  		//camera_ready_flag=1;
  			  		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 80023a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023a6:	481a      	ldr	r0, [pc, #104]	; (8002410 <HAL_UART_RxCpltCallback+0xdc>)
 80023a8:	f002 f95d 	bl	8004666 <HAL_GPIO_TogglePin>
  			  		//if(camera_recieve_IT_flag)
  			  		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 80023ac:	2202      	movs	r2, #2
 80023ae:	4916      	ldr	r1, [pc, #88]	; (8002408 <HAL_UART_RxCpltCallback+0xd4>)
 80023b0:	4818      	ldr	r0, [pc, #96]	; (8002414 <HAL_UART_RxCpltCallback+0xe0>)
 80023b2:	f004 f928 	bl	8006606 <HAL_UART_Receive_IT>
  			Rx_Buf[0]=0;
  			Rx_Buf[1]=0;
  		}

  	}
  }
 80023b6:	e01e      	b.n	80023f6 <HAL_UART_RxCpltCallback+0xc2>
  			switch (Camera_Data & 0xF800)
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_UART_RxCpltCallback+0xd0>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80023c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c6:	d105      	bne.n	80023d4 <HAL_UART_RxCpltCallback+0xa0>
  				osSemaphoreRelease(ApriltagSemHandle);
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_UART_RxCpltCallback+0xe4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f004 ffa7 	bl	8007320 <osSemaphoreRelease>
  				break;
 80023d2:	e000      	b.n	80023d6 <HAL_UART_RxCpltCallback+0xa2>
  				break;
 80023d4:	bf00      	nop
  			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 80023d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023da:	480d      	ldr	r0, [pc, #52]	; (8002410 <HAL_UART_RxCpltCallback+0xdc>)
 80023dc:	f002 f943 	bl	8004666 <HAL_GPIO_TogglePin>
  			HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 80023e0:	2202      	movs	r2, #2
 80023e2:	4909      	ldr	r1, [pc, #36]	; (8002408 <HAL_UART_RxCpltCallback+0xd4>)
 80023e4:	480b      	ldr	r0, [pc, #44]	; (8002414 <HAL_UART_RxCpltCallback+0xe0>)
 80023e6:	f004 f90e 	bl	8006606 <HAL_UART_Receive_IT>
  			Rx_Buf[0]=0;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_UART_RxCpltCallback+0xd4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  			Rx_Buf[1]=0;
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_UART_RxCpltCallback+0xd4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	705a      	strb	r2, [r3, #1]
  }
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40004400 	.word	0x40004400
 8002404:	2000028e 	.word	0x2000028e
 8002408:	2000028c 	.word	0x2000028c
 800240c:	200040ec 	.word	0x200040ec
 8002410:	40021400 	.word	0x40021400
 8002414:	20004230 	.word	0x20004230
 8002418:	200041e0 	.word	0x200041e0

0800241c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_UART_ErrorCallback+0x30>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_UART_ErrorCallback+0x30>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
	HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 800243a:	2202      	movs	r2, #2
 800243c:	4904      	ldr	r1, [pc, #16]	; (8002450 <HAL_UART_ErrorCallback+0x34>)
 800243e:	4803      	ldr	r0, [pc, #12]	; (800244c <HAL_UART_ErrorCallback+0x30>)
 8002440:	f004 f8e1 	bl	8006606 <HAL_UART_Receive_IT>
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20004230 	.word	0x20004230
 8002450:	2000028c 	.word	0x2000028c

08002454 <State_Transition>:

uint8_t State_Transition(State* current_state)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	State next_state = Unknow;
 800245c:	2316      	movs	r3, #22
 800245e:	73fb      	strb	r3, [r7, #15]
	switch(state)
 8002460:	4b4e      	ldr	r3, [pc, #312]	; (800259c <State_Transition+0x148>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	3b01      	subs	r3, #1
 8002466:	2b14      	cmp	r3, #20
 8002468:	f200 8086 	bhi.w	8002578 <State_Transition+0x124>
 800246c:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <State_Transition+0x20>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	080024c9 	.word	0x080024c9
 8002478:	080024d5 	.word	0x080024d5
 800247c:	080024db 	.word	0x080024db
 8002480:	080024e7 	.word	0x080024e7
 8002484:	080024ed 	.word	0x080024ed
 8002488:	08002579 	.word	0x08002579
 800248c:	080024ff 	.word	0x080024ff
 8002490:	08002513 	.word	0x08002513
 8002494:	08002519 	.word	0x08002519
 8002498:	0800251f 	.word	0x0800251f
 800249c:	08002525 	.word	0x08002525
 80024a0:	080024e1 	.word	0x080024e1
 80024a4:	080024f3 	.word	0x080024f3
 80024a8:	080024f9 	.word	0x080024f9
 80024ac:	0800252b 	.word	0x0800252b
 80024b0:	08002541 	.word	0x08002541
 80024b4:	08002547 	.word	0x08002547
 80024b8:	0800254d 	.word	0x0800254d
 80024bc:	08002563 	.word	0x08002563
 80024c0:	08002579 	.word	0x08002579
 80024c4:	080024cf 	.word	0x080024cf
	{
		case Initial:
					next_state = Line_Search;
 80024c8:	2302      	movs	r3, #2
 80024ca:	73fb      	strb	r3, [r7, #15]
					break;
 80024cc:	e057      	b.n	800257e <State_Transition+0x12a>
		case Test:
					next_state=Test;
 80024ce:	2315      	movs	r3, #21
 80024d0:	73fb      	strb	r3, [r7, #15]
					break;
 80024d2:	e054      	b.n	800257e <State_Transition+0x12a>
		case Line_Search:
					next_state = Apriltag_Check;
 80024d4:	2312      	movs	r3, #18
 80024d6:	73fb      	strb	r3, [r7, #15]
					break;
 80024d8:	e051      	b.n	800257e <State_Transition+0x12a>
		case Line_Search2:
						next_state= TurnRight;
 80024da:	2304      	movs	r3, #4
 80024dc:	73fb      	strb	r3, [r7, #15]
					break;
 80024de:	e04e      	b.n	800257e <State_Transition+0x12a>
		case Go_Line_Follow:
						next_state = Line_Search;
 80024e0:	2302      	movs	r3, #2
 80024e2:	73fb      	strb	r3, [r7, #15]
				  	break;
 80024e4:	e04b      	b.n	800257e <State_Transition+0x12a>
		case TurnRight:
					next_state = Cross_bridge;
 80024e6:	230e      	movs	r3, #14
 80024e8:	73fb      	strb	r3, [r7, #15]
					break;
 80024ea:	e048      	b.n	800257e <State_Transition+0x12a>
		case TurnRight2:
				 	next_state = Line_Search2;
 80024ec:	2303      	movs	r3, #3
 80024ee:	73fb      	strb	r3, [r7, #15]
					break;
 80024f0:	e045      	b.n	800257e <State_Transition+0x12a>
		case Go_to_Bridge:
					next_state= Cross_bridge;
 80024f2:	230e      	movs	r3, #14
 80024f4:	73fb      	strb	r3, [r7, #15]
					break;
 80024f6:	e042      	b.n	800257e <State_Transition+0x12a>
		case Cross_bridge:
					next_state= Go_Mile_2;
 80024f8:	2309      	movs	r3, #9
 80024fa:	73fb      	strb	r3, [r7, #15]
					break;
 80024fc:	e03f      	b.n	800257e <State_Transition+0x12a>
		case GoStraight_Until_Barrier:
					//osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
					if(distance_flag==0)
 80024fe:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <State_Transition+0x14c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <State_Transition+0xb8>
						next_state = GoStraight_Until_Barrier;
 8002506:	2307      	movs	r3, #7
 8002508:	73fb      	strb	r3, [r7, #15]
					else
						next_state = TurnRight;

					break;
 800250a:	e038      	b.n	800257e <State_Transition+0x12a>
						next_state = TurnRight;
 800250c:	2304      	movs	r3, #4
 800250e:	73fb      	strb	r3, [r7, #15]
					break;
 8002510:	e035      	b.n	800257e <State_Transition+0x12a>
//					else
//						{
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
					next_state=Go_to_Bridge;
 8002512:	230d      	movs	r3, #13
 8002514:	73fb      	strb	r3, [r7, #15]
					break;
 8002516:	e032      	b.n	800257e <State_Transition+0x12a>
		case Go_Mile_2:
					next_state=TurnRight2;
 8002518:	2305      	movs	r3, #5
 800251a:	73fb      	strb	r3, [r7, #15]
					break;
 800251c:	e02f      	b.n	800257e <State_Transition+0x12a>
		case Go_Mile_2_Until_Barrier:
					next_state=TurnRight2;
 800251e:	2305      	movs	r3, #5
 8002520:	73fb      	strb	r3, [r7, #15]
					break;
 8002522:	e02c      	b.n	800257e <State_Transition+0x12a>
		case Go_Mile_2_Until_Apriltag:
					next_state=TurnRight2;
 8002524:	2305      	movs	r3, #5
 8002526:	73fb      	strb	r3, [r7, #15]
					break;
 8002528:	e029      	b.n	800257e <State_Transition+0x12a>
		case Mile_Adjust:
					switch (temp_state)
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <State_Transition+0x150>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d102      	bne.n	8002538 <State_Transition+0xe4>
					{
					case Go_Mile_1:
						next_state = Line_Search;
 8002532:	2302      	movs	r3, #2
 8002534:	73fb      	strb	r3, [r7, #15]
						break;
 8002536:	e002      	b.n	800253e <State_Transition+0xea>
					default:
						next_state = Initial;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
						break;
 800253c:	bf00      	nop
					}
					//temp_state = Mile_Adjust;
					break;
 800253e:	e01e      	b.n	800257e <State_Transition+0x12a>
		case Apriltag_Adjust1:
					next_state = TurnRight;
 8002540:	2304      	movs	r3, #4
 8002542:	73fb      	strb	r3, [r7, #15]
					break;
 8002544:	e01b      	b.n	800257e <State_Transition+0x12a>
		case Apriltag_Adjust2:
					next_state = Line_Search2;
 8002546:	2303      	movs	r3, #3
 8002548:	73fb      	strb	r3, [r7, #15]
					break;
 800254a:	e018      	b.n	800257e <State_Transition+0x12a>
		case Apriltag_Check:
					if(Apriltag_Verify())
 800254c:	f7ff fe58 	bl	8002200 <Apriltag_Verify>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <State_Transition+0x108>
						next_state = Apriltag_Adjust1;
 8002556:	2310      	movs	r3, #16
 8002558:	73fb      	strb	r3, [r7, #15]
					else
						Software_Reset();
					break;
 800255a:	e010      	b.n	800257e <State_Transition+0x12a>
						Software_Reset();
 800255c:	f7ff fe78 	bl	8002250 <Software_Reset>
					break;
 8002560:	e00d      	b.n	800257e <State_Transition+0x12a>
		case Apriltag_Check2:
					if(Apriltag_Verify())
 8002562:	f7ff fe4d 	bl	8002200 <Apriltag_Verify>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <State_Transition+0x11e>
						next_state = Apriltag_Adjust2;
 800256c:	2311      	movs	r3, #17
 800256e:	73fb      	strb	r3, [r7, #15]
					else
						next_state = Go_Mile_2_Until_Apriltag;
					break;
 8002570:	e005      	b.n	800257e <State_Transition+0x12a>
						next_state = Go_Mile_2_Until_Apriltag;
 8002572:	230b      	movs	r3, #11
 8002574:	73fb      	strb	r3, [r7, #15]
					break;
 8002576:	e002      	b.n	800257e <State_Transition+0x12a>
		default:
					next_state = Initial;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
					break;
 800257c:	bf00      	nop
	}
	if (next_state == *current_state)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	429a      	cmp	r2, r3
 8002586:	d101      	bne.n	800258c <State_Transition+0x138>
		return 1;
 8002588:	2301      	movs	r3, #1
 800258a:	e003      	b.n	8002594 <State_Transition+0x140>
	else
	{

		*current_state=next_state;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	701a      	strb	r2, [r3, #0]
		return 0;
 8002592:	2300      	movs	r3, #0
	}
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20004140 	.word	0x20004140
 80025a0:	200002a4 	.word	0x200002a4
 80025a4:	200041d8 	.word	0x200041d8

080025a8 <PWM_SET_LEFT>:

void PWM_SET_LEFT(int32_t duty)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da11      	bge.n	80025da <PWM_SET_LEFT+0x32>
		{
		if (duty <= -2000)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80025bc:	dc02      	bgt.n	80025c4 <PWM_SET_LEFT+0x1c>
			duty = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	e003      	b.n	80025cc <PWM_SET_LEFT+0x24>
		else
			duty = 2000 + duty;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80025ca:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80025cc:	2201      	movs	r2, #1
 80025ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d2:	480f      	ldr	r0, [pc, #60]	; (8002610 <PWM_SET_LEFT+0x68>)
 80025d4:	f002 f82e 	bl	8004634 <HAL_GPIO_WritePin>
 80025d8:	e00a      	b.n	80025f0 <PWM_SET_LEFT+0x48>
		}
	else
		{
			if (duty == 0)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <PWM_SET_LEFT+0x3c>
				duty = 1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ea:	4809      	ldr	r0, [pc, #36]	; (8002610 <PWM_SET_LEFT+0x68>)
 80025ec:	f002 f822 	bl	8004634 <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025f6:	dd02      	ble.n	80025fe <PWM_SET_LEFT+0x56>
		duty = 2000;
 80025f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80025fc:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,duty);
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <PWM_SET_LEFT+0x6c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40020000 	.word	0x40020000
 8002614:	200040f8 	.word	0x200040f8

08002618 <PWM_SET_RIGHT>:

void PWM_SET_RIGHT(int32_t duty)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	duty=duty*PWM_Bias;
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fd ff27 	bl	8000474 <__aeabi_i2d>
 8002626:	a329      	add	r3, pc, #164	; (adr r3, 80026cc <PWM_SET_RIGHT+0xb4>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fd ff8c 	bl	8000548 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f7fe f998 	bl	800096c <__aeabi_d2iz>
 800263c:	4603      	mov	r3, r0
 800263e:	607b      	str	r3, [r7, #4]
	if ( duty < 0 )
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	da1d      	bge.n	8002682 <PWM_SET_RIGHT+0x6a>
		{
		if (duty <= -2000*PWM_Bias)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <PWM_SET_RIGHT+0xa8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	da02      	bge.n	8002654 <PWM_SET_RIGHT+0x3c>
			duty = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	e00f      	b.n	8002674 <PWM_SET_RIGHT+0x5c>
		else
			duty = 2000*PWM_Bias + duty;
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fd ff0d 	bl	8000474 <__aeabi_i2d>
 800265a:	a317      	add	r3, pc, #92	; (adr r3, 80026b8 <PWM_SET_RIGHT+0xa0>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fd fdbc 	bl	80001dc <__adddf3>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f7fe f97e 	bl	800096c <__aeabi_d2iz>
 8002670:	4603      	mov	r3, r0
 8002672:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002674:	2201      	movs	r2, #1
 8002676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800267a:	4812      	ldr	r0, [pc, #72]	; (80026c4 <PWM_SET_RIGHT+0xac>)
 800267c:	f001 ffda 	bl	8004634 <HAL_GPIO_WritePin>
 8002680:	e00a      	b.n	8002698 <PWM_SET_RIGHT+0x80>
		}
	else
		{
			if (duty == 0)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <PWM_SET_RIGHT+0x74>
				duty = 1;
 8002688:	2301      	movs	r3, #1
 800268a:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800268c:	2200      	movs	r2, #0
 800268e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002692:	480c      	ldr	r0, [pc, #48]	; (80026c4 <PWM_SET_RIGHT+0xac>)
 8002694:	f001 ffce 	bl	8004634 <HAL_GPIO_WritePin>
		}
	if (duty > 2000*PWM_Bias)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f5b3 6fe9 	cmp.w	r3, #1864	; 0x748
 800269e:	db02      	blt.n	80026a6 <PWM_SET_RIGHT+0x8e>
		duty = 2000*PWM_Bias;
 80026a0:	f240 7347 	movw	r3, #1863	; 0x747
 80026a4:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,duty);
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <PWM_SET_RIGHT+0xb0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	00000000 	.word	0x00000000
 80026bc:	409d1c00 	.word	0x409d1c00
 80026c0:	fffff8ba 	.word	0xfffff8ba
 80026c4:	40020c00 	.word	0x40020c00
 80026c8:	20004058 	.word	0x20004058
 80026cc:	16872b02 	.word	0x16872b02
 80026d0:	3fedced9 	.word	0x3fedced9

080026d4 <StreamTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StreamTask */
void StreamTask(void const * argument)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t Same_State_Flag=0;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
	uint32_t pulse_incremnet=0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
	Car_Initial();
 80026e4:	f7ff f818 	bl	8001718 <Car_Initial>
	delay(3000);
 80026e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80026ec:	f7ff f858 	bl	80017a0 <delay>
  /* Infinite loop */
  for(;;)
  {

	  delay(50);
 80026f0:	2032      	movs	r0, #50	; 0x32
 80026f2:	f7ff f855 	bl	80017a0 <delay>
	  //delay(10);
	  //PreviousWakeTime = osKernelSysTick()
	  //osDelayUntil(&PreviousWakeTime = osKernelSysTick(), 500);
	  //HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);

	  Same_State_Flag = State_Transition(&state);
 80026f6:	48bb      	ldr	r0, [pc, #748]	; (80029e4 <StreamTask+0x310>)
 80026f8:	f7ff feac 	bl	8002454 <State_Transition>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
	  if(Same_State_Flag)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 8366 	bne.w	8002dd4 <StreamTask+0x700>
		  continue;
	  switch(state)
 8002708:	4bb6      	ldr	r3, [pc, #728]	; (80029e4 <StreamTask+0x310>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	2b14      	cmp	r3, #20
 8002710:	f200 835d 	bhi.w	8002dce <StreamTask+0x6fa>
 8002714:	a201      	add	r2, pc, #4	; (adr r2, 800271c <StreamTask+0x48>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	08002771 	.word	0x08002771
 8002720:	0800278b 	.word	0x0800278b
 8002724:	080027e1 	.word	0x080027e1
 8002728:	080028e5 	.word	0x080028e5
 800272c:	08002943 	.word	0x08002943
 8002730:	08002dcf 	.word	0x08002dcf
 8002734:	080029a1 	.word	0x080029a1
 8002738:	08002a39 	.word	0x08002a39
 800273c:	08002add 	.word	0x08002add
 8002740:	08002b7f 	.word	0x08002b7f
 8002744:	08002c03 	.word	0x08002c03
 8002748:	08002dd9 	.word	0x08002dd9
 800274c:	08002819 	.word	0x08002819
 8002750:	08002843 	.word	0x08002843
 8002754:	08002c9d 	.word	0x08002c9d
 8002758:	08002d29 	.word	0x08002d29
 800275c:	08002d73 	.word	0x08002d73
 8002760:	08002dbd 	.word	0x08002dbd
 8002764:	08002dc3 	.word	0x08002dc3
 8002768:	08002dc9 	.word	0x08002dc9
 800276c:	08002807 	.word	0x08002807
	  {
	  case Initial:
		  	  	  	  	  state= Idle;
 8002770:	4b9c      	ldr	r3, [pc, #624]	; (80029e4 <StreamTask+0x310>)
 8002772:	2214      	movs	r2, #20
 8002774:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8002776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800277a:	f7ff f811 	bl	80017a0 <delay>
		  	  	  	      state= Initial;
 800277e:	4b99      	ldr	r3, [pc, #612]	; (80029e4 <StreamTask+0x310>)
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  Car_Initial();
 8002784:	f7fe ffc8 	bl	8001718 <Car_Initial>
		  	  	  	  	  break;
 8002788:	e327      	b.n	8002dda <StreamTask+0x706>
	  case Line_Search:
		  	  	  	  	  HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 800278a:	2202      	movs	r2, #2
 800278c:	4996      	ldr	r1, [pc, #600]	; (80029e8 <StreamTask+0x314>)
 800278e:	4897      	ldr	r0, [pc, #604]	; (80029ec <StreamTask+0x318>)
 8002790:	f003 ff39 	bl	8006606 <HAL_UART_Receive_IT>
		  	  	  	  	  vTaskResume(PIDCameraHandle);
 8002794:	4b96      	ldr	r3, [pc, #600]	; (80029f0 <StreamTask+0x31c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f005 ff11 	bl	80085c0 <vTaskResume>
		  	  	  	  	  //delay(600000);
		  	  	  	  	  osSemaphoreWait(ApriltagSemHandle, 0);
 800279e:	4b95      	ldr	r3, [pc, #596]	; (80029f4 <StreamTask+0x320>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 fd6d 	bl	8007284 <osSemaphoreWait>
		  	  	  	  	  osSemaphoreWait(ApriltagSemHandle, osWaitForever);
 80027aa:	4b92      	ldr	r3, [pc, #584]	; (80029f4 <StreamTask+0x320>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f04f 31ff 	mov.w	r1, #4294967295
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fd66 	bl	8007284 <osSemaphoreWait>
		  	  	  	  	  vTaskSuspend(PIDCameraHandle);
 80027b8:	4b8d      	ldr	r3, [pc, #564]	; (80029f0 <StreamTask+0x31c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 fe3b 	bl	8008438 <vTaskSuspend>
		  	  	  	  	  PWM_SET_LEFT(PWM_Mid-300);
 80027c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027c6:	f7ff feef 	bl	80025a8 <PWM_SET_LEFT>
		  	  	  	  	  PWM_SET_RIGHT(PWM_Mid-300);
 80027ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027ce:	f7ff ff23 	bl	8002618 <PWM_SET_RIGHT>
		  	  	  	  	  //delay(1800);
		  	  	  	  	  delay(1700);
 80027d2:	f240 60a4 	movw	r0, #1700	; 0x6a4
 80027d6:	f7fe ffe3 	bl	80017a0 <delay>
		  	  	  	  	  Car_Stop();
 80027da:	f7fe ffd3 	bl	8001784 <Car_Stop>
		  	  	  	  	  break;
 80027de:	e2fc      	b.n	8002dda <StreamTask+0x706>
	  case Line_Search2:
						  HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 80027e0:	2202      	movs	r2, #2
 80027e2:	4981      	ldr	r1, [pc, #516]	; (80029e8 <StreamTask+0x314>)
 80027e4:	4881      	ldr	r0, [pc, #516]	; (80029ec <StreamTask+0x318>)
 80027e6:	f003 ff0e 	bl	8006606 <HAL_UART_Receive_IT>
						  delay(1000);
 80027ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ee:	f7fe ffd7 	bl	80017a0 <delay>
						  vTaskResume(PIDCamera2Handle);
 80027f2:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <StreamTask+0x324>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f005 fee2 	bl	80085c0 <vTaskResume>
						  delay(60000);
 80027fc:	f64e 2060 	movw	r0, #60000	; 0xea60
 8002800:	f7fe ffce 	bl	80017a0 <delay>
		  	  	  	  	  break;
 8002804:	e2e9      	b.n	8002dda <StreamTask+0x706>
	  case Test:
		  	  	  	  	  PWM_SET_LEFT(1500);
 8002806:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800280a:	f7ff fecd 	bl	80025a8 <PWM_SET_LEFT>
		  	  	  	  	  PWM_SET_RIGHT(1500);
 800280e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002812:	f7ff ff01 	bl	8002618 <PWM_SET_RIGHT>
		  	  	  	  	  break;
 8002816:	e2e0      	b.n	8002dda <StreamTask+0x706>
	  case Go_Line_Follow:
		  	  	  	  	  break;
	  case Go_to_Bridge:
		  	  	  	  	  delay(1000);
 8002818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281c:	f7fe ffc0 	bl	80017a0 <delay>
						  taskENTER_CRITICAL();
 8002820:	f006 fe98 	bl	8009554 <vPortEnterCritical>
						  PWM_SET_RIGHT (PWM_Lowest+100);
 8002824:	f44f 708c 	mov.w	r0, #280	; 0x118
 8002828:	f7ff fef6 	bl	8002618 <PWM_SET_RIGHT>
						  PWM_SET_LEFT(PWM_Lowest+100);
 800282c:	f44f 708c 	mov.w	r0, #280	; 0x118
 8002830:	f7ff feba 	bl	80025a8 <PWM_SET_LEFT>
						  taskEXIT_CRITICAL();
 8002834:	f006 febe 	bl	80095b4 <vPortExitCritical>
						  delay(5000);
 8002838:	f241 3088 	movw	r0, #5000	; 0x1388
 800283c:	f7fe ffb0 	bl	80017a0 <delay>
		  	  	  	  	  break;
 8002840:	e2cb      	b.n	8002dda <StreamTask+0x706>
	  case Cross_bridge:
		  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8002842:	4b6e      	ldr	r3, [pc, #440]	; (80029fc <StreamTask+0x328>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f005 fdf6 	bl	8008438 <vTaskSuspend>
		  	  	  	  	  pulse_incremnet=1500;//Go on the bridge
 800284c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002850:	60bb      	str	r3, [r7, #8]
						  critical_pulses=0;
 8002852:	4b6b      	ldr	r3, [pc, #428]	; (8002a00 <StreamTask+0x32c>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <StreamTask+0x330>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f005 feaf 	bl	80085c0 <vTaskResume>
						  delay(100);
 8002862:	2064      	movs	r0, #100	; 0x64
 8002864:	f7fe ff9c 	bl	80017a0 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002868:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <StreamTask+0x334>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	4618      	mov	r0, r3
 8002872:	f004 fd07 	bl	8007284 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8002876:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <StreamTask+0x338>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4413      	add	r3, r2
 8002880:	461a      	mov	r2, r3
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <StreamTask+0x32c>)
 8002884:	601a      	str	r2, [r3, #0]
						  gyro_reset_flag=0;
 8002886:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <StreamTask+0x33c>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 800288c:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <StreamTask+0x340>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f005 fe95 	bl	80085c0 <vTaskResume>
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8002896:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <StreamTask+0x344>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=1700;
 800289c:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <StreamTask+0x348>)
 800289e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80028a2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  //go_straight_speed=2000;
		  	  	  	  	  vTaskResume(GoStraightHandle);
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <StreamTask+0x34c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f005 fe89 	bl	80085c0 <vTaskResume>
		  	  	  	  	  delay(200);
 80028ae:	20c8      	movs	r0, #200	; 0xc8
 80028b0:	f7fe ff76 	bl	80017a0 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 80028b4:	4b58      	ldr	r3, [pc, #352]	; (8002a18 <StreamTask+0x344>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80028ba:	4b53      	ldr	r3, [pc, #332]	; (8002a08 <StreamTask+0x334>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f04f 31ff 	mov.w	r1, #4294967295
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fcde 	bl	8007284 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <StreamTask+0x344>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80028ce:	4b54      	ldr	r3, [pc, #336]	; (8002a20 <StreamTask+0x34c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f005 fdb0 	bl	8008438 <vTaskSuspend>
		  	  	  		  Car_Stop();
 80028d8:	f7fe ff54 	bl	8001784 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80028dc:	4b4c      	ldr	r3, [pc, #304]	; (8002a10 <StreamTask+0x33c>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80028e2:	e27a      	b.n	8002dda <StreamTask+0x706>
	  case TurnRight:
		  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 80028e4:	4b45      	ldr	r3, [pc, #276]	; (80029fc <StreamTask+0x328>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f005 fda5 	bl	8008438 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80028ee:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <StreamTask+0x34c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 fda0 	bl	8008438 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80028f8:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <StreamTask+0x330>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f005 fd9b 	bl	8008438 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8002902:	f7fe ff3f 	bl	8001784 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8002906:	2032      	movs	r0, #50	; 0x32
 8002908:	f7fe ff4a 	bl	80017a0 <delay>
	  	  	  	  	  	  distance_flag=0;
 800290c:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <StreamTask+0x350>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <StreamTask+0x33c>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002918:	4b3e      	ldr	r3, [pc, #248]	; (8002a14 <StreamTask+0x340>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f005 fe4f 	bl	80085c0 <vTaskResume>
		  	  	  	  	  delay(500);
 8002922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002926:	f7fe ff3b 	bl	80017a0 <delay>
		  	  	  	  	  PID_Turning(-90,1);
 800292a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800292e:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8002a28 <StreamTask+0x354>
 8002932:	f7fe ffad 	bl	8001890 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <StreamTask+0x33c>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 800293c:	f7fe ff22 	bl	8001784 <Car_Stop>
		  		  	  	  break;
 8002940:	e24b      	b.n	8002dda <StreamTask+0x706>
	  case TurnRight2:
		  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8002942:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <StreamTask+0x328>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f005 fd76 	bl	8008438 <vTaskSuspend>
		  	  	  	  	  vTaskSuspend(GoStraightHandle);
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <StreamTask+0x34c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f005 fd71 	bl	8008438 <vTaskSuspend>
		  	  	  	  	  vTaskSuspend(MileageHandle);
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <StreamTask+0x330>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f005 fd6c 	bl	8008438 <vTaskSuspend>
						  Car_Stop();
 8002960:	f7fe ff10 	bl	8001784 <Car_Stop>
						  delay(50);
 8002964:	2032      	movs	r0, #50	; 0x32
 8002966:	f7fe ff1b 	bl	80017a0 <delay>
						  distance_flag=0;
 800296a:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <StreamTask+0x350>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
						  gyro_reset_flag=0;
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <StreamTask+0x33c>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8002976:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <StreamTask+0x340>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f005 fe20 	bl	80085c0 <vTaskResume>
						  delay(500);
 8002980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002984:	f7fe ff0c 	bl	80017a0 <delay>
						  PID_Turning(-90,5);
 8002988:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800298c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002a28 <StreamTask+0x354>
 8002990:	f7fe ff7e 	bl	8001890 <PID_Turning>
						  gyro_reset_flag=1;
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <StreamTask+0x33c>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
						  Car_Stop();
 800299a:	f7fe fef3 	bl	8001784 <Car_Stop>
						  break;
 800299e:	e21c      	b.n	8002dda <StreamTask+0x706>
	  case GoStraight_Until_Barrier:
		  	  	  	  	  //state= Idle;
		  	  	  	  	  vTaskSuspend(GyroReceiveHandle);
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <StreamTask+0x340>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f005 fd47 	bl	8008438 <vTaskSuspend>
		  	  	  	  	  delay(500);
 80029aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029ae:	f7fe fef7 	bl	80017a0 <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  critical_distance.front=350;
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <StreamTask+0x358>)
 80029b4:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <StreamTask+0x35c>)
 80029b6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <StreamTask+0x328>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f005 fdff 	bl	80085c0 <vTaskResume>
		  	  	  	  	  PWM_SET_LEFT(PWM_Mid);
 80029c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80029c6:	f7ff fdef 	bl	80025a8 <PWM_SET_LEFT>
		  	  	  	  	  PWM_SET_RIGHT(PWM_Mid);
 80029ca:	f44f 7048 	mov.w	r0, #800	; 0x320
 80029ce:	f7ff fe23 	bl	8002618 <PWM_SET_RIGHT>
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <StreamTask+0x360>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f04f 31ff 	mov.w	r1, #4294967295
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fc52 	bl	8007284 <osSemaphoreWait>
		  	  	  	  	  break;
 80029e0:	e1fb      	b.n	8002dda <StreamTask+0x706>
 80029e2:	bf00      	nop
 80029e4:	20004140 	.word	0x20004140
 80029e8:	2000028c 	.word	0x2000028c
 80029ec:	20004230 	.word	0x20004230
 80029f0:	200040e4 	.word	0x200040e4
 80029f4:	200041e0 	.word	0x200041e0
 80029f8:	20004274 	.word	0x20004274
 80029fc:	200040f0 	.word	0x200040f0
 8002a00:	200002b0 	.word	0x200002b0
 8002a04:	2000400c 	.word	0x2000400c
 8002a08:	200041d4 	.word	0x200041d4
 8002a0c:	200002ac 	.word	0x200002ac
 8002a10:	200002a8 	.word	0x200002a8
 8002a14:	20004278 	.word	0x20004278
 8002a18:	20000008 	.word	0x20000008
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	200040f4 	.word	0x200040f4
 8002a24:	200002a4 	.word	0x200002a4
 8002a28:	c2b40000 	.word	0xc2b40000
 8002a2c:	2000029c 	.word	0x2000029c
 8002a30:	43af0000 	.word	0x43af0000
 8002a34:	20004008 	.word	0x20004008
	  case Go_Mile_1:
		  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8002a38:	4bab      	ldr	r3, [pc, #684]	; (8002ce8 <StreamTask+0x614>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f005 fcfb 	bl	8008438 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=5400;//室外
 8002a42:	f241 5318 	movw	r3, #5400	; 0x1518
 8002a46:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8002a48:	4ba8      	ldr	r3, [pc, #672]	; (8002cec <StreamTask+0x618>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002a4e:	4ba8      	ldr	r3, [pc, #672]	; (8002cf0 <StreamTask+0x61c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f005 fdb4 	bl	80085c0 <vTaskResume>
						  critical_pulses=0;
 8002a58:	4ba6      	ldr	r3, [pc, #664]	; (8002cf4 <StreamTask+0x620>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8002a5e:	4ba6      	ldr	r3, [pc, #664]	; (8002cf8 <StreamTask+0x624>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f005 fdac 	bl	80085c0 <vTaskResume>
						  delay(500);
 8002a68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a6c:	f7fe fe98 	bl	80017a0 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002a70:	4ba2      	ldr	r3, [pc, #648]	; (8002cfc <StreamTask+0x628>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 fc03 	bl	8007284 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8002a7e:	4ba0      	ldr	r3, [pc, #640]	; (8002d00 <StreamTask+0x62c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4413      	add	r3, r2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b9a      	ldr	r3, [pc, #616]	; (8002cf4 <StreamTask+0x620>)
 8002a8c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8002a8e:	4b9d      	ldr	r3, [pc, #628]	; (8002d04 <StreamTask+0x630>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8002a94:	4b9c      	ldr	r3, [pc, #624]	; (8002d08 <StreamTask+0x634>)
 8002a96:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a9a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8002a9c:	4b9b      	ldr	r3, [pc, #620]	; (8002d0c <StreamTask+0x638>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f005 fd8d 	bl	80085c0 <vTaskResume>
		  	  	  	  	  delay(200);
 8002aa6:	20c8      	movs	r0, #200	; 0xc8
 8002aa8:	f7fe fe7a 	bl	80017a0 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8002aac:	4b95      	ldr	r3, [pc, #596]	; (8002d04 <StreamTask+0x630>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002ab2:	4b92      	ldr	r3, [pc, #584]	; (8002cfc <StreamTask+0x628>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fbe2 	bl	8007284 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8002ac0:	4b90      	ldr	r3, [pc, #576]	; (8002d04 <StreamTask+0x630>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8002ac6:	4b91      	ldr	r3, [pc, #580]	; (8002d0c <StreamTask+0x638>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f005 fcb4 	bl	8008438 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8002ad0:	f7fe fe58 	bl	8001784 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8002ad4:	4b85      	ldr	r3, [pc, #532]	; (8002cec <StreamTask+0x618>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8002ada:	e17e      	b.n	8002dda <StreamTask+0x706>
	  case Go_Mile_2:
					  	  vTaskSuspend(DistanceCheckHandle);
 8002adc:	4b82      	ldr	r3, [pc, #520]	; (8002ce8 <StreamTask+0x614>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f005 fca9 	bl	8008438 <vTaskSuspend>
						  pulse_incremnet=420;//To the path
 8002ae6:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002aea:	60bb      	str	r3, [r7, #8]
						  critical_pulses=0;
 8002aec:	4b81      	ldr	r3, [pc, #516]	; (8002cf4 <StreamTask+0x620>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8002af2:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <StreamTask+0x624>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f005 fd62 	bl	80085c0 <vTaskResume>
						  delay(100);
 8002afc:	2064      	movs	r0, #100	; 0x64
 8002afe:	f7fe fe4f 	bl	80017a0 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002b02:	4b7e      	ldr	r3, [pc, #504]	; (8002cfc <StreamTask+0x628>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fbba 	bl	8007284 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8002b10:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <StreamTask+0x62c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4413      	add	r3, r2
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4b75      	ldr	r3, [pc, #468]	; (8002cf4 <StreamTask+0x620>)
 8002b1e:	601a      	str	r2, [r3, #0]
						  gyro_reset_flag=0;
 8002b20:	4b72      	ldr	r3, [pc, #456]	; (8002cec <StreamTask+0x618>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8002b26:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <StreamTask+0x61c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f005 fd48 	bl	80085c0 <vTaskResume>
						  PID_Straight_Reset_Flag=1;
 8002b30:	4b74      	ldr	r3, [pc, #464]	; (8002d04 <StreamTask+0x630>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
						  go_straight_speed=PWM_Mid-100;
 8002b36:	4b74      	ldr	r3, [pc, #464]	; (8002d08 <StreamTask+0x634>)
 8002b38:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002b3c:	601a      	str	r2, [r3, #0]
						  //go_straight_speed=2000;
						  vTaskResume(GoStraightHandle);
 8002b3e:	4b73      	ldr	r3, [pc, #460]	; (8002d0c <StreamTask+0x638>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f005 fd3c 	bl	80085c0 <vTaskResume>
						  delay(200);
 8002b48:	20c8      	movs	r0, #200	; 0xc8
 8002b4a:	f7fe fe29 	bl	80017a0 <delay>
						  PID_Straight_Reset_Flag=0;
 8002b4e:	4b6d      	ldr	r3, [pc, #436]	; (8002d04 <StreamTask+0x630>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002b54:	4b69      	ldr	r3, [pc, #420]	; (8002cfc <StreamTask+0x628>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fb91 	bl	8007284 <osSemaphoreWait>
						  PID_Straight_Reset_Flag=1;
 8002b62:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <StreamTask+0x630>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
						  vTaskSuspend(GoStraightHandle);
 8002b68:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <StreamTask+0x638>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f005 fc63 	bl	8008438 <vTaskSuspend>
						  Car_Stop();
 8002b72:	f7fe fe07 	bl	8001784 <Car_Stop>
						  gyro_reset_flag=1;
 8002b76:	4b5d      	ldr	r3, [pc, #372]	; (8002cec <StreamTask+0x618>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  break;
 8002b7c:	e12d      	b.n	8002dda <StreamTask+0x706>
	  case Go_Mile_2_Until_Barrier:
		  	  	  	  	  critical_distance.front=250;
 8002b7e:	4b64      	ldr	r3, [pc, #400]	; (8002d10 <StreamTask+0x63c>)
 8002b80:	4a64      	ldr	r2, [pc, #400]	; (8002d14 <StreamTask+0x640>)
 8002b82:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8002b84:	4b58      	ldr	r3, [pc, #352]	; (8002ce8 <StreamTask+0x614>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f005 fd19 	bl	80085c0 <vTaskResume>
						  gyro_reset_flag=0;
 8002b8e:	4b57      	ldr	r3, [pc, #348]	; (8002cec <StreamTask+0x618>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002b94:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <StreamTask+0x61c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f005 fd11 	bl	80085c0 <vTaskResume>
		  	  	  	  	  delay(500);
 8002b9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ba2:	f7fe fdfd 	bl	80017a0 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8002ba6:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <StreamTask+0x630>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8002bac:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <StreamTask+0x634>)
 8002bae:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002bb2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8002bb4:	4b55      	ldr	r3, [pc, #340]	; (8002d0c <StreamTask+0x638>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f005 fd01 	bl	80085c0 <vTaskResume>
		  	  	  	  	  delay(500);
 8002bbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bc2:	f7fe fded 	bl	80017a0 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8002bc6:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <StreamTask+0x630>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, 0);
 8002bcc:	4b52      	ldr	r3, [pc, #328]	; (8002d18 <StreamTask+0x644>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 fb56 	bl	8007284 <osSemaphoreWait>
		  	  	  		  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <StreamTask+0x644>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 fb4f 	bl	8007284 <osSemaphoreWait>
		  	  	  		  //osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
		  	  	  	      PID_Straight_Reset_Flag=1;
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <StreamTask+0x630>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8002bec:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <StreamTask+0x638>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f005 fc21 	bl	8008438 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8002bf6:	f7fe fdc5 	bl	8001784 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8002bfa:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <StreamTask+0x618>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8002c00:	e0eb      	b.n	8002dda <StreamTask+0x706>
	  case Go_Mile_2_Until_Apriltag:
						  vTaskSuspend(DistanceCheckHandle);
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <StreamTask+0x614>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 fc16 	bl	8008438 <vTaskSuspend>
						  gyro_reset_flag=0;
 8002c0c:	4b37      	ldr	r3, [pc, #220]	; (8002cec <StreamTask+0x618>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8002c12:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <StreamTask+0x61c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f005 fcd2 	bl	80085c0 <vTaskResume>
						  delay(500);
 8002c1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c20:	f7fe fdbe 	bl	80017a0 <delay>
						  PID_Straight_Reset_Flag=1;
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <StreamTask+0x630>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
						  go_straight_speed=PWM_Mid-200;
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <StreamTask+0x634>)
 8002c2c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002c30:	601a      	str	r2, [r3, #0]
						  vTaskResume(GoStraightHandle);
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <StreamTask+0x638>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f005 fcc2 	bl	80085c0 <vTaskResume>
						  delay(500);
 8002c3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c40:	f7fe fdae 	bl	80017a0 <delay>
						  PID_Straight_Reset_Flag=0;
 8002c44:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <StreamTask+0x630>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
						  osSemaphoreWait(ApriltagSemHandle, 0);
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <StreamTask+0x648>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 fb17 	bl	8007284 <osSemaphoreWait>
						  osSemaphoreWait(ApriltagSemHandle, osWaitForever);
 8002c56:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <StreamTask+0x648>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fb10 	bl	8007284 <osSemaphoreWait>
						  osSemaphoreWait(ApriltagSemHandle, osWaitForever);
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <StreamTask+0x648>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fb09 	bl	8007284 <osSemaphoreWait>
						  osSemaphoreWait(ApriltagSemHandle, osWaitForever);
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <StreamTask+0x648>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 fb02 	bl	8007284 <osSemaphoreWait>
						  PID_Straight_Reset_Flag=1;
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <StreamTask+0x630>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
						  vTaskSuspend(GoStraightHandle);
 8002c86:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <StreamTask+0x638>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 fbd4 	bl	8008438 <vTaskSuspend>
//						  PWM_SET_LEFT(PWM_Mid-100);
//						  PWM_SET_RIGHT(PWM_Mid-100);
//						  delay(1200);
						  Car_Stop();
 8002c90:	f7fe fd78 	bl	8001784 <Car_Stop>
						  gyro_reset_flag=1;
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <StreamTask+0x618>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
						  //vTaskSuspend(MileageHandle);
						  break;
 8002c9a:	e09e      	b.n	8002dda <StreamTask+0x706>
	  case Mile_Adjust:
		  	  	  	  	  vTaskResume(MileageHandle);
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <StreamTask+0x624>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f005 fc8d 	bl	80085c0 <vTaskResume>
		  	  	  	  	  PWM_SET_LEFT(-PWM_Lowest-80);
 8002ca6:	481e      	ldr	r0, [pc, #120]	; (8002d20 <StreamTask+0x64c>)
 8002ca8:	f7ff fc7e 	bl	80025a8 <PWM_SET_LEFT>
		  	  	  		  PWM_SET_RIGHT(-PWM_Lowest-80);
 8002cac:	481c      	ldr	r0, [pc, #112]	; (8002d20 <StreamTask+0x64c>)
 8002cae:	f7ff fcb3 	bl	8002618 <PWM_SET_RIGHT>
		  	  	  		  osSemaphoreRelease(MileageNegSemHandle);
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <StreamTask+0x650>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 fb32 	bl	8007320 <osSemaphoreRelease>
		  	  	  		  osSemaphoreWait(MileageNegSemHandle, osWaitForever);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <StreamTask+0x650>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fadd 	bl	8007284 <osSemaphoreWait>
		  	  	  		  osSemaphoreWait(MileageNegSemHandle, osWaitForever);
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <StreamTask+0x650>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fad6 	bl	8007284 <osSemaphoreWait>
		  	  	  		  Car_Stop();
 8002cd8:	f7fe fd54 	bl	8001784 <Car_Stop>
		  	  	  		  vTaskSuspend(MileageHandle);
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <StreamTask+0x624>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f005 fba9 	bl	8008438 <vTaskSuspend>
		  	  	  	  	  break;
 8002ce6:	e078      	b.n	8002dda <StreamTask+0x706>
 8002ce8:	200040f0 	.word	0x200040f0
 8002cec:	200002a8 	.word	0x200002a8
 8002cf0:	20004278 	.word	0x20004278
 8002cf4:	200002b0 	.word	0x200002b0
 8002cf8:	2000400c 	.word	0x2000400c
 8002cfc:	200041d4 	.word	0x200041d4
 8002d00:	200002ac 	.word	0x200002ac
 8002d04:	20000008 	.word	0x20000008
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	200040f4 	.word	0x200040f4
 8002d10:	2000029c 	.word	0x2000029c
 8002d14:	437a0000 	.word	0x437a0000
 8002d18:	20004008 	.word	0x20004008
 8002d1c:	200041e0 	.word	0x200041e0
 8002d20:	fffffefc 	.word	0xfffffefc
 8002d24:	200041e4 	.word	0x200041e4
	  case Apriltag_Adjust1:
						  vTaskSuspend(DistanceCheckHandle);
 8002d28:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <StreamTask+0x708>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f005 fb83 	bl	8008438 <vTaskSuspend>
						  vTaskSuspend(GoStraightHandle);
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <StreamTask+0x70c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f005 fb7e 	bl	8008438 <vTaskSuspend>
						  vTaskSuspend(MileageHandle);
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <StreamTask+0x710>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f005 fb79 	bl	8008438 <vTaskSuspend>
						  gyro_reset_flag=1;
 8002d46:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <StreamTask+0x714>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
						  Car_Stop();
 8002d4c:	f7fe fd1a 	bl	8001784 <Car_Stop>
						  delay(50);
 8002d50:	2032      	movs	r0, #50	; 0x32
 8002d52:	f7fe fd25 	bl	80017a0 <delay>
						  distance_flag=0;
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <StreamTask+0x718>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
						  delay(500);
 8002d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d60:	f7fe fd1e 	bl	80017a0 <delay>
						  PID_Apriltag(5);
 8002d64:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002d68:	f7ff f924 	bl	8001fb4 <PID_Apriltag>
						  Car_Stop();
 8002d6c:	f7fe fd0a 	bl	8001784 <Car_Stop>
						  break;
 8002d70:	e033      	b.n	8002dda <StreamTask+0x706>
	  case Apriltag_Adjust2:
						  vTaskSuspend(DistanceCheckHandle);
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <StreamTask+0x708>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f005 fb5e 	bl	8008438 <vTaskSuspend>
						  vTaskSuspend(GoStraightHandle);
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <StreamTask+0x70c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f005 fb59 	bl	8008438 <vTaskSuspend>
						  vTaskSuspend(MileageHandle);
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <StreamTask+0x710>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f005 fb54 	bl	8008438 <vTaskSuspend>
						  gyro_reset_flag=1;
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <StreamTask+0x714>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
						  Car_Stop();
 8002d96:	f7fe fcf5 	bl	8001784 <Car_Stop>
						  delay(50);
 8002d9a:	2032      	movs	r0, #50	; 0x32
 8002d9c:	f7fe fd00 	bl	80017a0 <delay>
						  distance_flag=0;
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <StreamTask+0x718>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
						  delay(500);
 8002da6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002daa:	f7fe fcf9 	bl	80017a0 <delay>
						  PID_Apriltag(5);
 8002dae:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002db2:	f7ff f8ff 	bl	8001fb4 <PID_Apriltag>
						  Car_Stop();
 8002db6:	f7fe fce5 	bl	8001784 <Car_Stop>
						  break;
 8002dba:	e00e      	b.n	8002dda <StreamTask+0x706>
		  case Apriltag_Check:
		  	  	  	  	  Car_Stop();
 8002dbc:	f7fe fce2 	bl	8001784 <Car_Stop>
		  	  	  	  	  break;
 8002dc0:	e00b      	b.n	8002dda <StreamTask+0x706>
	  case Apriltag_Check2:
		  	  	  	  	  Car_Stop();
 8002dc2:	f7fe fcdf 	bl	8001784 <Car_Stop>
		  	  	  	  	  break;
 8002dc6:	e008      	b.n	8002dda <StreamTask+0x706>
	  case Idle:
		  	  	  	  	  Car_Stop();
 8002dc8:	f7fe fcdc 	bl	8001784 <Car_Stop>
		  	  	  	  	  break;
 8002dcc:	e005      	b.n	8002dda <StreamTask+0x706>
	  default :
		  	  	  	  	  Car_Initial();
 8002dce:	f7fe fca3 	bl	8001718 <Car_Initial>
		  	  	  	  	  break;
 8002dd2:	e002      	b.n	8002dda <StreamTask+0x706>
		  continue;
 8002dd4:	bf00      	nop
 8002dd6:	e48b      	b.n	80026f0 <StreamTask+0x1c>
		  	  	  	  	  break;
 8002dd8:	bf00      	nop
	  delay(50);
 8002dda:	e489      	b.n	80026f0 <StreamTask+0x1c>
 8002ddc:	200040f0 	.word	0x200040f0
 8002de0:	200040f4 	.word	0x200040f4
 8002de4:	2000400c 	.word	0x2000400c
 8002de8:	200002a8 	.word	0x200002a8
 8002dec:	200002a4 	.word	0x200002a4

08002df0 <GyroReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroReceiveTask */
void GyroReceiveTask(void const * argument)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08e      	sub	sp, #56	; 0x38
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroReceiveTask */
	vTaskSuspend(GyroReceiveHandle);
 8002df8:	4ba6      	ldr	r3, [pc, #664]	; (8003094 <GyroReceiveTask+0x2a4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 fb1b 	bl	8008438 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {

	  delay(100);
 8002e02:	2064      	movs	r0, #100	; 0x64
 8002e04:	f7fe fccc 	bl	80017a0 <delay>
	  uint8_t AxH=0, AxL=0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  int16_t Ax=0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	853b      	strh	r3, [r7, #40]	; 0x28

	  uint8_t AyH=0,AyL=0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  int16_t Ay=0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	84bb      	strh	r3, [r7, #36]	; 0x24

	  uint8_t YawH=0,YawL=0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  int16_t Yaw=0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	843b      	strh	r3, [r7, #32]

	  uint8_t sum=0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int i=0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
	  int h=0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint8_t GyroData[21]={0};
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	60da      	str	r2, [r3, #12]
 8002e58:	741a      	strb	r2, [r3, #16]
	  taskENTER_CRITICAL();
 8002e5a:	f006 fb7b 	bl	8009554 <vPortEnterCritical>
	  HAL_UART_Receive(&huart3, (uint8_t *) &GyroData, sizeof(GyroData), 50);
 8002e5e:	f107 0108 	add.w	r1, r7, #8
 8002e62:	2332      	movs	r3, #50	; 0x32
 8002e64:	2215      	movs	r2, #21
 8002e66:	488c      	ldr	r0, [pc, #560]	; (8003098 <GyroReceiveTask+0x2a8>)
 8002e68:	f003 fb2b 	bl	80064c2 <HAL_UART_Receive>
	  taskEXIT_CRITICAL();
 8002e6c:	f006 fba2 	bl	80095b4 <vPortExitCritical>
	  while(h<14)
 8002e70:	e009      	b.n	8002e86 <GyroReceiveTask+0x96>
	  {
		  if(GyroData[h]==0x55)
 8002e72:	f107 0208 	add.w	r2, r7, #8
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	4413      	add	r3, r2
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b55      	cmp	r3, #85	; 0x55
 8002e7e:	d006      	beq.n	8002e8e <GyroReceiveTask+0x9e>
			  break;
		  h++;
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	3301      	adds	r3, #1
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while(h<14)
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	2b0d      	cmp	r3, #13
 8002e8a:	ddf2      	ble.n	8002e72 <GyroReceiveTask+0x82>
 8002e8c:	e000      	b.n	8002e90 <GyroReceiveTask+0xa0>
			  break;
 8002e8e:	bf00      	nop
	  }
	  if(GyroData[h]!=0x55)
 8002e90:	f107 0208 	add.w	r2, r7, #8
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	4413      	add	r3, r2
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b55      	cmp	r3, #85	; 0x55
 8002e9c:	f040 80f3 	bne.w	8003086 <GyroReceiveTask+0x296>
		  continue;
	  if(GyroData[h+1]!=0x53)
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002eae:	2b53      	cmp	r3, #83	; 0x53
 8002eb0:	f040 80eb 	bne.w	800308a <GyroReceiveTask+0x29a>
		  continue;
	  i=0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30
	  sum=0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  while(i<10)
 8002ebe:	e00f      	b.n	8002ee0 <GyroReceiveTask+0xf0>
	  {
		  sum=sum+GyroData[h+i];
 8002ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002eca:	4413      	add	r3, r2
 8002ecc:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8002ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  i++;
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	3301      	adds	r3, #1
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
	  while(i<10)
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	ddec      	ble.n	8002ec0 <GyroReceiveTask+0xd0>
	  }
	  	  if (sum!=GyroData[h+10])
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	330a      	adds	r3, #10
 8002eea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002eee:	4413      	add	r3, r2
 8002ef0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002ef4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f040 80c8 	bne.w	800308e <GyroReceiveTask+0x29e>
	  		  continue;
	  AxL=GyroData[h+2];
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	3302      	adds	r3, #2
 8002f02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f06:	4413      	add	r3, r2
 8002f08:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  AxH=GyroData[h+3];
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	3303      	adds	r3, #3
 8002f14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f18:	4413      	add	r3, r2
 8002f1a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  AyL=GyroData[h+4];
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	3304      	adds	r3, #4
 8002f26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002f30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  AyH=GyroData[h+5];
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	3305      	adds	r3, #5
 8002f38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  YawL=GyroData[h+6];
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	3306      	adds	r3, #6
 8002f4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f4e:	4413      	add	r3, r2
 8002f50:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  YawH=GyroData[h+7];
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	3307      	adds	r3, #7
 8002f5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f60:	4413      	add	r3, r2
 8002f62:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  Ax=((((int16_t) AxH)<<8) | AxL);
 8002f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002f76:	b21b      	sxth	r3, r3
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	853b      	strh	r3, [r7, #40]	; 0x28
	  Ay=((((int16_t) AyH)<<8) | AyL);
 8002f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	b21a      	sxth	r2, r3
 8002f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
	  Yaw=((((int16_t) YawH)<<8) | YawL);
 8002f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	843b      	strh	r3, [r7, #32]
	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  //taskENTER_CRITICAL();
	  //HAL_UART_Transmit(&huart1, (uint8_t *) &Yaw, sizeof(Yaw), 0xFFFF);
	  //taskEXIT_CRITICAL();
	  if(gyro_reset_flag)
 8002fa0:	4b3e      	ldr	r3, [pc, #248]	; (800309c <GyroReceiveTask+0x2ac>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <GyroReceiveTask+0x1c4>
	  {
		  vTaskSuspend(GyroReceiveHandle);
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <GyroReceiveTask+0x2a4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f005 fa43 	bl	8008438 <vTaskSuspend>
		  continue;
 8002fb2:	e06d      	b.n	8003090 <GyroReceiveTask+0x2a0>
	  }

	  angle.x=(((float)Ax) / 32768.0 * 180.0);
 8002fb4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc0:	ee17 0a90 	vmov	r0, s15
 8002fc4:	f7fd fa68 	bl	8000498 <__aeabi_f2d>
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <GyroReceiveTask+0x2b0>)
 8002fce:	f7fd fbe5 	bl	800079c <__aeabi_ddiv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <GyroReceiveTask+0x2b4>)
 8002fe0:	f7fd fab2 	bl	8000548 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fce6 	bl	80009bc <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	; (80030a8 <GyroReceiveTask+0x2b8>)
 8002ff4:	6013      	str	r3, [r2, #0]
	  angle.y=(((float)Ay) / 32768.0 * 180.0);
 8002ff6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003002:	ee17 0a90 	vmov	r0, s15
 8003006:	f7fd fa47 	bl	8000498 <__aeabi_f2d>
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <GyroReceiveTask+0x2b0>)
 8003010:	f7fd fbc4 	bl	800079c <__aeabi_ddiv>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <GyroReceiveTask+0x2b4>)
 8003022:	f7fd fa91 	bl	8000548 <__aeabi_dmul>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fcc5 	bl	80009bc <__aeabi_d2f>
 8003032:	4603      	mov	r3, r0
 8003034:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <GyroReceiveTask+0x2b8>)
 8003036:	6053      	str	r3, [r2, #4]
	  angle.z=(((float)Yaw) / 32768.0 * 180.0);
 8003038:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003044:	ee17 0a90 	vmov	r0, s15
 8003048:	f7fd fa26 	bl	8000498 <__aeabi_f2d>
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <GyroReceiveTask+0x2b0>)
 8003052:	f7fd fba3 	bl	800079c <__aeabi_ddiv>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <GyroReceiveTask+0x2b4>)
 8003064:	f7fd fa70 	bl	8000548 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	f7fd fca4 	bl	80009bc <__aeabi_d2f>
 8003074:	4603      	mov	r3, r0
 8003076:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <GyroReceiveTask+0x2b8>)
 8003078:	6093      	str	r3, [r2, #8]
	  osSemaphoreRelease(GyroReadySemHandle);
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <GyroReceiveTask+0x2bc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f004 f94e 	bl	8007320 <osSemaphoreRelease>
 8003084:	e6bd      	b.n	8002e02 <GyroReceiveTask+0x12>
		  continue;
 8003086:	bf00      	nop
 8003088:	e6bb      	b.n	8002e02 <GyroReceiveTask+0x12>
		  continue;
 800308a:	bf00      	nop
 800308c:	e6b9      	b.n	8002e02 <GyroReceiveTask+0x12>
	  		  continue;
 800308e:	bf00      	nop
  {
 8003090:	e6b7      	b.n	8002e02 <GyroReceiveTask+0x12>
 8003092:	bf00      	nop
 8003094:	20004278 	.word	0x20004278
 8003098:	200040a0 	.word	0x200040a0
 800309c:	200002a8 	.word	0x200002a8
 80030a0:	40e00000 	.word	0x40e00000
 80030a4:	40668000 	.word	0x40668000
 80030a8:	20000290 	.word	0x20000290
 80030ac:	200041dc 	.word	0x200041dc

080030b0 <DistanceCheckTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DistanceCheckTask */
void DistanceCheckTask(void const * argument)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DistanceCheckTask */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 80030b8:	2200      	movs	r2, #0
 80030ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030be:	4829      	ldr	r0, [pc, #164]	; (8003164 <DistanceCheckTask+0xb4>)
 80030c0:	f001 fab8 	bl	8004634 <HAL_GPIO_WritePin>
	vTaskSuspend(DistanceCheckHandle);
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <DistanceCheckTask+0xb8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f005 f9b5 	bl	8008438 <vTaskSuspend>
	delay(1000);
 80030ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030d2:	f7fe fb65 	bl	80017a0 <delay>
  /* Infinite loop */
  for(;;)
  {
	  Distance distance={0.0,0.0};
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
	  Distance temp=Ultrasonic_Feedback();
 80030e2:	f7ff f8c1 	bl	8002268 <Ultrasonic_Feedback>
 80030e6:	eeb0 7a40 	vmov.f32	s14, s0
 80030ea:	eef0 7a60 	vmov.f32	s15, s1
 80030ee:	ed87 7a03 	vstr	s14, [r7, #12]
 80030f2:	edc7 7a04 	vstr	s15, [r7, #16]
	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  for(int i=0;i<1;i++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e00a      	b.n	8003112 <DistanceCheckTask+0x62>
	  {
		  distance.front+=temp.front;
 80030fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8003100:	edd7 7a03 	vldr	s15, [r7, #12]
 8003104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003108:	edc7 7a05 	vstr	s15, [r7, #20]
	  for(int i=0;i<1;i++)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3301      	adds	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	ddf1      	ble.n	80030fc <DistanceCheckTask+0x4c>
	  }
	  distance.front/=1;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	617b      	str	r3, [r7, #20]
	  if(distance.front < critical_distance.front)
 800311c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <DistanceCheckTask+0xbc>)
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312e:	d50e      	bpl.n	800314e <DistanceCheckTask+0x9e>
	  {
		  distance_flag=1;
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <DistanceCheckTask+0xc0>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]
		  osSemaphoreRelease(CriticalDistanceSemHandle);
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <DistanceCheckTask+0xc4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f004 f8f0 	bl	8007320 <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 8003140:	2201      	movs	r2, #1
 8003142:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003146:	4807      	ldr	r0, [pc, #28]	; (8003164 <DistanceCheckTask+0xb4>)
 8003148:	f001 fa74 	bl	8004634 <HAL_GPIO_WritePin>
 800314c:	e7c3      	b.n	80030d6 <DistanceCheckTask+0x26>
	  }
	  else
	  {
		  distance_flag=0;
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <DistanceCheckTask+0xc0>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8003154:	2200      	movs	r2, #0
 8003156:	f44f 7100 	mov.w	r1, #512	; 0x200
 800315a:	4802      	ldr	r0, [pc, #8]	; (8003164 <DistanceCheckTask+0xb4>)
 800315c:	f001 fa6a 	bl	8004634 <HAL_GPIO_WritePin>
  {
 8003160:	e7b9      	b.n	80030d6 <DistanceCheckTask+0x26>
 8003162:	bf00      	nop
 8003164:	40021400 	.word	0x40021400
 8003168:	200040f0 	.word	0x200040f0
 800316c:	2000029c 	.word	0x2000029c
 8003170:	200002a4 	.word	0x200002a4
 8003174:	20004008 	.word	0x20004008

08003178 <MileageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MileageTask */
void MileageTask(void const * argument)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MileageTask */
	//uint8_t mileage_counter;
	vTaskSuspend(MileageHandle);
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <MileageTask+0x60>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f005 f957 	bl	8008438 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  taskENTER_CRITICAL();
 800318a:	f006 f9e3 	bl	8009554 <vPortEnterCritical>
	  //mileage_counter=__HAL_TIM_GET_COUNTER(&htim2);
	  //number_of_pulses=1000*(mileage_IT_number-1)+mileage_counter;
	  number_of_pulses=5000*mileage_IT_number+__HAL_TIM_GET_COUNTER(&htim2);
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <MileageTask+0x64>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	461a      	mov	r2, r3
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <MileageTask+0x68>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	4413      	add	r3, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <MileageTask+0x6c>)
 80031a8:	601a      	str	r2, [r3, #0]
	  taskEXIT_CRITICAL();
 80031aa:	f006 fa03 	bl	80095b4 <vPortExitCritical>
	  //HAL_UART_Transmit(&huart1, &number_of_pulses, sizeof(number_of_pulses), 1000);
	  if (number_of_pulses>critical_pulses)
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <MileageTask+0x6c>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <MileageTask+0x70>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	dd05      	ble.n	80031c6 <MileageTask+0x4e>
		  osSemaphoreRelease(MileageSemHandle);
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <MileageTask+0x74>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f004 f8ae 	bl	8007320 <osSemaphoreRelease>
 80031c4:	e004      	b.n	80031d0 <MileageTask+0x58>
	  else
		  osSemaphoreRelease(MileageNegSemHandle);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <MileageTask+0x78>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f004 f8a8 	bl	8007320 <osSemaphoreRelease>
	  delay(50);
 80031d0:	2032      	movs	r0, #50	; 0x32
 80031d2:	f7fe fae5 	bl	80017a0 <delay>
	  taskENTER_CRITICAL();
 80031d6:	e7d8      	b.n	800318a <MileageTask+0x12>
 80031d8:	2000400c 	.word	0x2000400c
 80031dc:	20000004 	.word	0x20000004
 80031e0:	200041e8 	.word	0x200041e8
 80031e4:	200002ac 	.word	0x200002ac
 80031e8:	200002b0 	.word	0x200002b0
 80031ec:	200041d4 	.word	0x200041d4
 80031f0:	200041e4 	.word	0x200041e4

080031f4 <GoStraightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GoStraightTask */
void GoStraightTask(void const * argument)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GoStraightTask */
	vTaskSuspend(GoStraightHandle);
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <GoStraightTask+0x3c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f005 f919 	bl	8008438 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	if (PID_Straight_Reset_Flag)
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <GoStraightTask+0x40>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10d      	bne.n	800322a <GoStraightTask+0x36>
		continue;
	PID_Straight((float)go_straight_speed);
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <GoStraightTask+0x44>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321a:	eeb0 0a67 	vmov.f32	s0, s15
 800321e:	f7fe fcc7 	bl	8001bb0 <PID_Straight>
    delay(100);
 8003222:	2064      	movs	r0, #100	; 0x64
 8003224:	f7fe fabc 	bl	80017a0 <delay>
 8003228:	e7ed      	b.n	8003206 <GoStraightTask+0x12>
		continue;
 800322a:	bf00      	nop
	if (PID_Straight_Reset_Flag)
 800322c:	e7eb      	b.n	8003206 <GoStraightTask+0x12>
 800322e:	bf00      	nop
 8003230:	200040f4 	.word	0x200040f4
 8003234:	20000008 	.word	0x20000008
 8003238:	20000000 	.word	0x20000000

0800323c <LineSearchTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LineSearchTask */
void LineSearchTask(void const * argument)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LineSearchTask */
	int32_t pulse_increment=300;
 8003244:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003248:	61fb      	str	r3, [r7, #28]
	float Error=0;
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
	float Error_total=0;
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
	float pulse_increment_float=0;
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
	float Kp=4.5;//,Ki=0,Kd=0;
 800325c:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <LineSearchTask+0x118>)
 800325e:	60fb      	str	r3, [r7, #12]
	vTaskSuspend(LineSearchHandle);
 8003260:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <LineSearchTask+0x11c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f005 f8e7 	bl	8008438 <vTaskSuspend>
	vTaskResume(MileageHandle);
 800326a:	4b3c      	ldr	r3, [pc, #240]	; (800335c <LineSearchTask+0x120>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f005 f9a6 	bl	80085c0 <vTaskResume>
	//HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
  /* Infinite loop */
  for(;;)
  {
	  						  critical_pulses=0;
 8003274:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <LineSearchTask+0x124>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
	  						  vTaskResume(MileageHandle);
 800327a:	4b38      	ldr	r3, [pc, #224]	; (800335c <LineSearchTask+0x120>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f005 f99e 	bl	80085c0 <vTaskResume>
	  						  critical_pulses=pulse_increment+number_of_pulses;
 8003284:	4b37      	ldr	r3, [pc, #220]	; (8003364 <LineSearchTask+0x128>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4413      	add	r3, r2
 800328c:	4a34      	ldr	r2, [pc, #208]	; (8003360 <LineSearchTask+0x124>)
 800328e:	6013      	str	r3, [r2, #0]
	  						  osSemaphoreRelease(MileageSemHandle);
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <LineSearchTask+0x12c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f004 f843 	bl	8007320 <osSemaphoreRelease>
	  						  osSemaphoreWait(MileageSemHandle, 0);
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <LineSearchTask+0x12c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 ffef 	bl	8007284 <osSemaphoreWait>
	  						  taskENTER_CRITICAL();
 80032a6:	f006 f955 	bl	8009554 <vPortEnterCritical>
	  					      PWM_SET_LEFT(PWM_Mid);
 80032aa:	f44f 7048 	mov.w	r0, #800	; 0x320
 80032ae:	f7ff f97b 	bl	80025a8 <PWM_SET_LEFT>
	  						  PWM_SET_RIGHT(PWM_Mid);
 80032b2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80032b6:	f7ff f9af 	bl	8002618 <PWM_SET_RIGHT>
	  						  taskEXIT_CRITICAL();
 80032ba:	f006 f97b 	bl	80095b4 <vPortExitCritical>
	  		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <LineSearchTask+0x12c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f04f 31ff 	mov.w	r1, #4294967295
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 ffdc 	bl	8007284 <osSemaphoreWait>
	  		  	  	  		  Car_Stop();
 80032cc:	f7fe fa5a 	bl	8001784 <Car_Stop>
	  		  	  	  		  vTaskSuspend(MileageHandle);
 80032d0:	4b22      	ldr	r3, [pc, #136]	; (800335c <LineSearchTask+0x120>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f005 f8af 	bl	8008438 <vTaskSuspend>
	  		  	  	  		  Error=PID_Line_Follow(10);
 80032da:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80032de:	f7fe fd69 	bl	8001db4 <PID_Line_Follow>
 80032e2:	ed87 0a05 	vstr	s0, [r7, #20]
	  		  	  	  		  Error_total+=Error;
 80032e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80032ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f2:	edc7 7a06 	vstr	s15, [r7, #24]

	  		  	  	  		  pulse_increment_float=150-((int32_t) (Kp*(Error>0?Error:-Error)));
 80032f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	dd02      	ble.n	800330a <LineSearchTask+0xce>
 8003304:	edd7 7a05 	vldr	s15, [r7, #20]
 8003308:	e003      	b.n	8003312 <LineSearchTask+0xd6>
 800330a:	edd7 7a05 	vldr	s15, [r7, #20]
 800330e:	eef1 7a67 	vneg.f32	s15, s15
 8003312:	ed97 7a03 	vldr	s14, [r7, #12]
 8003316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331e:	ee17 3a90 	vmov	r3, s15
 8003322:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800332e:	edc7 7a04 	vstr	s15, [r7, #16]
	  		  	  	  		  pulse_increment= pulse_increment_float>0?(int)pulse_increment_float:25;
 8003332:	edd7 7a04 	vldr	s15, [r7, #16]
 8003336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	dd06      	ble.n	800334e <LineSearchTask+0x112>
 8003340:	edd7 7a04 	vldr	s15, [r7, #16]
 8003344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003348:	ee17 3a90 	vmov	r3, s15
 800334c:	e000      	b.n	8003350 <LineSearchTask+0x114>
 800334e:	2319      	movs	r3, #25
 8003350:	61fb      	str	r3, [r7, #28]
	  						  critical_pulses=0;
 8003352:	e78f      	b.n	8003274 <LineSearchTask+0x38>
 8003354:	40900000 	.word	0x40900000
 8003358:	200040e8 	.word	0x200040e8
 800335c:	2000400c 	.word	0x2000400c
 8003360:	200002b0 	.word	0x200002b0
 8003364:	200002ac 	.word	0x200002ac
 8003368:	200041d4 	.word	0x200041d4

0800336c <LineSearch2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LineSearch2Task */
void LineSearch2Task(void const * argument)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LineSearch2Task */
		float Error=0;
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
		float Error_total=0;
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
		float pulse_increment_float=0;
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
		float Kp=9;//,Ki=0,Kd=0;
 8003386:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <LineSearch2Task+0x118>)
 8003388:	60fb      	str	r3, [r7, #12]
		vTaskSuspend(LineSearch2Handle);
 800338a:	4b3f      	ldr	r3, [pc, #252]	; (8003488 <LineSearch2Task+0x11c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f005 f852 	bl	8008438 <vTaskSuspend>
		int32_t pulse_increment=300;
 8003394:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003398:	61bb      	str	r3, [r7, #24]
		vTaskResume(MileageHandle);
 800339a:	4b3c      	ldr	r3, [pc, #240]	; (800348c <LineSearch2Task+0x120>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f005 f90e 	bl	80085c0 <vTaskResume>
		//HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
	  /* Infinite loop */
	  for(;;)
	  {
		  						  critical_pulses=0;
 80033a4:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <LineSearch2Task+0x124>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
		  						  vTaskResume(MileageHandle);
 80033aa:	4b38      	ldr	r3, [pc, #224]	; (800348c <LineSearch2Task+0x120>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f005 f906 	bl	80085c0 <vTaskResume>
		  						  critical_pulses=pulse_increment+number_of_pulses;
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <LineSearch2Task+0x128>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	4413      	add	r3, r2
 80033bc:	4a34      	ldr	r2, [pc, #208]	; (8003490 <LineSearch2Task+0x124>)
 80033be:	6013      	str	r3, [r2, #0]
		  						  osSemaphoreRelease(MileageSemHandle);
 80033c0:	4b35      	ldr	r3, [pc, #212]	; (8003498 <LineSearch2Task+0x12c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 ffab 	bl	8007320 <osSemaphoreRelease>
		  						  osSemaphoreWait(MileageSemHandle, 0);
 80033ca:	4b33      	ldr	r3, [pc, #204]	; (8003498 <LineSearch2Task+0x12c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f003 ff57 	bl	8007284 <osSemaphoreWait>
		  						  taskENTER_CRITICAL();
 80033d6:	f006 f8bd 	bl	8009554 <vPortEnterCritical>
		  					      PWM_SET_LEFT(PWM_Mid);
 80033da:	f44f 7048 	mov.w	r0, #800	; 0x320
 80033de:	f7ff f8e3 	bl	80025a8 <PWM_SET_LEFT>
		  						  PWM_SET_RIGHT(PWM_Mid);
 80033e2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80033e6:	f7ff f917 	bl	8002618 <PWM_SET_RIGHT>
		  						  taskEXIT_CRITICAL();
 80033ea:	f006 f8e3 	bl	80095b4 <vPortExitCritical>
		  		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80033ee:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <LineSearch2Task+0x12c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f04f 31ff 	mov.w	r1, #4294967295
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 ff44 	bl	8007284 <osSemaphoreWait>
		  		  	  	  		  Car_Stop();
 80033fc:	f7fe f9c2 	bl	8001784 <Car_Stop>
		  		  	  	  		  vTaskSuspend(MileageHandle);
 8003400:	4b22      	ldr	r3, [pc, #136]	; (800348c <LineSearch2Task+0x120>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f005 f817 	bl	8008438 <vTaskSuspend>
		  		  	  	  		  Error=PID_Line_Follow(10);
 800340a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800340e:	f7fe fcd1 	bl	8001db4 <PID_Line_Follow>
 8003412:	ed87 0a05 	vstr	s0, [r7, #20]
		  		  	  	  		  Error_total+=Error;
 8003416:	ed97 7a07 	vldr	s14, [r7, #28]
 800341a:	edd7 7a05 	vldr	s15, [r7, #20]
 800341e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003422:	edc7 7a07 	vstr	s15, [r7, #28]

		  		  	  	  		  pulse_increment_float=300-((int32_t) (Kp*(Error>0?Error:-Error)));
 8003426:	edd7 7a05 	vldr	s15, [r7, #20]
 800342a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	dd02      	ble.n	800343a <LineSearch2Task+0xce>
 8003434:	edd7 7a05 	vldr	s15, [r7, #20]
 8003438:	e003      	b.n	8003442 <LineSearch2Task+0xd6>
 800343a:	edd7 7a05 	vldr	s15, [r7, #20]
 800343e:	eef1 7a67 	vneg.f32	s15, s15
 8003442:	ed97 7a03 	vldr	s14, [r7, #12]
 8003446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800344e:	ee17 3a90 	vmov	r3, s15
 8003452:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345e:	edc7 7a04 	vstr	s15, [r7, #16]
		  		  	  	  		  pulse_increment= pulse_increment_float>0?(int)pulse_increment_float:50;
 8003462:	edd7 7a04 	vldr	s15, [r7, #16]
 8003466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346e:	dd06      	ble.n	800347e <LineSearch2Task+0x112>
 8003470:	edd7 7a04 	vldr	s15, [r7, #16]
 8003474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003478:	ee17 3a90 	vmov	r3, s15
 800347c:	e000      	b.n	8003480 <LineSearch2Task+0x114>
 800347e:	2332      	movs	r3, #50	; 0x32
 8003480:	61bb      	str	r3, [r7, #24]
		  						  critical_pulses=0;
 8003482:	e78f      	b.n	80033a4 <LineSearch2Task+0x38>
 8003484:	41100000 	.word	0x41100000
 8003488:	20004188 	.word	0x20004188
 800348c:	2000400c 	.word	0x2000400c
 8003490:	200002b0 	.word	0x200002b0
 8003494:	200002ac 	.word	0x200002ac
 8003498:	200041d4 	.word	0x200041d4

0800349c <PIDCameraTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PIDCameraTask */
void PIDCameraTask(void const * argument)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08e      	sub	sp, #56	; 0x38
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PIDCameraTask */
  /* Infinite loop */
	vTaskSuspend(PIDCameraHandle);
 80034a4:	4b73      	ldr	r3, [pc, #460]	; (8003674 <PIDCameraTask+0x1d8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 ffc5 	bl	8008438 <vTaskSuspend>
	float PID_Error_Last=0;
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
	float PID_Output=0;
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Error = 0, Error_Total=0;
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t PID_Input=0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
	float PID_Target=0;
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	623b      	str	r3, [r7, #32]
	float Kp=2,Ki=0.07,Kd=1.5;
 80034d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	4b68      	ldr	r3, [pc, #416]	; (8003678 <PIDCameraTask+0x1dc>)
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80034de:	617b      	str	r3, [r7, #20]
	float pwm_left=0,pwm_right=0;
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 80034ec:	4b63      	ldr	r3, [pc, #396]	; (800367c <PIDCameraTask+0x1e0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f04f 31ff 	mov.w	r1, #4294967295
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 fec5 	bl	8007284 <osSemaphoreWait>
	  	 //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  	 //delay(10);
	  	 //Data=0x03E8;
	  	 //PID_Input=0;
	  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 80034fa:	4b61      	ldr	r3, [pc, #388]	; (8003680 <PIDCameraTask+0x1e4>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003504:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
	  	 if (PID_Input == -1000)
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003510:	f000 80ae 	beq.w	8003670 <PIDCameraTask+0x1d4>
	  		 continue;
	  	 Error = PID_Target - PID_Input;		  // 偏差 = 目标 - 实际
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003526:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  	 Error_Total=Error_Total+Ki*Error;
 800352a:	ed97 7a06 	vldr	s14, [r7, #24]
 800352e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800353a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  	 PID_Output = Kp * Error  +
 8003542:	ed97 7a07 	vldr	s14, [r7, #28]
 8003546:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800354a:	ee27 7a27 	vmul.f32	s14, s14, s15
	  				  Kd * (Error - PID_Error_Last ) +
 800354e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003552:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003556:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800355a:	edd7 7a05 	vldr	s15, [r7, #20]
 800355e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	  	 PID_Output = Kp * Error  +
 8003562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003566:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800356a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  				  Error_Total;
	  	 PID_Error_Last = Error;
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
	  	 pwm_right=PWM_Mid + PID_Output;
 8003576:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800357a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003684 <PIDCameraTask+0x1e8>
 800357e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003582:	edc7 7a03 	vstr	s15, [r7, #12]
	  	 pwm_left =PWM_Mid - PID_Output;
 8003586:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003684 <PIDCameraTask+0x1e8>
 800358a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800358e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003592:	edc7 7a04 	vstr	s15, [r7, #16]
	  	 pwm_right += pwm_right>0 ?PWM_Lowest:-PWM_Lowest;
 8003596:	edd7 7a03 	vldr	s15, [r7, #12]
 800359a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800359e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a2:	dd02      	ble.n	80035aa <PIDCameraTask+0x10e>
 80035a4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003688 <PIDCameraTask+0x1ec>
 80035a8:	e001      	b.n	80035ae <PIDCameraTask+0x112>
 80035aa:	eddf 7a38 	vldr	s15, [pc, #224]	; 800368c <PIDCameraTask+0x1f0>
 80035ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80035b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b6:	edc7 7a03 	vstr	s15, [r7, #12]
	  	 pwm_left  += pwm_left>0  ?PWM_Lowest:-PWM_Lowest;
 80035ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80035be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	dd02      	ble.n	80035ce <PIDCameraTask+0x132>
 80035c8:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8003688 <PIDCameraTask+0x1ec>
 80035cc:	e001      	b.n	80035d2 <PIDCameraTask+0x136>
 80035ce:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800368c <PIDCameraTask+0x1f0>
 80035d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80035d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035da:	edc7 7a04 	vstr	s15, [r7, #16]
	  	 pwm_right =  pwm_right>= PWM_Higest?PWM_Higest:pwm_right;
 80035de:	edd7 7a03 	vldr	s15, [r7, #12]
 80035e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003690 <PIDCameraTask+0x1f4>
 80035e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	db01      	blt.n	80035f4 <PIDCameraTask+0x158>
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <PIDCameraTask+0x1f8>)
 80035f2:	e000      	b.n	80035f6 <PIDCameraTask+0x15a>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	60fb      	str	r3, [r7, #12]
	  	 pwm_right =  pwm_right<= -PWM_Higest?-PWM_Higest:pwm_right;
 80035f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80035fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003698 <PIDCameraTask+0x1fc>
 8003600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	d801      	bhi.n	800360e <PIDCameraTask+0x172>
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <PIDCameraTask+0x200>)
 800360c:	e000      	b.n	8003610 <PIDCameraTask+0x174>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	60fb      	str	r3, [r7, #12]
	  	 pwm_left  =  pwm_left >= PWM_Higest?PWM_Higest:pwm_left;
 8003612:	edd7 7a04 	vldr	s15, [r7, #16]
 8003616:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003690 <PIDCameraTask+0x1f4>
 800361a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003622:	db01      	blt.n	8003628 <PIDCameraTask+0x18c>
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <PIDCameraTask+0x1f8>)
 8003626:	e000      	b.n	800362a <PIDCameraTask+0x18e>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	613b      	str	r3, [r7, #16]
	  	 pwm_left  =  pwm_left <= -PWM_Higest?PWM_Higest:pwm_left;// 限幅
 800362c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003630:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003698 <PIDCameraTask+0x1fc>
 8003634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363c:	d801      	bhi.n	8003642 <PIDCameraTask+0x1a6>
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <PIDCameraTask+0x1f8>)
 8003640:	e000      	b.n	8003644 <PIDCameraTask+0x1a8>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	613b      	str	r3, [r7, #16]
	     taskENTER_CRITICAL();
 8003646:	f005 ff85 	bl	8009554 <vPortEnterCritical>
    	 PWM_SET_RIGHT ((int32_t)   pwm_right);
 800364a:	edd7 7a03 	vldr	s15, [r7, #12]
 800364e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003652:	ee17 0a90 	vmov	r0, s15
 8003656:	f7fe ffdf 	bl	8002618 <PWM_SET_RIGHT>
    	 PWM_SET_LEFT  ((int32_t)   pwm_left );
 800365a:	edd7 7a04 	vldr	s15, [r7, #16]
 800365e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003662:	ee17 0a90 	vmov	r0, s15
 8003666:	f7fe ff9f 	bl	80025a8 <PWM_SET_LEFT>
	     taskEXIT_CRITICAL();
 800366a:	f005 ffa3 	bl	80095b4 <vPortExitCritical>
 800366e:	e73d      	b.n	80034ec <PIDCameraTask+0x50>
	  		 continue;
 8003670:	bf00      	nop
	  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8003672:	e73b      	b.n	80034ec <PIDCameraTask+0x50>
 8003674:	200040e4 	.word	0x200040e4
 8003678:	3d8f5c29 	.word	0x3d8f5c29
 800367c:	200040ec 	.word	0x200040ec
 8003680:	2000028e 	.word	0x2000028e
 8003684:	44480000 	.word	0x44480000
 8003688:	43340000 	.word	0x43340000
 800368c:	c3340000 	.word	0xc3340000
 8003690:	44fa0000 	.word	0x44fa0000
 8003694:	44fa0000 	.word	0x44fa0000
 8003698:	c4fa0000 	.word	0xc4fa0000
 800369c:	c4fa0000 	.word	0xc4fa0000

080036a0 <PIDCamera2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PIDCamera2Task */
void PIDCamera2Task(void const * argument)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PIDCamera2Task */
		vTaskSuspend(PIDCamera2Handle);
 80036a8:	4b76      	ldr	r3, [pc, #472]	; (8003884 <PIDCamera2Task+0x1e4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f004 fec3 	bl	8008438 <vTaskSuspend>
		float PID_Error_Last=0;
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
		float PID_Output=0;
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		float Error = 0, Error_Total=0;
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
		int32_t PID_Input=0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
		float PID_Target=0;
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
		float Kp=2,Ki=0.07,Kd=1.5;
 80036d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	4b6b      	ldr	r3, [pc, #428]	; (8003888 <PIDCamera2Task+0x1e8>)
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80036e2:	617b      	str	r3, [r7, #20]
		float pwm_left=0,pwm_right=0;
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <PIDCamera2Task+0x1ec>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f04f 31ff 	mov.w	r1, #4294967295
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 fdc3 	bl	8007284 <osSemaphoreWait>
	  	 HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);//Red LED
 80036fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003702:	4863      	ldr	r0, [pc, #396]	; (8003890 <PIDCamera2Task+0x1f0>)
 8003704:	f000 ffaf 	bl	8004666 <HAL_GPIO_TogglePin>
	  	 //delay(10);
	  	 //Data=0x03E8;
	  	 //PID_Input=0;
	  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 8003708:	4b62      	ldr	r3, [pc, #392]	; (8003894 <PIDCamera2Task+0x1f4>)
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003712:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
	  	 if (PID_Input == -1000)
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800371e:	f000 80ae 	beq.w	800387e <PIDCamera2Task+0x1de>
	  		 continue;
	  	 Error = PID_Target - PID_Input;		  // 偏差 = 目标 - 实际
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003734:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  	 Error_Total=Error_Total+Ki*Error;
 8003738:	ed97 7a06 	vldr	s14, [r7, #24]
 800373c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003744:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  	 PID_Output = Kp * Error  +
 8003750:	ed97 7a07 	vldr	s14, [r7, #28]
 8003754:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003758:	ee27 7a27 	vmul.f32	s14, s14, s15
	  				  Kd * (Error - PID_Error_Last ) +
 800375c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003760:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003764:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003768:	edd7 7a05 	vldr	s15, [r7, #20]
 800376c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	  	 PID_Output = Kp * Error  +
 8003770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003774:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  				  Error_Total;
	  	 PID_Error_Last = Error;
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
	  	 pwm_right=PWM_Mid + PID_Output;
 8003784:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003788:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003898 <PIDCamera2Task+0x1f8>
 800378c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003790:	edc7 7a03 	vstr	s15, [r7, #12]
	  	 pwm_left =PWM_Mid - PID_Output;
 8003794:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003898 <PIDCamera2Task+0x1f8>
 8003798:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800379c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a0:	edc7 7a04 	vstr	s15, [r7, #16]
	  	 pwm_right += pwm_right>0 ?PWM_Lowest:-PWM_Lowest;
 80037a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	dd02      	ble.n	80037b8 <PIDCamera2Task+0x118>
 80037b2:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800389c <PIDCamera2Task+0x1fc>
 80037b6:	e001      	b.n	80037bc <PIDCamera2Task+0x11c>
 80037b8:	eddf 7a39 	vldr	s15, [pc, #228]	; 80038a0 <PIDCamera2Task+0x200>
 80037bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80037c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c4:	edc7 7a03 	vstr	s15, [r7, #12]
	  	 pwm_left  += pwm_left>0  ?PWM_Lowest:-PWM_Lowest;
 80037c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80037cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d4:	dd02      	ble.n	80037dc <PIDCamera2Task+0x13c>
 80037d6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800389c <PIDCamera2Task+0x1fc>
 80037da:	e001      	b.n	80037e0 <PIDCamera2Task+0x140>
 80037dc:	eddf 7a30 	vldr	s15, [pc, #192]	; 80038a0 <PIDCamera2Task+0x200>
 80037e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80037e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e8:	edc7 7a04 	vstr	s15, [r7, #16]
	  	 pwm_right =  pwm_right>= PWM_Higest?PWM_Higest:pwm_right;
 80037ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80038a4 <PIDCamera2Task+0x204>
 80037f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fc:	db01      	blt.n	8003802 <PIDCamera2Task+0x162>
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <PIDCamera2Task+0x208>)
 8003800:	e000      	b.n	8003804 <PIDCamera2Task+0x164>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	60fb      	str	r3, [r7, #12]
	  	 pwm_right =  pwm_right<= -PWM_Higest?-PWM_Higest:pwm_right;
 8003806:	edd7 7a03 	vldr	s15, [r7, #12]
 800380a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80038ac <PIDCamera2Task+0x20c>
 800380e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003816:	d801      	bhi.n	800381c <PIDCamera2Task+0x17c>
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <PIDCamera2Task+0x210>)
 800381a:	e000      	b.n	800381e <PIDCamera2Task+0x17e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	60fb      	str	r3, [r7, #12]
	  	 pwm_left  =  pwm_left >= PWM_Higest?PWM_Higest:pwm_left;
 8003820:	edd7 7a04 	vldr	s15, [r7, #16]
 8003824:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80038a4 <PIDCamera2Task+0x204>
 8003828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	db01      	blt.n	8003836 <PIDCamera2Task+0x196>
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <PIDCamera2Task+0x208>)
 8003834:	e000      	b.n	8003838 <PIDCamera2Task+0x198>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	613b      	str	r3, [r7, #16]
	  	 pwm_left  =  pwm_left <= -PWM_Higest?PWM_Higest:pwm_left;// 限幅
 800383a:	edd7 7a04 	vldr	s15, [r7, #16]
 800383e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80038ac <PIDCamera2Task+0x20c>
 8003842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	d801      	bhi.n	8003850 <PIDCamera2Task+0x1b0>
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <PIDCamera2Task+0x208>)
 800384e:	e000      	b.n	8003852 <PIDCamera2Task+0x1b2>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	613b      	str	r3, [r7, #16]
	     taskENTER_CRITICAL();
 8003854:	f005 fe7e 	bl	8009554 <vPortEnterCritical>
	     PWM_SET_RIGHT ((int32_t)   pwm_right);
 8003858:	edd7 7a03 	vldr	s15, [r7, #12]
 800385c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003860:	ee17 0a90 	vmov	r0, s15
 8003864:	f7fe fed8 	bl	8002618 <PWM_SET_RIGHT>
	     PWM_SET_LEFT  ((int32_t)   pwm_left );
 8003868:	edd7 7a04 	vldr	s15, [r7, #16]
 800386c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003870:	ee17 0a90 	vmov	r0, s15
 8003874:	f7fe fe98 	bl	80025a8 <PWM_SET_LEFT>
	     taskEXIT_CRITICAL();
 8003878:	f005 fe9c 	bl	80095b4 <vPortExitCritical>
 800387c:	e738      	b.n	80036f0 <PIDCamera2Task+0x50>
	  		 continue;
 800387e:	bf00      	nop
	  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8003880:	e736      	b.n	80036f0 <PIDCamera2Task+0x50>
 8003882:	bf00      	nop
 8003884:	20004274 	.word	0x20004274
 8003888:	3d8f5c29 	.word	0x3d8f5c29
 800388c:	200040ec 	.word	0x200040ec
 8003890:	40021400 	.word	0x40021400
 8003894:	2000028e 	.word	0x2000028e
 8003898:	44480000 	.word	0x44480000
 800389c:	43340000 	.word	0x43340000
 80038a0:	c3340000 	.word	0xc3340000
 80038a4:	44fa0000 	.word	0x44fa0000
 80038a8:	44fa0000 	.word	0x44fa0000
 80038ac:	c4fa0000 	.word	0xc4fa0000
 80038b0:	c4fa0000 	.word	0xc4fa0000

080038b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a10      	ldr	r2, [pc, #64]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d102      	bne.n	80038cc <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80038c6:	f000 fb85 	bl	8003fd4 <HAL_IncTick>
	   else
	    	mileage_IT_number++;
	   //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
  	}
  /* USER CODE END Callback 1 */
}
 80038ca:	e016      	b.n	80038fa <HAL_TIM_PeriodElapsedCallback+0x46>
  else if(htim->Instance==TIM2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d111      	bne.n	80038fa <HAL_TIM_PeriodElapsedCallback+0x46>
	   if(__HAL_TIM_GET_COUNTER(&htim2)>3000)
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d905      	bls.n	80038f0 <HAL_TIM_PeriodElapsedCallback+0x3c>
	    	mileage_IT_number--;
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	4a08      	ldr	r2, [pc, #32]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80038ec:	6013      	str	r3, [r2, #0]
}
 80038ee:	e004      	b.n	80038fa <HAL_TIM_PeriodElapsedCallback+0x46>
	    	mileage_IT_number++;
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	4a05      	ldr	r2, [pc, #20]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80038f8:	6013      	str	r3, [r2, #0]
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40010000 	.word	0x40010000
 8003908:	200041e8 	.word	0x200041e8
 800390c:	20000004 	.word	0x20000004

08003910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003914:	b672      	cpsid	i
}
 8003916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003918:	e7fe      	b.n	8003918 <Error_Handler+0x8>
	...

0800391c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_MspInit+0x54>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	4a11      	ldr	r2, [pc, #68]	; (8003970 <HAL_MspInit+0x54>)
 800392c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003930:	6453      	str	r3, [r2, #68]	; 0x44
 8003932:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <HAL_MspInit+0x54>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_MspInit+0x54>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <HAL_MspInit+0x54>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <HAL_MspInit+0x54>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800395a:	2200      	movs	r2, #0
 800395c:	210f      	movs	r1, #15
 800395e:	f06f 0001 	mvn.w	r0, #1
 8003962:	f000 fc0f 	bl	8004184 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800

08003974 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08c      	sub	sp, #48	; 0x30
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d134      	bne.n	8003a00 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	4b34      	ldr	r3, [pc, #208]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
 80039a6:	4b31      	ldr	r3, [pc, #196]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	4a2c      	ldr	r2, [pc, #176]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6313      	str	r3, [r2, #48]	; 0x30
 80039c2:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80039ce:	2322      	movs	r3, #34	; 0x22
 80039d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	2300      	movs	r3, #0
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039de:	2301      	movs	r3, #1
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	f107 031c 	add.w	r3, r7, #28
 80039e6:	4619      	mov	r1, r3
 80039e8:	4821      	ldr	r0, [pc, #132]	; (8003a70 <HAL_TIM_Encoder_MspInit+0xfc>)
 80039ea:	f000 fc87 	bl	80042fc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2105      	movs	r1, #5
 80039f2:	201c      	movs	r0, #28
 80039f4:	f000 fbc6 	bl	8004184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039f8:	201c      	movs	r0, #28
 80039fa:	f000 fbdf 	bl	80041bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80039fe:	e030      	b.n	8003a62 <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM8)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <HAL_TIM_Encoder_MspInit+0x100>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d12b      	bne.n	8003a62 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	4a0f      	ldr	r2, [pc, #60]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6313      	str	r3, [r2, #48]	; 0x30
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a42:	23c0      	movs	r3, #192	; 0xc0
 8003a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a52:	2303      	movs	r3, #3
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4806      	ldr	r0, [pc, #24]	; (8003a78 <HAL_TIM_Encoder_MspInit+0x104>)
 8003a5e:	f000 fc4d 	bl	80042fc <HAL_GPIO_Init>
}
 8003a62:	bf00      	nop
 8003a64:	3730      	adds	r7, #48	; 0x30
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40010400 	.word	0x40010400
 8003a78:	40020800 	.word	0x40020800

08003a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <HAL_TIM_Base_MspInit+0x64>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10e      	bne.n	8003aac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <HAL_TIM_Base_MspInit+0x68>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <HAL_TIM_Base_MspInit+0x68>)
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_TIM_Base_MspInit+0x68>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003aaa:	e012      	b.n	8003ad2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <HAL_TIM_Base_MspInit+0x6c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_TIM_Base_MspInit+0x68>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <HAL_TIM_Base_MspInit+0x68>)
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_TIM_Base_MspInit+0x68>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40000800 	.word	0x40000800

08003aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <HAL_TIM_MspPostInit+0xb0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d11e      	bne.n	8003b4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <HAL_TIM_MspPostInit+0xb4>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a22      	ldr	r2, [pc, #136]	; (8003ba0 <HAL_TIM_MspPostInit+0xb4>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_TIM_MspPostInit+0xb4>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = leftPWM_Pin;
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b36:	2300      	movs	r3, #0
 8003b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftPWM_GPIO_Port, &GPIO_InitStruct);
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	4817      	ldr	r0, [pc, #92]	; (8003ba4 <HAL_TIM_MspPostInit+0xb8>)
 8003b46:	f000 fbd9 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003b4a:	e023      	b.n	8003b94 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_TIM_MspPostInit+0xbc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d11e      	bne.n	8003b94 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_TIM_MspPostInit+0xb4>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <HAL_TIM_MspPostInit+0xb4>)
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_TIM_MspPostInit+0xb4>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightPWM_Pin;
 8003b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b80:	2300      	movs	r3, #0
 8003b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b84:	2302      	movs	r3, #2
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightPWM_GPIO_Port, &GPIO_InitStruct);
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4807      	ldr	r0, [pc, #28]	; (8003bac <HAL_TIM_MspPostInit+0xc0>)
 8003b90:	f000 fbb4 	bl	80042fc <HAL_GPIO_Init>
}
 8003b94:	bf00      	nop
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40020000 	.word	0x40020000
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40020c00 	.word	0x40020c00

08003bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b090      	sub	sp, #64	; 0x40
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7c      	ldr	r2, [pc, #496]	; (8003dc0 <HAL_UART_MspInit+0x210>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d14b      	bne.n	8003c6a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd6:	4b7b      	ldr	r3, [pc, #492]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a7a      	ldr	r2, [pc, #488]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b78      	ldr	r3, [pc, #480]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf2:	4b74      	ldr	r3, [pc, #464]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a73      	ldr	r2, [pc, #460]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b71      	ldr	r3, [pc, #452]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	4b6d      	ldr	r3, [pc, #436]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a6c      	ldr	r2, [pc, #432]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003c14:	f043 0308 	orr.w	r3, r3, #8
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b6a      	ldr	r3, [pc, #424]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c30:	2301      	movs	r3, #1
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c34:	2303      	movs	r3, #3
 8003c36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003c38:	2308      	movs	r3, #8
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c40:	4619      	mov	r1, r3
 8003c42:	4861      	ldr	r0, [pc, #388]	; (8003dc8 <HAL_UART_MspInit+0x218>)
 8003c44:	f000 fb5a 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c48:	2304      	movs	r3, #4
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c50:	2301      	movs	r3, #1
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c54:	2303      	movs	r3, #3
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003c58:	2308      	movs	r3, #8
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c60:	4619      	mov	r1, r3
 8003c62:	485a      	ldr	r0, [pc, #360]	; (8003dcc <HAL_UART_MspInit+0x21c>)
 8003c64:	f000 fb4a 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c68:	e0a6      	b.n	8003db8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <HAL_UART_MspInit+0x220>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d135      	bne.n	8003ce0 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	4b52      	ldr	r3, [pc, #328]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	4a51      	ldr	r2, [pc, #324]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003c7e:	f043 0310 	orr.w	r3, r3, #16
 8003c82:	6453      	str	r3, [r2, #68]	; 0x44
 8003c84:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c90:	2300      	movs	r3, #0
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	4a4a      	ldr	r2, [pc, #296]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca0:	4b48      	ldr	r3, [pc, #288]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cbe:	2307      	movs	r3, #7
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4842      	ldr	r0, [pc, #264]	; (8003dd4 <HAL_UART_MspInit+0x224>)
 8003cca:	f000 fb17 	bl	80042fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2105      	movs	r1, #5
 8003cd2:	2025      	movs	r0, #37	; 0x25
 8003cd4:	f000 fa56 	bl	8004184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cd8:	2025      	movs	r0, #37	; 0x25
 8003cda:	f000 fa6f 	bl	80041bc <HAL_NVIC_EnableIRQ>
}
 8003cde:	e06b      	b.n	8003db8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3c      	ldr	r2, [pc, #240]	; (8003dd8 <HAL_UART_MspInit+0x228>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d134      	bne.n	8003d54 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	4a34      	ldr	r2, [pc, #208]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfa:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	4a2d      	ldr	r2, [pc, #180]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6313      	str	r3, [r2, #48]	; 0x30
 8003d16:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d22:	230c      	movs	r3, #12
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d32:	2307      	movs	r3, #7
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4825      	ldr	r0, [pc, #148]	; (8003dd4 <HAL_UART_MspInit+0x224>)
 8003d3e:	f000 fadd 	bl	80042fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2105      	movs	r1, #5
 8003d46:	2026      	movs	r0, #38	; 0x26
 8003d48:	f000 fa1c 	bl	8004184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d4c:	2026      	movs	r0, #38	; 0x26
 8003d4e:	f000 fa35 	bl	80041bc <HAL_NVIC_EnableIRQ>
}
 8003d52:	e031      	b.n	8003db8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <HAL_UART_MspInit+0x22c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d12c      	bne.n	8003db8 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003d84:	f043 0302 	orr.w	r3, r3, #2
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <HAL_UART_MspInit+0x214>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da4:	2303      	movs	r3, #3
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003da8:	2307      	movs	r3, #7
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003db0:	4619      	mov	r1, r3
 8003db2:	480b      	ldr	r0, [pc, #44]	; (8003de0 <HAL_UART_MspInit+0x230>)
 8003db4:	f000 faa2 	bl	80042fc <HAL_GPIO_Init>
}
 8003db8:	bf00      	nop
 8003dba:	3740      	adds	r7, #64	; 0x40
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40005000 	.word	0x40005000
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40020800 	.word	0x40020800
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40011000 	.word	0x40011000
 8003dd4:	40020000 	.word	0x40020000
 8003dd8:	40004400 	.word	0x40004400
 8003ddc:	40004800 	.word	0x40004800
 8003de0:	40020400 	.word	0x40020400

08003de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003df4:	2200      	movs	r2, #0
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	2019      	movs	r0, #25
 8003dfa:	f000 f9c3 	bl	8004184 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003dfe:	2019      	movs	r0, #25
 8003e00:	f000 f9dc 	bl	80041bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <HAL_InitTick+0xa4>)
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_InitTick+0xa4>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6453      	str	r3, [r2, #68]	; 0x44
 8003e14:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <HAL_InitTick+0xa4>)
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e20:	f107 0210 	add.w	r2, r7, #16
 8003e24:	f107 0314 	add.w	r3, r7, #20
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 f8b6 	bl	8004f9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003e30:	f001 f8a0 	bl	8004f74 <HAL_RCC_GetPCLK2Freq>
 8003e34:	4603      	mov	r3, r0
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <HAL_InitTick+0xa8>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	0c9b      	lsrs	r3, r3, #18
 8003e44:	3b01      	subs	r3, #1
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_InitTick+0xac>)
 8003e4a:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <HAL_InitTick+0xb0>)
 8003e4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <HAL_InitTick+0xac>)
 8003e50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003e56:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <HAL_InitTick+0xac>)
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_InitTick+0xac>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_InitTick+0xac>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003e68:	4809      	ldr	r0, [pc, #36]	; (8003e90 <HAL_InitTick+0xac>)
 8003e6a:	f001 f8e4 	bl	8005036 <HAL_TIM_Base_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003e74:	4806      	ldr	r0, [pc, #24]	; (8003e90 <HAL_InitTick+0xac>)
 8003e76:	f001 f92d 	bl	80050d4 <HAL_TIM_Base_Start_IT>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	e000      	b.n	8003e80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3730      	adds	r7, #48	; 0x30
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	431bde83 	.word	0x431bde83
 8003e90:	2000427c 	.word	0x2000427c
 8003e94:	40010000 	.word	0x40010000

08003e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003e9c:	f001 f8b0 	bl	8005000 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ea0:	e7fe      	b.n	8003ea0 <NMI_Handler+0x8>

08003ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ea6:	e7fe      	b.n	8003ea6 <HardFault_Handler+0x4>

08003ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eac:	e7fe      	b.n	8003eac <MemManage_Handler+0x4>

08003eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eb2:	e7fe      	b.n	8003eb2 <BusFault_Handler+0x4>

08003eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eb8:	e7fe      	b.n	8003eb8 <UsageFault_Handler+0x4>

08003eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003ece:	f001 fbc7 	bl	8005660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000427c 	.word	0x2000427c

08003edc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ee0:	4802      	ldr	r0, [pc, #8]	; (8003eec <TIM2_IRQHandler+0x10>)
 8003ee2:	f001 fbbd 	bl	8005660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200041e8 	.word	0x200041e8

08003ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <USART1_IRQHandler+0x10>)
 8003ef6:	f002 fbb7 	bl	8006668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	2000418c 	.word	0x2000418c

08003f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f08:	4802      	ldr	r0, [pc, #8]	; (8003f14 <USART2_IRQHandler+0x10>)
 8003f0a:	f002 fbad 	bl	8006668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20004230 	.word	0x20004230

08003f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <SystemInit+0x20>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <SystemInit+0x20>)
 8003f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f40:	480d      	ldr	r0, [pc, #52]	; (8003f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f42:	490e      	ldr	r1, [pc, #56]	; (8003f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f44:	4a0e      	ldr	r2, [pc, #56]	; (8003f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f48:	e002      	b.n	8003f50 <LoopCopyDataInit>

08003f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f4e:	3304      	adds	r3, #4

08003f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f54:	d3f9      	bcc.n	8003f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f56:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f58:	4c0b      	ldr	r4, [pc, #44]	; (8003f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f5c:	e001      	b.n	8003f62 <LoopFillZerobss>

08003f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f60:	3204      	adds	r2, #4

08003f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f64:	d3fb      	bcc.n	8003f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f66:	f7ff ffd7 	bl	8003f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f6a:	f005 fdff 	bl	8009b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f6e:	f7fc ff21 	bl	8000db4 <main>
  bx  lr    
 8003f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f7c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003f80:	08009d90 	.word	0x08009d90
  ldr r2, =_sbss
 8003f84:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8003f88:	200042c8 	.word	0x200042c8

08003f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f8c:	e7fe      	b.n	8003f8c <ADC_IRQHandler>
	...

08003f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_Init+0x40>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <HAL_Init+0x40>)
 8003f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_Init+0x40>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <HAL_Init+0x40>)
 8003fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <HAL_Init+0x40>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <HAL_Init+0x40>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb8:	2003      	movs	r0, #3
 8003fba:	f000 f8d8 	bl	800416e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f7ff ff10 	bl	8003de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fc4:	f7ff fcaa 	bl	800391c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023c00 	.word	0x40023c00

08003fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_IncTick+0x20>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_IncTick+0x24>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <HAL_IncTick+0x24>)
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000014 	.word	0x20000014
 8003ff8:	200042c4 	.word	0x200042c4

08003ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8004000:	4b03      	ldr	r3, [pc, #12]	; (8004010 <HAL_GetTick+0x14>)
 8004002:	681b      	ldr	r3, [r3, #0]
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	200042c4 	.word	0x200042c4

08004014 <__NVIC_SetPriorityGrouping>:
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004030:	4013      	ands	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800403c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004046:	4a04      	ldr	r2, [pc, #16]	; (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	60d3      	str	r3, [r2, #12]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <__NVIC_GetPriorityGrouping>:
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <__NVIC_GetPriorityGrouping+0x18>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	f003 0307 	and.w	r3, r3, #7
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <__NVIC_EnableIRQ>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	db0b      	blt.n	80040a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	4907      	ldr	r1, [pc, #28]	; (80040b0 <__NVIC_EnableIRQ+0x38>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2001      	movs	r0, #1
 800409a:	fa00 f202 	lsl.w	r2, r0, r2
 800409e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000e100 	.word	0xe000e100

080040b4 <__NVIC_SetPriority>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db0a      	blt.n	80040de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	490c      	ldr	r1, [pc, #48]	; (8004100 <__NVIC_SetPriority+0x4c>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	440b      	add	r3, r1
 80040d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040dc:	e00a      	b.n	80040f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4908      	ldr	r1, [pc, #32]	; (8004104 <__NVIC_SetPriority+0x50>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3b04      	subs	r3, #4
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	761a      	strb	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <NVIC_EncodePriority>:
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf28      	it	cs
 8004126:	2304      	movcs	r3, #4
 8004128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3304      	adds	r3, #4
 800412e:	2b06      	cmp	r3, #6
 8004130:	d902      	bls.n	8004138 <NVIC_EncodePriority+0x30>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3b03      	subs	r3, #3
 8004136:	e000      	b.n	800413a <NVIC_EncodePriority+0x32>
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	401a      	ands	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004150:	f04f 31ff 	mov.w	r1, #4294967295
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	43d9      	mvns	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	4313      	orrs	r3, r2
}
 8004162:	4618      	mov	r0, r3
 8004164:	3724      	adds	r7, #36	; 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ff4c 	bl	8004014 <__NVIC_SetPriorityGrouping>
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004196:	f7ff ff61 	bl	800405c <__NVIC_GetPriorityGrouping>
 800419a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f7ff ffb1 	bl	8004108 <NVIC_EncodePriority>
 80041a6:	4602      	mov	r2, r0
 80041a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff ff80 	bl	80040b4 <__NVIC_SetPriority>
}
 80041b4:	bf00      	nop
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff ff54 	bl	8004078 <__NVIC_EnableIRQ>
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041e6:	f7ff ff09 	bl	8003ffc <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d008      	beq.n	800420a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2280      	movs	r2, #128	; 0x80
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e052      	b.n	80042b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0216 	bic.w	r2, r2, #22
 8004218:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004228:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_DMA_Abort+0x62>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0208 	bic.w	r2, r2, #8
 8004248:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800425a:	e013      	b.n	8004284 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800425c:	f7ff fece 	bl	8003ffc <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b05      	cmp	r3, #5
 8004268:	d90c      	bls.n	8004284 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2203      	movs	r2, #3
 800427c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e015      	b.n	80042b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e4      	bne.n	800425c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	223f      	movs	r2, #63	; 0x3f
 8004298:	409a      	lsls	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d004      	beq.n	80042d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00c      	b.n	80042f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2205      	movs	r2, #5
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800430e:	2300      	movs	r3, #0
 8004310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e16b      	b.n	80045f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004318:	2201      	movs	r2, #1
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	f040 815a 	bne.w	80045ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b01      	cmp	r3, #1
 8004340:	d005      	beq.n	800434e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800434a:	2b02      	cmp	r3, #2
 800434c:	d130      	bne.n	80043b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	2203      	movs	r2, #3
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4313      	orrs	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004384:	2201      	movs	r2, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 0201 	and.w	r2, r3, #1
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d017      	beq.n	80043ec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	2203      	movs	r2, #3
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d123      	bne.n	8004440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	08da      	lsrs	r2, r3, #3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3208      	adds	r2, #8
 8004400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	220f      	movs	r2, #15
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	08da      	lsrs	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3208      	adds	r2, #8
 800443a:	69b9      	ldr	r1, [r7, #24]
 800443c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	2203      	movs	r2, #3
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0203 	and.w	r2, r3, #3
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80b4 	beq.w	80045ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	4b60      	ldr	r3, [pc, #384]	; (8004608 <HAL_GPIO_Init+0x30c>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	4a5f      	ldr	r2, [pc, #380]	; (8004608 <HAL_GPIO_Init+0x30c>)
 800448c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004490:	6453      	str	r3, [r2, #68]	; 0x44
 8004492:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <HAL_GPIO_Init+0x30c>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800449e:	4a5b      	ldr	r2, [pc, #364]	; (800460c <HAL_GPIO_Init+0x310>)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	3302      	adds	r3, #2
 80044a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	220f      	movs	r2, #15
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4013      	ands	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_GPIO_Init+0x314>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02b      	beq.n	8004522 <HAL_GPIO_Init+0x226>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a51      	ldr	r2, [pc, #324]	; (8004614 <HAL_GPIO_Init+0x318>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d025      	beq.n	800451e <HAL_GPIO_Init+0x222>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a50      	ldr	r2, [pc, #320]	; (8004618 <HAL_GPIO_Init+0x31c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01f      	beq.n	800451a <HAL_GPIO_Init+0x21e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4f      	ldr	r2, [pc, #316]	; (800461c <HAL_GPIO_Init+0x320>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d019      	beq.n	8004516 <HAL_GPIO_Init+0x21a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a4e      	ldr	r2, [pc, #312]	; (8004620 <HAL_GPIO_Init+0x324>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_GPIO_Init+0x216>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a4d      	ldr	r2, [pc, #308]	; (8004624 <HAL_GPIO_Init+0x328>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00d      	beq.n	800450e <HAL_GPIO_Init+0x212>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a4c      	ldr	r2, [pc, #304]	; (8004628 <HAL_GPIO_Init+0x32c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <HAL_GPIO_Init+0x20e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a4b      	ldr	r2, [pc, #300]	; (800462c <HAL_GPIO_Init+0x330>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d101      	bne.n	8004506 <HAL_GPIO_Init+0x20a>
 8004502:	2307      	movs	r3, #7
 8004504:	e00e      	b.n	8004524 <HAL_GPIO_Init+0x228>
 8004506:	2308      	movs	r3, #8
 8004508:	e00c      	b.n	8004524 <HAL_GPIO_Init+0x228>
 800450a:	2306      	movs	r3, #6
 800450c:	e00a      	b.n	8004524 <HAL_GPIO_Init+0x228>
 800450e:	2305      	movs	r3, #5
 8004510:	e008      	b.n	8004524 <HAL_GPIO_Init+0x228>
 8004512:	2304      	movs	r3, #4
 8004514:	e006      	b.n	8004524 <HAL_GPIO_Init+0x228>
 8004516:	2303      	movs	r3, #3
 8004518:	e004      	b.n	8004524 <HAL_GPIO_Init+0x228>
 800451a:	2302      	movs	r3, #2
 800451c:	e002      	b.n	8004524 <HAL_GPIO_Init+0x228>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_GPIO_Init+0x228>
 8004522:	2300      	movs	r3, #0
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	f002 0203 	and.w	r2, r2, #3
 800452a:	0092      	lsls	r2, r2, #2
 800452c:	4093      	lsls	r3, r2
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004534:	4935      	ldr	r1, [pc, #212]	; (800460c <HAL_GPIO_Init+0x310>)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	3302      	adds	r3, #2
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004542:	4b3b      	ldr	r3, [pc, #236]	; (8004630 <HAL_GPIO_Init+0x334>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004566:	4a32      	ldr	r2, [pc, #200]	; (8004630 <HAL_GPIO_Init+0x334>)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800456c:	4b30      	ldr	r3, [pc, #192]	; (8004630 <HAL_GPIO_Init+0x334>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004590:	4a27      	ldr	r2, [pc, #156]	; (8004630 <HAL_GPIO_Init+0x334>)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_GPIO_Init+0x334>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	43db      	mvns	r3, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ba:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <HAL_GPIO_Init+0x334>)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_GPIO_Init+0x334>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045e4:	4a12      	ldr	r2, [pc, #72]	; (8004630 <HAL_GPIO_Init+0x334>)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3301      	adds	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	f67f ae90 	bls.w	8004318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	3724      	adds	r7, #36	; 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	40013800 	.word	0x40013800
 8004610:	40020000 	.word	0x40020000
 8004614:	40020400 	.word	0x40020400
 8004618:	40020800 	.word	0x40020800
 800461c:	40020c00 	.word	0x40020c00
 8004620:	40021000 	.word	0x40021000
 8004624:	40021400 	.word	0x40021400
 8004628:	40021800 	.word	0x40021800
 800462c:	40021c00 	.word	0x40021c00
 8004630:	40013c00 	.word	0x40013c00

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004650:	e003      	b.n	800465a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	619a      	str	r2, [r3, #24]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004678:	887a      	ldrh	r2, [r7, #2]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4013      	ands	r3, r2
 800467e:	041a      	lsls	r2, r3, #16
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	43d9      	mvns	r1, r3
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	400b      	ands	r3, r1
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	619a      	str	r2, [r3, #24]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e264      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d075      	beq.n	80047a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ba:	4ba3      	ldr	r3, [pc, #652]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d00c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c6:	4ba0      	ldr	r3, [pc, #640]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d112      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d2:	4b9d      	ldr	r3, [pc, #628]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046de:	d10b      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	4b99      	ldr	r3, [pc, #612]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d05b      	beq.n	80047a4 <HAL_RCC_OscConfig+0x108>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d157      	bne.n	80047a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e23f      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004700:	d106      	bne.n	8004710 <HAL_RCC_OscConfig+0x74>
 8004702:	4b91      	ldr	r3, [pc, #580]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a90      	ldr	r2, [pc, #576]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e01d      	b.n	800474c <HAL_RCC_OscConfig+0xb0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004718:	d10c      	bne.n	8004734 <HAL_RCC_OscConfig+0x98>
 800471a:	4b8b      	ldr	r3, [pc, #556]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a8a      	ldr	r2, [pc, #552]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4b88      	ldr	r3, [pc, #544]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a87      	ldr	r2, [pc, #540]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e00b      	b.n	800474c <HAL_RCC_OscConfig+0xb0>
 8004734:	4b84      	ldr	r3, [pc, #528]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a83      	ldr	r2, [pc, #524]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 800473a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b81      	ldr	r3, [pc, #516]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a80      	ldr	r2, [pc, #512]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d013      	beq.n	800477c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7ff fc52 	bl	8003ffc <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800475c:	f7ff fc4e 	bl	8003ffc <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e204      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b76      	ldr	r3, [pc, #472]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0xc0>
 800477a:	e014      	b.n	80047a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7ff fc3e 	bl	8003ffc <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004784:	f7ff fc3a 	bl	8003ffc <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1f0      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004796:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0xe8>
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d063      	beq.n	800487a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047b2:	4b65      	ldr	r3, [pc, #404]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047be:	4b62      	ldr	r3, [pc, #392]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d11c      	bne.n	8004804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ca:	4b5f      	ldr	r3, [pc, #380]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d116      	bne.n	8004804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d6:	4b5c      	ldr	r3, [pc, #368]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_RCC_OscConfig+0x152>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e1c4      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ee:	4b56      	ldr	r3, [pc, #344]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4952      	ldr	r1, [pc, #328]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004802:	e03a      	b.n	800487a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d020      	beq.n	800484e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480c:	4b4f      	ldr	r3, [pc, #316]	; (800494c <HAL_RCC_OscConfig+0x2b0>)
 800480e:	2201      	movs	r2, #1
 8004810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7ff fbf3 	bl	8003ffc <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481a:	f7ff fbef 	bl	8003ffc <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e1a5      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482c:	4b46      	ldr	r3, [pc, #280]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b43      	ldr	r3, [pc, #268]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4940      	ldr	r1, [pc, #256]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]
 800484c:	e015      	b.n	800487a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484e:	4b3f      	ldr	r3, [pc, #252]	; (800494c <HAL_RCC_OscConfig+0x2b0>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7ff fbd2 	bl	8003ffc <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800485c:	f7ff fbce 	bl	8003ffc <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e184      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486e:	4b36      	ldr	r3, [pc, #216]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d030      	beq.n	80048e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488e:	4b30      	ldr	r3, [pc, #192]	; (8004950 <HAL_RCC_OscConfig+0x2b4>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7ff fbb2 	bl	8003ffc <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489c:	f7ff fbae 	bl	8003ffc <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e164      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ae:	4b26      	ldr	r3, [pc, #152]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x200>
 80048ba:	e015      	b.n	80048e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_RCC_OscConfig+0x2b4>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c2:	f7ff fb9b 	bl	8003ffc <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ca:	f7ff fb97 	bl	8003ffc <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e14d      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80048de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f0      	bne.n	80048ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80a0 	beq.w	8004a36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	4a0e      	ldr	r2, [pc, #56]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004914:	6413      	str	r3, [r2, #64]	; 0x40
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_OscConfig+0x2b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d121      	bne.n	8004976 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <HAL_RCC_OscConfig+0x2b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a07      	ldr	r2, [pc, #28]	; (8004954 <HAL_RCC_OscConfig+0x2b8>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493e:	f7ff fb5d 	bl	8003ffc <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004944:	e011      	b.n	800496a <HAL_RCC_OscConfig+0x2ce>
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	42470000 	.word	0x42470000
 8004950:	42470e80 	.word	0x42470e80
 8004954:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004958:	f7ff fb50 	bl	8003ffc <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e106      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496a:	4b85      	ldr	r3, [pc, #532]	; (8004b80 <HAL_RCC_OscConfig+0x4e4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d106      	bne.n	800498c <HAL_RCC_OscConfig+0x2f0>
 800497e:	4b81      	ldr	r3, [pc, #516]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	4a80      	ldr	r2, [pc, #512]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6713      	str	r3, [r2, #112]	; 0x70
 800498a:	e01c      	b.n	80049c6 <HAL_RCC_OscConfig+0x32a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b05      	cmp	r3, #5
 8004992:	d10c      	bne.n	80049ae <HAL_RCC_OscConfig+0x312>
 8004994:	4b7b      	ldr	r3, [pc, #492]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	4a7a      	ldr	r2, [pc, #488]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 800499a:	f043 0304 	orr.w	r3, r3, #4
 800499e:	6713      	str	r3, [r2, #112]	; 0x70
 80049a0:	4b78      	ldr	r3, [pc, #480]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	4a77      	ldr	r2, [pc, #476]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	6713      	str	r3, [r2, #112]	; 0x70
 80049ac:	e00b      	b.n	80049c6 <HAL_RCC_OscConfig+0x32a>
 80049ae:	4b75      	ldr	r3, [pc, #468]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a74      	ldr	r2, [pc, #464]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ba:	4b72      	ldr	r3, [pc, #456]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	4a71      	ldr	r2, [pc, #452]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 80049c0:	f023 0304 	bic.w	r3, r3, #4
 80049c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d015      	beq.n	80049fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ce:	f7ff fb15 	bl	8003ffc <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d4:	e00a      	b.n	80049ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d6:	f7ff fb11 	bl	8003ffc <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e0c5      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ec:	4b65      	ldr	r3, [pc, #404]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ee      	beq.n	80049d6 <HAL_RCC_OscConfig+0x33a>
 80049f8:	e014      	b.n	8004a24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fa:	f7ff faff 	bl	8003ffc <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a00:	e00a      	b.n	8004a18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a02:	f7ff fafb 	bl	8003ffc <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e0af      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a18:	4b5a      	ldr	r3, [pc, #360]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ee      	bne.n	8004a02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2a:	4b56      	ldr	r3, [pc, #344]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	4a55      	ldr	r2, [pc, #340]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 809b 	beq.w	8004b76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a40:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d05c      	beq.n	8004b06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d141      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a54:	4b4c      	ldr	r3, [pc, #304]	; (8004b88 <HAL_RCC_OscConfig+0x4ec>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5a:	f7ff facf 	bl	8003ffc <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a62:	f7ff facb 	bl	8003ffc <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e081      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a74:	4b43      	ldr	r3, [pc, #268]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	019b      	lsls	r3, r3, #6
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	061b      	lsls	r3, r3, #24
 8004aa4:	4937      	ldr	r1, [pc, #220]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aaa:	4b37      	ldr	r3, [pc, #220]	; (8004b88 <HAL_RCC_OscConfig+0x4ec>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7ff faa4 	bl	8003ffc <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab8:	f7ff faa0 	bl	8003ffc <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e056      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aca:	4b2e      	ldr	r3, [pc, #184]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x41c>
 8004ad6:	e04e      	b.n	8004b76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <HAL_RCC_OscConfig+0x4ec>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ade:	f7ff fa8d 	bl	8003ffc <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae6:	f7ff fa89 	bl	8003ffc <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e03f      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af8:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f0      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x44a>
 8004b04:	e037      	b.n	8004b76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e032      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b12:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <HAL_RCC_OscConfig+0x4e8>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d028      	beq.n	8004b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d121      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d11a      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b42:	4013      	ands	r3, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d111      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40007000 	.word	0x40007000
 8004b84:	40023800 	.word	0x40023800
 8004b88:	42470060 	.word	0x42470060

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0cc      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b68      	ldr	r3, [pc, #416]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d90c      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b65      	ldr	r3, [pc, #404]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b63      	ldr	r3, [pc, #396]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0b8      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d020      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be0:	4b59      	ldr	r3, [pc, #356]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4a58      	ldr	r2, [pc, #352]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf8:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	4a52      	ldr	r2, [pc, #328]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c04:	4b50      	ldr	r3, [pc, #320]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	494d      	ldr	r1, [pc, #308]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d044      	beq.n	8004cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b47      	ldr	r3, [pc, #284]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d119      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e07f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d003      	beq.n	8004c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	4b3f      	ldr	r3, [pc, #252]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e06f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e067      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6a:	4b37      	ldr	r3, [pc, #220]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4934      	ldr	r1, [pc, #208]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c7c:	f7ff f9be 	bl	8003ffc <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c84:	f7ff f9ba 	bl	8003ffc <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e04f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 020c 	and.w	r2, r3, #12
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d1eb      	bne.n	8004c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cac:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d20c      	bcs.n	8004cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e032      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce0:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4916      	ldr	r1, [pc, #88]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	490e      	ldr	r1, [pc, #56]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d12:	f000 f82d 	bl	8004d70 <HAL_RCC_GetSysClockFreq>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	490a      	ldr	r1, [pc, #40]	; (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	5ccb      	ldrb	r3, [r1, r3]
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff f856 	bl	8003de4 <HAL_InitTick>

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40023c00 	.word	0x40023c00
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	08009d68 	.word	0x08009d68
 8004d50:	2000000c 	.word	0x2000000c
 8004d54:	20000010 	.word	0x20000010

08004d58 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <HAL_RCC_EnableCSS+0x14>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	4247004c 	.word	0x4247004c

08004d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	2300      	movs	r3, #0
 8004d82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d88:	4b67      	ldr	r3, [pc, #412]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d00d      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x40>
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	f200 80bd 	bhi.w	8004f14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_RCC_GetSysClockFreq+0x34>
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d003      	beq.n	8004daa <HAL_RCC_GetSysClockFreq+0x3a>
 8004da2:	e0b7      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da4:	4b61      	ldr	r3, [pc, #388]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004da6:	60bb      	str	r3, [r7, #8]
       break;
 8004da8:	e0b7      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004daa:	4b61      	ldr	r3, [pc, #388]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004dac:	60bb      	str	r3, [r7, #8]
      break;
 8004dae:	e0b4      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db0:	4b5d      	ldr	r3, [pc, #372]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dba:	4b5b      	ldr	r3, [pc, #364]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d04d      	beq.n	8004e62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc6:	4b58      	ldr	r3, [pc, #352]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	099b      	lsrs	r3, r3, #6
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dd6:	f04f 0100 	mov.w	r1, #0
 8004dda:	ea02 0800 	and.w	r8, r2, r0
 8004dde:	ea03 0901 	and.w	r9, r3, r1
 8004de2:	4640      	mov	r0, r8
 8004de4:	4649      	mov	r1, r9
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	014b      	lsls	r3, r1, #5
 8004df0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004df4:	0142      	lsls	r2, r0, #5
 8004df6:	4610      	mov	r0, r2
 8004df8:	4619      	mov	r1, r3
 8004dfa:	ebb0 0008 	subs.w	r0, r0, r8
 8004dfe:	eb61 0109 	sbc.w	r1, r1, r9
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	018b      	lsls	r3, r1, #6
 8004e0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e10:	0182      	lsls	r2, r0, #6
 8004e12:	1a12      	subs	r2, r2, r0
 8004e14:	eb63 0301 	sbc.w	r3, r3, r1
 8004e18:	f04f 0000 	mov.w	r0, #0
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	00d9      	lsls	r1, r3, #3
 8004e22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e26:	00d0      	lsls	r0, r2, #3
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	eb12 0208 	adds.w	r2, r2, r8
 8004e30:	eb43 0309 	adc.w	r3, r3, r9
 8004e34:	f04f 0000 	mov.w	r0, #0
 8004e38:	f04f 0100 	mov.w	r1, #0
 8004e3c:	0259      	lsls	r1, r3, #9
 8004e3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e42:	0250      	lsls	r0, r2, #9
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	f7fb fe02 	bl	8000a5c <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e04a      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e62:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	ea02 0400 	and.w	r4, r2, r0
 8004e7a:	ea03 0501 	and.w	r5, r3, r1
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4629      	mov	r1, r5
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	014b      	lsls	r3, r1, #5
 8004e8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e90:	0142      	lsls	r2, r0, #5
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	1b00      	subs	r0, r0, r4
 8004e98:	eb61 0105 	sbc.w	r1, r1, r5
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	018b      	lsls	r3, r1, #6
 8004ea6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004eaa:	0182      	lsls	r2, r0, #6
 8004eac:	1a12      	subs	r2, r2, r0
 8004eae:	eb63 0301 	sbc.w	r3, r3, r1
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f04f 0100 	mov.w	r1, #0
 8004eba:	00d9      	lsls	r1, r3, #3
 8004ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ec0:	00d0      	lsls	r0, r2, #3
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	1912      	adds	r2, r2, r4
 8004ec8:	eb45 0303 	adc.w	r3, r5, r3
 8004ecc:	f04f 0000 	mov.w	r0, #0
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	0299      	lsls	r1, r3, #10
 8004ed6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004eda:	0290      	lsls	r0, r2, #10
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	f7fb fdb6 	bl	8000a5c <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	3301      	adds	r3, #1
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	60bb      	str	r3, [r7, #8]
      break;
 8004f12:	e002      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f16:	60bb      	str	r3, [r7, #8]
      break;
 8004f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f26:	bf00      	nop
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	00f42400 	.word	0x00f42400
 8004f30:	007a1200 	.word	0x007a1200

08004f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f38:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	2000000c 	.word	0x2000000c

08004f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f50:	f7ff fff0 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	0a9b      	lsrs	r3, r3, #10
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4903      	ldr	r1, [pc, #12]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	08009d78 	.word	0x08009d78

08004f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f78:	f7ff ffdc 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0b5b      	lsrs	r3, r3, #13
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4903      	ldr	r1, [pc, #12]	; (8004f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40023800 	.word	0x40023800
 8004f98:	08009d78 	.word	0x08009d78

08004f9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	220f      	movs	r2, #15
 8004faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fac:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0203 	and.w	r2, r3, #3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	08db      	lsrs	r3, r3, #3
 8004fd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <HAL_RCC_GetClockConfig+0x60>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0207 	and.w	r2, r3, #7
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	601a      	str	r2, [r3, #0]
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40023c00 	.word	0x40023c00

08005000 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005004:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500c:	2b80      	cmp	r3, #128	; 0x80
 800500e:	d104      	bne.n	800501a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005010:	f000 f80a 	bl	8005028 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005014:	4b03      	ldr	r3, [pc, #12]	; (8005024 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005016:	2280      	movs	r2, #128	; 0x80
 8005018:	701a      	strb	r2, [r3, #0]
  }
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40023800 	.word	0x40023800
 8005024:	4002380e 	.word	0x4002380e

08005028 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e041      	b.n	80050cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7fe fd0d 	bl	8003a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2202      	movs	r2, #2
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3304      	adds	r3, #4
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f000 fda5 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d001      	beq.n	80050ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e04e      	b.n	800518a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a23      	ldr	r2, [pc, #140]	; (8005198 <HAL_TIM_Base_Start_IT+0xc4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005116:	d01d      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1f      	ldr	r2, [pc, #124]	; (800519c <HAL_TIM_Base_Start_IT+0xc8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a19      	ldr	r2, [pc, #100]	; (80051ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x80>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d111      	bne.n	8005178 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b06      	cmp	r3, #6
 8005164:	d010      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005176:	e007      	b.n	8005188 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40010400 	.word	0x40010400
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40001800 	.word	0x40001800

080051b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e041      	b.n	800524a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f839 	bl	8005252 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f000 fce6 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d109      	bne.n	800528c <HAL_TIM_PWM_Start+0x24>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	e022      	b.n	80052d2 <HAL_TIM_PWM_Start+0x6a>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b04      	cmp	r3, #4
 8005290:	d109      	bne.n	80052a6 <HAL_TIM_PWM_Start+0x3e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	e015      	b.n	80052d2 <HAL_TIM_PWM_Start+0x6a>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d109      	bne.n	80052c0 <HAL_TIM_PWM_Start+0x58>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	e008      	b.n	80052d2 <HAL_TIM_PWM_Start+0x6a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e07c      	b.n	80053d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0x82>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e8:	e013      	b.n	8005312 <HAL_TIM_PWM_Start+0xaa>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0x92>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f8:	e00b      	b.n	8005312 <HAL_TIM_PWM_Start+0xaa>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d104      	bne.n	800530a <HAL_TIM_PWM_Start+0xa2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005308:	e003      	b.n	8005312 <HAL_TIM_PWM_Start+0xaa>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2201      	movs	r2, #1
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 ff3c 	bl	8006198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2d      	ldr	r2, [pc, #180]	; (80053dc <HAL_TIM_PWM_Start+0x174>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <HAL_TIM_PWM_Start+0xcc>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <HAL_TIM_PWM_Start+0x178>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d101      	bne.n	8005338 <HAL_TIM_PWM_Start+0xd0>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <HAL_TIM_PWM_Start+0xd2>
 8005338:	2300      	movs	r3, #0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a22      	ldr	r2, [pc, #136]	; (80053dc <HAL_TIM_PWM_Start+0x174>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d022      	beq.n	800539e <HAL_TIM_PWM_Start+0x136>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005360:	d01d      	beq.n	800539e <HAL_TIM_PWM_Start+0x136>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <HAL_TIM_PWM_Start+0x17c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_TIM_PWM_Start+0x136>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <HAL_TIM_PWM_Start+0x180>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <HAL_TIM_PWM_Start+0x136>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <HAL_TIM_PWM_Start+0x184>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_TIM_PWM_Start+0x136>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <HAL_TIM_PWM_Start+0x178>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_TIM_PWM_Start+0x136>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <HAL_TIM_PWM_Start+0x188>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIM_PWM_Start+0x136>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <HAL_TIM_PWM_Start+0x18c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d111      	bne.n	80053c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b06      	cmp	r3, #6
 80053ae:	d010      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c0:	e007      	b.n	80053d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40001800 	.word	0x40001800

080053f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e097      	b.n	800553c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d106      	bne.n	8005426 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7fe faa7 	bl	8003974 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543c:	f023 0307 	bic.w	r3, r3, #7
 8005440:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f000 fbb9 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	4313      	orrs	r3, r2
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005498:	f023 030c 	bic.w	r3, r3, #12
 800549c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	4313      	orrs	r3, r2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	011a      	lsls	r2, r3, #4
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	031b      	lsls	r3, r3, #12
 80054c8:	4313      	orrs	r3, r2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80054de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	4313      	orrs	r3, r2
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005554:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800555c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005564:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800556c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d110      	bne.n	8005596 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d102      	bne.n	8005580 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800557a:	7b7b      	ldrb	r3, [r7, #13]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d001      	beq.n	8005584 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e069      	b.n	8005658 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005594:	e031      	b.n	80055fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b04      	cmp	r3, #4
 800559a:	d110      	bne.n	80055be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800559c:	7bbb      	ldrb	r3, [r7, #14]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d102      	bne.n	80055a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055a2:	7b3b      	ldrb	r3, [r7, #12]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d001      	beq.n	80055ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e055      	b.n	8005658 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055bc:	e01d      	b.n	80055fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d108      	bne.n	80055d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c4:	7bbb      	ldrb	r3, [r7, #14]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d105      	bne.n	80055d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ca:	7b7b      	ldrb	r3, [r7, #13]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d102      	bne.n	80055d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d0:	7b3b      	ldrb	r3, [r7, #12]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d001      	beq.n	80055da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e03e      	b.n	8005658 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_TIM_Encoder_Start+0xc4>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b04      	cmp	r3, #4
 8005604:	d008      	beq.n	8005618 <HAL_TIM_Encoder_Start+0xd4>
 8005606:	e00f      	b.n	8005628 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	2100      	movs	r1, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fdc1 	bl	8006198 <TIM_CCxChannelCmd>
      break;
 8005616:	e016      	b.n	8005646 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2201      	movs	r2, #1
 800561e:	2104      	movs	r1, #4
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fdb9 	bl	8006198 <TIM_CCxChannelCmd>
      break;
 8005626:	e00e      	b.n	8005646 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fdb1 	bl	8006198 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	2104      	movs	r1, #4
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fdaa 	bl	8006198 <TIM_CCxChannelCmd>
      break;
 8005644:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d122      	bne.n	80056bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d11b      	bne.n	80056bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0202 	mvn.w	r2, #2
 800568c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa70 	bl	8005b88 <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa62 	bl	8005b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fa73 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d122      	bne.n	8005710 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d11b      	bne.n	8005710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0204 	mvn.w	r2, #4
 80056e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fa46 	bl	8005b88 <HAL_TIM_IC_CaptureCallback>
 80056fc:	e005      	b.n	800570a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fa38 	bl	8005b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fa49 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b08      	cmp	r3, #8
 800571c:	d122      	bne.n	8005764 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b08      	cmp	r3, #8
 800572a:	d11b      	bne.n	8005764 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0208 	mvn.w	r2, #8
 8005734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2204      	movs	r2, #4
 800573a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fa1c 	bl	8005b88 <HAL_TIM_IC_CaptureCallback>
 8005750:	e005      	b.n	800575e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa0e 	bl	8005b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fa1f 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b10      	cmp	r3, #16
 8005770:	d122      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b10      	cmp	r3, #16
 800577e:	d11b      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0210 	mvn.w	r2, #16
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2208      	movs	r2, #8
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9f2 	bl	8005b88 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f9e4 	bl	8005b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f9f5 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d10e      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0201 	mvn.w	r2, #1
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fe f868 	bl	80038b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d10e      	bne.n	8005810 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b80      	cmp	r3, #128	; 0x80
 80057fe:	d107      	bne.n	8005810 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fd70 	bl	80062f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d10e      	bne.n	800583c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d107      	bne.n	800583c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f9ba 	bl	8005bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b20      	cmp	r3, #32
 8005848:	d10e      	bne.n	8005868 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b20      	cmp	r3, #32
 8005856:	d107      	bne.n	8005868 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0220 	mvn.w	r2, #32
 8005860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fd3a 	bl	80062dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005886:	2302      	movs	r3, #2
 8005888:	e0ac      	b.n	80059e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	f200 809f 	bhi.w	80059d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080059d9 	.word	0x080059d9
 80058a8:	080059d9 	.word	0x080059d9
 80058ac:	080059d9 	.word	0x080059d9
 80058b0:	08005915 	.word	0x08005915
 80058b4:	080059d9 	.word	0x080059d9
 80058b8:	080059d9 	.word	0x080059d9
 80058bc:	080059d9 	.word	0x080059d9
 80058c0:	08005957 	.word	0x08005957
 80058c4:	080059d9 	.word	0x080059d9
 80058c8:	080059d9 	.word	0x080059d9
 80058cc:	080059d9 	.word	0x080059d9
 80058d0:	08005997 	.word	0x08005997
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fa12 	bl	8005d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0208 	orr.w	r2, r2, #8
 80058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0204 	bic.w	r2, r2, #4
 80058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6999      	ldr	r1, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	619a      	str	r2, [r3, #24]
      break;
 8005912:	e062      	b.n	80059da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fa62 	bl	8005de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800592e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6999      	ldr	r1, [r3, #24]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	021a      	lsls	r2, r3, #8
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	619a      	str	r2, [r3, #24]
      break;
 8005954:	e041      	b.n	80059da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fab7 	bl	8005ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0208 	orr.w	r2, r2, #8
 8005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0204 	bic.w	r2, r2, #4
 8005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	61da      	str	r2, [r3, #28]
      break;
 8005994:	e021      	b.n	80059da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fb0b 	bl	8005fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69d9      	ldr	r1, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	021a      	lsls	r2, r3, #8
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	61da      	str	r2, [r3, #28]
      break;
 80059d6:	e000      	b.n	80059da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80059d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_TIM_ConfigClockSource+0x18>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e0b3      	b.n	8005b6c <HAL_TIM_ConfigClockSource+0x180>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3c:	d03e      	beq.n	8005abc <HAL_TIM_ConfigClockSource+0xd0>
 8005a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a42:	f200 8087 	bhi.w	8005b54 <HAL_TIM_ConfigClockSource+0x168>
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4a:	f000 8085 	beq.w	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d87f      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x168>
 8005a54:	2b70      	cmp	r3, #112	; 0x70
 8005a56:	d01a      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0xa2>
 8005a58:	2b70      	cmp	r3, #112	; 0x70
 8005a5a:	d87b      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x168>
 8005a5c:	2b60      	cmp	r3, #96	; 0x60
 8005a5e:	d050      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x116>
 8005a60:	2b60      	cmp	r3, #96	; 0x60
 8005a62:	d877      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x168>
 8005a64:	2b50      	cmp	r3, #80	; 0x50
 8005a66:	d03c      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0xf6>
 8005a68:	2b50      	cmp	r3, #80	; 0x50
 8005a6a:	d873      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x168>
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d058      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x136>
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d86f      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x168>
 8005a74:	2b30      	cmp	r3, #48	; 0x30
 8005a76:	d064      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x156>
 8005a78:	2b30      	cmp	r3, #48	; 0x30
 8005a7a:	d86b      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x168>
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d060      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x156>
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d867      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x168>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d05c      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x156>
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d05a      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a8c:	e062      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6899      	ldr	r1, [r3, #8]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f000 fb5b 	bl	8006158 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ab0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	609a      	str	r2, [r3, #8]
      break;
 8005aba:	e04e      	b.n	8005b5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6899      	ldr	r1, [r3, #8]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f000 fb44 	bl	8006158 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ade:	609a      	str	r2, [r3, #8]
      break;
 8005ae0:	e03b      	b.n	8005b5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f000 fab8 	bl	8006064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2150      	movs	r1, #80	; 0x50
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fb11 	bl	8006122 <TIM_ITRx_SetConfig>
      break;
 8005b00:	e02b      	b.n	8005b5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f000 fad7 	bl	80060c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2160      	movs	r1, #96	; 0x60
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fb01 	bl	8006122 <TIM_ITRx_SetConfig>
      break;
 8005b20:	e01b      	b.n	8005b5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 fa98 	bl	8006064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 faf1 	bl	8006122 <TIM_ITRx_SetConfig>
      break;
 8005b40:	e00b      	b.n	8005b5a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f000 fae8 	bl	8006122 <TIM_ITRx_SetConfig>
        break;
 8005b52:	e002      	b.n	8005b5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b54:	bf00      	nop
 8005b56:	e000      	b.n	8005b5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a40      	ldr	r2, [pc, #256]	; (8005cd8 <TIM_Base_SetConfig+0x114>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be2:	d00f      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a3d      	ldr	r2, [pc, #244]	; (8005cdc <TIM_Base_SetConfig+0x118>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a3c      	ldr	r2, [pc, #240]	; (8005ce0 <TIM_Base_SetConfig+0x11c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a3b      	ldr	r2, [pc, #236]	; (8005ce4 <TIM_Base_SetConfig+0x120>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a3a      	ldr	r2, [pc, #232]	; (8005ce8 <TIM_Base_SetConfig+0x124>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d108      	bne.n	8005c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a2f      	ldr	r2, [pc, #188]	; (8005cd8 <TIM_Base_SetConfig+0x114>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02b      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c24:	d027      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <TIM_Base_SetConfig+0x118>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d023      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a2b      	ldr	r2, [pc, #172]	; (8005ce0 <TIM_Base_SetConfig+0x11c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01f      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <TIM_Base_SetConfig+0x120>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01b      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a29      	ldr	r2, [pc, #164]	; (8005ce8 <TIM_Base_SetConfig+0x124>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d017      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a28      	ldr	r2, [pc, #160]	; (8005cec <TIM_Base_SetConfig+0x128>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a27      	ldr	r2, [pc, #156]	; (8005cf0 <TIM_Base_SetConfig+0x12c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00f      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <TIM_Base_SetConfig+0x130>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00b      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a25      	ldr	r2, [pc, #148]	; (8005cf8 <TIM_Base_SetConfig+0x134>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a24      	ldr	r2, [pc, #144]	; (8005cfc <TIM_Base_SetConfig+0x138>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <TIM_Base_SetConfig+0x13c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d108      	bne.n	8005c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <TIM_Base_SetConfig+0x114>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d003      	beq.n	8005cbc <TIM_Base_SetConfig+0xf8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ce8 <TIM_Base_SetConfig+0x124>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d103      	bne.n	8005cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	615a      	str	r2, [r3, #20]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800
 8005ce4:	40000c00 	.word	0x40000c00
 8005ce8:	40010400 	.word	0x40010400
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800
 8005cf8:	40001800 	.word	0x40001800
 8005cfc:	40001c00 	.word	0x40001c00
 8005d00:	40002000 	.word	0x40002000

08005d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f023 0201 	bic.w	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f023 0302 	bic.w	r3, r3, #2
 8005d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a20      	ldr	r2, [pc, #128]	; (8005ddc <TIM_OC1_SetConfig+0xd8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC1_SetConfig+0x64>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <TIM_OC1_SetConfig+0xdc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10c      	bne.n	8005d82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f023 0308 	bic.w	r3, r3, #8
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 0304 	bic.w	r3, r3, #4
 8005d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <TIM_OC1_SetConfig+0xd8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_OC1_SetConfig+0x8e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a14      	ldr	r2, [pc, #80]	; (8005de0 <TIM_OC1_SetConfig+0xdc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d111      	bne.n	8005db6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	621a      	str	r2, [r3, #32]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0210 	bic.w	r2, r3, #16
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 0320 	bic.w	r3, r3, #32
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a22      	ldr	r2, [pc, #136]	; (8005ec8 <TIM_OC2_SetConfig+0xe4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC2_SetConfig+0x68>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a21      	ldr	r2, [pc, #132]	; (8005ecc <TIM_OC2_SetConfig+0xe8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10d      	bne.n	8005e68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <TIM_OC2_SetConfig+0xe4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC2_SetConfig+0x94>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <TIM_OC2_SetConfig+0xe8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d113      	bne.n	8005ea0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400

08005ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <TIM_OC3_SetConfig+0xe0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_OC3_SetConfig+0x66>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <TIM_OC3_SetConfig+0xe4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10d      	bne.n	8005f52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <TIM_OC3_SetConfig+0xe0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d003      	beq.n	8005f62 <TIM_OC3_SetConfig+0x92>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <TIM_OC3_SetConfig+0xe4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d113      	bne.n	8005f8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	621a      	str	r2, [r3, #32]
}
 8005fa4:	bf00      	nop
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40010400 	.word	0x40010400

08005fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	031b      	lsls	r3, r3, #12
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a12      	ldr	r2, [pc, #72]	; (800605c <TIM_OC4_SetConfig+0xa4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_OC4_SetConfig+0x68>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a11      	ldr	r2, [pc, #68]	; (8006060 <TIM_OC4_SetConfig+0xa8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d109      	bne.n	8006034 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006026:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	019b      	lsls	r3, r3, #6
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	621a      	str	r2, [r3, #32]
}
 800604e:	bf00      	nop
 8006050:	371c      	adds	r7, #28
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40010000 	.word	0x40010000
 8006060:	40010400 	.word	0x40010400

08006064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0201 	bic.w	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800608e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 030a 	bic.w	r3, r3, #10
 80060a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b087      	sub	sp, #28
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0210 	bic.w	r2, r3, #16
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	031b      	lsls	r3, r3, #12
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	621a      	str	r2, [r3, #32]
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	f043 0307 	orr.w	r3, r3, #7
 8006144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	609a      	str	r2, [r3, #8]
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	021a      	lsls	r2, r3, #8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	431a      	orrs	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	609a      	str	r2, [r3, #8]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2201      	movs	r2, #1
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a1a      	ldr	r2, [r3, #32]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	43db      	mvns	r3, r3
 80061ba:	401a      	ands	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1a      	ldr	r2, [r3, #32]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	fa01 f303 	lsl.w	r3, r1, r3
 80061d0:	431a      	orrs	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e05a      	b.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a21      	ldr	r2, [pc, #132]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d022      	beq.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006248:	d01d      	beq.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d018      	beq.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1b      	ldr	r2, [pc, #108]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1a      	ldr	r2, [pc, #104]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a17      	ldr	r2, [pc, #92]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d10c      	bne.n	80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	4313      	orrs	r3, r2
 8006296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40000800 	.word	0x40000800
 80062cc:	40000c00 	.word	0x40000c00
 80062d0:	40010400 	.word	0x40010400
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40001800 	.word	0x40001800

080062dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e03f      	b.n	8006396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fd fc40 	bl	8003bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2224      	movs	r2, #36	; 0x24
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fd13 	bl	8006d74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800635c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800636c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800637c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b08a      	sub	sp, #40	; 0x28
 80063a2:	af02      	add	r7, sp, #8
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	603b      	str	r3, [r7, #0]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d17c      	bne.n	80064b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_UART_Transmit+0x2c>
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e075      	b.n	80064ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_UART_Transmit+0x3e>
 80063d8:	2302      	movs	r3, #2
 80063da:	e06e      	b.n	80064ba <HAL_UART_Transmit+0x11c>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2221      	movs	r2, #33	; 0x21
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063f2:	f7fd fe03 	bl	8003ffc <HAL_GetTick>
 80063f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	88fa      	ldrh	r2, [r7, #6]
 80063fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	88fa      	ldrh	r2, [r7, #6]
 8006402:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d108      	bne.n	8006420 <HAL_UART_Transmit+0x82>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	e003      	b.n	8006428 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006430:	e02a      	b.n	8006488 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2200      	movs	r2, #0
 800643a:	2180      	movs	r1, #128	; 0x80
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fad5 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e036      	b.n	80064ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	3302      	adds	r3, #2
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e007      	b.n	800647a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	3301      	adds	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1cf      	bne.n	8006432 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2200      	movs	r2, #0
 800649a:	2140      	movs	r1, #64	; 0x40
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 faa5 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e006      	b.n	80064ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	e000      	b.n	80064ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064b8:	2302      	movs	r3, #2
  }
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b08a      	sub	sp, #40	; 0x28
 80064c6:	af02      	add	r7, sp, #8
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	603b      	str	r3, [r7, #0]
 80064ce:	4613      	mov	r3, r2
 80064d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b20      	cmp	r3, #32
 80064e0:	f040 808c 	bne.w	80065fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_UART_Receive+0x2e>
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e084      	b.n	80065fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_UART_Receive+0x40>
 80064fe:	2302      	movs	r3, #2
 8006500:	e07d      	b.n	80065fe <HAL_UART_Receive+0x13c>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2222      	movs	r2, #34	; 0x22
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800651e:	f7fd fd6d 	bl	8003ffc <HAL_GetTick>
 8006522:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006538:	d108      	bne.n	800654c <HAL_UART_Receive+0x8a>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	e003      	b.n	8006554 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800655c:	e043      	b.n	80065e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2200      	movs	r2, #0
 8006566:	2120      	movs	r1, #32
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fa3f 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e042      	b.n	80065fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10c      	bne.n	8006598 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800658a:	b29a      	uxth	r2, r3
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	3302      	adds	r3, #2
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e01f      	b.n	80065d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a0:	d007      	beq.n	80065b2 <HAL_UART_Receive+0xf0>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <HAL_UART_Receive+0xfe>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e008      	b.n	80065d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	3301      	adds	r3, #1
 80065d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1b6      	bne.n	800655e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e000      	b.n	80065fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
  }
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	4613      	mov	r3, r2
 8006612:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b20      	cmp	r3, #32
 800661e:	d11d      	bne.n	800665c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_UART_Receive_IT+0x26>
 8006626:	88fb      	ldrh	r3, [r7, #6]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e016      	b.n	800665e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_UART_Receive_IT+0x38>
 800663a:	2302      	movs	r3, #2
 800663c:	e00f      	b.n	800665e <HAL_UART_Receive_IT+0x58>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800664c:	88fb      	ldrh	r3, [r7, #6]
 800664e:	461a      	mov	r2, r3
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fa14 	bl	8006a80 <UART_Start_Receive_IT>
 8006658:	4603      	mov	r3, r0
 800665a:	e000      	b.n	800665e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800665c:	2302      	movs	r3, #2
  }
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006688:	2300      	movs	r3, #0
 800668a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <HAL_UART_IRQHandler+0x52>
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fac7 	bl	8006c46 <UART_Receive_IT>
      return;
 80066b8:	e17c      	b.n	80069b4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80b1 	beq.w	8006824 <HAL_UART_IRQHandler+0x1bc>
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d105      	bne.n	80066d8 <HAL_UART_IRQHandler+0x70>
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 80a6 	beq.w	8006824 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_UART_IRQHandler+0x90>
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	f043 0201 	orr.w	r2, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <HAL_UART_IRQHandler+0xb0>
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	f043 0202 	orr.w	r2, r3, #2
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_UART_IRQHandler+0xd0>
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	f043 0204 	orr.w	r2, r3, #4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00f      	beq.n	8006762 <HAL_UART_IRQHandler+0xfa>
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <HAL_UART_IRQHandler+0xee>
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f043 0208 	orr.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 811f 	beq.w	80069aa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <HAL_UART_IRQHandler+0x11e>
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fa60 	bl	8006c46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b40      	cmp	r3, #64	; 0x40
 8006792:	bf0c      	ite	eq
 8006794:	2301      	moveq	r3, #1
 8006796:	2300      	movne	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <HAL_UART_IRQHandler+0x146>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d031      	beq.n	8006812 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f9a0 	bl	8006af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d123      	bne.n	800680a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	695a      	ldr	r2, [r3, #20]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d013      	beq.n	8006802 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	4a77      	ldr	r2, [pc, #476]	; (80069bc <HAL_UART_IRQHandler+0x354>)
 80067e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fd fd66 	bl	80042b8 <HAL_DMA_Abort_IT>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067fc:	4610      	mov	r0, r2
 80067fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	e00e      	b.n	8006820 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fb fe0a 	bl	800241c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	e00a      	b.n	8006820 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fb fe06 	bl	800241c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006810:	e006      	b.n	8006820 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fb fe02 	bl	800241c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800681e:	e0c4      	b.n	80069aa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	bf00      	nop
    return;
 8006822:	e0c2      	b.n	80069aa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006828:	2b01      	cmp	r3, #1
 800682a:	f040 80a2 	bne.w	8006972 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 809c 	beq.w	8006972 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8096 	beq.w	8006972 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d14f      	bne.n	800690a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006874:	8a3b      	ldrh	r3, [r7, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8099 	beq.w	80069ae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006880:	8a3a      	ldrh	r2, [r7, #16]
 8006882:	429a      	cmp	r2, r3
 8006884:	f080 8093 	bcs.w	80069ae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8a3a      	ldrh	r2, [r7, #16]
 800688c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006898:	d02b      	beq.n	80068f2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0201 	bic.w	r2, r2, #1
 80068b8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	695a      	ldr	r2, [r3, #20]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0210 	bic.w	r2, r2, #16
 80068e6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fd fc73 	bl	80041d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	b29b      	uxth	r3, r3
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f866 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006908:	e051      	b.n	80069ae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006912:	b29b      	uxth	r3, r3
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d047      	beq.n	80069b2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006922:	8a7b      	ldrh	r3, [r7, #18]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d044      	beq.n	80069b2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006936:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0210 	bic.w	r2, r2, #16
 8006964:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006966:	8a7b      	ldrh	r3, [r7, #18]
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f832 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006970:	e01f      	b.n	80069b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <HAL_UART_IRQHandler+0x326>
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f8f5 	bl	8006b76 <UART_Transmit_IT>
    return;
 800698c:	e012      	b.n	80069b4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00d      	beq.n	80069b4 <HAL_UART_IRQHandler+0x34c>
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d008      	beq.n	80069b4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f937 	bl	8006c16 <UART_EndTransmit_IT>
    return;
 80069a8:	e004      	b.n	80069b4 <HAL_UART_IRQHandler+0x34c>
    return;
 80069aa:	bf00      	nop
 80069ac:	e002      	b.n	80069b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80069ae:	bf00      	nop
 80069b0:	e000      	b.n	80069b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80069b2:	bf00      	nop
  }
}
 80069b4:	3728      	adds	r7, #40	; 0x28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	08006b4f 	.word	0x08006b4f

080069c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fc:	e02c      	b.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d028      	beq.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a0c:	f7fd faf6 	bl	8003ffc <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d21d      	bcs.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695a      	ldr	r2, [r3, #20]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0201 	bic.w	r2, r2, #1
 8006a3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e00f      	b.n	8006a78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4013      	ands	r3, r2
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d0c3      	beq.n	80069fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2222      	movs	r2, #34	; 0x22
 8006aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ac4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695a      	ldr	r2, [r3, #20]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0201 	orr.w	r2, r2, #1
 8006ad4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0220 	orr.w	r2, r2, #32
 8006ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695a      	ldr	r2, [r3, #20]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d107      	bne.n	8006b34 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0210 	bic.w	r2, r2, #16
 8006b32:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7fb fc57 	bl	800241c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b21      	cmp	r3, #33	; 0x21
 8006b88:	d13e      	bne.n	8006c08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b92:	d114      	bne.n	8006bbe <UART_Transmit_IT+0x48>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d110      	bne.n	8006bbe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	1c9a      	adds	r2, r3, #2
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	621a      	str	r2, [r3, #32]
 8006bbc:	e008      	b.n	8006bd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	1c59      	adds	r1, r3, #1
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6211      	str	r1, [r2, #32]
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10f      	bne.n	8006c04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e000      	b.n	8006c0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c08:	2302      	movs	r3, #2
  }
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff fec2 	bl	80069c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b22      	cmp	r3, #34	; 0x22
 8006c58:	f040 8087 	bne.w	8006d6a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c64:	d117      	bne.n	8006c96 <UART_Receive_IT+0x50>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d113      	bne.n	8006c96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	1c9a      	adds	r2, r3, #2
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28
 8006c94:	e026      	b.n	8006ce4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca8:	d007      	beq.n	8006cba <UART_Receive_IT+0x74>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <UART_Receive_IT+0x82>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	e008      	b.n	8006cda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d136      	bne.n	8006d66 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0220 	bic.w	r2, r2, #32
 8006d06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695a      	ldr	r2, [r3, #20]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0201 	bic.w	r2, r2, #1
 8006d26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10e      	bne.n	8006d56 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0210 	bic.w	r2, r2, #16
 8006d46:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fe40 	bl	80069d4 <HAL_UARTEx_RxEventCallback>
 8006d54:	e002      	b.n	8006d5c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb faec 	bl	8002334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e002      	b.n	8006d6c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e000      	b.n	8006d6c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006d6a:	2302      	movs	r3, #2
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	b09f      	sub	sp, #124	; 0x7c
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8a:	68d9      	ldr	r1, [r3, #12]
 8006d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	ea40 0301 	orr.w	r3, r0, r1
 8006d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006db8:	f021 010c 	bic.w	r1, r1, #12
 8006dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd2:	6999      	ldr	r1, [r3, #24]
 8006dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	ea40 0301 	orr.w	r3, r0, r1
 8006ddc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4bc5      	ldr	r3, [pc, #788]	; (80070f8 <UART_SetConfig+0x384>)
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d004      	beq.n	8006df2 <UART_SetConfig+0x7e>
 8006de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4bc3      	ldr	r3, [pc, #780]	; (80070fc <UART_SetConfig+0x388>)
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d103      	bne.n	8006dfa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006df2:	f7fe f8bf 	bl	8004f74 <HAL_RCC_GetPCLK2Freq>
 8006df6:	6778      	str	r0, [r7, #116]	; 0x74
 8006df8:	e002      	b.n	8006e00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dfa:	f7fe f8a7 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 8006dfe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e08:	f040 80b6 	bne.w	8006f78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e0e:	461c      	mov	r4, r3
 8006e10:	f04f 0500 	mov.w	r5, #0
 8006e14:	4622      	mov	r2, r4
 8006e16:	462b      	mov	r3, r5
 8006e18:	1891      	adds	r1, r2, r2
 8006e1a:	6439      	str	r1, [r7, #64]	; 0x40
 8006e1c:	415b      	adcs	r3, r3
 8006e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e24:	1912      	adds	r2, r2, r4
 8006e26:	eb45 0303 	adc.w	r3, r5, r3
 8006e2a:	f04f 0000 	mov.w	r0, #0
 8006e2e:	f04f 0100 	mov.w	r1, #0
 8006e32:	00d9      	lsls	r1, r3, #3
 8006e34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e38:	00d0      	lsls	r0, r2, #3
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	1911      	adds	r1, r2, r4
 8006e40:	6639      	str	r1, [r7, #96]	; 0x60
 8006e42:	416b      	adcs	r3, r5
 8006e44:	667b      	str	r3, [r7, #100]	; 0x64
 8006e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	1891      	adds	r1, r2, r2
 8006e52:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e54:	415b      	adcs	r3, r3
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e60:	f7f9 fdfc 	bl	8000a5c <__aeabi_uldivmod>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4ba5      	ldr	r3, [pc, #660]	; (8007100 <UART_SetConfig+0x38c>)
 8006e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	011e      	lsls	r6, r3, #4
 8006e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e74:	461c      	mov	r4, r3
 8006e76:	f04f 0500 	mov.w	r5, #0
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	1891      	adds	r1, r2, r2
 8006e80:	6339      	str	r1, [r7, #48]	; 0x30
 8006e82:	415b      	adcs	r3, r3
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
 8006e86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e8a:	1912      	adds	r2, r2, r4
 8006e8c:	eb45 0303 	adc.w	r3, r5, r3
 8006e90:	f04f 0000 	mov.w	r0, #0
 8006e94:	f04f 0100 	mov.w	r1, #0
 8006e98:	00d9      	lsls	r1, r3, #3
 8006e9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e9e:	00d0      	lsls	r0, r2, #3
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	1911      	adds	r1, r2, r4
 8006ea6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ea8:	416b      	adcs	r3, r5
 8006eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	1891      	adds	r1, r2, r2
 8006eb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006eba:	415b      	adcs	r3, r3
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ec2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006ec6:	f7f9 fdc9 	bl	8000a5c <__aeabi_uldivmod>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4b8c      	ldr	r3, [pc, #560]	; (8007100 <UART_SetConfig+0x38c>)
 8006ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	2164      	movs	r1, #100	; 0x64
 8006ed8:	fb01 f303 	mul.w	r3, r1, r3
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	3332      	adds	r3, #50	; 0x32
 8006ee2:	4a87      	ldr	r2, [pc, #540]	; (8007100 <UART_SetConfig+0x38c>)
 8006ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ef0:	441e      	add	r6, r3
 8006ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f04f 0100 	mov.w	r1, #0
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	1894      	adds	r4, r2, r2
 8006f00:	623c      	str	r4, [r7, #32]
 8006f02:	415b      	adcs	r3, r3
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
 8006f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f0a:	1812      	adds	r2, r2, r0
 8006f0c:	eb41 0303 	adc.w	r3, r1, r3
 8006f10:	f04f 0400 	mov.w	r4, #0
 8006f14:	f04f 0500 	mov.w	r5, #0
 8006f18:	00dd      	lsls	r5, r3, #3
 8006f1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f1e:	00d4      	lsls	r4, r2, #3
 8006f20:	4622      	mov	r2, r4
 8006f22:	462b      	mov	r3, r5
 8006f24:	1814      	adds	r4, r2, r0
 8006f26:	653c      	str	r4, [r7, #80]	; 0x50
 8006f28:	414b      	adcs	r3, r1
 8006f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	461a      	mov	r2, r3
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	1891      	adds	r1, r2, r2
 8006f38:	61b9      	str	r1, [r7, #24]
 8006f3a:	415b      	adcs	r3, r3
 8006f3c:	61fb      	str	r3, [r7, #28]
 8006f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f46:	f7f9 fd89 	bl	8000a5c <__aeabi_uldivmod>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4b6c      	ldr	r3, [pc, #432]	; (8007100 <UART_SetConfig+0x38c>)
 8006f50:	fba3 1302 	umull	r1, r3, r3, r2
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	2164      	movs	r1, #100	; 0x64
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	3332      	adds	r3, #50	; 0x32
 8006f62:	4a67      	ldr	r2, [pc, #412]	; (8007100 <UART_SetConfig+0x38c>)
 8006f64:	fba2 2303 	umull	r2, r3, r2, r3
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	f003 0207 	and.w	r2, r3, #7
 8006f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4432      	add	r2, r6
 8006f74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f76:	e0b9      	b.n	80070ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f7a:	461c      	mov	r4, r3
 8006f7c:	f04f 0500 	mov.w	r5, #0
 8006f80:	4622      	mov	r2, r4
 8006f82:	462b      	mov	r3, r5
 8006f84:	1891      	adds	r1, r2, r2
 8006f86:	6139      	str	r1, [r7, #16]
 8006f88:	415b      	adcs	r3, r3
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f90:	1912      	adds	r2, r2, r4
 8006f92:	eb45 0303 	adc.w	r3, r5, r3
 8006f96:	f04f 0000 	mov.w	r0, #0
 8006f9a:	f04f 0100 	mov.w	r1, #0
 8006f9e:	00d9      	lsls	r1, r3, #3
 8006fa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fa4:	00d0      	lsls	r0, r2, #3
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	eb12 0804 	adds.w	r8, r2, r4
 8006fae:	eb43 0905 	adc.w	r9, r3, r5
 8006fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	008b      	lsls	r3, r1, #2
 8006fc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fca:	0082      	lsls	r2, r0, #2
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4649      	mov	r1, r9
 8006fd0:	f7f9 fd44 	bl	8000a5c <__aeabi_uldivmod>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4b49      	ldr	r3, [pc, #292]	; (8007100 <UART_SetConfig+0x38c>)
 8006fda:	fba3 2302 	umull	r2, r3, r3, r2
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	011e      	lsls	r6, r3, #4
 8006fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f04f 0100 	mov.w	r1, #0
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	1894      	adds	r4, r2, r2
 8006ff0:	60bc      	str	r4, [r7, #8]
 8006ff2:	415b      	adcs	r3, r3
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ffa:	1812      	adds	r2, r2, r0
 8006ffc:	eb41 0303 	adc.w	r3, r1, r3
 8007000:	f04f 0400 	mov.w	r4, #0
 8007004:	f04f 0500 	mov.w	r5, #0
 8007008:	00dd      	lsls	r5, r3, #3
 800700a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800700e:	00d4      	lsls	r4, r2, #3
 8007010:	4622      	mov	r2, r4
 8007012:	462b      	mov	r3, r5
 8007014:	1814      	adds	r4, r2, r0
 8007016:	64bc      	str	r4, [r7, #72]	; 0x48
 8007018:	414b      	adcs	r3, r1
 800701a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800701c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	f04f 0100 	mov.w	r1, #0
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	008b      	lsls	r3, r1, #2
 8007030:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007034:	0082      	lsls	r2, r0, #2
 8007036:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800703a:	f7f9 fd0f 	bl	8000a5c <__aeabi_uldivmod>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4b2f      	ldr	r3, [pc, #188]	; (8007100 <UART_SetConfig+0x38c>)
 8007044:	fba3 1302 	umull	r1, r3, r3, r2
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	2164      	movs	r1, #100	; 0x64
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	3332      	adds	r3, #50	; 0x32
 8007056:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <UART_SetConfig+0x38c>)
 8007058:	fba2 2303 	umull	r2, r3, r2, r3
 800705c:	095b      	lsrs	r3, r3, #5
 800705e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007062:	441e      	add	r6, r3
 8007064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007066:	4618      	mov	r0, r3
 8007068:	f04f 0100 	mov.w	r1, #0
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	1894      	adds	r4, r2, r2
 8007072:	603c      	str	r4, [r7, #0]
 8007074:	415b      	adcs	r3, r3
 8007076:	607b      	str	r3, [r7, #4]
 8007078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800707c:	1812      	adds	r2, r2, r0
 800707e:	eb41 0303 	adc.w	r3, r1, r3
 8007082:	f04f 0400 	mov.w	r4, #0
 8007086:	f04f 0500 	mov.w	r5, #0
 800708a:	00dd      	lsls	r5, r3, #3
 800708c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007090:	00d4      	lsls	r4, r2, #3
 8007092:	4622      	mov	r2, r4
 8007094:	462b      	mov	r3, r5
 8007096:	eb12 0a00 	adds.w	sl, r2, r0
 800709a:	eb43 0b01 	adc.w	fp, r3, r1
 800709e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f04f 0100 	mov.w	r1, #0
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	008b      	lsls	r3, r1, #2
 80070b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070b6:	0082      	lsls	r2, r0, #2
 80070b8:	4650      	mov	r0, sl
 80070ba:	4659      	mov	r1, fp
 80070bc:	f7f9 fcce 	bl	8000a5c <__aeabi_uldivmod>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <UART_SetConfig+0x38c>)
 80070c6:	fba3 1302 	umull	r1, r3, r3, r2
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	2164      	movs	r1, #100	; 0x64
 80070ce:	fb01 f303 	mul.w	r3, r1, r3
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	3332      	adds	r3, #50	; 0x32
 80070d8:	4a09      	ldr	r2, [pc, #36]	; (8007100 <UART_SetConfig+0x38c>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	f003 020f 	and.w	r2, r3, #15
 80070e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4432      	add	r2, r6
 80070ea:	609a      	str	r2, [r3, #8]
}
 80070ec:	bf00      	nop
 80070ee:	377c      	adds	r7, #124	; 0x7c
 80070f0:	46bd      	mov	sp, r7
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	bf00      	nop
 80070f8:	40011000 	.word	0x40011000
 80070fc:	40011400 	.word	0x40011400
 8007100:	51eb851f 	.word	0x51eb851f

08007104 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007116:	2b84      	cmp	r3, #132	; 0x84
 8007118:	d005      	beq.n	8007126 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800711a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	3303      	adds	r3, #3
 8007124:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007126:	68fb      	ldr	r3, [r7, #12]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800713a:	f3ef 8305 	mrs	r3, IPSR
 800713e:	607b      	str	r3, [r7, #4]
  return(result);
 8007140:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007142:	2b00      	cmp	r3, #0
 8007144:	bf14      	ite	ne
 8007146:	2301      	movne	r3, #1
 8007148:	2300      	moveq	r3, #0
 800714a:	b2db      	uxtb	r3, r3
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800715c:	f001 fa8e 	bl	800867c <vTaskStartScheduler>
  
  return osOK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	bd80      	pop	{r7, pc}

08007166 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800716a:	f7ff ffe3 	bl	8007134 <inHandlerMode>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007174:	f001 fb9c 	bl	80088b0 <xTaskGetTickCountFromISR>
 8007178:	4603      	mov	r3, r0
 800717a:	e002      	b.n	8007182 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800717c:	f001 fb88 	bl	8008890 <xTaskGetTickCount>
 8007180:	4603      	mov	r3, r0
  }
}
 8007182:	4618      	mov	r0, r3
 8007184:	bd80      	pop	{r7, pc}

08007186 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007188:	b089      	sub	sp, #36	; 0x24
 800718a:	af04      	add	r7, sp, #16
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d020      	beq.n	80071da <osThreadCreate+0x54>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01c      	beq.n	80071da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685c      	ldr	r4, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681d      	ldr	r5, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691e      	ldr	r6, [r3, #16]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7ff ffa6 	bl	8007104 <makeFreeRtosPriority>
 80071b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071c2:	9202      	str	r2, [sp, #8]
 80071c4:	9301      	str	r3, [sp, #4]
 80071c6:	9100      	str	r1, [sp, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	4632      	mov	r2, r6
 80071cc:	4629      	mov	r1, r5
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 ff20 	bl	8008014 <xTaskCreateStatic>
 80071d4:	4603      	mov	r3, r0
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	e01c      	b.n	8007214 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685c      	ldr	r4, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071e6:	b29e      	uxth	r6, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff ff88 	bl	8007104 <makeFreeRtosPriority>
 80071f4:	4602      	mov	r2, r0
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	9200      	str	r2, [sp, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	4632      	mov	r2, r6
 8007202:	4629      	mov	r1, r5
 8007204:	4620      	mov	r0, r4
 8007206:	f000 ff62 	bl	80080ce <xTaskCreate>
 800720a:	4603      	mov	r3, r0
 800720c:	2b01      	cmp	r3, #1
 800720e:	d001      	beq.n	8007214 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007210:	2300      	movs	r3, #0
 8007212:	e000      	b.n	8007216 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007214:	68fb      	ldr	r3, [r7, #12]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800721e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800721e:	b580      	push	{r7, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af02      	add	r7, sp, #8
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00f      	beq.n	8007250 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d10a      	bne.n	800724c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2203      	movs	r2, #3
 800723c:	9200      	str	r2, [sp, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	2100      	movs	r1, #0
 8007242:	2001      	movs	r0, #1
 8007244:	f000 f9d4 	bl	80075f0 <xQueueGenericCreateStatic>
 8007248:	4603      	mov	r3, r0
 800724a:	e016      	b.n	800727a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	e014      	b.n	800727a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d110      	bne.n	8007278 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007256:	2203      	movs	r2, #3
 8007258:	2100      	movs	r1, #0
 800725a:	2001      	movs	r0, #1
 800725c:	f000 fa40 	bl	80076e0 <xQueueGenericCreate>
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <osSemaphoreCreate+0x56>
 8007268:	2300      	movs	r3, #0
 800726a:	2200      	movs	r2, #0
 800726c:	2100      	movs	r1, #0
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 fa90 	bl	8007794 <xQueueGenericSend>
      return sema;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	e000      	b.n	800727a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007278:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800728e:	2300      	movs	r3, #0
 8007290:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	e03a      	b.n	8007312 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d103      	bne.n	80072b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80072a8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e009      	b.n	80072c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d006      	beq.n	80072c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <osSemaphoreWait+0x40>
      ticks = 1;
 80072c0:	2301      	movs	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80072c4:	f7ff ff36 	bl	8007134 <inHandlerMode>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d017      	beq.n	80072fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	461a      	mov	r2, r3
 80072d4:	2100      	movs	r1, #0
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fcf4 	bl	8007cc4 <xQueueReceiveFromISR>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d001      	beq.n	80072e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80072e2:	23ff      	movs	r3, #255	; 0xff
 80072e4:	e015      	b.n	8007312 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d011      	beq.n	8007310 <osSemaphoreWait+0x8c>
 80072ec:	4b0b      	ldr	r3, [pc, #44]	; (800731c <osSemaphoreWait+0x98>)
 80072ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	e008      	b.n	8007310 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80072fe:	68f9      	ldr	r1, [r7, #12]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbd3 	bl	8007aac <xQueueSemaphoreTake>
 8007306:	4603      	mov	r3, r0
 8007308:	2b01      	cmp	r3, #1
 800730a:	d001      	beq.n	8007310 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800730c:	23ff      	movs	r3, #255	; 0xff
 800730e:	e000      	b.n	8007312 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800732c:	2300      	movs	r3, #0
 800732e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007330:	f7ff ff00 	bl	8007134 <inHandlerMode>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d016      	beq.n	8007368 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800733a:	f107 0308 	add.w	r3, r7, #8
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fb25 	bl	8007990 <xQueueGiveFromISR>
 8007346:	4603      	mov	r3, r0
 8007348:	2b01      	cmp	r3, #1
 800734a:	d001      	beq.n	8007350 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800734c:	23ff      	movs	r3, #255	; 0xff
 800734e:	e017      	b.n	8007380 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d013      	beq.n	800737e <osSemaphoreRelease+0x5e>
 8007356:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <osSemaphoreRelease+0x68>)
 8007358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	e00a      	b.n	800737e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007368:	2300      	movs	r3, #0
 800736a:	2200      	movs	r2, #0
 800736c:	2100      	movs	r1, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa10 	bl	8007794 <xQueueGenericSend>
 8007374:	4603      	mov	r3, r0
 8007376:	2b01      	cmp	r3, #1
 8007378:	d001      	beq.n	800737e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800737a:	23ff      	movs	r3, #255	; 0xff
 800737c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800737e:	68fb      	ldr	r3, [r7, #12]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <osDelayUntil+0x18>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	e000      	b.n	80073a6 <osDelayUntil+0x1a>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 ffc7 	bl	800833c <vTaskDelayUntil>
  
  return osOK;
 80073ae:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f103 0208 	add.w	r2, r3, #8
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295
 80073d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f103 0208 	add.w	r2, r3, #8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f103 0208 	add.w	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007412:	b480      	push	{r7}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
}
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d103      	bne.n	800747a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e00c      	b.n	8007494 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3308      	adds	r3, #8
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e002      	b.n	8007488 <vListInsert+0x2e>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	429a      	cmp	r2, r3
 8007492:	d2f6      	bcs.n	8007482 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	601a      	str	r2, [r3, #0]
}
 80074c0:	bf00      	nop
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6892      	ldr	r2, [r2, #8]
 80074e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6852      	ldr	r2, [r2, #4]
 80074ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d103      	bne.n	8007500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	1e5a      	subs	r2, r3, #1
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800754a:	f002 f803 	bl	8009554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	441a      	add	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757a:	3b01      	subs	r3, #1
 800757c:	68f9      	ldr	r1, [r7, #12]
 800757e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	441a      	add	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	22ff      	movs	r2, #255	; 0xff
 800758e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	22ff      	movs	r2, #255	; 0xff
 8007596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d114      	bne.n	80075ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01a      	beq.n	80075de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3310      	adds	r3, #16
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fac9 	bl	8008b44 <xTaskRemoveFromEventList>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d012      	beq.n	80075de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <xQueueGenericReset+0xcc>)
 80075ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	e009      	b.n	80075de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3310      	adds	r3, #16
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff fef2 	bl	80073b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3324      	adds	r3, #36	; 0x24
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff feed 	bl	80073b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075de:	f001 ffe9 	bl	80095b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075e2:	2301      	movs	r3, #1
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08e      	sub	sp, #56	; 0x38
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <xQueueGenericCreateStatic+0x52>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <xQueueGenericCreateStatic+0x56>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <xQueueGenericCreateStatic+0x58>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	623b      	str	r3, [r7, #32]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <xQueueGenericCreateStatic+0x7e>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <xQueueGenericCreateStatic+0x82>
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <xQueueGenericCreateStatic+0x84>
 8007672:	2300      	movs	r3, #0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61fb      	str	r3, [r7, #28]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800768e:	2348      	movs	r3, #72	; 0x48
 8007690:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b48      	cmp	r3, #72	; 0x48
 8007696:	d00a      	beq.n	80076ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	61bb      	str	r3, [r7, #24]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80076b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00d      	beq.n	80076d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	4613      	mov	r3, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f83f 	bl	8007754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80076d8:	4618      	mov	r0, r3
 80076da:	3730      	adds	r7, #48	; 0x30
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	4613      	mov	r3, r2
 80076ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <xQueueGenericCreate+0x2a>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	613b      	str	r3, [r7, #16]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	fb02 f303 	mul.w	r3, r2, r3
 8007712:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	3348      	adds	r3, #72	; 0x48
 8007718:	4618      	mov	r0, r3
 800771a:	f002 f83d 	bl	8009798 <pvPortMalloc>
 800771e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d011      	beq.n	800774a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	3348      	adds	r3, #72	; 0x48
 800772e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007738:	79fa      	ldrb	r2, [r7, #7]
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	4613      	mov	r3, r2
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 f805 	bl	8007754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800774a:	69bb      	ldr	r3, [r7, #24]
	}
 800774c:	4618      	mov	r0, r3
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d103      	bne.n	8007770 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e002      	b.n	8007776 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007782:	2101      	movs	r1, #1
 8007784:	69b8      	ldr	r0, [r7, #24]
 8007786:	f7ff fecb 	bl	8007520 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08e      	sub	sp, #56	; 0x38
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077a2:	2300      	movs	r3, #0
 80077a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <xQueueGenericSend+0x32>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <xQueueGenericSend+0x40>
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <xQueueGenericSend+0x44>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <xQueueGenericSend+0x46>
 80077d8:	2300      	movs	r3, #0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <xQueueGenericSend+0x60>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d103      	bne.n	8007802 <xQueueGenericSend+0x6e>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d101      	bne.n	8007806 <xQueueGenericSend+0x72>
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <xQueueGenericSend+0x74>
 8007806:	2300      	movs	r3, #0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xQueueGenericSend+0x8e>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	623b      	str	r3, [r7, #32]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007822:	f001 fb4b 	bl	8008ebc <xTaskGetSchedulerState>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d102      	bne.n	8007832 <xQueueGenericSend+0x9e>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <xQueueGenericSend+0xa2>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <xQueueGenericSend+0xa4>
 8007836:	2300      	movs	r3, #0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <xQueueGenericSend+0xbe>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	61fb      	str	r3, [r7, #28]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007852:	f001 fe7f 	bl	8009554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	429a      	cmp	r2, r3
 8007860:	d302      	bcc.n	8007868 <xQueueGenericSend+0xd4>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b02      	cmp	r3, #2
 8007866:	d129      	bne.n	80078bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800786e:	f000 fac1 	bl	8007df4 <prvCopyDataToQueue>
 8007872:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d010      	beq.n	800789e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	3324      	adds	r3, #36	; 0x24
 8007880:	4618      	mov	r0, r3
 8007882:	f001 f95f 	bl	8008b44 <xTaskRemoveFromEventList>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d013      	beq.n	80078b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800788c:	4b3f      	ldr	r3, [pc, #252]	; (800798c <xQueueGenericSend+0x1f8>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	e00a      	b.n	80078b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d007      	beq.n	80078b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078a4:	4b39      	ldr	r3, [pc, #228]	; (800798c <xQueueGenericSend+0x1f8>)
 80078a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078b4:	f001 fe7e 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e063      	b.n	8007984 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d103      	bne.n	80078ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078c2:	f001 fe77 	bl	80095b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e05c      	b.n	8007984 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078d0:	f107 0314 	add.w	r3, r7, #20
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 f997 	bl	8008c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078da:	2301      	movs	r3, #1
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078de:	f001 fe69 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078e2:	f000 ff2b 	bl	800873c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078e6:	f001 fe35 	bl	8009554 <vPortEnterCritical>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d103      	bne.n	8007900 <xQueueGenericSend+0x16c>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007906:	b25b      	sxtb	r3, r3
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d103      	bne.n	8007916 <xQueueGenericSend+0x182>
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007916:	f001 fe4d 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800791a:	1d3a      	adds	r2, r7, #4
 800791c:	f107 0314 	add.w	r3, r7, #20
 8007920:	4611      	mov	r1, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f001 f986 	bl	8008c34 <xTaskCheckForTimeOut>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d124      	bne.n	8007978 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800792e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007930:	f000 fb58 	bl	8007fe4 <prvIsQueueFull>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d018      	beq.n	800796c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	3310      	adds	r3, #16
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f001 f8da 	bl	8008afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800794a:	f000 fae3 	bl	8007f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800794e:	f000 ff03 	bl	8008758 <xTaskResumeAll>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	f47f af7c 	bne.w	8007852 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800795a:	4b0c      	ldr	r3, [pc, #48]	; (800798c <xQueueGenericSend+0x1f8>)
 800795c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	e772      	b.n	8007852 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800796c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800796e:	f000 fad1 	bl	8007f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007972:	f000 fef1 	bl	8008758 <xTaskResumeAll>
 8007976:	e76c      	b.n	8007852 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800797a:	f000 facb 	bl	8007f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800797e:	f000 feeb 	bl	8008758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007982:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007984:	4618      	mov	r0, r3
 8007986:	3738      	adds	r7, #56	; 0x38
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08e      	sub	sp, #56	; 0x38
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <xQueueGiveFromISR+0x2a>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	623b      	str	r3, [r7, #32]
}
 80079b6:	bf00      	nop
 80079b8:	e7fe      	b.n	80079b8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <xQueueGiveFromISR+0x48>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	61fb      	str	r3, [r7, #28]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d103      	bne.n	80079e8 <xQueueGiveFromISR+0x58>
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <xQueueGiveFromISR+0x5c>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e000      	b.n	80079ee <xQueueGiveFromISR+0x5e>
 80079ec:	2300      	movs	r3, #0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <xQueueGiveFromISR+0x78>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	61bb      	str	r3, [r7, #24]
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a08:	f001 fe86 	bl	8009718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a0c:	f3ef 8211 	mrs	r2, BASEPRI
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	617a      	str	r2, [r7, #20]
 8007a22:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a24:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d22b      	bcs.n	8007a90 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a52:	d112      	bne.n	8007a7a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d016      	beq.n	8007a8a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	3324      	adds	r3, #36	; 0x24
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 f86f 	bl	8008b44 <xTaskRemoveFromEventList>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00e      	beq.n	8007a8a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2201      	movs	r2, #1
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e007      	b.n	8007a8a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a7e:	3301      	adds	r3, #1
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	b25a      	sxtb	r2, r3
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8e:	e001      	b.n	8007a94 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3738      	adds	r7, #56	; 0x38
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08e      	sub	sp, #56	; 0x38
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	623b      	str	r3, [r7, #32]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	61fb      	str	r3, [r7, #28]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007afc:	f001 f9de 	bl	8008ebc <xTaskGetSchedulerState>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d102      	bne.n	8007b0c <xQueueSemaphoreTake+0x60>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <xQueueSemaphoreTake+0x64>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <xQueueSemaphoreTake+0x66>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10a      	bne.n	8007b2c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	61bb      	str	r3, [r7, #24]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b2c:	f001 fd12 	bl	8009554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d024      	beq.n	8007b86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	1e5a      	subs	r2, r3, #1
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007b4c:	f001 fb5e 	bl	800920c <pvTaskIncrementMutexHeldCount>
 8007b50:	4602      	mov	r2, r0
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00f      	beq.n	8007b7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	3310      	adds	r3, #16
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 ffee 	bl	8008b44 <xTaskRemoveFromEventList>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b6e:	4b54      	ldr	r3, [pc, #336]	; (8007cc0 <xQueueSemaphoreTake+0x214>)
 8007b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b7e:	f001 fd19 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e097      	b.n	8007cb6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d111      	bne.n	8007bb0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	617b      	str	r3, [r7, #20]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ba8:	f001 fd04 	bl	80095b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e082      	b.n	8007cb6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bb6:	f107 030c 	add.w	r3, r7, #12
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 f824 	bl	8008c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bc4:	f001 fcf6 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bc8:	f000 fdb8 	bl	800873c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bcc:	f001 fcc2 	bl	8009554 <vPortEnterCritical>
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bdc:	d103      	bne.n	8007be6 <xQueueSemaphoreTake+0x13a>
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bec:	b25b      	sxtb	r3, r3
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf2:	d103      	bne.n	8007bfc <xQueueSemaphoreTake+0x150>
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bfc:	f001 fcda 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c00:	463a      	mov	r2, r7
 8007c02:	f107 030c 	add.w	r3, r7, #12
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f001 f813 	bl	8008c34 <xTaskCheckForTimeOut>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d132      	bne.n	8007c7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c16:	f000 f9cf 	bl	8007fb8 <prvIsQueueEmpty>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d026      	beq.n	8007c6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d109      	bne.n	8007c3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007c28:	f001 fc94 	bl	8009554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f961 	bl	8008ef8 <xTaskPriorityInherit>
 8007c36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007c38:	f001 fcbc 	bl	80095b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	3324      	adds	r3, #36	; 0x24
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	4611      	mov	r1, r2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 ff59 	bl	8008afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c4c:	f000 f962 	bl	8007f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c50:	f000 fd82 	bl	8008758 <xTaskResumeAll>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f47f af68 	bne.w	8007b2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007c5c:	4b18      	ldr	r3, [pc, #96]	; (8007cc0 <xQueueSemaphoreTake+0x214>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	e75e      	b.n	8007b2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c70:	f000 f950 	bl	8007f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c74:	f000 fd70 	bl	8008758 <xTaskResumeAll>
 8007c78:	e758      	b.n	8007b2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c7c:	f000 f94a 	bl	8007f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c80:	f000 fd6a 	bl	8008758 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c86:	f000 f997 	bl	8007fb8 <prvIsQueueEmpty>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f43f af4d 	beq.w	8007b2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00d      	beq.n	8007cb4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007c98:	f001 fc5c 	bl	8009554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c9e:	f000 f891 	bl	8007dc4 <prvGetDisinheritPriorityAfterTimeout>
 8007ca2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 fa20 	bl	80090f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007cb0:	f001 fc80 	bl	80095b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3738      	adds	r7, #56	; 0x38
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	e000ed04 	.word	0xe000ed04

08007cc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08e      	sub	sp, #56	; 0x38
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	623b      	str	r3, [r7, #32]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d103      	bne.n	8007cfe <xQueueReceiveFromISR+0x3a>
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <xQueueReceiveFromISR+0x3e>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <xQueueReceiveFromISR+0x40>
 8007d02:	2300      	movs	r3, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	61fb      	str	r3, [r7, #28]
}
 8007d1a:	bf00      	nop
 8007d1c:	e7fe      	b.n	8007d1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d1e:	f001 fcfb 	bl	8009718 <vPortValidateInterruptPriority>
	__asm volatile
 8007d22:	f3ef 8211 	mrs	r2, BASEPRI
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	61ba      	str	r2, [r7, #24]
 8007d38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d02f      	beq.n	8007daa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d54:	68b9      	ldr	r1, [r7, #8]
 8007d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d58:	f000 f8b6 	bl	8007ec8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	1e5a      	subs	r2, r3, #1
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007d64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d112      	bne.n	8007d94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	3310      	adds	r3, #16
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fee2 	bl	8008b44 <xTaskRemoveFromEventList>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00e      	beq.n	8007da4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	e007      	b.n	8007da4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d98:	3301      	adds	r3, #1
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	b25a      	sxtb	r2, r3
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007da4:	2301      	movs	r3, #1
 8007da6:	637b      	str	r3, [r7, #52]	; 0x34
 8007da8:	e001      	b.n	8007dae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f383 8811 	msr	BASEPRI, r3
}
 8007db8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3738      	adds	r7, #56	; 0x38
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d006      	beq.n	8007de2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f1c3 0307 	rsb	r3, r3, #7
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	e001      	b.n	8007de6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007de6:	68fb      	ldr	r3, [r7, #12]
	}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10d      	bne.n	8007e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d14d      	bne.n	8007eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f001 f8e0 	bl	8008fe4 <xTaskPriorityDisinherit>
 8007e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	609a      	str	r2, [r3, #8]
 8007e2c:	e043      	b.n	8007eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d119      	bne.n	8007e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6858      	ldr	r0, [r3, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	f001 feb8 	bl	8009bb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	441a      	add	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d32b      	bcc.n	8007eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	e026      	b.n	8007eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68d8      	ldr	r0, [r3, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	461a      	mov	r2, r3
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	f001 fe9e 	bl	8009bb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	425b      	negs	r3, r3
 8007e82:	441a      	add	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d207      	bcs.n	8007ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	425b      	negs	r3, r3
 8007e9e:	441a      	add	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d105      	bne.n	8007eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ebe:	697b      	ldr	r3, [r7, #20]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d018      	beq.n	8007f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	441a      	add	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d303      	bcc.n	8007efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68d9      	ldr	r1, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	461a      	mov	r2, r3
 8007f06:	6838      	ldr	r0, [r7, #0]
 8007f08:	f001 fe54 	bl	8009bb4 <memcpy>
	}
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f1c:	f001 fb1a 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f28:	e011      	b.n	8007f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d012      	beq.n	8007f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3324      	adds	r3, #36	; 0x24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fe04 	bl	8008b44 <xTaskRemoveFromEventList>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f42:	f000 fed9 	bl	8008cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dce9      	bgt.n	8007f2a <prvUnlockQueue+0x16>
 8007f56:	e000      	b.n	8007f5a <prvUnlockQueue+0x46>
					break;
 8007f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	22ff      	movs	r2, #255	; 0xff
 8007f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f62:	f001 fb27 	bl	80095b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f66:	f001 faf5 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f72:	e011      	b.n	8007f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3310      	adds	r3, #16
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fddf 	bl	8008b44 <xTaskRemoveFromEventList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f8c:	f000 feb4 	bl	8008cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dce9      	bgt.n	8007f74 <prvUnlockQueue+0x60>
 8007fa0:	e000      	b.n	8007fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	22ff      	movs	r2, #255	; 0xff
 8007fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007fac:	f001 fb02 	bl	80095b4 <vPortExitCritical>
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fc0:	f001 fac8 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e001      	b.n	8007fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fd6:	f001 faed 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 8007fda:	68fb      	ldr	r3, [r7, #12]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fec:	f001 fab2 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d102      	bne.n	8008002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e001      	b.n	8008006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008006:	f001 fad5 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 800800a:	68fb      	ldr	r3, [r7, #12]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08e      	sub	sp, #56	; 0x38
 8008018:	af04      	add	r7, sp, #16
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	623b      	str	r3, [r7, #32]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <xTaskCreateStatic+0x46>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	61fb      	str	r3, [r7, #28]
}
 8008056:	bf00      	nop
 8008058:	e7fe      	b.n	8008058 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800805a:	2354      	movs	r3, #84	; 0x54
 800805c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	2b54      	cmp	r3, #84	; 0x54
 8008062:	d00a      	beq.n	800807a <xTaskCreateStatic+0x66>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	61bb      	str	r3, [r7, #24]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800807a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	2b00      	cmp	r3, #0
 8008080:	d01e      	beq.n	80080c0 <xTaskCreateStatic+0xac>
 8008082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01b      	beq.n	80080c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008090:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	2202      	movs	r2, #2
 8008096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800809a:	2300      	movs	r3, #0
 800809c:	9303      	str	r3, [sp, #12]
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	9302      	str	r3, [sp, #8]
 80080a2:	f107 0314 	add.w	r3, r7, #20
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f850 	bl	8008158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080ba:	f000 f8d5 	bl	8008268 <prvAddNewTaskToReadyList>
 80080be:	e001      	b.n	80080c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080c4:	697b      	ldr	r3, [r7, #20]
	}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3728      	adds	r7, #40	; 0x28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b08c      	sub	sp, #48	; 0x30
 80080d2:	af04      	add	r7, sp, #16
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	603b      	str	r3, [r7, #0]
 80080da:	4613      	mov	r3, r2
 80080dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fb58 	bl	8009798 <pvPortMalloc>
 80080e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00e      	beq.n	800810e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080f0:	2054      	movs	r0, #84	; 0x54
 80080f2:	f001 fb51 	bl	8009798 <pvPortMalloc>
 80080f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	631a      	str	r2, [r3, #48]	; 0x30
 8008104:	e005      	b.n	8008112 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008106:	6978      	ldr	r0, [r7, #20]
 8008108:	f001 fc12 	bl	8009930 <vPortFree>
 800810c:	e001      	b.n	8008112 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800810e:	2300      	movs	r3, #0
 8008110:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d017      	beq.n	8008148 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008120:	88fa      	ldrh	r2, [r7, #6]
 8008122:	2300      	movs	r3, #0
 8008124:	9303      	str	r3, [sp, #12]
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	9302      	str	r3, [sp, #8]
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68b9      	ldr	r1, [r7, #8]
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 f80e 	bl	8008158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800813c:	69f8      	ldr	r0, [r7, #28]
 800813e:	f000 f893 	bl	8008268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008142:	2301      	movs	r3, #1
 8008144:	61bb      	str	r3, [r7, #24]
 8008146:	e002      	b.n	800814e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
 800814c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800814e:	69bb      	ldr	r3, [r7, #24]
	}
 8008150:	4618      	mov	r0, r3
 8008152:	3720      	adds	r7, #32
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008170:	3b01      	subs	r3, #1
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	f023 0307 	bic.w	r3, r3, #7
 800817e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	617b      	str	r3, [r7, #20]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01f      	beq.n	80081e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
 80081aa:	e012      	b.n	80081d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4413      	add	r3, r2
 80081b2:	7819      	ldrb	r1, [r3, #0]
 80081b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	4413      	add	r3, r2
 80081ba:	3334      	adds	r3, #52	; 0x34
 80081bc:	460a      	mov	r2, r1
 80081be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	3301      	adds	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	2b0f      	cmp	r3, #15
 80081d6:	d9e9      	bls.n	80081ac <prvInitialiseNewTask+0x54>
 80081d8:	e000      	b.n	80081dc <prvInitialiseNewTask+0x84>
			{
				break;
 80081da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081e4:	e003      	b.n	80081ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	2b06      	cmp	r3, #6
 80081f2:	d901      	bls.n	80081f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081f4:	2306      	movs	r3, #6
 80081f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008202:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	2200      	movs	r2, #0
 8008208:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	3304      	adds	r3, #4
 800820e:	4618      	mov	r0, r3
 8008210:	f7ff f8f2 	bl	80073f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	3318      	adds	r3, #24
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff f8ed 	bl	80073f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008222:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	f1c3 0207 	rsb	r2, r3, #7
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008232:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	2200      	movs	r2, #0
 8008238:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	68f9      	ldr	r1, [r7, #12]
 8008246:	69b8      	ldr	r0, [r7, #24]
 8008248:	f001 f85a 	bl	8009300 <pxPortInitialiseStack>
 800824c:	4602      	mov	r2, r0
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800825e:	bf00      	nop
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008270:	f001 f970 	bl	8009554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008274:	4b2a      	ldr	r3, [pc, #168]	; (8008320 <prvAddNewTaskToReadyList+0xb8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	4a29      	ldr	r2, [pc, #164]	; (8008320 <prvAddNewTaskToReadyList+0xb8>)
 800827c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800827e:	4b29      	ldr	r3, [pc, #164]	; (8008324 <prvAddNewTaskToReadyList+0xbc>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d109      	bne.n	800829a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008286:	4a27      	ldr	r2, [pc, #156]	; (8008324 <prvAddNewTaskToReadyList+0xbc>)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800828c:	4b24      	ldr	r3, [pc, #144]	; (8008320 <prvAddNewTaskToReadyList+0xb8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d110      	bne.n	80082b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008294:	f000 fd54 	bl	8008d40 <prvInitialiseTaskLists>
 8008298:	e00d      	b.n	80082b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800829a:	4b23      	ldr	r3, [pc, #140]	; (8008328 <prvAddNewTaskToReadyList+0xc0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082a2:	4b20      	ldr	r3, [pc, #128]	; (8008324 <prvAddNewTaskToReadyList+0xbc>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d802      	bhi.n	80082b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082b0:	4a1c      	ldr	r2, [pc, #112]	; (8008324 <prvAddNewTaskToReadyList+0xbc>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082b6:	4b1d      	ldr	r3, [pc, #116]	; (800832c <prvAddNewTaskToReadyList+0xc4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3301      	adds	r3, #1
 80082bc:	4a1b      	ldr	r2, [pc, #108]	; (800832c <prvAddNewTaskToReadyList+0xc4>)
 80082be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	2201      	movs	r2, #1
 80082c6:	409a      	lsls	r2, r3
 80082c8:	4b19      	ldr	r3, [pc, #100]	; (8008330 <prvAddNewTaskToReadyList+0xc8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	4a18      	ldr	r2, [pc, #96]	; (8008330 <prvAddNewTaskToReadyList+0xc8>)
 80082d0:	6013      	str	r3, [r2, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d6:	4613      	mov	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4a15      	ldr	r2, [pc, #84]	; (8008334 <prvAddNewTaskToReadyList+0xcc>)
 80082e0:	441a      	add	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3304      	adds	r3, #4
 80082e6:	4619      	mov	r1, r3
 80082e8:	4610      	mov	r0, r2
 80082ea:	f7ff f892 	bl	8007412 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082ee:	f001 f961 	bl	80095b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082f2:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <prvAddNewTaskToReadyList+0xc0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00e      	beq.n	8008318 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082fa:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <prvAddNewTaskToReadyList+0xbc>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	429a      	cmp	r2, r3
 8008306:	d207      	bcs.n	8008318 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008308:	4b0b      	ldr	r3, [pc, #44]	; (8008338 <prvAddNewTaskToReadyList+0xd0>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008318:	bf00      	nop
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	200003b4 	.word	0x200003b4
 8008324:	200002b4 	.word	0x200002b4
 8008328:	200003c0 	.word	0x200003c0
 800832c:	200003d0 	.word	0x200003d0
 8008330:	200003bc 	.word	0x200003bc
 8008334:	200002b8 	.word	0x200002b8
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08a      	sub	sp, #40	; 0x28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008346:	2300      	movs	r3, #0
 8008348:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	617b      	str	r3, [r7, #20]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <vTaskDelayUntil+0x46>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	613b      	str	r3, [r7, #16]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008382:	4b2a      	ldr	r3, [pc, #168]	; (800842c <vTaskDelayUntil+0xf0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <vTaskDelayUntil+0x64>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	60fb      	str	r3, [r7, #12]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80083a0:	f000 f9cc 	bl	800873c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80083a4:	4b22      	ldr	r3, [pc, #136]	; (8008430 <vTaskDelayUntil+0xf4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	4413      	add	r3, r2
 80083b2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6a3a      	ldr	r2, [r7, #32]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d20b      	bcs.n	80083d6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d211      	bcs.n	80083ec <vTaskDelayUntil+0xb0>
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d90d      	bls.n	80083ec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80083d0:	2301      	movs	r3, #1
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
 80083d4:	e00a      	b.n	80083ec <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d303      	bcc.n	80083e8 <vTaskDelayUntil+0xac>
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d901      	bls.n	80083ec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80083e8:	2301      	movs	r3, #1
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d006      	beq.n	8008406 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2100      	movs	r1, #0
 8008400:	4618      	mov	r0, r3
 8008402:	f000 ff17 	bl	8009234 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008406:	f000 f9a7 	bl	8008758 <xTaskResumeAll>
 800840a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d107      	bne.n	8008422 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008412:	4b08      	ldr	r3, [pc, #32]	; (8008434 <vTaskDelayUntil+0xf8>)
 8008414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008422:	bf00      	nop
 8008424:	3728      	adds	r7, #40	; 0x28
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200003dc 	.word	0x200003dc
 8008430:	200003b8 	.word	0x200003b8
 8008434:	e000ed04 	.word	0xe000ed04

08008438 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008440:	f001 f888 	bl	8009554 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d102      	bne.n	8008450 <vTaskSuspend+0x18>
 800844a:	4b3c      	ldr	r3, [pc, #240]	; (800853c <vTaskSuspend+0x104>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	e000      	b.n	8008452 <vTaskSuspend+0x1a>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff f837 	bl	80074cc <uxListRemove>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d115      	bne.n	8008490 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008468:	4935      	ldr	r1, [pc, #212]	; (8008540 <vTaskSuspend+0x108>)
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <vTaskSuspend+0x58>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847e:	2201      	movs	r2, #1
 8008480:	fa02 f303 	lsl.w	r3, r2, r3
 8008484:	43da      	mvns	r2, r3
 8008486:	4b2f      	ldr	r3, [pc, #188]	; (8008544 <vTaskSuspend+0x10c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4013      	ands	r3, r2
 800848c:	4a2d      	ldr	r2, [pc, #180]	; (8008544 <vTaskSuspend+0x10c>)
 800848e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	2b00      	cmp	r3, #0
 8008496:	d004      	beq.n	80084a2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3318      	adds	r3, #24
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff f815 	bl	80074cc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4827      	ldr	r0, [pc, #156]	; (8008548 <vTaskSuspend+0x110>)
 80084aa:	f7fe ffb2 	bl	8007412 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d103      	bne.n	80084c2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80084c2:	f001 f877 	bl	80095b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80084c6:	4b21      	ldr	r3, [pc, #132]	; (800854c <vTaskSuspend+0x114>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d005      	beq.n	80084da <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80084ce:	f001 f841 	bl	8009554 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80084d2:	f000 fcd3 	bl	8008e7c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80084d6:	f001 f86d 	bl	80095b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80084da:	4b18      	ldr	r3, [pc, #96]	; (800853c <vTaskSuspend+0x104>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d127      	bne.n	8008534 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80084e4:	4b19      	ldr	r3, [pc, #100]	; (800854c <vTaskSuspend+0x114>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d017      	beq.n	800851c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80084ec:	4b18      	ldr	r3, [pc, #96]	; (8008550 <vTaskSuspend+0x118>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <vTaskSuspend+0xd2>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	60bb      	str	r3, [r7, #8]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800850a:	4b12      	ldr	r3, [pc, #72]	; (8008554 <vTaskSuspend+0x11c>)
 800850c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800851a:	e00b      	b.n	8008534 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <vTaskSuspend+0x110>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <vTaskSuspend+0x120>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d103      	bne.n	8008530 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8008528:	4b04      	ldr	r3, [pc, #16]	; (800853c <vTaskSuspend+0x104>)
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]
	}
 800852e:	e001      	b.n	8008534 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8008530:	f000 fa88 	bl	8008a44 <vTaskSwitchContext>
	}
 8008534:	bf00      	nop
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	200002b4 	.word	0x200002b4
 8008540:	200002b8 	.word	0x200002b8
 8008544:	200003bc 	.word	0x200003bc
 8008548:	200003a0 	.word	0x200003a0
 800854c:	200003c0 	.word	0x200003c0
 8008550:	200003dc 	.word	0x200003dc
 8008554:	e000ed04 	.word	0xe000ed04
 8008558:	200003b4 	.word	0x200003b4

0800855c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10a      	bne.n	8008588 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	60fb      	str	r3, [r7, #12]
}
 8008584:	bf00      	nop
 8008586:	e7fe      	b.n	8008586 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	4a0a      	ldr	r2, [pc, #40]	; (80085b8 <prvTaskIsTaskSuspended+0x5c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d10a      	bne.n	80085a8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008596:	4a09      	ldr	r2, [pc, #36]	; (80085bc <prvTaskIsTaskSuspended+0x60>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d005      	beq.n	80085a8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085a8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80085aa:	4618      	mov	r0, r3
 80085ac:	371c      	adds	r7, #28
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	200003a0 	.word	0x200003a0
 80085bc:	20000374 	.word	0x20000374

080085c0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <vTaskResume+0x28>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	60bb      	str	r3, [r7, #8]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80085e8:	4b20      	ldr	r3, [pc, #128]	; (800866c <vTaskResume+0xac>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d037      	beq.n	8008662 <vTaskResume+0xa2>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d034      	beq.n	8008662 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80085f8:	f000 ffac 	bl	8009554 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f7ff ffad 	bl	800855c <prvTaskIsTaskSuspended>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d02a      	beq.n	800865e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3304      	adds	r3, #4
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe ff5d 	bl	80074cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	2201      	movs	r2, #1
 8008618:	409a      	lsls	r2, r3
 800861a:	4b15      	ldr	r3, [pc, #84]	; (8008670 <vTaskResume+0xb0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4313      	orrs	r3, r2
 8008620:	4a13      	ldr	r2, [pc, #76]	; (8008670 <vTaskResume+0xb0>)
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4a10      	ldr	r2, [pc, #64]	; (8008674 <vTaskResume+0xb4>)
 8008632:	441a      	add	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3304      	adds	r3, #4
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f7fe fee9 	bl	8007412 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <vTaskResume+0xac>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	429a      	cmp	r2, r3
 800864c:	d307      	bcc.n	800865e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800864e:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <vTaskResume+0xb8>)
 8008650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800865e:	f000 ffa9 	bl	80095b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	200002b4 	.word	0x200002b4
 8008670:	200003bc 	.word	0x200003bc
 8008674:	200002b8 	.word	0x200002b8
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08a      	sub	sp, #40	; 0x28
 8008680:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800868a:	463a      	mov	r2, r7
 800868c:	1d39      	adds	r1, r7, #4
 800868e:	f107 0308 	add.w	r3, r7, #8
 8008692:	4618      	mov	r0, r3
 8008694:	f7f8 fb5e 	bl	8000d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	9202      	str	r2, [sp, #8]
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	2300      	movs	r3, #0
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	2300      	movs	r3, #0
 80086a8:	460a      	mov	r2, r1
 80086aa:	491e      	ldr	r1, [pc, #120]	; (8008724 <vTaskStartScheduler+0xa8>)
 80086ac:	481e      	ldr	r0, [pc, #120]	; (8008728 <vTaskStartScheduler+0xac>)
 80086ae:	f7ff fcb1 	bl	8008014 <xTaskCreateStatic>
 80086b2:	4603      	mov	r3, r0
 80086b4:	4a1d      	ldr	r2, [pc, #116]	; (800872c <vTaskStartScheduler+0xb0>)
 80086b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086b8:	4b1c      	ldr	r3, [pc, #112]	; (800872c <vTaskStartScheduler+0xb0>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086c0:	2301      	movs	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	e001      	b.n	80086ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d116      	bne.n	80086fe <vTaskStartScheduler+0x82>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	613b      	str	r3, [r7, #16]
}
 80086e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086e4:	4b12      	ldr	r3, [pc, #72]	; (8008730 <vTaskStartScheduler+0xb4>)
 80086e6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086ec:	4b11      	ldr	r3, [pc, #68]	; (8008734 <vTaskStartScheduler+0xb8>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086f2:	4b11      	ldr	r3, [pc, #68]	; (8008738 <vTaskStartScheduler+0xbc>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086f8:	f000 fe8a 	bl	8009410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086fc:	e00e      	b.n	800871c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008704:	d10a      	bne.n	800871c <vTaskStartScheduler+0xa0>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	60fb      	str	r3, [r7, #12]
}
 8008718:	bf00      	nop
 800871a:	e7fe      	b.n	800871a <vTaskStartScheduler+0x9e>
}
 800871c:	bf00      	nop
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	08009d60 	.word	0x08009d60
 8008728:	08008d11 	.word	0x08008d11
 800872c:	200003d8 	.word	0x200003d8
 8008730:	200003d4 	.word	0x200003d4
 8008734:	200003c0 	.word	0x200003c0
 8008738:	200003b8 	.word	0x200003b8

0800873c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <vTaskSuspendAll+0x18>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	4a03      	ldr	r2, [pc, #12]	; (8008754 <vTaskSuspendAll+0x18>)
 8008748:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800874a:	bf00      	nop
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	200003dc 	.word	0x200003dc

08008758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008762:	2300      	movs	r3, #0
 8008764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008766:	4b41      	ldr	r3, [pc, #260]	; (800886c <xTaskResumeAll+0x114>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10a      	bne.n	8008784 <xTaskResumeAll+0x2c>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	603b      	str	r3, [r7, #0]
}
 8008780:	bf00      	nop
 8008782:	e7fe      	b.n	8008782 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008784:	f000 fee6 	bl	8009554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008788:	4b38      	ldr	r3, [pc, #224]	; (800886c <xTaskResumeAll+0x114>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3b01      	subs	r3, #1
 800878e:	4a37      	ldr	r2, [pc, #220]	; (800886c <xTaskResumeAll+0x114>)
 8008790:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008792:	4b36      	ldr	r3, [pc, #216]	; (800886c <xTaskResumeAll+0x114>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d161      	bne.n	800885e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800879a:	4b35      	ldr	r3, [pc, #212]	; (8008870 <xTaskResumeAll+0x118>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d05d      	beq.n	800885e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087a2:	e02e      	b.n	8008802 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a4:	4b33      	ldr	r3, [pc, #204]	; (8008874 <xTaskResumeAll+0x11c>)
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3318      	adds	r3, #24
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fe fe8b 	bl	80074cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fe86 	bl	80074cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	2201      	movs	r2, #1
 80087c6:	409a      	lsls	r2, r3
 80087c8:	4b2b      	ldr	r3, [pc, #172]	; (8008878 <xTaskResumeAll+0x120>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	4a2a      	ldr	r2, [pc, #168]	; (8008878 <xTaskResumeAll+0x120>)
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4a27      	ldr	r2, [pc, #156]	; (800887c <xTaskResumeAll+0x124>)
 80087e0:	441a      	add	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3304      	adds	r3, #4
 80087e6:	4619      	mov	r1, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	f7fe fe12 	bl	8007412 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f2:	4b23      	ldr	r3, [pc, #140]	; (8008880 <xTaskResumeAll+0x128>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d302      	bcc.n	8008802 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80087fc:	4b21      	ldr	r3, [pc, #132]	; (8008884 <xTaskResumeAll+0x12c>)
 80087fe:	2201      	movs	r2, #1
 8008800:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <xTaskResumeAll+0x11c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1cc      	bne.n	80087a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008810:	f000 fb34 	bl	8008e7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008814:	4b1c      	ldr	r3, [pc, #112]	; (8008888 <xTaskResumeAll+0x130>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d010      	beq.n	8008842 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008820:	f000 f858 	bl	80088d4 <xTaskIncrementTick>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800882a:	4b16      	ldr	r3, [pc, #88]	; (8008884 <xTaskResumeAll+0x12c>)
 800882c:	2201      	movs	r2, #1
 800882e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3b01      	subs	r3, #1
 8008834:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f1      	bne.n	8008820 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800883c:	4b12      	ldr	r3, [pc, #72]	; (8008888 <xTaskResumeAll+0x130>)
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <xTaskResumeAll+0x12c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d009      	beq.n	800885e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800884a:	2301      	movs	r3, #1
 800884c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <xTaskResumeAll+0x134>)
 8008850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800885e:	f000 fea9 	bl	80095b4 <vPortExitCritical>

	return xAlreadyYielded;
 8008862:	68bb      	ldr	r3, [r7, #8]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	200003dc 	.word	0x200003dc
 8008870:	200003b4 	.word	0x200003b4
 8008874:	20000374 	.word	0x20000374
 8008878:	200003bc 	.word	0x200003bc
 800887c:	200002b8 	.word	0x200002b8
 8008880:	200002b4 	.word	0x200002b4
 8008884:	200003c8 	.word	0x200003c8
 8008888:	200003c4 	.word	0x200003c4
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008896:	4b05      	ldr	r3, [pc, #20]	; (80088ac <xTaskGetTickCount+0x1c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800889c:	687b      	ldr	r3, [r7, #4]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	200003b8 	.word	0x200003b8

080088b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088b6:	f000 ff2f 	bl	8009718 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80088ba:	2300      	movs	r3, #0
 80088bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80088be:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <xTaskGetTickCountFromISR+0x20>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088c4:	683b      	ldr	r3, [r7, #0]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	200003b8 	.word	0x200003b8

080088d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088de:	4b4e      	ldr	r3, [pc, #312]	; (8008a18 <xTaskIncrementTick+0x144>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 808e 	bne.w	8008a04 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088e8:	4b4c      	ldr	r3, [pc, #304]	; (8008a1c <xTaskIncrementTick+0x148>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3301      	adds	r3, #1
 80088ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088f0:	4a4a      	ldr	r2, [pc, #296]	; (8008a1c <xTaskIncrementTick+0x148>)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d120      	bne.n	800893e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088fc:	4b48      	ldr	r3, [pc, #288]	; (8008a20 <xTaskIncrementTick+0x14c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <xTaskIncrementTick+0x48>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	603b      	str	r3, [r7, #0]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <xTaskIncrementTick+0x46>
 800891c:	4b40      	ldr	r3, [pc, #256]	; (8008a20 <xTaskIncrementTick+0x14c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	4b40      	ldr	r3, [pc, #256]	; (8008a24 <xTaskIncrementTick+0x150>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a3e      	ldr	r2, [pc, #248]	; (8008a20 <xTaskIncrementTick+0x14c>)
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	4a3e      	ldr	r2, [pc, #248]	; (8008a24 <xTaskIncrementTick+0x150>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	4b3d      	ldr	r3, [pc, #244]	; (8008a28 <xTaskIncrementTick+0x154>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	4a3c      	ldr	r2, [pc, #240]	; (8008a28 <xTaskIncrementTick+0x154>)
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	f000 fa9f 	bl	8008e7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800893e:	4b3b      	ldr	r3, [pc, #236]	; (8008a2c <xTaskIncrementTick+0x158>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	429a      	cmp	r2, r3
 8008946:	d348      	bcc.n	80089da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008948:	4b35      	ldr	r3, [pc, #212]	; (8008a20 <xTaskIncrementTick+0x14c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d104      	bne.n	800895c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008952:	4b36      	ldr	r3, [pc, #216]	; (8008a2c <xTaskIncrementTick+0x158>)
 8008954:	f04f 32ff 	mov.w	r2, #4294967295
 8008958:	601a      	str	r2, [r3, #0]
					break;
 800895a:	e03e      	b.n	80089da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800895c:	4b30      	ldr	r3, [pc, #192]	; (8008a20 <xTaskIncrementTick+0x14c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d203      	bcs.n	800897c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008974:	4a2d      	ldr	r2, [pc, #180]	; (8008a2c <xTaskIncrementTick+0x158>)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800897a:	e02e      	b.n	80089da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	3304      	adds	r3, #4
 8008980:	4618      	mov	r0, r3
 8008982:	f7fe fda3 	bl	80074cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	2b00      	cmp	r3, #0
 800898c:	d004      	beq.n	8008998 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	3318      	adds	r3, #24
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fd9a 	bl	80074cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	2201      	movs	r2, #1
 800899e:	409a      	lsls	r2, r3
 80089a0:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <xTaskIncrementTick+0x15c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	4a22      	ldr	r2, [pc, #136]	; (8008a30 <xTaskIncrementTick+0x15c>)
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4a1f      	ldr	r2, [pc, #124]	; (8008a34 <xTaskIncrementTick+0x160>)
 80089b8:	441a      	add	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	3304      	adds	r3, #4
 80089be:	4619      	mov	r1, r3
 80089c0:	4610      	mov	r0, r2
 80089c2:	f7fe fd26 	bl	8007412 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ca:	4b1b      	ldr	r3, [pc, #108]	; (8008a38 <xTaskIncrementTick+0x164>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d3b9      	bcc.n	8008948 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089d4:	2301      	movs	r3, #1
 80089d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089d8:	e7b6      	b.n	8008948 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089da:	4b17      	ldr	r3, [pc, #92]	; (8008a38 <xTaskIncrementTick+0x164>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	4914      	ldr	r1, [pc, #80]	; (8008a34 <xTaskIncrementTick+0x160>)
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	440b      	add	r3, r1
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d901      	bls.n	80089f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80089f2:	2301      	movs	r3, #1
 80089f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089f6:	4b11      	ldr	r3, [pc, #68]	; (8008a3c <xTaskIncrementTick+0x168>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d007      	beq.n	8008a0e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80089fe:	2301      	movs	r3, #1
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	e004      	b.n	8008a0e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a04:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <xTaskIncrementTick+0x16c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	4a0d      	ldr	r2, [pc, #52]	; (8008a40 <xTaskIncrementTick+0x16c>)
 8008a0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a0e:	697b      	ldr	r3, [r7, #20]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	200003dc 	.word	0x200003dc
 8008a1c:	200003b8 	.word	0x200003b8
 8008a20:	2000036c 	.word	0x2000036c
 8008a24:	20000370 	.word	0x20000370
 8008a28:	200003cc 	.word	0x200003cc
 8008a2c:	200003d4 	.word	0x200003d4
 8008a30:	200003bc 	.word	0x200003bc
 8008a34:	200002b8 	.word	0x200002b8
 8008a38:	200002b4 	.word	0x200002b4
 8008a3c:	200003c8 	.word	0x200003c8
 8008a40:	200003c4 	.word	0x200003c4

08008a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a4a:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <vTaskSwitchContext+0xa4>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a52:	4b26      	ldr	r3, [pc, #152]	; (8008aec <vTaskSwitchContext+0xa8>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a58:	e03f      	b.n	8008ada <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008a5a:	4b24      	ldr	r3, [pc, #144]	; (8008aec <vTaskSwitchContext+0xa8>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a60:	4b23      	ldr	r3, [pc, #140]	; (8008af0 <vTaskSwitchContext+0xac>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	fab3 f383 	clz	r3, r3
 8008a6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a6e:	7afb      	ldrb	r3, [r7, #11]
 8008a70:	f1c3 031f 	rsb	r3, r3, #31
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	491f      	ldr	r1, [pc, #124]	; (8008af4 <vTaskSwitchContext+0xb0>)
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	607b      	str	r3, [r7, #4]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <vTaskSwitchContext+0x5a>
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4a12      	ldr	r2, [pc, #72]	; (8008af4 <vTaskSwitchContext+0xb0>)
 8008aac:	4413      	add	r3, r2
 8008aae:	613b      	str	r3, [r7, #16]
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	605a      	str	r2, [r3, #4]
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d104      	bne.n	8008ad0 <vTaskSwitchContext+0x8c>
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	605a      	str	r2, [r3, #4]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	4a08      	ldr	r2, [pc, #32]	; (8008af8 <vTaskSwitchContext+0xb4>)
 8008ad8:	6013      	str	r3, [r2, #0]
}
 8008ada:	bf00      	nop
 8008adc:	371c      	adds	r7, #28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	200003dc 	.word	0x200003dc
 8008aec:	200003c8 	.word	0x200003c8
 8008af0:	200003bc 	.word	0x200003bc
 8008af4:	200002b8 	.word	0x200002b8
 8008af8:	200002b4 	.word	0x200002b4

08008afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	60fb      	str	r3, [r7, #12]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b22:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <vTaskPlaceOnEventList+0x44>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3318      	adds	r3, #24
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fe fc95 	bl	800745a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b30:	2101      	movs	r1, #1
 8008b32:	6838      	ldr	r0, [r7, #0]
 8008b34:	f000 fb7e 	bl	8009234 <prvAddCurrentTaskToDelayedList>
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	200002b4 	.word	0x200002b4

08008b44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	60fb      	str	r3, [r7, #12]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	3318      	adds	r3, #24
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fca9 	bl	80074cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b7a:	4b1d      	ldr	r3, [pc, #116]	; (8008bf0 <xTaskRemoveFromEventList+0xac>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d11c      	bne.n	8008bbc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fca0 	bl	80074cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	2201      	movs	r2, #1
 8008b92:	409a      	lsls	r2, r3
 8008b94:	4b17      	ldr	r3, [pc, #92]	; (8008bf4 <xTaskRemoveFromEventList+0xb0>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	4a16      	ldr	r2, [pc, #88]	; (8008bf4 <xTaskRemoveFromEventList+0xb0>)
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4a13      	ldr	r2, [pc, #76]	; (8008bf8 <xTaskRemoveFromEventList+0xb4>)
 8008bac:	441a      	add	r2, r3
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f7fe fc2c 	bl	8007412 <vListInsertEnd>
 8008bba:	e005      	b.n	8008bc8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	3318      	adds	r3, #24
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	480e      	ldr	r0, [pc, #56]	; (8008bfc <xTaskRemoveFromEventList+0xb8>)
 8008bc4:	f7fe fc25 	bl	8007412 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <xTaskRemoveFromEventList+0xbc>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d905      	bls.n	8008be2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <xTaskRemoveFromEventList+0xc0>)
 8008bdc:	2201      	movs	r2, #1
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	e001      	b.n	8008be6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008be6:	697b      	ldr	r3, [r7, #20]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	200003dc 	.word	0x200003dc
 8008bf4:	200003bc 	.word	0x200003bc
 8008bf8:	200002b8 	.word	0x200002b8
 8008bfc:	20000374 	.word	0x20000374
 8008c00:	200002b4 	.word	0x200002b4
 8008c04:	200003c8 	.word	0x200003c8

08008c08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c10:	4b06      	ldr	r3, [pc, #24]	; (8008c2c <vTaskInternalSetTimeOutState+0x24>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <vTaskInternalSetTimeOutState+0x28>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	605a      	str	r2, [r3, #4]
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	200003cc 	.word	0x200003cc
 8008c30:	200003b8 	.word	0x200003b8

08008c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10a      	bne.n	8008c5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	613b      	str	r3, [r7, #16]
}
 8008c56:	bf00      	nop
 8008c58:	e7fe      	b.n	8008c58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	60fb      	str	r3, [r7, #12]
}
 8008c72:	bf00      	nop
 8008c74:	e7fe      	b.n	8008c74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c76:	f000 fc6d 	bl	8009554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c7a:	4b1d      	ldr	r3, [pc, #116]	; (8008cf0 <xTaskCheckForTimeOut+0xbc>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	d102      	bne.n	8008c9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	61fb      	str	r3, [r7, #28]
 8008c98:	e023      	b.n	8008ce2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4b15      	ldr	r3, [pc, #84]	; (8008cf4 <xTaskCheckForTimeOut+0xc0>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d007      	beq.n	8008cb6 <xTaskCheckForTimeOut+0x82>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d302      	bcc.n	8008cb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	61fb      	str	r3, [r7, #28]
 8008cb4:	e015      	b.n	8008ce2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d20b      	bcs.n	8008cd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	1ad2      	subs	r2, r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7ff ff9b 	bl	8008c08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	e004      	b.n	8008ce2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ce2:	f000 fc67 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 8008ce6:	69fb      	ldr	r3, [r7, #28]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3720      	adds	r7, #32
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	200003b8 	.word	0x200003b8
 8008cf4:	200003cc 	.word	0x200003cc

08008cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008cfc:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <vTaskMissedYield+0x14>)
 8008cfe:	2201      	movs	r2, #1
 8008d00:	601a      	str	r2, [r3, #0]
}
 8008d02:	bf00      	nop
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	200003c8 	.word	0x200003c8

08008d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d18:	f000 f852 	bl	8008dc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d1c:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <prvIdleTask+0x28>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d9f9      	bls.n	8008d18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <prvIdleTask+0x2c>)
 8008d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d34:	e7f0      	b.n	8008d18 <prvIdleTask+0x8>
 8008d36:	bf00      	nop
 8008d38:	200002b8 	.word	0x200002b8
 8008d3c:	e000ed04 	.word	0xe000ed04

08008d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d46:	2300      	movs	r3, #0
 8008d48:	607b      	str	r3, [r7, #4]
 8008d4a:	e00c      	b.n	8008d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4a12      	ldr	r2, [pc, #72]	; (8008da0 <prvInitialiseTaskLists+0x60>)
 8008d58:	4413      	add	r3, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fe fb2c 	bl	80073b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3301      	adds	r3, #1
 8008d64:	607b      	str	r3, [r7, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b06      	cmp	r3, #6
 8008d6a:	d9ef      	bls.n	8008d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d6c:	480d      	ldr	r0, [pc, #52]	; (8008da4 <prvInitialiseTaskLists+0x64>)
 8008d6e:	f7fe fb23 	bl	80073b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d72:	480d      	ldr	r0, [pc, #52]	; (8008da8 <prvInitialiseTaskLists+0x68>)
 8008d74:	f7fe fb20 	bl	80073b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d78:	480c      	ldr	r0, [pc, #48]	; (8008dac <prvInitialiseTaskLists+0x6c>)
 8008d7a:	f7fe fb1d 	bl	80073b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d7e:	480c      	ldr	r0, [pc, #48]	; (8008db0 <prvInitialiseTaskLists+0x70>)
 8008d80:	f7fe fb1a 	bl	80073b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d84:	480b      	ldr	r0, [pc, #44]	; (8008db4 <prvInitialiseTaskLists+0x74>)
 8008d86:	f7fe fb17 	bl	80073b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d8a:	4b0b      	ldr	r3, [pc, #44]	; (8008db8 <prvInitialiseTaskLists+0x78>)
 8008d8c:	4a05      	ldr	r2, [pc, #20]	; (8008da4 <prvInitialiseTaskLists+0x64>)
 8008d8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <prvInitialiseTaskLists+0x7c>)
 8008d92:	4a05      	ldr	r2, [pc, #20]	; (8008da8 <prvInitialiseTaskLists+0x68>)
 8008d94:	601a      	str	r2, [r3, #0]
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	200002b8 	.word	0x200002b8
 8008da4:	20000344 	.word	0x20000344
 8008da8:	20000358 	.word	0x20000358
 8008dac:	20000374 	.word	0x20000374
 8008db0:	20000388 	.word	0x20000388
 8008db4:	200003a0 	.word	0x200003a0
 8008db8:	2000036c 	.word	0x2000036c
 8008dbc:	20000370 	.word	0x20000370

08008dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dc6:	e019      	b.n	8008dfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dc8:	f000 fbc4 	bl	8009554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dcc:	4b10      	ldr	r3, [pc, #64]	; (8008e10 <prvCheckTasksWaitingTermination+0x50>)
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fb77 	bl	80074cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dde:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <prvCheckTasksWaitingTermination+0x54>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	4a0b      	ldr	r2, [pc, #44]	; (8008e14 <prvCheckTasksWaitingTermination+0x54>)
 8008de6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008de8:	4b0b      	ldr	r3, [pc, #44]	; (8008e18 <prvCheckTasksWaitingTermination+0x58>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	4a0a      	ldr	r2, [pc, #40]	; (8008e18 <prvCheckTasksWaitingTermination+0x58>)
 8008df0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008df2:	f000 fbdf 	bl	80095b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f810 	bl	8008e1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dfc:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <prvCheckTasksWaitingTermination+0x58>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1e1      	bne.n	8008dc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000388 	.word	0x20000388
 8008e14:	200003b4 	.word	0x200003b4
 8008e18:	2000039c 	.word	0x2000039c

08008e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d108      	bne.n	8008e40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fd7c 	bl	8009930 <vPortFree>
				vPortFree( pxTCB );
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fd79 	bl	8009930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e3e:	e018      	b.n	8008e72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d103      	bne.n	8008e52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fd70 	bl	8009930 <vPortFree>
	}
 8008e50:	e00f      	b.n	8008e72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d00a      	beq.n	8008e72 <prvDeleteTCB+0x56>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60fb      	str	r3, [r7, #12]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <prvDeleteTCB+0x54>
	}
 8008e72:	bf00      	nop
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e82:	4b0c      	ldr	r3, [pc, #48]	; (8008eb4 <prvResetNextTaskUnblockTime+0x38>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d104      	bne.n	8008e96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <prvResetNextTaskUnblockTime+0x3c>)
 8008e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e94:	e008      	b.n	8008ea8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e96:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <prvResetNextTaskUnblockTime+0x38>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	4a04      	ldr	r2, [pc, #16]	; (8008eb8 <prvResetNextTaskUnblockTime+0x3c>)
 8008ea6:	6013      	str	r3, [r2, #0]
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	2000036c 	.word	0x2000036c
 8008eb8:	200003d4 	.word	0x200003d4

08008ebc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ec2:	4b0b      	ldr	r3, [pc, #44]	; (8008ef0 <xTaskGetSchedulerState+0x34>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d102      	bne.n	8008ed0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	607b      	str	r3, [r7, #4]
 8008ece:	e008      	b.n	8008ee2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ed0:	4b08      	ldr	r3, [pc, #32]	; (8008ef4 <xTaskGetSchedulerState+0x38>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	607b      	str	r3, [r7, #4]
 8008edc:	e001      	b.n	8008ee2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ee2:	687b      	ldr	r3, [r7, #4]
	}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	200003c0 	.word	0x200003c0
 8008ef4:	200003dc 	.word	0x200003dc

08008ef8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d05e      	beq.n	8008fcc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f12:	4b31      	ldr	r3, [pc, #196]	; (8008fd8 <xTaskPriorityInherit+0xe0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d24e      	bcs.n	8008fba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	db06      	blt.n	8008f32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f24:	4b2c      	ldr	r3, [pc, #176]	; (8008fd8 <xTaskPriorityInherit+0xe0>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2a:	f1c3 0207 	rsb	r2, r3, #7
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	6959      	ldr	r1, [r3, #20]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4a26      	ldr	r2, [pc, #152]	; (8008fdc <xTaskPriorityInherit+0xe4>)
 8008f44:	4413      	add	r3, r2
 8008f46:	4299      	cmp	r1, r3
 8008f48:	d12f      	bne.n	8008faa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fabc 	bl	80074cc <uxListRemove>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	2201      	movs	r2, #1
 8008f60:	fa02 f303 	lsl.w	r3, r2, r3
 8008f64:	43da      	mvns	r2, r3
 8008f66:	4b1e      	ldr	r3, [pc, #120]	; (8008fe0 <xTaskPriorityInherit+0xe8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	4a1c      	ldr	r2, [pc, #112]	; (8008fe0 <xTaskPriorityInherit+0xe8>)
 8008f6e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f70:	4b19      	ldr	r3, [pc, #100]	; (8008fd8 <xTaskPriorityInherit+0xe0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	2201      	movs	r2, #1
 8008f80:	409a      	lsls	r2, r3
 8008f82:	4b17      	ldr	r3, [pc, #92]	; (8008fe0 <xTaskPriorityInherit+0xe8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	4a15      	ldr	r2, [pc, #84]	; (8008fe0 <xTaskPriorityInherit+0xe8>)
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4a10      	ldr	r2, [pc, #64]	; (8008fdc <xTaskPriorityInherit+0xe4>)
 8008f9a:	441a      	add	r2, r3
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	f7fe fa35 	bl	8007412 <vListInsertEnd>
 8008fa8:	e004      	b.n	8008fb4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008faa:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <xTaskPriorityInherit+0xe0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	e008      	b.n	8008fcc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fbe:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <xTaskPriorityInherit+0xe0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d201      	bcs.n	8008fcc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
	}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	200002b4 	.word	0x200002b4
 8008fdc:	200002b8 	.word	0x200002b8
 8008fe0:	200003bc 	.word	0x200003bc

08008fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d06e      	beq.n	80090d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ffa:	4b3a      	ldr	r3, [pc, #232]	; (80090e4 <xTaskPriorityDisinherit+0x100>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	429a      	cmp	r2, r3
 8009002:	d00a      	beq.n	800901a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	60fb      	str	r3, [r7, #12]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	60bb      	str	r3, [r7, #8]
}
 8009034:	bf00      	nop
 8009036:	e7fe      	b.n	8009036 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800903c:	1e5a      	subs	r2, r3, #1
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904a:	429a      	cmp	r2, r3
 800904c:	d044      	beq.n	80090d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009052:	2b00      	cmp	r3, #0
 8009054:	d140      	bne.n	80090d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3304      	adds	r3, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fa36 	bl	80074cc <uxListRemove>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d115      	bne.n	8009092 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	491f      	ldr	r1, [pc, #124]	; (80090e8 <xTaskPriorityDisinherit+0x104>)
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <xTaskPriorityDisinherit+0xae>
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	2201      	movs	r2, #1
 8009082:	fa02 f303 	lsl.w	r3, r2, r3
 8009086:	43da      	mvns	r2, r3
 8009088:	4b18      	ldr	r3, [pc, #96]	; (80090ec <xTaskPriorityDisinherit+0x108>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4013      	ands	r3, r2
 800908e:	4a17      	ldr	r2, [pc, #92]	; (80090ec <xTaskPriorityDisinherit+0x108>)
 8009090:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	f1c3 0207 	rsb	r2, r3, #7
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090aa:	2201      	movs	r2, #1
 80090ac:	409a      	lsls	r2, r3
 80090ae:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <xTaskPriorityDisinherit+0x108>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	4a0d      	ldr	r2, [pc, #52]	; (80090ec <xTaskPriorityDisinherit+0x108>)
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090bc:	4613      	mov	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4a08      	ldr	r2, [pc, #32]	; (80090e8 <xTaskPriorityDisinherit+0x104>)
 80090c6:	441a      	add	r2, r3
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	3304      	adds	r3, #4
 80090cc:	4619      	mov	r1, r3
 80090ce:	4610      	mov	r0, r2
 80090d0:	f7fe f99f 	bl	8007412 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090d4:	2301      	movs	r3, #1
 80090d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090d8:	697b      	ldr	r3, [r7, #20]
	}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	200002b4 	.word	0x200002b4
 80090e8:	200002b8 	.word	0x200002b8
 80090ec:	200003bc 	.word	0x200003bc

080090f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80090fe:	2301      	movs	r3, #1
 8009100:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d077      	beq.n	80091f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	60fb      	str	r3, [r7, #12]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d902      	bls.n	8009136 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	e002      	b.n	800913c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	69fa      	ldr	r2, [r7, #28]
 8009142:	429a      	cmp	r2, r3
 8009144:	d058      	beq.n	80091f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	429a      	cmp	r2, r3
 800914e:	d153      	bne.n	80091f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009150:	4b2b      	ldr	r3, [pc, #172]	; (8009200 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	429a      	cmp	r2, r3
 8009158:	d10a      	bne.n	8009170 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	60bb      	str	r3, [r7, #8]
}
 800916c:	bf00      	nop
 800916e:	e7fe      	b.n	800916e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db04      	blt.n	800918e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	f1c3 0207 	rsb	r2, r3, #7
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	6959      	ldr	r1, [r3, #20]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	4613      	mov	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4a19      	ldr	r2, [pc, #100]	; (8009204 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800919e:	4413      	add	r3, r2
 80091a0:	4299      	cmp	r1, r3
 80091a2:	d129      	bne.n	80091f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fe f98f 	bl	80074cc <uxListRemove>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b8:	2201      	movs	r2, #1
 80091ba:	fa02 f303 	lsl.w	r3, r2, r3
 80091be:	43da      	mvns	r2, r3
 80091c0:	4b11      	ldr	r3, [pc, #68]	; (8009208 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4013      	ands	r3, r2
 80091c6:	4a10      	ldr	r2, [pc, #64]	; (8009208 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80091c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ce:	2201      	movs	r2, #1
 80091d0:	409a      	lsls	r2, r3
 80091d2:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4a06      	ldr	r2, [pc, #24]	; (8009204 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80091ea:	441a      	add	r2, r3
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4619      	mov	r1, r3
 80091f2:	4610      	mov	r0, r2
 80091f4:	f7fe f90d 	bl	8007412 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091f8:	bf00      	nop
 80091fa:	3720      	adds	r7, #32
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200002b4 	.word	0x200002b4
 8009204:	200002b8 	.word	0x200002b8
 8009208:	200003bc 	.word	0x200003bc

0800920c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009210:	4b07      	ldr	r3, [pc, #28]	; (8009230 <pvTaskIncrementMutexHeldCount+0x24>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d004      	beq.n	8009222 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009218:	4b05      	ldr	r3, [pc, #20]	; (8009230 <pvTaskIncrementMutexHeldCount+0x24>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800921e:	3201      	adds	r2, #1
 8009220:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009222:	4b03      	ldr	r3, [pc, #12]	; (8009230 <pvTaskIncrementMutexHeldCount+0x24>)
 8009224:	681b      	ldr	r3, [r3, #0]
	}
 8009226:	4618      	mov	r0, r3
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	200002b4 	.word	0x200002b4

08009234 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800923e:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009244:	4b28      	ldr	r3, [pc, #160]	; (80092e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3304      	adds	r3, #4
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe f93e 	bl	80074cc <uxListRemove>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10b      	bne.n	800926e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009256:	4b24      	ldr	r3, [pc, #144]	; (80092e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	2201      	movs	r2, #1
 800925e:	fa02 f303 	lsl.w	r3, r2, r3
 8009262:	43da      	mvns	r2, r3
 8009264:	4b21      	ldr	r3, [pc, #132]	; (80092ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4013      	ands	r3, r2
 800926a:	4a20      	ldr	r2, [pc, #128]	; (80092ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800926c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009274:	d10a      	bne.n	800928c <prvAddCurrentTaskToDelayedList+0x58>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d007      	beq.n	800928c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800927c:	4b1a      	ldr	r3, [pc, #104]	; (80092e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3304      	adds	r3, #4
 8009282:	4619      	mov	r1, r3
 8009284:	481a      	ldr	r0, [pc, #104]	; (80092f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009286:	f7fe f8c4 	bl	8007412 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800928a:	e026      	b.n	80092da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4413      	add	r3, r2
 8009292:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009294:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d209      	bcs.n	80092b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092a4:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3304      	adds	r3, #4
 80092ae:	4619      	mov	r1, r3
 80092b0:	4610      	mov	r0, r2
 80092b2:	f7fe f8d2 	bl	800745a <vListInsert>
}
 80092b6:	e010      	b.n	80092da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092b8:	4b0f      	ldr	r3, [pc, #60]	; (80092f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3304      	adds	r3, #4
 80092c2:	4619      	mov	r1, r3
 80092c4:	4610      	mov	r0, r2
 80092c6:	f7fe f8c8 	bl	800745a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092ca:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d202      	bcs.n	80092da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80092d4:	4a09      	ldr	r2, [pc, #36]	; (80092fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6013      	str	r3, [r2, #0]
}
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	200003b8 	.word	0x200003b8
 80092e8:	200002b4 	.word	0x200002b4
 80092ec:	200003bc 	.word	0x200003bc
 80092f0:	200003a0 	.word	0x200003a0
 80092f4:	20000370 	.word	0x20000370
 80092f8:	2000036c 	.word	0x2000036c
 80092fc:	200003d4 	.word	0x200003d4

08009300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3b04      	subs	r3, #4
 8009310:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3b04      	subs	r3, #4
 800931e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f023 0201 	bic.w	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3b04      	subs	r3, #4
 800932e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009330:	4a0c      	ldr	r2, [pc, #48]	; (8009364 <pxPortInitialiseStack+0x64>)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3b14      	subs	r3, #20
 800933a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3b04      	subs	r3, #4
 8009346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f06f 0202 	mvn.w	r2, #2
 800934e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3b20      	subs	r3, #32
 8009354:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009356:	68fb      	ldr	r3, [r7, #12]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	08009369 	.word	0x08009369

08009368 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009372:	4b12      	ldr	r3, [pc, #72]	; (80093bc <prvTaskExitError+0x54>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937a:	d00a      	beq.n	8009392 <prvTaskExitError+0x2a>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	60fb      	str	r3, [r7, #12]
}
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <prvTaskExitError+0x28>
	__asm volatile
 8009392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	60bb      	str	r3, [r7, #8]
}
 80093a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093a6:	bf00      	nop
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0fc      	beq.n	80093a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	20000018 	.word	0x20000018

080093c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093c0:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <pxCurrentTCBConst2>)
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	6808      	ldr	r0, [r1, #0]
 80093c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	f380 8809 	msr	PSP, r0
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f04f 0000 	mov.w	r0, #0
 80093d6:	f380 8811 	msr	BASEPRI, r0
 80093da:	4770      	bx	lr
 80093dc:	f3af 8000 	nop.w

080093e0 <pxCurrentTCBConst2>:
 80093e0:	200002b4 	.word	0x200002b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop

080093e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093e8:	4808      	ldr	r0, [pc, #32]	; (800940c <prvPortStartFirstTask+0x24>)
 80093ea:	6800      	ldr	r0, [r0, #0]
 80093ec:	6800      	ldr	r0, [r0, #0]
 80093ee:	f380 8808 	msr	MSP, r0
 80093f2:	f04f 0000 	mov.w	r0, #0
 80093f6:	f380 8814 	msr	CONTROL, r0
 80093fa:	b662      	cpsie	i
 80093fc:	b661      	cpsie	f
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	df00      	svc	0
 8009408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800940a:	bf00      	nop
 800940c:	e000ed08 	.word	0xe000ed08

08009410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009416:	4b46      	ldr	r3, [pc, #280]	; (8009530 <xPortStartScheduler+0x120>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a46      	ldr	r2, [pc, #280]	; (8009534 <xPortStartScheduler+0x124>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10a      	bne.n	8009436 <xPortStartScheduler+0x26>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	613b      	str	r3, [r7, #16]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009436:	4b3e      	ldr	r3, [pc, #248]	; (8009530 <xPortStartScheduler+0x120>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a3f      	ldr	r2, [pc, #252]	; (8009538 <xPortStartScheduler+0x128>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d10a      	bne.n	8009456 <xPortStartScheduler+0x46>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60fb      	str	r3, [r7, #12]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009456:	4b39      	ldr	r3, [pc, #228]	; (800953c <xPortStartScheduler+0x12c>)
 8009458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	22ff      	movs	r2, #255	; 0xff
 8009466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009478:	b2da      	uxtb	r2, r3
 800947a:	4b31      	ldr	r3, [pc, #196]	; (8009540 <xPortStartScheduler+0x130>)
 800947c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800947e:	4b31      	ldr	r3, [pc, #196]	; (8009544 <xPortStartScheduler+0x134>)
 8009480:	2207      	movs	r2, #7
 8009482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009484:	e009      	b.n	800949a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009486:	4b2f      	ldr	r3, [pc, #188]	; (8009544 <xPortStartScheduler+0x134>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3b01      	subs	r3, #1
 800948c:	4a2d      	ldr	r2, [pc, #180]	; (8009544 <xPortStartScheduler+0x134>)
 800948e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	b2db      	uxtb	r3, r3
 8009498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b80      	cmp	r3, #128	; 0x80
 80094a4:	d0ef      	beq.n	8009486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094a6:	4b27      	ldr	r3, [pc, #156]	; (8009544 <xPortStartScheduler+0x134>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1c3 0307 	rsb	r3, r3, #7
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d00a      	beq.n	80094c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	60bb      	str	r3, [r7, #8]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094c8:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <xPortStartScheduler+0x134>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <xPortStartScheduler+0x134>)
 80094d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <xPortStartScheduler+0x134>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094da:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <xPortStartScheduler+0x134>)
 80094dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094e6:	4b18      	ldr	r3, [pc, #96]	; (8009548 <xPortStartScheduler+0x138>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a17      	ldr	r2, [pc, #92]	; (8009548 <xPortStartScheduler+0x138>)
 80094ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094f2:	4b15      	ldr	r3, [pc, #84]	; (8009548 <xPortStartScheduler+0x138>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a14      	ldr	r2, [pc, #80]	; (8009548 <xPortStartScheduler+0x138>)
 80094f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094fe:	f000 f8dd 	bl	80096bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009502:	4b12      	ldr	r3, [pc, #72]	; (800954c <xPortStartScheduler+0x13c>)
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009508:	f000 f8fc 	bl	8009704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800950c:	4b10      	ldr	r3, [pc, #64]	; (8009550 <xPortStartScheduler+0x140>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0f      	ldr	r2, [pc, #60]	; (8009550 <xPortStartScheduler+0x140>)
 8009512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009518:	f7ff ff66 	bl	80093e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800951c:	f7ff fa92 	bl	8008a44 <vTaskSwitchContext>
	prvTaskExitError();
 8009520:	f7ff ff22 	bl	8009368 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	e000ed00 	.word	0xe000ed00
 8009534:	410fc271 	.word	0x410fc271
 8009538:	410fc270 	.word	0x410fc270
 800953c:	e000e400 	.word	0xe000e400
 8009540:	200003e0 	.word	0x200003e0
 8009544:	200003e4 	.word	0x200003e4
 8009548:	e000ed20 	.word	0xe000ed20
 800954c:	20000018 	.word	0x20000018
 8009550:	e000ef34 	.word	0xe000ef34

08009554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	607b      	str	r3, [r7, #4]
}
 800956c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800956e:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <vPortEnterCritical+0x58>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	4a0d      	ldr	r2, [pc, #52]	; (80095ac <vPortEnterCritical+0x58>)
 8009576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009578:	4b0c      	ldr	r3, [pc, #48]	; (80095ac <vPortEnterCritical+0x58>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d10f      	bne.n	80095a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <vPortEnterCritical+0x5c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	603b      	str	r3, [r7, #0]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <vPortEnterCritical+0x4a>
	}
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	20000018 	.word	0x20000018
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095ba:	4b12      	ldr	r3, [pc, #72]	; (8009604 <vPortExitCritical+0x50>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <vPortExitCritical+0x24>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	607b      	str	r3, [r7, #4]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <vPortExitCritical+0x50>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3b01      	subs	r3, #1
 80095de:	4a09      	ldr	r2, [pc, #36]	; (8009604 <vPortExitCritical+0x50>)
 80095e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095e2:	4b08      	ldr	r3, [pc, #32]	; (8009604 <vPortExitCritical+0x50>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <vPortExitCritical+0x42>
 80095ea:	2300      	movs	r3, #0
 80095ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	f383 8811 	msr	BASEPRI, r3
}
 80095f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000018 	.word	0x20000018
	...

08009610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009610:	f3ef 8009 	mrs	r0, PSP
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	4b15      	ldr	r3, [pc, #84]	; (8009670 <pxCurrentTCBConst>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	f01e 0f10 	tst.w	lr, #16
 8009620:	bf08      	it	eq
 8009622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962a:	6010      	str	r0, [r2, #0]
 800962c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009634:	f380 8811 	msr	BASEPRI, r0
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f7ff fa00 	bl	8008a44 <vTaskSwitchContext>
 8009644:	f04f 0000 	mov.w	r0, #0
 8009648:	f380 8811 	msr	BASEPRI, r0
 800964c:	bc09      	pop	{r0, r3}
 800964e:	6819      	ldr	r1, [r3, #0]
 8009650:	6808      	ldr	r0, [r1, #0]
 8009652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009656:	f01e 0f10 	tst.w	lr, #16
 800965a:	bf08      	it	eq
 800965c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009660:	f380 8809 	msr	PSP, r0
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	f3af 8000 	nop.w

08009670 <pxCurrentTCBConst>:
 8009670:	200002b4 	.word	0x200002b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop

08009678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	607b      	str	r3, [r7, #4]
}
 8009690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009692:	f7ff f91f 	bl	80088d4 <xTaskIncrementTick>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <SysTick_Handler+0x40>)
 800969e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	2300      	movs	r3, #0
 80096a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	f383 8811 	msr	BASEPRI, r3
}
 80096ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <vPortSetupTimerInterrupt+0x38>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <vPortSetupTimerInterrupt+0x3c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <vPortSetupTimerInterrupt+0x40>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	4a09      	ldr	r2, [pc, #36]	; (8009700 <vPortSetupTimerInterrupt+0x44>)
 80096da:	3b01      	subs	r3, #1
 80096dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096e0:	2207      	movs	r2, #7
 80096e2:	601a      	str	r2, [r3, #0]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	e000e010 	.word	0xe000e010
 80096f4:	e000e018 	.word	0xe000e018
 80096f8:	2000000c 	.word	0x2000000c
 80096fc:	10624dd3 	.word	0x10624dd3
 8009700:	e000e014 	.word	0xe000e014

08009704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009714 <vPortEnableVFP+0x10>
 8009708:	6801      	ldr	r1, [r0, #0]
 800970a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800970e:	6001      	str	r1, [r0, #0]
 8009710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009712:	bf00      	nop
 8009714:	e000ed88 	.word	0xe000ed88

08009718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800971e:	f3ef 8305 	mrs	r3, IPSR
 8009722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b0f      	cmp	r3, #15
 8009728:	d914      	bls.n	8009754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800972a:	4a17      	ldr	r2, [pc, #92]	; (8009788 <vPortValidateInterruptPriority+0x70>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009734:	4b15      	ldr	r3, [pc, #84]	; (800978c <vPortValidateInterruptPriority+0x74>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	7afa      	ldrb	r2, [r7, #11]
 800973a:	429a      	cmp	r2, r3
 800973c:	d20a      	bcs.n	8009754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	607b      	str	r3, [r7, #4]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <vPortValidateInterruptPriority+0x78>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800975c:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <vPortValidateInterruptPriority+0x7c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d90a      	bls.n	800977a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	603b      	str	r3, [r7, #0]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <vPortValidateInterruptPriority+0x60>
	}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	e000e3f0 	.word	0xe000e3f0
 800978c:	200003e0 	.word	0x200003e0
 8009790:	e000ed0c 	.word	0xe000ed0c
 8009794:	200003e4 	.word	0x200003e4

08009798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097a4:	f7fe ffca 	bl	800873c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097a8:	4b5b      	ldr	r3, [pc, #364]	; (8009918 <pvPortMalloc+0x180>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097b0:	f000 f920 	bl	80099f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097b4:	4b59      	ldr	r3, [pc, #356]	; (800991c <pvPortMalloc+0x184>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4013      	ands	r3, r2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8093 	bne.w	80098e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01d      	beq.n	8009804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097c8:	2208      	movs	r2, #8
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d014      	beq.n	8009804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	3308      	adds	r3, #8
 80097e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <pvPortMalloc+0x6c>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	617b      	str	r3, [r7, #20]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d06e      	beq.n	80098e8 <pvPortMalloc+0x150>
 800980a:	4b45      	ldr	r3, [pc, #276]	; (8009920 <pvPortMalloc+0x188>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	429a      	cmp	r2, r3
 8009812:	d869      	bhi.n	80098e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009814:	4b43      	ldr	r3, [pc, #268]	; (8009924 <pvPortMalloc+0x18c>)
 8009816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009818:	4b42      	ldr	r3, [pc, #264]	; (8009924 <pvPortMalloc+0x18c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800981e:	e004      	b.n	800982a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <pvPortMalloc+0xa4>
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f1      	bne.n	8009820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800983c:	4b36      	ldr	r3, [pc, #216]	; (8009918 <pvPortMalloc+0x180>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	429a      	cmp	r2, r3
 8009844:	d050      	beq.n	80098e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2208      	movs	r2, #8
 800984c:	4413      	add	r3, r2
 800984e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	2308      	movs	r3, #8
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	429a      	cmp	r2, r3
 8009866:	d91f      	bls.n	80098a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4413      	add	r3, r2
 800986e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <pvPortMalloc+0xf8>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	613b      	str	r3, [r7, #16]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	1ad2      	subs	r2, r2, r3
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098a2:	69b8      	ldr	r0, [r7, #24]
 80098a4:	f000 f908 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098a8:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <pvPortMalloc+0x188>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <pvPortMalloc+0x188>)
 80098b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098b6:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <pvPortMalloc+0x188>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b1b      	ldr	r3, [pc, #108]	; (8009928 <pvPortMalloc+0x190>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d203      	bcs.n	80098ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <pvPortMalloc+0x188>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a18      	ldr	r2, [pc, #96]	; (8009928 <pvPortMalloc+0x190>)
 80098c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <pvPortMalloc+0x184>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <pvPortMalloc+0x194>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	4a11      	ldr	r2, [pc, #68]	; (800992c <pvPortMalloc+0x194>)
 80098e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098e8:	f7fe ff36 	bl	8008758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <pvPortMalloc+0x174>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60fb      	str	r3, [r7, #12]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <pvPortMalloc+0x172>
	return pvReturn;
 800990c:	69fb      	ldr	r3, [r7, #28]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3728      	adds	r7, #40	; 0x28
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20003ff0 	.word	0x20003ff0
 800991c:	20004004 	.word	0x20004004
 8009920:	20003ff4 	.word	0x20003ff4
 8009924:	20003fe8 	.word	0x20003fe8
 8009928:	20003ff8 	.word	0x20003ff8
 800992c:	20003ffc 	.word	0x20003ffc

08009930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d04d      	beq.n	80099de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009942:	2308      	movs	r3, #8
 8009944:	425b      	negs	r3, r3
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4413      	add	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <vPortFree+0xb8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4013      	ands	r3, r2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <vPortFree+0x44>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	60fb      	str	r3, [r7, #12]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00a      	beq.n	8009992 <vPortFree+0x62>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60bb      	str	r3, [r7, #8]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <vPortFree+0xb8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4013      	ands	r3, r2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d01e      	beq.n	80099de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d11a      	bne.n	80099de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <vPortFree+0xb8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099b8:	f7fe fec0 	bl	800873c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <vPortFree+0xbc>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4413      	add	r3, r2
 80099c6:	4a09      	ldr	r2, [pc, #36]	; (80099ec <vPortFree+0xbc>)
 80099c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f000 f874 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099d0:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <vPortFree+0xc0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	4a06      	ldr	r2, [pc, #24]	; (80099f0 <vPortFree+0xc0>)
 80099d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099da:	f7fe febd 	bl	8008758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099de:	bf00      	nop
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20004004 	.word	0x20004004
 80099ec:	20003ff4 	.word	0x20003ff4
 80099f0:	20004000 	.word	0x20004000

080099f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80099fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a00:	4b27      	ldr	r3, [pc, #156]	; (8009aa0 <prvHeapInit+0xac>)
 8009a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00c      	beq.n	8009a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3307      	adds	r3, #7
 8009a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 0307 	bic.w	r3, r3, #7
 8009a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	4a1f      	ldr	r2, [pc, #124]	; (8009aa0 <prvHeapInit+0xac>)
 8009a24:	4413      	add	r3, r2
 8009a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a2c:	4a1d      	ldr	r2, [pc, #116]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a32:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a40:	2208      	movs	r2, #8
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a56:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a5e:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <prvHeapInit+0xb8>)
 8009a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <prvHeapInit+0xbc>)
 8009a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a8c:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <prvHeapInit+0xc0>)
 8009a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a92:	601a      	str	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	200003e8 	.word	0x200003e8
 8009aa4:	20003fe8 	.word	0x20003fe8
 8009aa8:	20003ff0 	.word	0x20003ff0
 8009aac:	20003ff8 	.word	0x20003ff8
 8009ab0:	20003ff4 	.word	0x20003ff4
 8009ab4:	20004004 	.word	0x20004004

08009ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ac0:	4b28      	ldr	r3, [pc, #160]	; (8009b64 <prvInsertBlockIntoFreeList+0xac>)
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e002      	b.n	8009acc <prvInsertBlockIntoFreeList+0x14>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d8f7      	bhi.n	8009ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d108      	bne.n	8009afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	441a      	add	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	441a      	add	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d118      	bne.n	8009b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4b15      	ldr	r3, [pc, #84]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d00d      	beq.n	8009b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	e008      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	e003      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d002      	beq.n	8009b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b56:	bf00      	nop
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	20003fe8 	.word	0x20003fe8
 8009b68:	20003ff0 	.word	0x20003ff0

08009b6c <__libc_init_array>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	4d0d      	ldr	r5, [pc, #52]	; (8009ba4 <__libc_init_array+0x38>)
 8009b70:	4c0d      	ldr	r4, [pc, #52]	; (8009ba8 <__libc_init_array+0x3c>)
 8009b72:	1b64      	subs	r4, r4, r5
 8009b74:	10a4      	asrs	r4, r4, #2
 8009b76:	2600      	movs	r6, #0
 8009b78:	42a6      	cmp	r6, r4
 8009b7a:	d109      	bne.n	8009b90 <__libc_init_array+0x24>
 8009b7c:	4d0b      	ldr	r5, [pc, #44]	; (8009bac <__libc_init_array+0x40>)
 8009b7e:	4c0c      	ldr	r4, [pc, #48]	; (8009bb0 <__libc_init_array+0x44>)
 8009b80:	f000 f82e 	bl	8009be0 <_init>
 8009b84:	1b64      	subs	r4, r4, r5
 8009b86:	10a4      	asrs	r4, r4, #2
 8009b88:	2600      	movs	r6, #0
 8009b8a:	42a6      	cmp	r6, r4
 8009b8c:	d105      	bne.n	8009b9a <__libc_init_array+0x2e>
 8009b8e:	bd70      	pop	{r4, r5, r6, pc}
 8009b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b94:	4798      	blx	r3
 8009b96:	3601      	adds	r6, #1
 8009b98:	e7ee      	b.n	8009b78 <__libc_init_array+0xc>
 8009b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b9e:	4798      	blx	r3
 8009ba0:	3601      	adds	r6, #1
 8009ba2:	e7f2      	b.n	8009b8a <__libc_init_array+0x1e>
 8009ba4:	08009d88 	.word	0x08009d88
 8009ba8:	08009d88 	.word	0x08009d88
 8009bac:	08009d88 	.word	0x08009d88
 8009bb0:	08009d8c 	.word	0x08009d8c

08009bb4 <memcpy>:
 8009bb4:	440a      	add	r2, r1
 8009bb6:	4291      	cmp	r1, r2
 8009bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bbc:	d100      	bne.n	8009bc0 <memcpy+0xc>
 8009bbe:	4770      	bx	lr
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bca:	4291      	cmp	r1, r2
 8009bcc:	d1f9      	bne.n	8009bc2 <memcpy+0xe>
 8009bce:	bd10      	pop	{r4, pc}

08009bd0 <memset>:
 8009bd0:	4402      	add	r2, r0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d100      	bne.n	8009bda <memset+0xa>
 8009bd8:	4770      	bx	lr
 8009bda:	f803 1b01 	strb.w	r1, [r3], #1
 8009bde:	e7f9      	b.n	8009bd4 <memset+0x4>

08009be0 <_init>:
 8009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be2:	bf00      	nop
 8009be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be6:	bc08      	pop	{r3}
 8009be8:	469e      	mov	lr, r3
 8009bea:	4770      	bx	lr

08009bec <_fini>:
 8009bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bee:	bf00      	nop
 8009bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bf2:	bc08      	pop	{r3}
 8009bf4:	469e      	mov	lr, r3
 8009bf6:	4770      	bx	lr

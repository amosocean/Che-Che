
os2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a728  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800a8b8  0800a8b8  0001a8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9f0  0800a9f0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9f0  0800a9f0  0001a9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9f8  0800a9f8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9f8  0800a9f8  0001a9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9fc  0800a9fc  0001a9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800aa00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004320  20000024  0800aa24  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004344  0800aa24  00024344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169bf  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003028  00000000  00000000  00036a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00039a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022036  00000000  00000000  0003bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014645  00000000  00000000  0005dfe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3553  00000000  00000000  0007262b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145b7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000519c  00000000  00000000  00145bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000024 	.word	0x20000024
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8a0 	.word	0x0800a8a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000028 	.word	0x20000028
 80001cc:	0800a8a0 	.word	0x0800a8a0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <vApplicationGetIdleTaskMemory+0x30>)
 8000d6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000040 	.word	0x20000040
 8000d84:	20000094 	.word	0x20000094

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	b0c2      	sub	sp, #264	; 0x108
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f003 ff5b 	bl	8004c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f93f 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d96:	f000 fc15 	bl	80015c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d9a:	f000 fb95 	bl	80014c8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d9e:	f000 f9f9 	bl	8001194 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000da2:	f000 fa6f 	bl	8001284 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000da6:	f000 fbb9 	bl	800151c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000daa:	f000 fbe1 	bl	8001570 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000dae:	f000 fb61 	bl	8001474 <MX_UART5_Init>
  MX_TIM2_Init();
 8000db2:	f000 f99b 	bl	80010ec <MX_TIM2_Init>
  MX_TIM8_Init();
 8000db6:	f000 fadd 	bl	8001374 <MX_TIM8_Init>
  MX_UART4_Init();
 8000dba:	f000 fb31 	bl	8001420 <MX_UART4_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CameraUARTSem */
  osSemaphoreDef(CameraUARTSem);
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  CameraUARTSemHandle = osSemaphoreCreate(osSemaphore(CameraUARTSem), 1);
 8000dca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f007 f880 	bl	8007ed6 <osSemaphoreCreate>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a78      	ldr	r2, [pc, #480]	; (8000fbc <main+0x234>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReadySem */
  osSemaphoreDef(GyroReadySem);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  GyroReadySemHandle = osSemaphoreCreate(osSemaphore(GyroReadySem), 1);
 8000de8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000dec:	2101      	movs	r1, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f007 f871 	bl	8007ed6 <osSemaphoreCreate>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a72      	ldr	r2, [pc, #456]	; (8000fc0 <main+0x238>)
 8000df8:	6013      	str	r3, [r2, #0]

  /* definition and creation of CriticalDistanceSem */
  osSemaphoreDef(CriticalDistanceSem);
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  CriticalDistanceSemHandle = osSemaphoreCreate(osSemaphore(CriticalDistanceSem), 1);
 8000e06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 f862 	bl	8007ed6 <osSemaphoreCreate>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a6b      	ldr	r2, [pc, #428]	; (8000fc4 <main+0x23c>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageSem */
  osSemaphoreDef(MileageSem);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MileageSemHandle = osSemaphoreCreate(osSemaphore(MileageSem), 1);
 8000e24:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f007 f853 	bl	8007ed6 <osSemaphoreCreate>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a65      	ldr	r2, [pc, #404]	; (8000fc8 <main+0x240>)
 8000e34:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageNegSem */
  osSemaphoreDef(MileageNegSem);
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  MileageNegSemHandle = osSemaphoreCreate(osSemaphore(MileageNegSem), 1);
 8000e42:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000e46:	2101      	movs	r1, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f007 f844 	bl	8007ed6 <osSemaphoreCreate>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a5e      	ldr	r2, [pc, #376]	; (8000fcc <main+0x244>)
 8000e52:	6013      	str	r3, [r2, #0]

  /* definition and creation of gomile6Sem */
  osSemaphoreDef(gomile6Sem);
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  gomile6SemHandle = osSemaphoreCreate(osSemaphore(gomile6Sem), 1);
 8000e60:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e64:	2101      	movs	r1, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 f835 	bl	8007ed6 <osSemaphoreCreate>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a58      	ldr	r2, [pc, #352]	; (8000fd0 <main+0x248>)
 8000e70:	6013      	str	r3, [r2, #0]

  /* definition and creation of UltraFrontSem */
  osSemaphoreDef(UltraFrontSem);
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  UltraFrontSemHandle = osSemaphoreCreate(osSemaphore(UltraFrontSem), 1);
 8000e7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e82:	2101      	movs	r1, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f007 f826 	bl	8007ed6 <osSemaphoreCreate>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a51      	ldr	r2, [pc, #324]	; (8000fd4 <main+0x24c>)
 8000e8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ApriltagSem */
  osSemaphoreDef(ApriltagSem);
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  ApriltagSemHandle = osSemaphoreCreate(osSemaphore(ApriltagSem), 1);
 8000e9c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f007 f817 	bl	8007ed6 <osSemaphoreCreate>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <main+0x250>)
 8000eac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Stream */
  osThreadDef(Stream, StreamTask, osPriorityNormal, 0, 128);
 8000eae:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <main+0x254>)
 8000eb0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000eb4:	461d      	mov	r5, r3
 8000eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StreamHandle = osThreadCreate(osThread(Stream), NULL);
 8000ec2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f006 ffb8 	bl	8007e3e <osThreadCreate>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a43      	ldr	r2, [pc, #268]	; (8000fe0 <main+0x258>)
 8000ed2:	6013      	str	r3, [r2, #0]

  /* definition and creation of PIDCamera */
  osThreadDef(PIDCamera, PIDCameraTask, osPriorityNormal, 0, 128);
 8000ed4:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <main+0x25c>)
 8000ed6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000eda:	461d      	mov	r5, r3
 8000edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PIDCameraHandle = osThreadCreate(osThread(PIDCamera), NULL);
 8000ee8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f006 ffa5 	bl	8007e3e <osThreadCreate>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a3c      	ldr	r2, [pc, #240]	; (8000fe8 <main+0x260>)
 8000ef8:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReceive */
  osThreadDef(GyroReceive, GyroReceiveTask, osPriorityNormal, 0, 128);
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <main+0x264>)
 8000efc:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000f00:	461d      	mov	r5, r3
 8000f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GyroReceiveHandle = osThreadCreate(osThread(GyroReceive), NULL);
 8000f0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 ff92 	bl	8007e3e <osThreadCreate>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a34      	ldr	r2, [pc, #208]	; (8000ff0 <main+0x268>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistanceCheck */
  osThreadDef(DistanceCheck, DistanceCheckTask, osPriorityNormal, 0, 128);
 8000f20:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <main+0x26c>)
 8000f22:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f26:	461d      	mov	r5, r3
 8000f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DistanceCheckHandle = osThreadCreate(osThread(DistanceCheck), NULL);
 8000f34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 ff7f 	bl	8007e3e <osThreadCreate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <main+0x270>)
 8000f44:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mileage */
  osThreadDef(Mileage, MileageTask, osPriorityNormal, 0, 128);
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <main+0x274>)
 8000f48:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f4c:	461d      	mov	r5, r3
 8000f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MileageHandle = osThreadCreate(osThread(Mileage), NULL);
 8000f5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f006 ff6c 	bl	8007e3e <osThreadCreate>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a25      	ldr	r2, [pc, #148]	; (8001000 <main+0x278>)
 8000f6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GoStraight */
  osThreadDef(GoStraight, GoStraightTask, osPriorityNormal, 0, 128);
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <main+0x27c>)
 8000f6e:	f107 0420 	add.w	r4, r7, #32
 8000f72:	461d      	mov	r5, r3
 8000f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GoStraightHandle = osThreadCreate(osThread(GoStraight), NULL);
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 ff59 	bl	8007e3e <osThreadCreate>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <main+0x280>)
 8000f90:	6013      	str	r3, [r2, #0]

  /* definition and creation of Colorcheck */
  osThreadDef(Colorcheck, ColorcheckTask, osPriorityNormal, 0, 128);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <main+0x284>)
 8000f96:	461c      	mov	r4, r3
 8000f98:	4615      	mov	r5, r2
 8000f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ColorcheckHandle = osThreadCreate(osThread(Colorcheck), NULL);
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f006 ff47 	bl	8007e3e <osThreadCreate>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <main+0x288>)
 8000fb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fb6:	f006 ff2b 	bl	8007e10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <main+0x232>
 8000fbc:	20004124 	.word	0x20004124
 8000fc0:	20004218 	.word	0x20004218
 8000fc4:	2000403c 	.word	0x2000403c
 8000fc8:	2000420c 	.word	0x2000420c
 8000fcc:	20004220 	.word	0x20004220
 8000fd0:	20004040 	.word	0x20004040
 8000fd4:	20004128 	.word	0x20004128
 8000fd8:	2000421c 	.word	0x2000421c
 8000fdc:	0800a908 	.word	0x0800a908
 8000fe0:	20004208 	.word	0x20004208
 8000fe4:	0800a924 	.word	0x0800a924
 8000fe8:	20004120 	.word	0x20004120
 8000fec:	0800a940 	.word	0x0800a940
 8000ff0:	200042f4 	.word	0x200042f4
 8000ff4:	0800a95c 	.word	0x0800a95c
 8000ff8:	2000412c 	.word	0x2000412c
 8000ffc:	0800a978 	.word	0x0800a978
 8001000:	20004044 	.word	0x20004044
 8001004:	0800a994 	.word	0x0800a994
 8001008:	20004130 	.word	0x20004130
 800100c:	0800a9b0 	.word	0x0800a9b0
 8001010:	20004210 	.word	0x20004210

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	; 0x50
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2230      	movs	r2, #48	; 0x30
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f009 fc34 	bl	800a890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <SystemClock_Config+0xd0>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <SystemClock_Config+0xd0>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <SystemClock_Config+0xd0>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <SystemClock_Config+0xd4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <SystemClock_Config+0xd4>)
 800105e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <SystemClock_Config+0xd4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	2302      	movs	r3, #2
 800107c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001084:	2304      	movs	r3, #4
 8001086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001088:	23a8      	movs	r3, #168	; 0xa8
 800108a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001090:	2304      	movs	r3, #4
 8001092:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	4618      	mov	r0, r3
 800109a:	f004 f95b 	bl	8005354 <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010a4:	f003 fa48 	bl	8004538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	2302      	movs	r3, #2
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2105      	movs	r1, #5
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 fbbc 	bl	8005844 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010d2:	f003 fa31 	bl	8004538 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80010d6:	f004 fc9b 	bl	8005a10 <HAL_RCC_EnableCSS>
}
 80010da:	bf00      	nop
 80010dc:	3750      	adds	r7, #80	; 0x50
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2224      	movs	r2, #36	; 0x24
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f009 fbc8 	bl	800a890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_TIM2_Init+0xa4>)
 800110a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_TIM2_Init+0xa4>)
 8001112:	2203      	movs	r2, #3
 8001114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_TIM2_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_TIM2_Init+0xa4>)
 800111e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001122:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM2_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_TIM2_Init+0xa4>)
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001130:	2303      	movs	r3, #3
 8001132:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001138:	2301      	movs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001148:	2301      	movs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_TIM2_Init+0xa4>)
 800115c:	f004 ffa8 	bl	80060b0 <HAL_TIM_Encoder_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001166:	f003 f9e7 	bl	8004538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <MX_TIM2_Init+0xa4>)
 8001178:	f005 fe90 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001182:	f003 f9d9 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3730      	adds	r7, #48	; 0x30
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20004268 	.word	0x20004268

08001194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	; 0x38
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_TIM3_Init+0xe8>)
 80011c6:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <MX_TIM3_Init+0xec>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 601-1;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <MX_TIM3_Init+0xe8>)
 80011cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80011d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_TIM3_Init+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <MX_TIM3_Init+0xe8>)
 80011da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_TIM3_Init+0xe8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_TIM3_Init+0xe8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ec:	4823      	ldr	r0, [pc, #140]	; (800127c <MX_TIM3_Init+0xe8>)
 80011ee:	f004 fd7e 	bl	8005cee <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011f8:	f003 f99e 	bl	8004538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001206:	4619      	mov	r1, r3
 8001208:	481c      	ldr	r0, [pc, #112]	; (800127c <MX_TIM3_Init+0xe8>)
 800120a:	f005 fa4b 	bl	80066a4 <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001214:	f003 f990 	bl	8004538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001218:	4818      	ldr	r0, [pc, #96]	; (800127c <MX_TIM3_Init+0xe8>)
 800121a:	f004 fe27 	bl	8005e6c <HAL_TIM_PWM_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001224:	f003 f988 	bl	8004538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4619      	mov	r1, r3
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_TIM3_Init+0xe8>)
 8001238:	f005 fe30 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001242:	f003 f979 	bl	8004538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001246:	2360      	movs	r3, #96	; 0x60
 8001248:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_TIM3_Init+0xe8>)
 800125e:	f005 f963 	bl	8006528 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001268:	f003 f966 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM3_Init+0xe8>)
 800126e:	f003 fa51 	bl	8004714 <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3738      	adds	r7, #56	; 0x38
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20004134 	.word	0x20004134
 8001280:	40000400 	.word	0x40000400

08001284 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <MX_TIM4_Init+0xe8>)
 80012b6:	4a2e      	ldr	r2, [pc, #184]	; (8001370 <MX_TIM4_Init+0xec>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 601-1;
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <MX_TIM4_Init+0xe8>)
 80012bc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80012c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <MX_TIM4_Init+0xe8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_TIM4_Init+0xe8>)
 80012ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_TIM4_Init+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <MX_TIM4_Init+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012dc:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_TIM4_Init+0xe8>)
 80012de:	f004 fd06 	bl	8005cee <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80012e8:	f003 f926 	bl	8004538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	4619      	mov	r1, r3
 80012f8:	481c      	ldr	r0, [pc, #112]	; (800136c <MX_TIM4_Init+0xe8>)
 80012fa:	f005 f9d3 	bl	80066a4 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001304:	f003 f918 	bl	8004538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001308:	4818      	ldr	r0, [pc, #96]	; (800136c <MX_TIM4_Init+0xe8>)
 800130a:	f004 fdaf 	bl	8005e6c <HAL_TIM_PWM_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001314:	f003 f910 	bl	8004538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4619      	mov	r1, r3
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <MX_TIM4_Init+0xe8>)
 8001328:	f005 fdb8 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001332:	f003 f901 	bl	8004538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	; 0x60
 8001338:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM4_Init+0xe8>)
 800134e:	f005 f8eb 	bl	8006528 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001358:	f003 f8ee 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM4_Init+0xe8>)
 800135e:	f003 f9d9 	bl	8004714 <HAL_TIM_MspPostInit>

}
 8001362:	bf00      	nop
 8001364:	3738      	adds	r7, #56	; 0x38
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20004094 	.word	0x20004094
 8001370:	40000800 	.word	0x40000800

08001374 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2224      	movs	r2, #36	; 0x24
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f009 fa84 	bl	800a890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_TIM8_Init+0xa4>)
 8001392:	4a22      	ldr	r2, [pc, #136]	; (800141c <MX_TIM8_Init+0xa8>)
 8001394:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_TIM8_Init+0xa4>)
 8001398:	2203      	movs	r2, #3
 800139a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_TIM8_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 150;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_TIM8_Init+0xa4>)
 80013a4:	2296      	movs	r2, #150	; 0x96
 80013a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_TIM8_Init+0xa4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_TIM8_Init+0xa4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_TIM8_Init+0xa4>)
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ba:	2303      	movs	r3, #3
 80013bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d2:	2301      	movs	r3, #1
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_TIM8_Init+0xa4>)
 80013e6:	f004 fe63 	bl	80060b0 <HAL_TIM_Encoder_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 80013f0:	f003 f8a2 	bl	8004538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_TIM8_Init+0xa4>)
 8001402:	f005 fd4b 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 800140c:	f003 f894 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3730      	adds	r7, #48	; 0x30
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20004048 	.word	0x20004048
 800141c:	40010400 	.word	0x40010400

08001420 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_UART4_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_UART4_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <MX_UART4_Init+0x4c>)
 800142c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001430:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_UART4_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_UART4_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_UART4_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_UART4_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_UART4_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_UART4_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_UART4_Init+0x4c>)
 8001458:	f005 fdb0 	bl	8006fbc <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001462:	f003 f869 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20004224 	.word	0x20004224
 8001470:	40004c00 	.word	0x40004c00

08001474 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_UART5_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_UART5_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_UART5_Init+0x4c>)
 8001480:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001484:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_UART5_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_UART5_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_UART5_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_UART5_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_UART5_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_UART5_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_UART5_Init+0x4c>)
 80014ac:	f005 fd86 	bl	8006fbc <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80014b6:	f003 f83f 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20004180 	.word	0x20004180
 80014c4:	40005000 	.word	0x40005000

080014c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_USART1_UART_Init+0x50>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART1_UART_Init+0x4c>)
 8001500:	f005 fd5c 	bl	8006fbc <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800150a:	f003 f815 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200041c4 	.word	0x200041c4
 8001518:	40011000 	.word	0x40011000

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART2_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001554:	f005 fd32 	bl	8006fbc <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f002 ffeb 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200042b0 	.word	0x200042b0
 800156c:	40004400 	.word	0x40004400

08001570 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_USART3_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 80015a8:	f005 fd08 	bl	8006fbc <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f002 ffc1 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200040dc 	.word	0x200040dc
 80015c0:	40004800 	.word	0x40004800

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	; 0x30
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	4b51      	ldr	r3, [pc, #324]	; (8001724 <MX_GPIO_Init+0x160>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a50      	ldr	r2, [pc, #320]	; (8001724 <MX_GPIO_Init+0x160>)
 80015e4:	f043 0320 	orr.w	r3, r3, #32
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <MX_GPIO_Init+0x160>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <MX_GPIO_Init+0x160>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a49      	ldr	r2, [pc, #292]	; (8001724 <MX_GPIO_Init+0x160>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <MX_GPIO_Init+0x160>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b43      	ldr	r3, [pc, #268]	; (8001724 <MX_GPIO_Init+0x160>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a42      	ldr	r2, [pc, #264]	; (8001724 <MX_GPIO_Init+0x160>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <MX_GPIO_Init+0x160>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <MX_GPIO_Init+0x160>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a3b      	ldr	r2, [pc, #236]	; (8001724 <MX_GPIO_Init+0x160>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <MX_GPIO_Init+0x160>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b35      	ldr	r3, [pc, #212]	; (8001724 <MX_GPIO_Init+0x160>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a34      	ldr	r2, [pc, #208]	; (8001724 <MX_GPIO_Init+0x160>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <MX_GPIO_Init+0x160>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <MX_GPIO_Init+0x160>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a2d      	ldr	r2, [pc, #180]	; (8001724 <MX_GPIO_Init+0x160>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <MX_GPIO_Init+0x160>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|LEDBlue_Pin|LEDGreen_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001688:	4827      	ldr	r0, [pc, #156]	; (8001728 <MX_GPIO_Init+0x164>)
 800168a:	f003 fe2f 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rightPWMGND_GPIO_Port, rightPWMGND_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001694:	4825      	ldr	r0, [pc, #148]	; (800172c <MX_GPIO_Init+0x168>)
 8001696:	f003 fe29 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(leftPWMGND_GPIO_Port, leftPWMGND_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a0:	4823      	ldr	r0, [pc, #140]	; (8001730 <MX_GPIO_Init+0x16c>)
 80016a2:	f003 fe23 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016a6:	2310      	movs	r3, #16
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ae:	2302      	movs	r3, #2
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	481a      	ldr	r0, [pc, #104]	; (8001728 <MX_GPIO_Init+0x164>)
 80016be:	f003 fc79 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDBlue_Pin LEDGreen_Pin */
  GPIO_InitStruct.Pin = LEDBlue_Pin|LEDGreen_Pin;
 80016c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4813      	ldr	r0, [pc, #76]	; (8001728 <MX_GPIO_Init+0x164>)
 80016dc:	f003 fc6a 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : rightPWMGND_Pin */
  GPIO_InitStruct.Pin = rightPWMGND_Pin;
 80016e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ea:	2302      	movs	r3, #2
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(rightPWMGND_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <MX_GPIO_Init+0x168>)
 80016fa:	f003 fc5b 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftPWMGND_Pin */
  GPIO_InitStruct.Pin = leftPWMGND_Pin;
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001708:	2302      	movs	r3, #2
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftPWMGND_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_GPIO_Init+0x16c>)
 8001718:	f003 fc4c 	bl	8004fb4 <HAL_GPIO_Init>

}
 800171c:	bf00      	nop
 800171e:	3730      	adds	r7, #48	; 0x30
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40021400 	.word	0x40021400
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40020000 	.word	0x40020000

08001734 <Car_Initial>:

/* USER CODE BEGIN 4 */
void Car_Initial(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 8001738:	f008 fd6c 	bl	800a214 <vPortEnterCritical>
	state=Initial;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <Car_Initial+0x50>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
	temp_state = Unknow;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <Car_Initial+0x54>)
 8001744:	2228      	movs	r2, #40	; 0x28
 8001746:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001748:	2202      	movs	r2, #2
 800174a:	4910      	ldr	r1, [pc, #64]	; (800178c <Car_Initial+0x58>)
 800174c:	4810      	ldr	r0, [pc, #64]	; (8001790 <Car_Initial+0x5c>)
 800174e:	f005 fdb6 	bl	80072be <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);//�??????????????????????????????????????????????????????????????????????启左侧PWM
 8001752:	2100      	movs	r1, #0
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <Car_Initial+0x60>)
 8001756:	f004 fbe3 	bl	8005f20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);//�??????????????????????????????????????????????????????????????????????启右侧PWM
 800175a:	2100      	movs	r1, #0
 800175c:	480e      	ldr	r0, [pc, #56]	; (8001798 <Car_Initial+0x64>)
 800175e:	f004 fbdf 	bl	8005f20 <HAL_TIM_PWM_Start>
	taskEXIT_CRITICAL();
 8001762:	f008 fd87 	bl	800a274 <vPortExitCritical>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001766:	213c      	movs	r1, #60	; 0x3c
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <Car_Initial+0x68>)
 800176a:	f004 fd47 	bl	80061fc <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,500);
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <Car_Initial+0x68>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001776:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <Car_Initial+0x68>)
 800177a:	f004 fb07 	bl	8005d8c <HAL_TIM_Base_Start_IT>
	//vTaskSuspend(UART_RTHandle);//Suspend UART R and T
	//vTaskSuspend(PIDCameraHandle);//Suspend PID module
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000417c 	.word	0x2000417c
 8001788:	20004214 	.word	0x20004214
 800178c:	20000294 	.word	0x20000294
 8001790:	200042b0 	.word	0x200042b0
 8001794:	20004134 	.word	0x20004134
 8001798:	20004094 	.word	0x20004094
 800179c:	20004268 	.word	0x20004268

080017a0 <Car_Stop>:

void Car_Stop(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 80017a4:	f008 fd36 	bl	800a214 <vPortEnterCritical>
	PWM_SET_LEFT(1);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f000 fd3f 	bl	800222c <PWM_SET_LEFT>
	PWM_SET_RIGHT(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f000 fd76 	bl	80022a0 <PWM_SET_RIGHT>
	taskEXIT_CRITICAL();
 80017b4:	f008 fd5e 	bl	800a274 <vPortExitCritical>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <delay>:

void delay(uint32_t time_ms)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	uint32_t PreviousWakeTime=osKernelSysTick();
 80017c4:	f006 fb2b 	bl	8007e1e <osKernelSysTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	60fb      	str	r3, [r7, #12]
	osDelayUntil(&PreviousWakeTime, time_ms);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f006 fc36 	bl	8008044 <osDelayUntil>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <Angle_Diff>:

float Angle_Diff(float target, float input)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ea:	edc7 0a00 	vstr	s1, [r7]
	float Error;
	if(target >= 180)
 80017ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80018a0 <Angle_Diff+0xc0>
 80017f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	db08      	blt.n	8001812 <Angle_Diff+0x32>
		target=-360+target;
 8001800:	edd7 7a01 	vldr	s15, [r7, #4]
 8001804:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80018a4 <Angle_Diff+0xc4>
 8001808:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800180c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001810:	e010      	b.n	8001834 <Angle_Diff+0x54>
	else if(target <=-180)
 8001812:	edd7 7a01 	vldr	s15, [r7, #4]
 8001816:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80018a8 <Angle_Diff+0xc8>
 800181a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	d807      	bhi.n	8001834 <Angle_Diff+0x54>
		target=360+target;
 8001824:	edd7 7a01 	vldr	s15, [r7, #4]
 8001828:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80018a4 <Angle_Diff+0xc4>
 800182c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001830:	edc7 7a01 	vstr	s15, [r7, #4]
	Error = target - input;
 8001834:	ed97 7a01 	vldr	s14, [r7, #4]
 8001838:	edd7 7a00 	vldr	s15, [r7]
 800183c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001840:	edc7 7a03 	vstr	s15, [r7, #12]
		if(Error >= 180)
 8001844:	edd7 7a03 	vldr	s15, [r7, #12]
 8001848:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80018a0 <Angle_Diff+0xc0>
 800184c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001854:	db08      	blt.n	8001868 <Angle_Diff+0x88>
			Error=Error-360;
 8001856:	edd7 7a03 	vldr	s15, [r7, #12]
 800185a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80018a4 <Angle_Diff+0xc4>
 800185e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001862:	edc7 7a03 	vstr	s15, [r7, #12]
 8001866:	e010      	b.n	800188a <Angle_Diff+0xaa>
		else if(Error <= -180)
 8001868:	edd7 7a03 	vldr	s15, [r7, #12]
 800186c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80018a8 <Angle_Diff+0xc8>
 8001870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	d807      	bhi.n	800188a <Angle_Diff+0xaa>
			Error=Error+360;
 800187a:	edd7 7a03 	vldr	s15, [r7, #12]
 800187e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80018a4 <Angle_Diff+0xc4>
 8001882:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001886:	edc7 7a03 	vstr	s15, [r7, #12]
	return Error;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	ee07 3a90 	vmov	s15, r3
}
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	43340000 	.word	0x43340000
 80018a4:	43b40000 	.word	0x43b40000
 80018a8:	c3340000 	.word	0xc3340000

080018ac <PID_Turning>:
// 		}
// 	 }
//}

int PID_Turning(float increment_angle,float Accept_Error)//If we want to turn right, parameter is negative
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b092      	sub	sp, #72	; 0x48
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80018b6:	edc7 0a00 	vstr	s1, [r7]

	float PID_target=0;
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
	float PID_Error_Last=0;
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	643b      	str	r3, [r7, #64]	; 0x40
	float initial_yaw=0;
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	float PID_Output=0,PID_Input=0;;
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
	float Error = 0, Error_Total=0;
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
	float KP=13, KI=2, KD=0;
 80018e4:	4baf      	ldr	r3, [pc, #700]	; (8001ba4 <PID_Turning+0x2f8>)
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
	//15 2 0
	int t=0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
	float pwm_left=0,pwm_right=0;
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
	uint8_t Flag=0; //Indicate that if verifying process begin.
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Car_Stop();
 800190a:	f7ff ff49 	bl	80017a0 <Car_Stop>
	//delay(1500);
	for(int i=0;i<10;i++)			//Get average initial direction
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001912:	e012      	b.n	800193a <PID_Turning+0x8e>
	{
			osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001914:	4ba4      	ldr	r3, [pc, #656]	; (8001ba8 <PID_Turning+0x2fc>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	4618      	mov	r0, r3
 800191e:	f006 fb0d 	bl	8007f3c <osSemaphoreWait>
			initial_yaw+=angle.z;
 8001922:	4ba2      	ldr	r3, [pc, #648]	; (8001bac <PID_Turning+0x300>)
 8001924:	edd3 7a02 	vldr	s15, [r3, #8]
 8001928:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for(int i=0;i<10;i++)			//Get average initial direction
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	3301      	adds	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	2b09      	cmp	r3, #9
 800193e:	dde9      	ble.n	8001914 <PID_Turning+0x68>
	}
	initial_yaw=initial_yaw/10;
 8001940:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001944:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	PID_target=initial_yaw + increment_angle;
 8001950:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001954:	edd7 7a01 	vldr	s15, [r7, #4]
 8001958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(PID_target > 180)
 8001960:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001964:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001bb0 <PID_Turning+0x304>
 8001968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	dd07      	ble.n	8001982 <PID_Turning+0xd6>
		PID_target=-360+PID_target;
 8001972:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001976:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001bb4 <PID_Turning+0x308>
 800197a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800197e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(PID_target <-180)
 8001982:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001986:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001bb8 <PID_Turning+0x30c>
 800198a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	d507      	bpl.n	80019a4 <PID_Turning+0xf8>
		PID_target=360+PID_target;
 8001994:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001998:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001bb4 <PID_Turning+0x308>
 800199c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019a0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for(;;)
  {
	  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 80019a4:	4b80      	ldr	r3, [pc, #512]	; (8001ba8 <PID_Turning+0x2fc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	4618      	mov	r0, r3
 80019ae:	f006 fac5 	bl	8007f3c <osSemaphoreWait>
	  	 PID_Input = angle.z;
 80019b2:	4b7e      	ldr	r3, [pc, #504]	; (8001bac <PID_Turning+0x300>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
	  	 Error=Angle_Diff(PID_target, PID_Input);
 80019b8:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80019bc:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80019c0:	f7ff ff0e 	bl	80017e0 <Angle_Diff>
 80019c4:	ed87 0a08 	vstr	s0, [r7, #32]
	  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 80019c8:	edd7 7a00 	vldr	s15, [r7]
 80019cc:	eef1 7a67 	vneg.f32	s15, s15
 80019d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80019d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	dd17      	ble.n	8001a0e <PID_Turning+0x162>
 80019de:	ed97 7a08 	vldr	s14, [r7, #32]
 80019e2:	edd7 7a00 	vldr	s15, [r7]
 80019e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	d50e      	bpl.n	8001a0e <PID_Turning+0x162>
 80019f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10a      	bne.n	8001a0e <PID_Turning+0x162>
	  	 {
	  		 t++;
 80019f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fa:	3301      	adds	r3, #1
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
	  		if(t>2)
 80019fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	dd04      	ble.n	8001a0e <PID_Turning+0x162>
	  		{
	  			Flag = 1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
	  		}
	  	 }
	  	 if(Flag)
 8001a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d026      	beq.n	8001a64 <PID_Turning+0x1b8>
	  	 {
	  		if(t>Angle_stable_cycles)
 8001a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	dd06      	ble.n	8001a2a <PID_Turning+0x17e>
	  		{
	  			Flag=0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
	  			return 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e0b7      	b.n	8001b9a <PID_Turning+0x2ee>
	  		}
	  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 8001a2a:	edd7 7a00 	vldr	s15, [r7]
 8001a2e:	eef1 7a67 	vneg.f32	s15, s15
 8001a32:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	dd0c      	ble.n	8001a5a <PID_Turning+0x1ae>
 8001a40:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a44:	edd7 7a00 	vldr	s15, [r7]
 8001a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	d503      	bpl.n	8001a5a <PID_Turning+0x1ae>
	  		{
	  			t++;
 8001a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a54:	3301      	adds	r3, #1
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
 8001a58:	e004      	b.n	8001a64 <PID_Turning+0x1b8>
	  		}
	  		else
	  		{
	  			Flag=0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
	  		}
	  	 }
	  	 Error_Total=Error_Total+KI*Error;
 8001a64:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a68:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a70:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a78:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	     PID_Output = KP * Error  +
 8001a7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a80:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a84:	ee27 7a27 	vmul.f32	s14, s14, s15
	 				  KD * (Error - PID_Error_Last ) +
 8001a88:	edd7 6a08 	vldr	s13, [r7, #32]
 8001a8c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a94:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
	     PID_Output = KP * Error  +
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
					  Error_Total;
	     PID_Error_Last = Error;
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
	     pwm_right =   PID_Output;
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	60fb      	str	r3, [r7, #12]
	     pwm_left  = - PID_Output;
 8001ab4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ab8:	eef1 7a67 	vneg.f32	s15, s15
 8001abc:	edc7 7a04 	vstr	s15, [r7, #16]
	     pwm_right += pwm_right>0 ?PWM_Lowest:-PWM_Lowest;
 8001ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	dd02      	ble.n	8001ad4 <PID_Turning+0x228>
 8001ace:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8001bbc <PID_Turning+0x310>
 8001ad2:	e001      	b.n	8001ad8 <PID_Turning+0x22c>
 8001ad4:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8001bc0 <PID_Turning+0x314>
 8001ad8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	edc7 7a03 	vstr	s15, [r7, #12]
	     pwm_left  += pwm_left>0  ?PWM_Lowest:-PWM_Lowest;
 8001ae4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	dd02      	ble.n	8001af8 <PID_Turning+0x24c>
 8001af2:	eddf 7a32 	vldr	s15, [pc, #200]	; 8001bbc <PID_Turning+0x310>
 8001af6:	e001      	b.n	8001afc <PID_Turning+0x250>
 8001af8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8001bc0 <PID_Turning+0x314>
 8001afc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b04:	edc7 7a04 	vstr	s15, [r7, #16]
	     pwm_right =  pwm_right>= PWM_Higest?PWM_Higest:pwm_right;
 8001b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001bc4 <PID_Turning+0x318>
 8001b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	db01      	blt.n	8001b1e <PID_Turning+0x272>
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <PID_Turning+0x31c>)
 8001b1c:	e000      	b.n	8001b20 <PID_Turning+0x274>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	60fb      	str	r3, [r7, #12]
	     pwm_right =  pwm_right<= -PWM_Higest?-PWM_Higest:pwm_right;
 8001b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b26:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001bcc <PID_Turning+0x320>
 8001b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d801      	bhi.n	8001b38 <PID_Turning+0x28c>
 8001b34:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <PID_Turning+0x324>)
 8001b36:	e000      	b.n	8001b3a <PID_Turning+0x28e>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	60fb      	str	r3, [r7, #12]
	     pwm_left  =  pwm_left >= PWM_Higest?PWM_Higest:pwm_left;
 8001b3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b40:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001bc4 <PID_Turning+0x318>
 8001b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	db01      	blt.n	8001b52 <PID_Turning+0x2a6>
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <PID_Turning+0x31c>)
 8001b50:	e000      	b.n	8001b54 <PID_Turning+0x2a8>
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	613b      	str	r3, [r7, #16]
	     pwm_left  =  pwm_left <= -PWM_Higest?-PWM_Higest:pwm_left;// 限幅
 8001b56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b5a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001bcc <PID_Turning+0x320>
 8001b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	d801      	bhi.n	8001b6c <PID_Turning+0x2c0>
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <PID_Turning+0x324>)
 8001b6a:	e000      	b.n	8001b6e <PID_Turning+0x2c2>
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	613b      	str	r3, [r7, #16]
	    	 taskENTER_CRITICAL();
 8001b70:	f008 fb50 	bl	800a214 <vPortEnterCritical>
	    	 PWM_SET_RIGHT ((int32_t)   pwm_right);
 8001b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7c:	ee17 0a90 	vmov	r0, s15
 8001b80:	f000 fb8e 	bl	80022a0 <PWM_SET_RIGHT>
	    	 PWM_SET_LEFT  ((int32_t)   pwm_left );
 8001b84:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8c:	ee17 0a90 	vmov	r0, s15
 8001b90:	f000 fb4c 	bl	800222c <PWM_SET_LEFT>
	    	 taskEXIT_CRITICAL();
 8001b94:	f008 fb6e 	bl	800a274 <vPortExitCritical>
	  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001b98:	e704      	b.n	80019a4 <PID_Turning+0xf8>
  }

}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3748      	adds	r7, #72	; 0x48
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	41500000 	.word	0x41500000
 8001ba8:	20004218 	.word	0x20004218
 8001bac:	200002a0 	.word	0x200002a0
 8001bb0:	43340000 	.word	0x43340000
 8001bb4:	43b40000 	.word	0x43b40000
 8001bb8:	c3340000 	.word	0xc3340000
 8001bbc:	43fa0000 	.word	0x43fa0000
 8001bc0:	c3fa0000 	.word	0xc3fa0000
 8001bc4:	44af0000 	.word	0x44af0000
 8001bc8:	44af0000 	.word	0x44af0000
 8001bcc:	c4af0000 	.word	0xc4af0000
 8001bd0:	c4af0000 	.word	0xc4af0000

08001bd4 <PID_Straight>:
void PID_Straight(float speed)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b092      	sub	sp, #72	; 0x48
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	ed87 0a01 	vstr	s0, [r7, #4]
					float PID_target=0;
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
					float PID_Error_Last=0;
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	647b      	str	r3, [r7, #68]	; 0x44
					float initial_yaw=0;
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	643b      	str	r3, [r7, #64]	; 0x40
					float PID_Output=0,PID_Input=0;
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
					float Error = 0, Error_Total=0,Error_Total_Total=0;
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
					float KP=15, KI=6, KD=10, KI2=0.013;
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <PID_Straight+0x1f0>)
 8001c10:	623b      	str	r3, [r7, #32]
 8001c12:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <PID_Straight+0x1f4>)
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <PID_Straight+0x1f8>)
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <PID_Straight+0x1fc>)
 8001c1c:	617b      	str	r3, [r7, #20]
					int32_t pwm_right=0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
					int32_t pwm_left=0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
					//uint8_t Flag=0; //Indicate that if verifying process begin.
					Car_Stop();
 8001c26:	f7ff fdbb 	bl	80017a0 <Car_Stop>
					if (PID_Straight_Reset_Flag)
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <PID_Straight+0x200>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 80bf 	bne.w	8001db2 <PID_Straight+0x1de>
						return;
					osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <PID_Straight+0x204>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f006 f97d 	bl	8007f3c <osSemaphoreWait>
					for(int i=0;i<10;i++)			//Get average initial direction
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
 8001c46:	e015      	b.n	8001c74 <PID_Straight+0xa0>
					{
							osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001c48:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <PID_Straight+0x204>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	4618      	mov	r0, r3
 8001c52:	f006 f973 	bl	8007f3c <osSemaphoreWait>
							initial_yaw+=angle.z;
 8001c56:	4b61      	ldr	r3, [pc, #388]	; (8001ddc <PID_Straight+0x208>)
 8001c58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c5c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
							delay(10);
 8001c68:	200a      	movs	r0, #10
 8001c6a:	f7ff fda7 	bl	80017bc <delay>
					for(int i=0;i<10;i++)			//Get average initial direction
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c70:	3301      	adds	r3, #1
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
 8001c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c76:	2b09      	cmp	r3, #9
 8001c78:	dde6      	ble.n	8001c48 <PID_Straight+0x74>
					}
					initial_yaw=initial_yaw/10;
 8001c7a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c7e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c86:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
					PID_target=initial_yaw;
 8001c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
				  for(;;)
				  {
					  	 if (PID_Straight_Reset_Flag)
 8001c8e:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <PID_Straight+0x200>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 808f 	bne.w	8001db6 <PID_Straight+0x1e2>
					  		 return;
		  	  	  	  	 //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green
					  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001c98:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <PID_Straight+0x204>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f006 f94b 	bl	8007f3c <osSemaphoreWait>
					  	 PID_Input = angle.z;
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <PID_Straight+0x208>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
					  	 Error=Angle_Diff(PID_target, PID_Input);
 8001cac:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001cb0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001cb4:	f7ff fd94 	bl	80017e0 <Angle_Diff>
 8001cb8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
						 Error_Total=Error_Total+KI*Error;
 8001cbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					     Error_Total_Total= Error_Total_Total+KI2*Error_Total;
 8001cd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					     PID_Output = KP * Error  +
 8001cec:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cf0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
					 				  KD * (Error - PID_Error_Last ) +
 8001cf8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001cfc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
					     PID_Output = KP * Error  +
 8001d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
									  Error_Total;
					     PID_Error_Last = Error;
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	647b      	str	r3, [r7, #68]	; 0x44

					     pwm_right=	speed+	(int32_t) 	PID_Output;
 8001d20:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d38:	ee17 3a90 	vmov	r3, s15
 8001d3c:	613b      	str	r3, [r7, #16]
					     pwm_left=	speed-	(int32_t)  	PID_Output;
 8001d3e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d56:	ee17 3a90 	vmov	r3, s15
 8001d5a:	60fb      	str	r3, [r7, #12]
					     pwm_right = pwm_right<PWM_Lowest ? PWM_Lowest : pwm_right;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d62:	bfb8      	it	lt
 8001d64:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
 8001d68:	613b      	str	r3, [r7, #16]
					     pwm_right = pwm_right>PWM_Higest ? PWM_Higest : pwm_right;
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001d70:	bfa8      	it	ge
 8001d72:	f44f 63af 	movge.w	r3, #1400	; 0x578
 8001d76:	613b      	str	r3, [r7, #16]
					     pwm_left = pwm_left<PWM_Lowest ? PWM_Lowest : pwm_left;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d7e:	bfb8      	it	lt
 8001d80:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
 8001d84:	60fb      	str	r3, [r7, #12]
					     pwm_left = pwm_left>PWM_Higest ? PWM_Higest : pwm_left;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001d8c:	bfa8      	it	ge
 8001d8e:	f44f 63af 	movge.w	r3, #1400	; 0x578
 8001d92:	60fb      	str	r3, [r7, #12]
					     if (PID_Straight_Reset_Flag)
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <PID_Straight+0x200>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10e      	bne.n	8001dba <PID_Straight+0x1e6>
					     	return;
					     taskENTER_CRITICAL();
 8001d9c:	f008 fa3a 	bl	800a214 <vPortEnterCritical>
					     PWM_SET_RIGHT (pwm_right);
 8001da0:	6938      	ldr	r0, [r7, #16]
 8001da2:	f000 fa7d 	bl	80022a0 <PWM_SET_RIGHT>
					     PWM_SET_LEFT(pwm_left);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fa40 	bl	800222c <PWM_SET_LEFT>
					     taskEXIT_CRITICAL();
 8001dac:	f008 fa62 	bl	800a274 <vPortExitCritical>
					  	 if (PID_Straight_Reset_Flag)
 8001db0:	e76d      	b.n	8001c8e <PID_Straight+0xba>
						return;
 8001db2:	bf00      	nop
 8001db4:	e002      	b.n	8001dbc <PID_Straight+0x1e8>
					  		 return;
 8001db6:	bf00      	nop
 8001db8:	e000      	b.n	8001dbc <PID_Straight+0x1e8>
					     	return;
 8001dba:	bf00      	nop
					     }
}
 8001dbc:	3748      	adds	r7, #72	; 0x48
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	41700000 	.word	0x41700000
 8001dc8:	40c00000 	.word	0x40c00000
 8001dcc:	41200000 	.word	0x41200000
 8001dd0:	3c54fdf4 	.word	0x3c54fdf4
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20004218 	.word	0x20004218
 8001ddc:	200002a0 	.word	0x200002a0

08001de0 <Ultrasonic_Feedback>:

Distance Ultrasonic_Feedback(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
	uint8_t info=0xA0;
 8001de6:	23a0      	movs	r3, #160	; 0xa0
 8001de8:	74fb      	strb	r3, [r7, #19]
	uint8_t Rx_Buf[3]={0,0,0};
 8001dea:	4a2b      	ldr	r2, [pc, #172]	; (8001e98 <Ultrasonic_Feedback+0xb8>)
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	4611      	mov	r1, r2
 8001df4:	8019      	strh	r1, [r3, #0]
 8001df6:	3302      	adds	r3, #2
 8001df8:	0c12      	lsrs	r2, r2, #16
 8001dfa:	701a      	strb	r2, [r3, #0]
	uint32_t Data=0x00000000;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
	Distance distance={0.0,0.0};
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
	taskENTER_CRITICAL();
 8001e0c:	f008 fa02 	bl	800a214 <vPortEnterCritical>
	HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
 8001e10:	f107 0113 	add.w	r1, r7, #19
 8001e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4820      	ldr	r0, [pc, #128]	; (8001e9c <Ultrasonic_Feedback+0xbc>)
 8001e1c:	f005 f91b 	bl	8007056 <HAL_UART_Transmit>
	delay(200);
 8001e20:	20c8      	movs	r0, #200	; 0xc8
 8001e22:	f7ff fccb 	bl	80017bc <delay>
	HAL_UART_Receive(&huart5,(uint8_t*) &Rx_Buf,3,1000);
 8001e26:	f107 0110 	add.w	r1, r7, #16
 8001e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2e:	2203      	movs	r2, #3
 8001e30:	481a      	ldr	r0, [pc, #104]	; (8001e9c <Ultrasonic_Feedback+0xbc>)
 8001e32:	f005 f9a2 	bl	800717a <HAL_UART_Receive>
	taskEXIT_CRITICAL();
 8001e36:	f008 fa1d 	bl	800a274 <vPortExitCritical>
	Data=Data | (((uint32_t) (Rx_Buf[0]))<<16);
 8001e3a:	7c3b      	ldrb	r3, [r7, #16]
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61fb      	str	r3, [r7, #28]
	Data=Data | (((uint32_t) (Rx_Buf[1]))<<8);
 8001e44:	7c7b      	ldrb	r3, [r7, #17]
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61fb      	str	r3, [r7, #28]
	Data=Data |((uint32_t) (Rx_Buf[2]));
 8001e4e:	7cbb      	ldrb	r3, [r7, #18]
 8001e50:	461a      	mov	r2, r3
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61fb      	str	r3, [r7, #28]
	//HAL_UART_Transmit(&huart1, (uint8_t *) &Data, 4, 0xFFFF);
	distance.front=Data/1000;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <Ultrasonic_Feedback+0xc0>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6a:	edc7 7a02 	vstr	s15, [r7, #8]
	return distance;
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	f107 0208 	add.w	r2, r7, #8
 8001e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	ee07 2a10 	vmov	s14, r2
 8001e86:	ee07 3a90 	vmov	s15, r3
}
 8001e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e8e:	eef0 0a67 	vmov.f32	s1, s15
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	0800a9cc 	.word	0x0800a9cc
 8001e9c:	20004180 	.word	0x20004180
 8001ea0:	10624dd3 	.word	0x10624dd3

08001ea4 <Ultrasonic_Feedback_front>:

void Ultrasonic_Feedback_front(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Front,3);
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	4906      	ldr	r1, [pc, #24]	; (8001ec4 <Ultrasonic_Feedback_front+0x20>)
 8001eac:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <Ultrasonic_Feedback_front+0x24>)
 8001eae:	f005 fa06 	bl	80072be <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
 8001eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4904      	ldr	r1, [pc, #16]	; (8001ecc <Ultrasonic_Feedback_front+0x28>)
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <Ultrasonic_Feedback_front+0x24>)
 8001ebc:	f005 f8cb 	bl	8007056 <HAL_UART_Transmit>

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000029c 	.word	0x2000029c
 8001ec8:	20004180 	.word	0x20004180
 8001ecc:	2000000c 	.word	0x2000000c

08001ed0 <Ultrasonic_Feedback_right>:


}

float Ultrasonic_Feedback_right(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
    float diatance_temp=0;
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]

	HAL_UART_Receive_IT(&huart4,(uint8_t*) &Rx_Buf_Right,3);
 8001edc:	2203      	movs	r2, #3
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <Ultrasonic_Feedback_right+0x48>)
 8001ee0:	480e      	ldr	r0, [pc, #56]	; (8001f1c <Ultrasonic_Feedback_right+0x4c>)
 8001ee2:	f005 f9ec 	bl	80072be <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart4,(uint8_t*) &info,1,0xFFFF);
 8001ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eea:	2201      	movs	r2, #1
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <Ultrasonic_Feedback_right+0x50>)
 8001eee:	480b      	ldr	r0, [pc, #44]	; (8001f1c <Ultrasonic_Feedback_right+0x4c>)
 8001ef0:	f005 f8b1 	bl	8007056 <HAL_UART_Transmit>
	osSemaphoreWait(gomile6SemHandle, osWaitForever);
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <Ultrasonic_Feedback_right+0x54>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	4618      	mov	r0, r3
 8001efe:	f006 f81d 	bl	8007f3c <osSemaphoreWait>
	diatance_temp=right_distance.right;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <Ultrasonic_Feedback_right+0x58>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	607b      	str	r3, [r7, #4]
	return diatance_temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	ee07 3a90 	vmov	s15, r3

	//delay(200);
}
 8001f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000298 	.word	0x20000298
 8001f1c:	20004224 	.word	0x20004224
 8001f20:	2000000c 	.word	0x2000000c
 8001f24:	20004040 	.word	0x20004040
 8001f28:	200002b4 	.word	0x200002b4

08001f2c <HAL_UART_RxCpltCallback>:
//						     }
//
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  	if (huart->Instance==USART2){
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6c      	ldr	r2, [pc, #432]	; (80020ec <HAL_UART_RxCpltCallback+0x1c0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d142      	bne.n	8001fc4 <HAL_UART_RxCpltCallback+0x98>
  		Camera_Data=0x0000;
 8001f3e:	4b6c      	ldr	r3, [pc, #432]	; (80020f0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data | (((uint16_t) (Rx_Buf[0]))<<8);
 8001f44:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	4b68      	ldr	r3, [pc, #416]	; (80020f0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f5e:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data|((uint16_t) (Rx_Buf[1]));
 8001f60:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001f62:	785b      	ldrb	r3, [r3, #1]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b61      	ldr	r3, [pc, #388]	; (80020f0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f74:	801a      	strh	r2, [r3, #0]
  		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 8001f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f7a:	485f      	ldr	r0, [pc, #380]	; (80020f8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001f7c:	f003 f9cf 	bl	800531e <HAL_GPIO_TogglePin>
  		Rx_Buf[0]=0;
 8001f80:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
  		Rx_Buf[1]=0;
 8001f86:	4b5b      	ldr	r3, [pc, #364]	; (80020f4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	705a      	strb	r2, [r3, #1]
  		osSemaphoreRelease(CameraUARTSemHandle);
 8001f8c:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_UART_RxCpltCallback+0x1d0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f006 f821 	bl	8007fd8 <osSemaphoreRelease>
  		if((Camera_Data & 0x4000) != 0)//IF Apriltag is found
 8001f96:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <HAL_UART_RxCpltCallback+0x82>
  		{
  			osSemaphoreRelease(ApriltagSemHandle);
 8001fa4:	4b56      	ldr	r3, [pc, #344]	; (8002100 <HAL_UART_RxCpltCallback+0x1d4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f006 f815 	bl	8007fd8 <osSemaphoreRelease>
  		}
  		if(camera_recieve_IT_flag)
 8001fae:	4b55      	ldr	r3, [pc, #340]	; (8002104 <HAL_UART_RxCpltCallback+0x1d8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8096 	beq.w	80020e4 <HAL_UART_RxCpltCallback+0x1b8>
  			HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001fb8:	2202      	movs	r2, #2
 8001fba:	494e      	ldr	r1, [pc, #312]	; (80020f4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001fbc:	4852      	ldr	r0, [pc, #328]	; (8002108 <HAL_UART_RxCpltCallback+0x1dc>)
 8001fbe:	f005 f97e 	bl	80072be <HAL_UART_Receive_IT>
  		 		HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
  		 	}
  			//HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Sonic,3);
  			//HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
  		}
  }
 8001fc2:	e08f      	b.n	80020e4 <HAL_UART_RxCpltCallback+0x1b8>
  	else if (huart->Instance==UART4)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a50      	ldr	r2, [pc, #320]	; (800210c <HAL_UART_RxCpltCallback+0x1e0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d131      	bne.n	8002032 <HAL_UART_RxCpltCallback+0x106>
		uint32_t Data=0x00000000;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
	 	Data=Data | (((uint32_t) (Rx_Buf_Right[0]))<<16);
 8001fd2:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <HAL_UART_RxCpltCallback+0x1e4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	041b      	lsls	r3, r3, #16
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
	 	Data=Data | (((uint32_t) (Rx_Buf_Right[1]))<<8);
 8001fe0:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <HAL_UART_RxCpltCallback+0x1e4>)
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60bb      	str	r3, [r7, #8]
	 	Data=Data |((uint32_t) (Rx_Buf_Right[2]));
 8001fee:	4b48      	ldr	r3, [pc, #288]	; (8002110 <HAL_UART_RxCpltCallback+0x1e4>)
 8001ff0:	789b      	ldrb	r3, [r3, #2]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
	 	Rx_Buf_Right[0]=0;
 8001ffc:	4b44      	ldr	r3, [pc, #272]	; (8002110 <HAL_UART_RxCpltCallback+0x1e4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
		Rx_Buf_Right[1]=0;
 8002002:	4b43      	ldr	r3, [pc, #268]	; (8002110 <HAL_UART_RxCpltCallback+0x1e4>)
 8002004:	2200      	movs	r2, #0
 8002006:	705a      	strb	r2, [r3, #1]
	    Rx_Buf_Right[2]=0;
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_UART_RxCpltCallback+0x1e4>)
 800200a:	2200      	movs	r2, #0
 800200c:	709a      	strb	r2, [r3, #2]
	 	right_distance.right=Data/1000;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4a40      	ldr	r2, [pc, #256]	; (8002114 <HAL_UART_RxCpltCallback+0x1e8>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002020:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_UART_RxCpltCallback+0x1ec>)
 8002022:	edc3 7a01 	vstr	s15, [r3, #4]
	 	osSemaphoreRelease(gomile6SemHandle);
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_UART_RxCpltCallback+0x1f0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f005 ffd4 	bl	8007fd8 <osSemaphoreRelease>
  }
 8002030:	e058      	b.n	80020e4 <HAL_UART_RxCpltCallback+0x1b8>
  	else if (huart->Instance==UART5){
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <HAL_UART_RxCpltCallback+0x1f4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d153      	bne.n	80020e4 <HAL_UART_RxCpltCallback+0x1b8>
  			uint32_t Data=0x00000000;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  			Data=Data | (((uint32_t) (Rx_Buf_Front[0]))<<16);
 8002040:	4b38      	ldr	r3, [pc, #224]	; (8002124 <HAL_UART_RxCpltCallback+0x1f8>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  			Data=Data | (((uint32_t) (Rx_Buf_Front[1]))<<8);
 800204e:	4b35      	ldr	r3, [pc, #212]	; (8002124 <HAL_UART_RxCpltCallback+0x1f8>)
 8002050:	785b      	ldrb	r3, [r3, #1]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  			Data=Data |((uint32_t) (Rx_Buf_Front[2]));
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_UART_RxCpltCallback+0x1f8>)
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  			front_distance.front=Data/1000;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4a29      	ldr	r2, [pc, #164]	; (8002114 <HAL_UART_RxCpltCallback+0x1e8>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_UART_RxCpltCallback+0x1fc>)
 800207e:	edc3 7a00 	vstr	s15, [r3]
  			Rx_Buf_Front[0]=0;
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_UART_RxCpltCallback+0x1f8>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
  			Rx_Buf_Front[1]=0;
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_UART_RxCpltCallback+0x1f8>)
 800208a:	2200      	movs	r2, #0
 800208c:	705a      	strb	r2, [r3, #1]
  			Rx_Buf_Front[2]=0;
 800208e:	4b25      	ldr	r3, [pc, #148]	; (8002124 <HAL_UART_RxCpltCallback+0x1f8>)
 8002090:	2200      	movs	r2, #0
 8002092:	709a      	strb	r2, [r3, #2]
  		 	front_distance.front=Data/1000;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_UART_RxCpltCallback+0x1e8>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_UART_RxCpltCallback+0x1fc>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]
  		 	if(front_distance.front<250){
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_UART_RxCpltCallback+0x1fc>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800212c <HAL_UART_RxCpltCallback+0x200>
 80020b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	d505      	bpl.n	80020cc <HAL_UART_RxCpltCallback+0x1a0>
  	  		 	osSemaphoreRelease(UltraFrontSemHandle);
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_UART_RxCpltCallback+0x204>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f005 ff87 	bl	8007fd8 <osSemaphoreRelease>
  }
 80020ca:	e00b      	b.n	80020e4 <HAL_UART_RxCpltCallback+0x1b8>
  		 		HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Front,3);
 80020cc:	2203      	movs	r2, #3
 80020ce:	4915      	ldr	r1, [pc, #84]	; (8002124 <HAL_UART_RxCpltCallback+0x1f8>)
 80020d0:	4818      	ldr	r0, [pc, #96]	; (8002134 <HAL_UART_RxCpltCallback+0x208>)
 80020d2:	f005 f8f4 	bl	80072be <HAL_UART_Receive_IT>
  		 		HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
 80020d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020da:	2201      	movs	r2, #1
 80020dc:	4916      	ldr	r1, [pc, #88]	; (8002138 <HAL_UART_RxCpltCallback+0x20c>)
 80020de:	4815      	ldr	r0, [pc, #84]	; (8002134 <HAL_UART_RxCpltCallback+0x208>)
 80020e0:	f004 ffb9 	bl	8007056 <HAL_UART_Transmit>
  }
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40004400 	.word	0x40004400
 80020f0:	20000296 	.word	0x20000296
 80020f4:	20000294 	.word	0x20000294
 80020f8:	40021400 	.word	0x40021400
 80020fc:	20004124 	.word	0x20004124
 8002100:	2000421c 	.word	0x2000421c
 8002104:	200002c8 	.word	0x200002c8
 8002108:	200042b0 	.word	0x200042b0
 800210c:	40004c00 	.word	0x40004c00
 8002110:	20000298 	.word	0x20000298
 8002114:	10624dd3 	.word	0x10624dd3
 8002118:	200002b4 	.word	0x200002b4
 800211c:	20004040 	.word	0x20004040
 8002120:	40005000 	.word	0x40005000
 8002124:	2000029c 	.word	0x2000029c
 8002128:	200002bc 	.word	0x200002bc
 800212c:	437a0000 	.word	0x437a0000
 8002130:	20004128 	.word	0x20004128
 8002134:	20004180 	.word	0x20004180
 8002138:	2000000c 	.word	0x2000000c

0800213c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <HAL_UART_ErrorCallback+0x68>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d110      	bne.n	8002170 <HAL_UART_ErrorCallback+0x34>
	{
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_UART_ErrorCallback+0x6c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_UART_ErrorCallback+0x6c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8002164:	2202      	movs	r2, #2
 8002166:	4911      	ldr	r1, [pc, #68]	; (80021ac <HAL_UART_ErrorCallback+0x70>)
 8002168:	480f      	ldr	r0, [pc, #60]	; (80021a8 <HAL_UART_ErrorCallback+0x6c>)
 800216a:	f005 f8a8 	bl	80072be <HAL_UART_Receive_IT>
	else if (huart->Instance==UART4)
	{
		__HAL_UART_CLEAR_OREFLAG(&huart4);
		HAL_UART_Receive_IT(&huart4,(uint8_t*) &Rx_Buf,3);
	}
}
 800216e:	e014      	b.n	800219a <HAL_UART_ErrorCallback+0x5e>
	else if (huart->Instance==UART4)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_UART_ErrorCallback+0x74>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10f      	bne.n	800219a <HAL_UART_ErrorCallback+0x5e>
		__HAL_UART_CLEAR_OREFLAG(&huart4);
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_UART_ErrorCallback+0x78>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_UART_ErrorCallback+0x78>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
		HAL_UART_Receive_IT(&huart4,(uint8_t*) &Rx_Buf,3);
 8002190:	2203      	movs	r2, #3
 8002192:	4906      	ldr	r1, [pc, #24]	; (80021ac <HAL_UART_ErrorCallback+0x70>)
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <HAL_UART_ErrorCallback+0x78>)
 8002196:	f005 f892 	bl	80072be <HAL_UART_Receive_IT>
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40004400 	.word	0x40004400
 80021a8:	200042b0 	.word	0x200042b0
 80021ac:	20000294 	.word	0x20000294
 80021b0:	40004c00 	.word	0x40004c00
 80021b4:	20004224 	.word	0x20004224

080021b8 <color_judge>:

void color_judge(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
	finalcolor=blue>pink? 1:2;
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <color_judge+0x64>)
 80021be:	881a      	ldrh	r2, [r3, #0]
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <color_judge+0x68>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d901      	bls.n	80021cc <color_judge+0x14>
 80021c8:	2201      	movs	r2, #1
 80021ca:	e000      	b.n	80021ce <color_judge+0x16>
 80021cc:	2202      	movs	r2, #2
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <color_judge+0x6c>)
 80021d0:	701a      	strb	r2, [r3, #0]
	if(finalcolor==1)
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <color_judge+0x6c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10b      	bne.n	80021f2 <color_judge+0x3a>
	{
	    finalcolor=blue>yellow? 1:3;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <color_judge+0x64>)
 80021dc:	881a      	ldrh	r2, [r3, #0]
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <color_judge+0x70>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d901      	bls.n	80021ea <color_judge+0x32>
 80021e6:	2201      	movs	r2, #1
 80021e8:	e000      	b.n	80021ec <color_judge+0x34>
 80021ea:	2203      	movs	r2, #3
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <color_judge+0x6c>)
 80021ee:	701a      	strb	r2, [r3, #0]
	else if(finalcolor==2)
	{
		finalcolor=pink>yellow? 2:3;
	}

}
 80021f0:	e00e      	b.n	8002210 <color_judge+0x58>
	else if(finalcolor==2)
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <color_judge+0x6c>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d10a      	bne.n	8002210 <color_judge+0x58>
		finalcolor=pink>yellow? 2:3;
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <color_judge+0x68>)
 80021fc:	881a      	ldrh	r2, [r3, #0]
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <color_judge+0x70>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d901      	bls.n	800220a <color_judge+0x52>
 8002206:	2202      	movs	r2, #2
 8002208:	e000      	b.n	800220c <color_judge+0x54>
 800220a:	2203      	movs	r2, #3
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <color_judge+0x6c>)
 800220e:	701a      	strb	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	200002d8 	.word	0x200002d8
 8002220:	200002da 	.word	0x200002da
 8002224:	20004090 	.word	0x20004090
 8002228:	200002dc 	.word	0x200002dc

0800222c <PWM_SET_LEFT>:

void PWM_SET_LEFT(int32_t duty)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da11      	bge.n	800225e <PWM_SET_LEFT+0x32>
		{
		if (duty <= -2000)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002240:	dc02      	bgt.n	8002248 <PWM_SET_LEFT+0x1c>
			duty = 1;
 8002242:	2301      	movs	r3, #1
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	e003      	b.n	8002250 <PWM_SET_LEFT+0x24>
		else
			duty = 2000 + duty;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800224e:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002250:	2201      	movs	r2, #1
 8002252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002256:	480f      	ldr	r0, [pc, #60]	; (8002294 <PWM_SET_LEFT+0x68>)
 8002258:	f003 f848 	bl	80052ec <HAL_GPIO_WritePin>
 800225c:	e00a      	b.n	8002274 <PWM_SET_LEFT+0x48>
		}
	else
		{
			if (duty == 0)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <PWM_SET_LEFT+0x3c>
				duty = 1;
 8002264:	2301      	movs	r3, #1
 8002266:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226e:	4809      	ldr	r0, [pc, #36]	; (8002294 <PWM_SET_LEFT+0x68>)
 8002270:	f003 f83c 	bl	80052ec <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800227a:	dd02      	ble.n	8002282 <PWM_SET_LEFT+0x56>
		duty = 2000;
 800227c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002280:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,duty);
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <PWM_SET_LEFT+0x6c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40020000 	.word	0x40020000
 8002298:	20004134 	.word	0x20004134
 800229c:	00000000 	.word	0x00000000

080022a0 <PWM_SET_RIGHT>:

void PWM_SET_RIGHT(int32_t duty)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	duty=duty*PWM_Bias;
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7fe f8e3 	bl	8000474 <__aeabi_i2d>
 80022ae:	a329      	add	r3, pc, #164	; (adr r3, 8002354 <PWM_SET_RIGHT+0xb4>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fe f948 	bl	8000548 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fb54 	bl	800096c <__aeabi_d2iz>
 80022c4:	4603      	mov	r3, r0
 80022c6:	607b      	str	r3, [r7, #4]
	if ( duty < 0 )
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da1d      	bge.n	800230a <PWM_SET_RIGHT+0x6a>
		{
		if (duty <= -2000*PWM_Bias)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <PWM_SET_RIGHT+0xa8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	da02      	bge.n	80022dc <PWM_SET_RIGHT+0x3c>
			duty = 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	e00f      	b.n	80022fc <PWM_SET_RIGHT+0x5c>
		else
			duty = 2000*PWM_Bias + duty;
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7fe f8c9 	bl	8000474 <__aeabi_i2d>
 80022e2:	a317      	add	r3, pc, #92	; (adr r3, 8002340 <PWM_SET_RIGHT+0xa0>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fd ff78 	bl	80001dc <__adddf3>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fb3a 	bl	800096c <__aeabi_d2iz>
 80022f8:	4603      	mov	r3, r0
 80022fa:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002302:	4812      	ldr	r0, [pc, #72]	; (800234c <PWM_SET_RIGHT+0xac>)
 8002304:	f002 fff2 	bl	80052ec <HAL_GPIO_WritePin>
 8002308:	e00a      	b.n	8002320 <PWM_SET_RIGHT+0x80>
		}
	else
		{
			if (duty == 0)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <PWM_SET_RIGHT+0x74>
				duty = 1;
 8002310:	2301      	movs	r3, #1
 8002312:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800231a:	480c      	ldr	r0, [pc, #48]	; (800234c <PWM_SET_RIGHT+0xac>)
 800231c:	f002 ffe6 	bl	80052ec <HAL_GPIO_WritePin>
		}
	if (duty > 2000*PWM_Bias)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f240 724a 	movw	r2, #1866	; 0x74a
 8002326:	4293      	cmp	r3, r2
 8002328:	dd02      	ble.n	8002330 <PWM_SET_RIGHT+0x90>
		duty = 2000*PWM_Bias;
 800232a:	f240 734a 	movw	r3, #1866	; 0x74a
 800232e:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,duty);
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <PWM_SET_RIGHT+0xb0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	cccccccd 	.word	0xcccccccd
 8002344:	409d28cc 	.word	0x409d28cc
 8002348:	fffff8b6 	.word	0xfffff8b6
 800234c:	40020c00 	.word	0x40020c00
 8002350:	20004094 	.word	0x20004094
 8002354:	87fcb924 	.word	0x87fcb924
 8002358:	3feddbf4 	.word	0x3feddbf4

0800235c <PID_Apriltag>:

int PID_Apriltag(float Accept_Error)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	; 0x38
 8002360:	af00      	add	r7, sp, #0
 8002362:	ed87 0a01 	vstr	s0, [r7, #4]

	float PID_target=0;
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
	float PID_Error_Last=0;
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
	float PID_Output=0,PID_Input=0;;
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
	float Error = 0, Error_Total=0;
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
	float KP=2, KI=0, KD=0.5;
 800238a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800239a:	60fb      	str	r3, [r7, #12]
	int t=0;
 800239c:	2300      	movs	r3, #0
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t Flag=0; //Indicate that if verifying process begin.
 80023a0:	2300      	movs	r3, #0
 80023a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Car_Stop();
 80023a6:	f7ff f9fb 	bl	80017a0 <Car_Stop>
 	osSemaphoreWait(ApriltagSemHandle, 1000);
 80023aa:	4b78      	ldr	r3, [pc, #480]	; (800258c <PID_Apriltag+0x230>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023b2:	4618      	mov	r0, r3
 80023b4:	f005 fdc2 	bl	8007f3c <osSemaphoreWait>
  for(;;)
  {
	  	 osSemaphoreWait(CameraUARTSemHandle, 0);
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <PID_Apriltag+0x234>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f005 fdbc 	bl	8007f3c <osSemaphoreWait>
	  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 80023c4:	4b72      	ldr	r3, [pc, #456]	; (8002590 <PID_Apriltag+0x234>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	4618      	mov	r0, r3
 80023ce:	f005 fdb5 	bl	8007f3c <osSemaphoreWait>
	  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <PID_Apriltag+0x238>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023dc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e8:	edc7 7a07 	vstr	s15, [r7, #28]
	  	 Error=PID_target - PID_Input;
 80023ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80023f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80023f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f8:	edc7 7a06 	vstr	s15, [r7, #24]
	  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 80023fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002400:	eef1 7a67 	vneg.f32	s15, s15
 8002404:	ed97 7a06 	vldr	s14, [r7, #24]
 8002408:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	dd17      	ble.n	8002442 <PID_Apriltag+0xe6>
 8002412:	ed97 7a06 	vldr	s14, [r7, #24]
 8002416:	edd7 7a01 	vldr	s15, [r7, #4]
 800241a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	d50e      	bpl.n	8002442 <PID_Apriltag+0xe6>
 8002424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <PID_Apriltag+0xe6>
	  	 {
	  		 t++;
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	3301      	adds	r3, #1
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
	  		if(t>2)
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	2b02      	cmp	r3, #2
 8002436:	dd04      	ble.n	8002442 <PID_Apriltag+0xe6>
	  		{
	  			Flag = 1;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
	  		}
	  	 }
	  	 if(Flag)
 8002442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002446:	2b00      	cmp	r3, #0
 8002448:	d026      	beq.n	8002498 <PID_Apriltag+0x13c>
	  	 {
	  		if(t>3)
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	2b03      	cmp	r3, #3
 800244e:	dd06      	ble.n	800245e <PID_Apriltag+0x102>
	  		{
	  			Flag=0;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
	  			return 0;
 800245a:	2300      	movs	r3, #0
 800245c:	e092      	b.n	8002584 <PID_Apriltag+0x228>
	  		}
	  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 800245e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002462:	eef1 7a67 	vneg.f32	s15, s15
 8002466:	ed97 7a06 	vldr	s14, [r7, #24]
 800246a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	dd0c      	ble.n	800248e <PID_Apriltag+0x132>
 8002474:	ed97 7a06 	vldr	s14, [r7, #24]
 8002478:	edd7 7a01 	vldr	s15, [r7, #4]
 800247c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d503      	bpl.n	800248e <PID_Apriltag+0x132>
	  		{
	  			t++;
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	3301      	adds	r3, #1
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
 800248c:	e004      	b.n	8002498 <PID_Apriltag+0x13c>
	  		}
	  		else
	  		{
	  			Flag=0;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 8002494:	2300      	movs	r3, #0
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
	  		}
	  	 }
	  	 Error_Total=Error_Total+KI*Error;
 8002498:	ed97 7a04 	vldr	s14, [r7, #16]
 800249c:	edd7 7a06 	vldr	s15, [r7, #24]
 80024a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     PID_Output = KP * Error  +
 80024b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80024b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80024b8:	ee27 7a27 	vmul.f32	s14, s14, s15
	 				  KD * (Error - PID_Error_Last ) +
 80024bc:	edd7 6a06 	vldr	s13, [r7, #24]
 80024c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	     PID_Output = KP * Error  +
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
					  Error_Total;
	     PID_Error_Last = Error;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
	     if(PID_Output < 0)
 80024e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	d513      	bpl.n	800251a <PID_Apriltag+0x1be>
	     {
	    	 PID_Output-=PWM_Lowest;
 80024f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024f6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002598 <PID_Apriltag+0x23c>
 80024fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    	 if(-PID_Output > PWM_Higest)
 8002502:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002506:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800259c <PID_Apriltag+0x240>
 800250a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	d520      	bpl.n	8002556 <PID_Apriltag+0x1fa>
	    	 	PID_Output=-PWM_Higest;
 8002514:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <PID_Apriltag+0x244>)
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
 8002518:	e01d      	b.n	8002556 <PID_Apriltag+0x1fa>
	     }

	     else if(PID_Output > 0)
 800251a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800251e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002526:	dd13      	ble.n	8002550 <PID_Apriltag+0x1f4>
	     {
	    	 PID_Output+=PWM_Lowest;
 8002528:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800252c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002598 <PID_Apriltag+0x23c>
 8002530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002534:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    	 if(-PID_Output > PWM_Higest)
 8002538:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800253c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800259c <PID_Apriltag+0x240>
 8002540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	d505      	bpl.n	8002556 <PID_Apriltag+0x1fa>
	    	 	PID_Output=-PWM_Higest;
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <PID_Apriltag+0x244>)
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
 800254e:	e002      	b.n	8002556 <PID_Apriltag+0x1fa>
	     }
	     else
	    	PID_Output=0;
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
	    	 taskENTER_CRITICAL();
 8002556:	f007 fe5d 	bl	800a214 <vPortEnterCritical>
	    	 PWM_SET_RIGHT ((int32_t) (-PID_Output));
 800255a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800255e:	eef1 7a67 	vneg.f32	s15, s15
 8002562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002566:	ee17 0a90 	vmov	r0, s15
 800256a:	f7ff fe99 	bl	80022a0 <PWM_SET_RIGHT>
	    	 PWM_SET_LEFT  ((int32_t)   PID_Output );
 800256e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002576:	ee17 0a90 	vmov	r0, s15
 800257a:	f7ff fe57 	bl	800222c <PWM_SET_LEFT>
	    	 taskEXIT_CRITICAL();
 800257e:	f007 fe79 	bl	800a274 <vPortExitCritical>
	  	 osSemaphoreWait(CameraUARTSemHandle, 0);
 8002582:	e719      	b.n	80023b8 <PID_Apriltag+0x5c>
	     }
	     delay(2);

}
 8002584:	4618      	mov	r0, r3
 8002586:	3738      	adds	r7, #56	; 0x38
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	2000421c 	.word	0x2000421c
 8002590:	20004124 	.word	0x20004124
 8002594:	20000296 	.word	0x20000296
 8002598:	43fa0000 	.word	0x43fa0000
 800259c:	c4af0000 	.word	0xc4af0000
 80025a0:	c4af0000 	.word	0xc4af0000

080025a4 <Apriltag_Verify>:

int Apriltag_Verify(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
	int sem_count=0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
	for(int i=0;i<10;i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	e00f      	b.n	80025d4 <Apriltag_Verify+0x30>
	{
		if(osSemaphoreWait(ApriltagSemHandle, 500)==0)
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <Apriltag_Verify+0x4c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80025bc:	4618      	mov	r0, r3
 80025be:	f005 fcbd 	bl	8007f3c <osSemaphoreWait>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <Apriltag_Verify+0x2a>
			sem_count++;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3301      	adds	r3, #1
 80025cc:	607b      	str	r3, [r7, #4]
	for(int i=0;i<10;i++)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b09      	cmp	r3, #9
 80025d8:	ddec      	ble.n	80025b4 <Apriltag_Verify+0x10>
	}
	if(sem_count>8)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	dd01      	ble.n	80025e4 <Apriltag_Verify+0x40>
		return 1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <Apriltag_Verify+0x42>
	else
		return 0;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000421c 	.word	0x2000421c

080025f4 <stepping>:

void stepping(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
     float Ultra_Input=0, Ultra_Input_last=0;
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
     float error=0;
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
     int32_t pulse_increment=50;
 800260c:	2332      	movs	r3, #50	; 0x32
 800260e:	617b      	str	r3, [r7, #20]
     //float pulse_increment_float=0;
     float Kp=15;
 8002610:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <stepping+0x154>)
 8002612:	613b      	str	r3, [r7, #16]
     float PWM=0, pwm_left, pwm_right;
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
     vTaskResume(MileageHandle);
 800261a:	4b4c      	ldr	r3, [pc, #304]	; (800274c <stepping+0x158>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f006 fe2a 	bl	8009278 <vTaskResume>
//	 int32_t pwm_right=0;
//   int32_t pwm_left=0;

     for(int i=0;;i++)
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
     {
    	  if(distance_flag)
 8002628:	4b49      	ldr	r3, [pc, #292]	; (8002750 <stepping+0x15c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 8086 	bne.w	800273e <stepping+0x14a>
    	  {
    		  return;
    	  }
		  critical_pulses=0;
 8002632:	4b48      	ldr	r3, [pc, #288]	; (8002754 <stepping+0x160>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
		  vTaskResume(MileageHandle);
 8002638:	4b44      	ldr	r3, [pc, #272]	; (800274c <stepping+0x158>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f006 fe1b 	bl	8009278 <vTaskResume>
		  //osSemaphoreWait(MileageSemHandle, osWaitForever);
		  critical_pulses=pulse_increment+number_of_pulses;
 8002642:	4b45      	ldr	r3, [pc, #276]	; (8002758 <stepping+0x164>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4413      	add	r3, r2
 800264a:	4a42      	ldr	r2, [pc, #264]	; (8002754 <stepping+0x160>)
 800264c:	6013      	str	r3, [r2, #0]
	  	  vTaskSuspend(PIDCameraHandle);
 800264e:	4b43      	ldr	r3, [pc, #268]	; (800275c <stepping+0x168>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f006 fd4c 	bl	80090f0 <vTaskSuspend>
	  	  //delay(200);
	  	  //PID_Straight_Reset_Flag=0;
	      //osSemaphoreWait(MileageSemHandle, osWaitForever);
	      //PID_Straight_Reset_Flag=1;
	      //vTaskSuspend(GoStraightHandle);
	  	  osSemaphoreRelease(MileageSemHandle);
 8002658:	4b41      	ldr	r3, [pc, #260]	; (8002760 <stepping+0x16c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f005 fcbb 	bl	8007fd8 <osSemaphoreRelease>
	      osSemaphoreWait(MileageSemHandle, 0);
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <stepping+0x16c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f005 fc67 	bl	8007f3c <osSemaphoreWait>
	      taskENTER_CRITICAL();
 800266e:	f007 fdd1 	bl	800a214 <vPortEnterCritical>
	      PWM_SET_LEFT(1000);
 8002672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002676:	f7ff fdd9 	bl	800222c <PWM_SET_LEFT>
	  	  PWM_SET_RIGHT(1000);
 800267a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800267e:	f7ff fe0f 	bl	80022a0 <PWM_SET_RIGHT>
	      taskEXIT_CRITICAL();
 8002682:	f007 fdf7 	bl	800a274 <vPortExitCritical>
	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <stepping+0x16c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f04f 31ff 	mov.w	r1, #4294967295
 800268e:	4618      	mov	r0, r3
 8002690:	f005 fc54 	bl	8007f3c <osSemaphoreWait>
	  	  Car_Stop();
 8002694:	f7ff f884 	bl	80017a0 <Car_Stop>
	  	  delay(100);
 8002698:	2064      	movs	r0, #100	; 0x64
 800269a:	f7ff f88f 	bl	80017bc <delay>
	  	  vTaskSuspend(MileageHandle);
 800269e:	4b2b      	ldr	r3, [pc, #172]	; (800274c <stepping+0x158>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f006 fd24 	bl	80090f0 <vTaskSuspend>
	     Ultra_Input = Ultrasonic_Feedback_right();
 80026a8:	f7ff fc12 	bl	8001ed0 <Ultrasonic_Feedback_right>
 80026ac:	ed87 0a07 	vstr	s0, [r7, #28]
	     error = Ultra_Input - Ultra_Input_last;
 80026b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80026b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026bc:	edc7 7a06 	vstr	s15, [r7, #24]
	     Ultra_Input_last = Ultra_Input;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
	     if(i==0)
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d034      	beq.n	8002734 <stepping+0x140>
	     }
	     else
	     {
//         if(error>0)
//	     {
	    	 PWM=Kp*error;
 80026ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80026ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80026d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d6:	edc7 7a03 	vstr	s15, [r7, #12]
	    	 PWM = PWM > 250 ? 250 : PWM;
 80026da:	edd7 7a03 	vldr	s15, [r7, #12]
 80026de:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002764 <stepping+0x170>
 80026e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	dd01      	ble.n	80026f0 <stepping+0xfc>
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <stepping+0x174>)
 80026ee:	e000      	b.n	80026f2 <stepping+0xfe>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	60fb      	str	r3, [r7, #12]
	    	 pwm_right = -PWM;
 80026f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026f8:	eef1 7a67 	vneg.f32	s15, s15
 80026fc:	edc7 7a02 	vstr	s15, [r7, #8]
	    	 pwm_left = PWM;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	607b      	str	r3, [r7, #4]
			 taskENTER_CRITICAL();
 8002704:	f007 fd86 	bl	800a214 <vPortEnterCritical>
	         PWM_SET_RIGHT (pwm_right);
 8002708:	edd7 7a02 	vldr	s15, [r7, #8]
 800270c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002710:	ee17 0a90 	vmov	r0, s15
 8002714:	f7ff fdc4 	bl	80022a0 <PWM_SET_RIGHT>
	         PWM_SET_LEFT(pwm_left);
 8002718:	edd7 7a01 	vldr	s15, [r7, #4]
 800271c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002720:	ee17 0a90 	vmov	r0, s15
 8002724:	f7ff fd82 	bl	800222c <PWM_SET_LEFT>
			 taskEXIT_CRITICAL();
 8002728:	f007 fda4 	bl	800a274 <vPortExitCritical>
			 delay(100);
 800272c:	2064      	movs	r0, #100	; 0x64
 800272e:	f7ff f845 	bl	80017bc <delay>
 8002732:	e000      	b.n	8002736 <stepping+0x142>
	    	 continue;
 8002734:	bf00      	nop
     for(int i=0;;i++)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	3301      	adds	r3, #1
 800273a:	623b      	str	r3, [r7, #32]
    	  if(distance_flag)
 800273c:	e774      	b.n	8002628 <stepping+0x34>
    		  return;
 800273e:	bf00      	nop
	     }
     }
}
 8002740:	3728      	adds	r7, #40	; 0x28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	41700000 	.word	0x41700000
 800274c:	20004044 	.word	0x20004044
 8002750:	200002c4 	.word	0x200002c4
 8002754:	200002d4 	.word	0x200002d4
 8002758:	200002d0 	.word	0x200002d0
 800275c:	20004120 	.word	0x20004120
 8002760:	2000420c 	.word	0x2000420c
 8002764:	437a0000 	.word	0x437a0000
 8002768:	437a0000 	.word	0x437a0000

0800276c <stepping2>:

void stepping2(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	; 0x30
 8002770:	af00      	add	r7, sp, #0
     float Ultra_Input=0, Ultra_Input_last=0,Ultra_Input_last_last=0;
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
     float error=0;
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
     float judge=0;
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
     int32_t pulse_increment=50;
 8002790:	2332      	movs	r3, #50	; 0x32
 8002792:	617b      	str	r3, [r7, #20]
     float Kp=15;
 8002794:	4b5d      	ldr	r3, [pc, #372]	; (800290c <stepping2+0x1a0>)
 8002796:	613b      	str	r3, [r7, #16]
     float PWM=0, pwm_left, pwm_right;
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
     //float pulse_increment_float=0;
     //float Kp=2;
     vTaskResume(MileageHandle);
 800279e:	4b5c      	ldr	r3, [pc, #368]	; (8002910 <stepping2+0x1a4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f006 fd68 	bl	8009278 <vTaskResume>
//	 int32_t pwm_right=0;
//   int32_t pwm_left=0;

     for(int i=0;;i++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
     {

		  critical_pulses=0;
 80027ac:	4b59      	ldr	r3, [pc, #356]	; (8002914 <stepping2+0x1a8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
		  vTaskResume(MileageHandle);
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <stepping2+0x1a4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f006 fd5e 	bl	8009278 <vTaskResume>
		  //osSemaphoreWait(MileageSemHandle, osWaitForever);
		  critical_pulses=pulse_increment+number_of_pulses;
 80027bc:	4b56      	ldr	r3, [pc, #344]	; (8002918 <stepping2+0x1ac>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	4413      	add	r3, r2
 80027c4:	4a53      	ldr	r2, [pc, #332]	; (8002914 <stepping2+0x1a8>)
 80027c6:	6013      	str	r3, [r2, #0]
	  	  vTaskSuspend(PIDCameraHandle);
 80027c8:	4b54      	ldr	r3, [pc, #336]	; (800291c <stepping2+0x1b0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 fc8f 	bl	80090f0 <vTaskSuspend>
	  	  //delay(200);
	  	  //PID_Straight_Reset_Flag=0;
	      //osSemaphoreWait(MileageSemHandle, osWaitForever);
	      //PID_Straight_Reset_Flag=1;
	      //vTaskSuspend(GoStraightHandle);
	  	  osSemaphoreRelease(MileageSemHandle);
 80027d2:	4b53      	ldr	r3, [pc, #332]	; (8002920 <stepping2+0x1b4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f005 fbfe 	bl	8007fd8 <osSemaphoreRelease>
	      osSemaphoreWait(MileageSemHandle, 0);
 80027dc:	4b50      	ldr	r3, [pc, #320]	; (8002920 <stepping2+0x1b4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 fbaa 	bl	8007f3c <osSemaphoreWait>
	      taskENTER_CRITICAL();
 80027e8:	f007 fd14 	bl	800a214 <vPortEnterCritical>
	      PWM_SET_LEFT(1000);
 80027ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027f0:	f7ff fd1c 	bl	800222c <PWM_SET_LEFT>
	  	  PWM_SET_RIGHT(1000);
 80027f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027f8:	f7ff fd52 	bl	80022a0 <PWM_SET_RIGHT>
	      taskEXIT_CRITICAL();
 80027fc:	f007 fd3a 	bl	800a274 <vPortExitCritical>
	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002800:	4b47      	ldr	r3, [pc, #284]	; (8002920 <stepping2+0x1b4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f04f 31ff 	mov.w	r1, #4294967295
 8002808:	4618      	mov	r0, r3
 800280a:	f005 fb97 	bl	8007f3c <osSemaphoreWait>
	  	  Car_Stop();
 800280e:	f7fe ffc7 	bl	80017a0 <Car_Stop>
	  	  delay(100);
 8002812:	2064      	movs	r0, #100	; 0x64
 8002814:	f7fe ffd2 	bl	80017bc <delay>
	  	  vTaskSuspend(MileageHandle);
 8002818:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <stepping2+0x1a4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f006 fc67 	bl	80090f0 <vTaskSuspend>
	     Ultra_Input = Ultrasonic_Feedback_right();
 8002822:	f7ff fb55 	bl	8001ed0 <Ultrasonic_Feedback_right>
 8002826:	ed87 0a08 	vstr	s0, [r7, #32]
	     judge = Ultra_Input<Ultra_Input_last? Ultra_Input:Ultra_Input_last;
 800282a:	ed97 7a08 	vldr	s14, [r7, #32]
 800282e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	d501      	bpl.n	8002840 <stepping2+0xd4>
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	e000      	b.n	8002842 <stepping2+0xd6>
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	61bb      	str	r3, [r7, #24]
	     judge = judge<Ultra_Input_last_last? judge:Ultra_Input_last_last;
 8002844:	ed97 7a06 	vldr	s14, [r7, #24]
 8002848:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800284c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d501      	bpl.n	800285a <stepping2+0xee>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	e000      	b.n	800285c <stepping2+0xf0>
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	61bb      	str	r3, [r7, #24]
	     if(judge>3000)
 800285e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002862:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002924 <stepping2+0x1b8>
 8002866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	dc48      	bgt.n	8002902 <stepping2+0x196>
	     {
	    	 return;
	     }
	     error = Ultra_Input - Ultra_Input_last;
 8002870:	ed97 7a08 	vldr	s14, [r7, #32]
 8002874:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287c:	edc7 7a07 	vstr	s15, [r7, #28]
	     Ultra_Input_last_last = Ultra_Input_last;
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
	     Ultra_Input_last = Ultra_Input;
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
	     if(i==0)
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d034      	beq.n	80028f8 <stepping2+0x18c>
	     {
	    	 continue;
	     }
	     else
	     {
	    	 PWM=Kp*error;
 800288e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002892:	edd7 7a07 	vldr	s15, [r7, #28]
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	edc7 7a03 	vstr	s15, [r7, #12]
	    	 PWM = PWM > 250 ? 250 : PWM;
 800289e:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002928 <stepping2+0x1bc>
 80028a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	dd01      	ble.n	80028b4 <stepping2+0x148>
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <stepping2+0x1c0>)
 80028b2:	e000      	b.n	80028b6 <stepping2+0x14a>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	60fb      	str	r3, [r7, #12]
	    	 pwm_right = -PWM;
 80028b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028bc:	eef1 7a67 	vneg.f32	s15, s15
 80028c0:	edc7 7a02 	vstr	s15, [r7, #8]
	    	 pwm_left = PWM;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	607b      	str	r3, [r7, #4]
			 taskENTER_CRITICAL();
 80028c8:	f007 fca4 	bl	800a214 <vPortEnterCritical>
	         PWM_SET_RIGHT (pwm_right);
 80028cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80028d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d4:	ee17 0a90 	vmov	r0, s15
 80028d8:	f7ff fce2 	bl	80022a0 <PWM_SET_RIGHT>
	         PWM_SET_LEFT(pwm_left);
 80028dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e4:	ee17 0a90 	vmov	r0, s15
 80028e8:	f7ff fca0 	bl	800222c <PWM_SET_LEFT>
			 taskEXIT_CRITICAL();
 80028ec:	f007 fcc2 	bl	800a274 <vPortExitCritical>
			 delay(100);
 80028f0:	2064      	movs	r0, #100	; 0x64
 80028f2:	f7fe ff63 	bl	80017bc <delay>
 80028f6:	e000      	b.n	80028fa <stepping2+0x18e>
	    	 continue;
 80028f8:	bf00      	nop
     for(int i=0;;i++)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	3301      	adds	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
		  critical_pulses=0;
 8002900:	e754      	b.n	80027ac <stepping2+0x40>
	    	 return;
 8002902:	bf00      	nop
	     }
     }
}
 8002904:	3730      	adds	r7, #48	; 0x30
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	41700000 	.word	0x41700000
 8002910:	20004044 	.word	0x20004044
 8002914:	200002d4 	.word	0x200002d4
 8002918:	200002d0 	.word	0x200002d0
 800291c:	20004120 	.word	0x20004120
 8002920:	2000420c 	.word	0x2000420c
 8002924:	453b8000 	.word	0x453b8000
 8002928:	437a0000 	.word	0x437a0000
 800292c:	437a0000 	.word	0x437a0000

08002930 <feeding>:

void feeding(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++)
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	e014      	b.n	8002966 <feeding+0x36>
	{
	   HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_SET);
 800293c:	2201      	movs	r2, #1
 800293e:	2110      	movs	r1, #16
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <feeding+0x48>)
 8002942:	f002 fcd3 	bl	80052ec <HAL_GPIO_WritePin>
	   delay(500);
 8002946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800294a:	f7fe ff37 	bl	80017bc <delay>
	   HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_RESET);
 800294e:	2200      	movs	r2, #0
 8002950:	2110      	movs	r1, #16
 8002952:	4809      	ldr	r0, [pc, #36]	; (8002978 <feeding+0x48>)
 8002954:	f002 fcca 	bl	80052ec <HAL_GPIO_WritePin>
	   delay(1500);
 8002958:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800295c:	f7fe ff2e 	bl	80017bc <delay>
	for(int i = 0; i<3; i++)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3301      	adds	r3, #1
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b02      	cmp	r3, #2
 800296a:	dde7      	ble.n	800293c <feeding+0xc>
	}
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40021400 	.word	0x40021400

0800297c <State_Transition>:

uint8_t State_Transition(State* current_state)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	State next_state = Unknow;
 8002984:	2328      	movs	r3, #40	; 0x28
 8002986:	73fb      	strb	r3, [r7, #15]
	switch(state)
 8002988:	4bbb      	ldr	r3, [pc, #748]	; (8002c78 <State_Transition+0x2fc>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	2b24      	cmp	r3, #36	; 0x24
 8002990:	f200 819c 	bhi.w	8002ccc <State_Transition+0x350>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <State_Transition+0x20>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	08002a31 	.word	0x08002a31
 80029a0:	08002a37 	.word	0x08002a37
 80029a4:	08002ccd 	.word	0x08002ccd
 80029a8:	08002a4b 	.word	0x08002a4b
 80029ac:	08002a51 	.word	0x08002a51
 80029b0:	08002a57 	.word	0x08002a57
 80029b4:	08002a5d 	.word	0x08002a5d
 80029b8:	08002a63 	.word	0x08002a63
 80029bc:	08002a69 	.word	0x08002a69
 80029c0:	08002a6f 	.word	0x08002a6f
 80029c4:	08002a75 	.word	0x08002a75
 80029c8:	08002a7b 	.word	0x08002a7b
 80029cc:	08002a81 	.word	0x08002a81
 80029d0:	08002a87 	.word	0x08002a87
 80029d4:	08002a8d 	.word	0x08002a8d
 80029d8:	08002b7d 	.word	0x08002b7d
 80029dc:	08002ccd 	.word	0x08002ccd
 80029e0:	08002a93 	.word	0x08002a93
 80029e4:	08002ad5 	.word	0x08002ad5
 80029e8:	08002af1 	.word	0x08002af1
 80029ec:	08002b0d 	.word	0x08002b0d
 80029f0:	08002b29 	.word	0x08002b29
 80029f4:	08002b45 	.word	0x08002b45
 80029f8:	08002b61 	.word	0x08002b61
 80029fc:	08002ccd 	.word	0x08002ccd
 8002a00:	08002b83 	.word	0x08002b83
 8002a04:	08002b89 	.word	0x08002b89
 8002a08:	08002ba5 	.word	0x08002ba5
 8002a0c:	08002bab 	.word	0x08002bab
 8002a10:	08002bb1 	.word	0x08002bb1
 8002a14:	08002ccd 	.word	0x08002ccd
 8002a18:	08002bef 	.word	0x08002bef
 8002a1c:	08002bcd 	.word	0x08002bcd
 8002a20:	08002ccd 	.word	0x08002ccd
 8002a24:	08002bd3 	.word	0x08002bd3
 8002a28:	08002ccd 	.word	0x08002ccd
 8002a2c:	08002be9 	.word	0x08002be9
	{
		case Initial:
					next_state = Go_Mile_1;
 8002a30:	2312      	movs	r3, #18
 8002a32:	73fb      	strb	r3, [r7, #15]
					break;
 8002a34:	e14d      	b.n	8002cd2 <State_Transition+0x356>
		case Line_Search:
					if(distance_flag==0)
 8002a36:	4b91      	ldr	r3, [pc, #580]	; (8002c7c <State_Transition+0x300>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <State_Transition+0xc8>
						next_state = Line_Search;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	73fb      	strb	r3, [r7, #15]
					else
						next_state= TurnRight;
					break;
 8002a42:	e146      	b.n	8002cd2 <State_Transition+0x356>
						next_state= TurnRight;
 8002a44:	2303      	movs	r3, #3
 8002a46:	73fb      	strb	r3, [r7, #15]
					break;
 8002a48:	e143      	b.n	8002cd2 <State_Transition+0x356>
		/*case TurnRight:
					next_state = Go_Mile_1;
					break;*/
		case TurnRight1_1:
					next_state = Go_Mile_2_1;
 8002a4a:	2313      	movs	r3, #19
 8002a4c:	73fb      	strb	r3, [r7, #15]
					break;
 8002a4e:	e140      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight1_2:
					next_state = Go_Mile_2_2;
 8002a50:	2314      	movs	r3, #20
 8002a52:	73fb      	strb	r3, [r7, #15]
					break;
 8002a54:	e13d      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight1_3:
					next_state = Go_Mile_2_3;
 8002a56:	2315      	movs	r3, #21
 8002a58:	73fb      	strb	r3, [r7, #15]
					break;
 8002a5a:	e13a      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight2_1:
					next_state = Go_Mile_3_1;
 8002a5c:	2316      	movs	r3, #22
 8002a5e:	73fb      	strb	r3, [r7, #15]
					break;
 8002a60:	e137      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight2_3:
					next_state = Go_Mile_3_3;
 8002a62:	2317      	movs	r3, #23
 8002a64:	73fb      	strb	r3, [r7, #15]
					break;
 8002a66:	e134      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight3_1:
					next_state = Go_Mile_4;
 8002a68:	2318      	movs	r3, #24
 8002a6a:	73fb      	strb	r3, [r7, #15]
					break;
 8002a6c:	e131      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight3_3:
					next_state = Go_Mile_4;
 8002a6e:	2318      	movs	r3, #24
 8002a70:	73fb      	strb	r3, [r7, #15]
					break;
 8002a72:	e12e      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight4:
					next_state = GoStraight_Until_Barrier;
 8002a74:	2310      	movs	r3, #16
 8002a76:	73fb      	strb	r3, [r7, #15]
					break;
 8002a78:	e12b      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight5:
					next_state = Go_Mile_6;
 8002a7a:	231a      	movs	r3, #26
 8002a7c:	73fb      	strb	r3, [r7, #15]
					break;
 8002a7e:	e128      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight6:
					next_state = Go_Mile_7;
 8002a80:	231c      	movs	r3, #28
 8002a82:	73fb      	strb	r3, [r7, #15]
					break;
 8002a84:	e125      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight7:
					next_state = Go_Mile_8_Until_Apriltag;
 8002a86:	231d      	movs	r3, #29
 8002a88:	73fb      	strb	r3, [r7, #15]
					break;
 8002a8a:	e122      	b.n	8002cd2 <State_Transition+0x356>
		case TurnRight8:
					next_state = Go_Mile_10;
 8002a8c:	231f      	movs	r3, #31
 8002a8e:	73fb      	strb	r3, [r7, #15]
					break;
 8002a90:	e11f      	b.n	8002cd2 <State_Transition+0x356>
//					else
//						next_state = TurnRight;
			        //next_state = TurnRight5;
					//break;
		case Go_Mile_1:
					if(*current_state == Mile_Adjust)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d113      	bne.n	8002ac2 <State_Transition+0x146>
		                switch(finalcolor)
 8002a9a:	4b79      	ldr	r3, [pc, #484]	; (8002c80 <State_Transition+0x304>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d00c      	beq.n	8002abc <State_Transition+0x140>
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	dc14      	bgt.n	8002ad0 <State_Transition+0x154>
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d002      	beq.n	8002ab0 <State_Transition+0x134>
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d003      	beq.n	8002ab6 <State_Transition+0x13a>
		                	break;
		                case 3:
		                	next_state = TurnRight1_2;
		                	break;
		                default:
		                	break;
 8002aae:	e00f      	b.n	8002ad0 <State_Transition+0x154>
		                	next_state = TurnRight1_3;
 8002ab0:	2306      	movs	r3, #6
 8002ab2:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002ab4:	e00d      	b.n	8002ad2 <State_Transition+0x156>
		                	next_state = TurnRight1_1;
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002aba:	e00a      	b.n	8002ad2 <State_Transition+0x156>
		                	next_state = TurnRight1_2;
 8002abc:	2305      	movs	r3, #5
 8002abe:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002ac0:	e007      	b.n	8002ad2 <State_Transition+0x156>
		                }


					else
						{
						temp_state = *current_state;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <State_Transition+0x308>)
 8002ac8:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002aca:	2320      	movs	r3, #32
 8002acc:	73fb      	strb	r3, [r7, #15]
						}
					break;
 8002ace:	e100      	b.n	8002cd2 <State_Transition+0x356>
		                	break;
 8002ad0:	bf00      	nop
					break;
 8002ad2:	e0fe      	b.n	8002cd2 <State_Transition+0x356>
		case Go_Mile_2_1:
					if(*current_state == Mile_Adjust)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d102      	bne.n	8002ae2 <State_Transition+0x166>
						next_state = TurnRight2_1;
 8002adc:	2307      	movs	r3, #7
 8002ade:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002ae0:	e0f7      	b.n	8002cd2 <State_Transition+0x356>
						temp_state = *current_state;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <State_Transition+0x308>)
 8002ae8:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002aea:	2320      	movs	r3, #32
 8002aec:	73fb      	strb	r3, [r7, #15]
					break;
 8002aee:	e0f0      	b.n	8002cd2 <State_Transition+0x356>
		case Go_Mile_2_2:
					if(*current_state == Mile_Adjust)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d102      	bne.n	8002afe <State_Transition+0x182>
						next_state = Go_Mile_4;
 8002af8:	2318      	movs	r3, #24
 8002afa:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002afc:	e0e9      	b.n	8002cd2 <State_Transition+0x356>
						temp_state = *current_state;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	4b60      	ldr	r3, [pc, #384]	; (8002c84 <State_Transition+0x308>)
 8002b04:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002b06:	2320      	movs	r3, #32
 8002b08:	73fb      	strb	r3, [r7, #15]
					break;
 8002b0a:	e0e2      	b.n	8002cd2 <State_Transition+0x356>
		case Go_Mile_2_3:
					if(*current_state == Mile_Adjust)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d102      	bne.n	8002b1a <State_Transition+0x19e>
						next_state = TurnRight2_3;
 8002b14:	2308      	movs	r3, #8
 8002b16:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002b18:	e0db      	b.n	8002cd2 <State_Transition+0x356>
						temp_state = *current_state;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <State_Transition+0x308>)
 8002b20:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002b22:	2320      	movs	r3, #32
 8002b24:	73fb      	strb	r3, [r7, #15]
					break;
 8002b26:	e0d4      	b.n	8002cd2 <State_Transition+0x356>

		case Go_Mile_3_1:
					if(*current_state == Mile_Adjust)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d102      	bne.n	8002b36 <State_Transition+0x1ba>
						next_state = TurnRight3_1;
 8002b30:	2309      	movs	r3, #9
 8002b32:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002b34:	e0cd      	b.n	8002cd2 <State_Transition+0x356>
						temp_state = *current_state;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <State_Transition+0x308>)
 8002b3c:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	73fb      	strb	r3, [r7, #15]
					break;
 8002b42:	e0c6      	b.n	8002cd2 <State_Transition+0x356>

		case Go_Mile_3_3:
					if(*current_state == Mile_Adjust)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d102      	bne.n	8002b52 <State_Transition+0x1d6>
						next_state = TurnRight3_3;
 8002b4c:	230a      	movs	r3, #10
 8002b4e:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002b50:	e0bf      	b.n	8002cd2 <State_Transition+0x356>
						temp_state = *current_state;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <State_Transition+0x308>)
 8002b58:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	73fb      	strb	r3, [r7, #15]
					break;
 8002b5e:	e0b8      	b.n	8002cd2 <State_Transition+0x356>

		case Go_Mile_4:
					if(*current_state == Mile_Adjust)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d102      	bne.n	8002b6e <State_Transition+0x1f2>
						next_state = TurnRight4;
 8002b68:	230b      	movs	r3, #11
 8002b6a:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002b6c:	e0b1      	b.n	8002cd2 <State_Transition+0x356>
						temp_state = *current_state;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <State_Transition+0x308>)
 8002b74:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002b76:	2320      	movs	r3, #32
 8002b78:	73fb      	strb	r3, [r7, #15]
					break;
 8002b7a:	e0aa      	b.n	8002cd2 <State_Transition+0x356>
		case GoStraight_Until_Barrier:
					//if(*current_state == Mile_Adjust)
						next_state = TurnRight5;
 8002b7c:	230c      	movs	r3, #12
 8002b7e:	73fb      	strb	r3, [r7, #15]
//					else
//						{
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
					break;
 8002b80:	e0a7      	b.n	8002cd2 <State_Transition+0x356>
		case Go_Mile_6:
					//if(*current_state == Mile_Adjust)
						next_state = Go_Mile_6_7;
 8002b82:	231b      	movs	r3, #27
 8002b84:	73fb      	strb	r3, [r7, #15]
					/*else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}*/
					 break;
 8002b86:	e0a4      	b.n	8002cd2 <State_Transition+0x356>
		case Go_Mile_6_7:
					if(*current_state == Mile_Adjust)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d102      	bne.n	8002b96 <State_Transition+0x21a>
						next_state = TurnRight6;
 8002b90:	230d      	movs	r3, #13
 8002b92:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002b94:	e09d      	b.n	8002cd2 <State_Transition+0x356>
						temp_state = *current_state;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <State_Transition+0x308>)
 8002b9c:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	73fb      	strb	r3, [r7, #15]
					break;
 8002ba2:	e096      	b.n	8002cd2 <State_Transition+0x356>
		case Go_Mile_7:
//					if(*current_state == Mile_Adjust)
						next_state = TurnRight7;
 8002ba4:	230e      	movs	r3, #14
 8002ba6:	73fb      	strb	r3, [r7, #15]
//					else
//						{
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
					break;
 8002ba8:	e093      	b.n	8002cd2 <State_Transition+0x356>
		case Go_Mile_8_Until_Apriltag:
					next_state=Apriltag_Check;
 8002baa:	2323      	movs	r3, #35	; 0x23
 8002bac:	73fb      	strb	r3, [r7, #15]
					break;
 8002bae:	e090      	b.n	8002cd2 <State_Transition+0x356>
		case Go_Mile_9:
					if(*current_state == Mile_Adjust)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d102      	bne.n	8002bbe <State_Transition+0x242>
						next_state = TurnRight8;
 8002bb8:	230f      	movs	r3, #15
 8002bba:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002bbc:	e089      	b.n	8002cd2 <State_Transition+0x356>
						temp_state = *current_state;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <State_Transition+0x308>)
 8002bc4:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	73fb      	strb	r3, [r7, #15]
					break;
 8002bca:	e082      	b.n	8002cd2 <State_Transition+0x356>
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
//					break;
		case Apriltag_Adjust1:
					next_state = Feeding;
 8002bcc:	2325      	movs	r3, #37	; 0x25
 8002bce:	73fb      	strb	r3, [r7, #15]
					break;
 8002bd0:	e07f      	b.n	8002cd2 <State_Transition+0x356>
		case Apriltag_Check:
					if(Apriltag_Verify())
 8002bd2:	f7ff fce7 	bl	80025a4 <Apriltag_Verify>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <State_Transition+0x266>
						next_state = Apriltag_Adjust1;
 8002bdc:	2321      	movs	r3, #33	; 0x21
 8002bde:	73fb      	strb	r3, [r7, #15]
					else
						next_state=Go_Mile_8_Until_Apriltag;
					break;
 8002be0:	e077      	b.n	8002cd2 <State_Transition+0x356>
						next_state=Go_Mile_8_Until_Apriltag;
 8002be2:	231d      	movs	r3, #29
 8002be4:	73fb      	strb	r3, [r7, #15]
					break;
 8002be6:	e074      	b.n	8002cd2 <State_Transition+0x356>
		case Feeding:
					next_state=Go_Mile_9;
 8002be8:	231e      	movs	r3, #30
 8002bea:	73fb      	strb	r3, [r7, #15]
					break;
 8002bec:	e071      	b.n	8002cd2 <State_Transition+0x356>
		case Mile_Adjust:
					switch (temp_state)
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <State_Transition+0x308>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	3b10      	subs	r3, #16
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d865      	bhi.n	8002cc4 <State_Transition+0x348>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <State_Transition+0x284>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002ca1 	.word	0x08002ca1
 8002c04:	08002cc5 	.word	0x08002cc5
 8002c08:	08002c41 	.word	0x08002c41
 8002c0c:	08002c6d 	.word	0x08002c6d
 8002c10:	08002c73 	.word	0x08002c73
 8002c14:	08002c89 	.word	0x08002c89
 8002c18:	08002c8f 	.word	0x08002c8f
 8002c1c:	08002c95 	.word	0x08002c95
 8002c20:	08002c9b 	.word	0x08002c9b
 8002c24:	08002cc5 	.word	0x08002cc5
 8002c28:	08002ca7 	.word	0x08002ca7
 8002c2c:	08002cad 	.word	0x08002cad
 8002c30:	08002cb3 	.word	0x08002cb3
 8002c34:	08002cc5 	.word	0x08002cc5
 8002c38:	08002cb9 	.word	0x08002cb9
 8002c3c:	08002cbf 	.word	0x08002cbf
					{
					case Go_Mile_1:
		                switch(finalcolor)
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <State_Transition+0x304>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d00c      	beq.n	8002c62 <State_Transition+0x2e6>
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	dc0d      	bgt.n	8002c68 <State_Transition+0x2ec>
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d002      	beq.n	8002c56 <State_Transition+0x2da>
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d003      	beq.n	8002c5c <State_Transition+0x2e0>
		                	break;
		                case 3:
		                	next_state = TurnRight1_2;
		                	break;
		                default:
		                	break;
 8002c54:	e008      	b.n	8002c68 <State_Transition+0x2ec>
		                	next_state = TurnRight1_3;
 8002c56:	2306      	movs	r3, #6
 8002c58:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002c5a:	e006      	b.n	8002c6a <State_Transition+0x2ee>
		                	next_state = TurnRight1_1;
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002c60:	e003      	b.n	8002c6a <State_Transition+0x2ee>
		                	next_state = TurnRight1_2;
 8002c62:	2305      	movs	r3, #5
 8002c64:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002c66:	e000      	b.n	8002c6a <State_Transition+0x2ee>
		                	break;
 8002c68:	bf00      	nop
		                }
						break;
 8002c6a:	e02e      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_2_1:
						next_state = TurnRight2_1;
 8002c6c:	2307      	movs	r3, #7
 8002c6e:	73fb      	strb	r3, [r7, #15]
						break;
 8002c70:	e02b      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_2_2:
						next_state = Go_Mile_4;
 8002c72:	2318      	movs	r3, #24
 8002c74:	73fb      	strb	r3, [r7, #15]
						break;
 8002c76:	e028      	b.n	8002cca <State_Transition+0x34e>
 8002c78:	2000417c 	.word	0x2000417c
 8002c7c:	200002c4 	.word	0x200002c4
 8002c80:	20004090 	.word	0x20004090
 8002c84:	20004214 	.word	0x20004214
					case Go_Mile_2_3:
						next_state = TurnRight2_3;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	73fb      	strb	r3, [r7, #15]
						break;
 8002c8c:	e01d      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_3_1:
						next_state = TurnRight3_1;
 8002c8e:	2309      	movs	r3, #9
 8002c90:	73fb      	strb	r3, [r7, #15]
						break;
 8002c92:	e01a      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_3_3:
						next_state = TurnRight3_3;
 8002c94:	230a      	movs	r3, #10
 8002c96:	73fb      	strb	r3, [r7, #15]
						break;
 8002c98:	e017      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_4:
						next_state = TurnRight4;
 8002c9a:	230b      	movs	r3, #11
 8002c9c:	73fb      	strb	r3, [r7, #15]
						break;
 8002c9e:	e014      	b.n	8002cca <State_Transition+0x34e>
					case GoStraight_Until_Barrier:
						next_state = TurnRight5;
 8002ca0:	230c      	movs	r3, #12
 8002ca2:	73fb      	strb	r3, [r7, #15]
						break;
 8002ca4:	e011      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_6:
						next_state = Go_Mile_6_7;
 8002ca6:	231b      	movs	r3, #27
 8002ca8:	73fb      	strb	r3, [r7, #15]
						break;
 8002caa:	e00e      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_6_7:
						next_state = TurnRight6;
 8002cac:	230d      	movs	r3, #13
 8002cae:	73fb      	strb	r3, [r7, #15]
						break;
 8002cb0:	e00b      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_7:
						next_state = TurnRight7;
 8002cb2:	230e      	movs	r3, #14
 8002cb4:	73fb      	strb	r3, [r7, #15]
						break;
 8002cb6:	e008      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_9:
						next_state = TurnRight8;
 8002cb8:	230f      	movs	r3, #15
 8002cba:	73fb      	strb	r3, [r7, #15]
						break;
 8002cbc:	e005      	b.n	8002cca <State_Transition+0x34e>
					case Go_Mile_10:
						next_state = Idle;
 8002cbe:	2327      	movs	r3, #39	; 0x27
 8002cc0:	73fb      	strb	r3, [r7, #15]
						break;
 8002cc2:	e002      	b.n	8002cca <State_Transition+0x34e>
					default:
						next_state = Initial;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
						break;
 8002cc8:	bf00      	nop
					}
					//temp_state = Mile_Adjust;
					break;
 8002cca:	e002      	b.n	8002cd2 <State_Transition+0x356>
		default:
					next_state = Initial;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
					break;
 8002cd0:	bf00      	nop
	}
	if (next_state == *current_state)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d101      	bne.n	8002ce0 <State_Transition+0x364>
		return 1;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e003      	b.n	8002ce8 <State_Transition+0x36c>
	else
	{

		*current_state=next_state;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7bfa      	ldrb	r2, [r7, #15]
 8002ce4:	701a      	strb	r2, [r3, #0]
		return 0;
 8002ce6:	2300      	movs	r3, #0
	}
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <StreamTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StreamTask */
void StreamTask(void const * argument)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t Same_State_Flag=0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
	uint32_t pulse_incremnet=0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
	Car_Initial();
 8002d00:	f7fe fd18 	bl	8001734 <Car_Initial>
	delay(1000);
 8002d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d08:	f7fe fd58 	bl	80017bc <delay>
  /* Infinite loop */
  for(;;)
  {

	  delay(50);
 8002d0c:	2032      	movs	r0, #50	; 0x32
 8002d0e:	f7fe fd55 	bl	80017bc <delay>
	  //delay(10);
	  //PreviousWakeTime = osKernelSysTick()
	  //osDelayUntil(&PreviousWakeTime = osKernelSysTick(), 500);
	  //HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);

	  Same_State_Flag = State_Transition(&state);
 8002d12:	48b8      	ldr	r0, [pc, #736]	; (8002ff4 <StreamTask+0x304>)
 8002d14:	f7ff fe32 	bl	800297c <State_Transition>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	73fb      	strb	r3, [r7, #15]
	  if(Same_State_Flag)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f041 8062 	bne.w	8003de8 <StreamTask+0x10f8>
		  continue;
	  switch(state)
 8002d24:	4bb3      	ldr	r3, [pc, #716]	; (8002ff4 <StreamTask+0x304>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	2b26      	cmp	r3, #38	; 0x26
 8002d2c:	f201 8059 	bhi.w	8003de2 <StreamTask+0x10f2>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <StreamTask+0x48>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002dd5 	.word	0x08002dd5
 8002d3c:	08002df1 	.word	0x08002df1
 8002d40:	08002e13 	.word	0x08002e13
 8002d44:	08002e73 	.word	0x08002e73
 8002d48:	08002ed3 	.word	0x08002ed3
 8002d4c:	08002f33 	.word	0x08002f33
 8002d50:	08002f93 	.word	0x08002f93
 8002d54:	08003025 	.word	0x08003025
 8002d58:	08003085 	.word	0x08003085
 8002d5c:	080030e5 	.word	0x080030e5
 8002d60:	08003145 	.word	0x08003145
 8002d64:	080031a5 	.word	0x080031a5
 8002d68:	08003205 	.word	0x08003205
 8002d6c:	08003265 	.word	0x08003265
 8002d70:	080032c5 	.word	0x080032c5
 8002d74:	0800334d 	.word	0x0800334d
 8002d78:	080033b3 	.word	0x080033b3
 8002d7c:	08003459 	.word	0x08003459
 8002d80:	08003521 	.word	0x08003521
 8002d84:	08003609 	.word	0x08003609
 8002d88:	080036ad 	.word	0x080036ad
 8002d8c:	08003751 	.word	0x08003751
 8002d90:	080037f5 	.word	0x080037f5
 8002d94:	080038c1 	.word	0x080038c1
 8002d98:	08003963 	.word	0x08003963
 8002d9c:	080039cd 	.word	0x080039cd
 8002da0:	08003a19 	.word	0x08003a19
 8002da4:	08003abb 	.word	0x08003abb
 8002da8:	08003b59 	.word	0x08003b59
 8002dac:	08003bff 	.word	0x08003bff
 8002db0:	08003ca9 	.word	0x08003ca9
 8002db4:	08003d9d 	.word	0x08003d9d
 8002db8:	08003d53 	.word	0x08003d53
 8002dbc:	08003de3 	.word	0x08003de3
 8002dc0:	08003d4d 	.word	0x08003d4d
 8002dc4:	08003de3 	.word	0x08003de3
 8002dc8:	08003d93 	.word	0x08003d93
 8002dcc:	08003de3 	.word	0x08003de3
 8002dd0:	08003ddd 	.word	0x08003ddd
	  {
	  case Initial:
		  	  	  	  	  state= Idle;
 8002dd4:	4b87      	ldr	r3, [pc, #540]	; (8002ff4 <StreamTask+0x304>)
 8002dd6:	2227      	movs	r2, #39	; 0x27
 8002dd8:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8002dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dde:	f7fe fced 	bl	80017bc <delay>
		  	  	  	      state= Initial;
 8002de2:	4b84      	ldr	r3, [pc, #528]	; (8002ff4 <StreamTask+0x304>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  Car_Initial();
 8002de8:	f7fe fca4 	bl	8001734 <Car_Initial>
		  	  	  	  	  break;
 8002dec:	f000 bffd 	b.w	8003dea <StreamTask+0x10fa>
	  case Line_Search:
		  	  	  	  	  state= Idle;
 8002df0:	4b80      	ldr	r3, [pc, #512]	; (8002ff4 <StreamTask+0x304>)
 8002df2:	2227      	movs	r2, #39	; 0x27
 8002df4:	701a      	strb	r2, [r3, #0]
		  		  	  	  delay(500);
 8002df6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dfa:	f7fe fcdf 	bl	80017bc <delay>
		  		  	  	  state= Line_Search;
 8002dfe:	4b7d      	ldr	r3, [pc, #500]	; (8002ff4 <StreamTask+0x304>)
 8002e00:	2202      	movs	r2, #2
 8002e02:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  vTaskResume(PIDCameraHandle);
 8002e04:	4b7c      	ldr	r3, [pc, #496]	; (8002ff8 <StreamTask+0x308>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f006 fa35 	bl	8009278 <vTaskResume>
		  	  	  	  	  //vTaskResume(GyroReceiveHandle);
		  	  	  	  	  break;
 8002e0e:	f000 bfec 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8002e12:	4b7a      	ldr	r3, [pc, #488]	; (8002ffc <StreamTask+0x30c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f006 f96a 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8002e1c:	4b78      	ldr	r3, [pc, #480]	; (8003000 <StreamTask+0x310>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f006 f965 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8002e26:	4b77      	ldr	r3, [pc, #476]	; (8003004 <StreamTask+0x314>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f006 f960 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8002e30:	f7fe fcb6 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8002e34:	2032      	movs	r0, #50	; 0x32
 8002e36:	f7fe fcc1 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 8002e3a:	4b73      	ldr	r3, [pc, #460]	; (8003008 <StreamTask+0x318>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8002e40:	4b72      	ldr	r3, [pc, #456]	; (800300c <StreamTask+0x31c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002e46:	4b72      	ldr	r3, [pc, #456]	; (8003010 <StreamTask+0x320>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f006 fa14 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8002e50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e54:	f7fe fcb2 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(-90,2);
 8002e58:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002e5c:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8003014 <StreamTask+0x324>
 8002e60:	f7fe fd24 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8002e64:	4b69      	ldr	r3, [pc, #420]	; (800300c <StreamTask+0x31c>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8002e6a:	f7fe fc99 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8002e6e:	f000 bfbc 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight1_1:
						  vTaskSuspend(DistanceCheckHandle);
 8002e72:	4b62      	ldr	r3, [pc, #392]	; (8002ffc <StreamTask+0x30c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f006 f93a 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8002e7c:	4b60      	ldr	r3, [pc, #384]	; (8003000 <StreamTask+0x310>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f006 f935 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8002e86:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <StreamTask+0x314>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f006 f930 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8002e90:	f7fe fc86 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8002e94:	2032      	movs	r0, #50	; 0x32
 8002e96:	f7fe fc91 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 8002e9a:	4b5b      	ldr	r3, [pc, #364]	; (8003008 <StreamTask+0x318>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8002ea0:	4b5a      	ldr	r3, [pc, #360]	; (800300c <StreamTask+0x31c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <StreamTask+0x320>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f006 f9e4 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8002eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002eb4:	f7fe fc82 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(45,2);
 8002eb8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002ebc:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8003018 <StreamTask+0x328>
 8002ec0:	f7fe fcf4 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8002ec4:	4b51      	ldr	r3, [pc, #324]	; (800300c <StreamTask+0x31c>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8002eca:	f7fe fc69 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8002ece:	f000 bf8c 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight1_2:
						  vTaskSuspend(DistanceCheckHandle);
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <StreamTask+0x30c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f006 f90a 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8002edc:	4b48      	ldr	r3, [pc, #288]	; (8003000 <StreamTask+0x310>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f006 f905 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8002ee6:	4b47      	ldr	r3, [pc, #284]	; (8003004 <StreamTask+0x314>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f006 f900 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8002ef0:	f7fe fc56 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8002ef4:	2032      	movs	r0, #50	; 0x32
 8002ef6:	f7fe fc61 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 8002efa:	4b43      	ldr	r3, [pc, #268]	; (8003008 <StreamTask+0x318>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8002f00:	4b42      	ldr	r3, [pc, #264]	; (800300c <StreamTask+0x31c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002f06:	4b42      	ldr	r3, [pc, #264]	; (8003010 <StreamTask+0x320>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f006 f9b4 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8002f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f14:	f7fe fc52 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(90,2);
 8002f18:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002f1c:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800301c <StreamTask+0x32c>
 8002f20:	f7fe fcc4 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8002f24:	4b39      	ldr	r3, [pc, #228]	; (800300c <StreamTask+0x31c>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8002f2a:	f7fe fc39 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8002f2e:	f000 bf5c 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight1_3:
						  vTaskSuspend(DistanceCheckHandle);
 8002f32:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <StreamTask+0x30c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f006 f8da 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8002f3c:	4b30      	ldr	r3, [pc, #192]	; (8003000 <StreamTask+0x310>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f006 f8d5 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8002f46:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <StreamTask+0x314>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f006 f8d0 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8002f50:	f7fe fc26 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8002f54:	2032      	movs	r0, #50	; 0x32
 8002f56:	f7fe fc31 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <StreamTask+0x318>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <StreamTask+0x31c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002f66:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <StreamTask+0x320>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f006 f984 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8002f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f74:	f7fe fc22 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(135,2);
 8002f78:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002f7c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003020 <StreamTask+0x330>
 8002f80:	f7fe fc94 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <StreamTask+0x31c>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8002f8a:	f7fe fc09 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8002f8e:	f000 bf2c 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight2_1:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <StreamTask+0x30c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f006 f8aa 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <StreamTask+0x310>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f006 f8a5 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <StreamTask+0x314>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f006 f8a0 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8002fb0:	f7fe fbf6 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8002fb4:	2032      	movs	r0, #50	; 0x32
 8002fb6:	f7fe fc01 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <StreamTask+0x318>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <StreamTask+0x31c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <StreamTask+0x320>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f006 f954 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8002fd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fd4:	f7fe fbf2 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(90,2);
 8002fd8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002fdc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800301c <StreamTask+0x32c>
 8002fe0:	f7fe fc64 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <StreamTask+0x31c>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8002fea:	f7fe fbd9 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8002fee:	f000 befc 	b.w	8003dea <StreamTask+0x10fa>
 8002ff2:	bf00      	nop
 8002ff4:	2000417c 	.word	0x2000417c
 8002ff8:	20004120 	.word	0x20004120
 8002ffc:	2000412c 	.word	0x2000412c
 8003000:	20004130 	.word	0x20004130
 8003004:	20004044 	.word	0x20004044
 8003008:	200002c4 	.word	0x200002c4
 800300c:	200002cc 	.word	0x200002cc
 8003010:	200042f4 	.word	0x200042f4
 8003014:	c2b40000 	.word	0xc2b40000
 8003018:	42340000 	.word	0x42340000
 800301c:	42b40000 	.word	0x42b40000
 8003020:	43070000 	.word	0x43070000
	  case TurnRight2_3:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8003024:	4bbf      	ldr	r3, [pc, #764]	; (8003324 <StreamTask+0x634>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f006 f861 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800302e:	4bbe      	ldr	r3, [pc, #760]	; (8003328 <StreamTask+0x638>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f006 f85c 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003038:	4bbc      	ldr	r3, [pc, #752]	; (800332c <StreamTask+0x63c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f006 f857 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8003042:	f7fe fbad 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003046:	2032      	movs	r0, #50	; 0x32
 8003048:	f7fe fbb8 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 800304c:	4bb8      	ldr	r3, [pc, #736]	; (8003330 <StreamTask+0x640>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8003052:	4bb8      	ldr	r3, [pc, #736]	; (8003334 <StreamTask+0x644>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003058:	4bb7      	ldr	r3, [pc, #732]	; (8003338 <StreamTask+0x648>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f006 f90b 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8003062:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003066:	f7fe fba9 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(-90,2);
 800306a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800306e:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800333c <StreamTask+0x64c>
 8003072:	f7fe fc1b 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003076:	4baf      	ldr	r3, [pc, #700]	; (8003334 <StreamTask+0x644>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 800307c:	f7fe fb90 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8003080:	f000 beb3 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight3_1:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8003084:	4ba7      	ldr	r3, [pc, #668]	; (8003324 <StreamTask+0x634>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f006 f831 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800308e:	4ba6      	ldr	r3, [pc, #664]	; (8003328 <StreamTask+0x638>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f006 f82c 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003098:	4ba4      	ldr	r3, [pc, #656]	; (800332c <StreamTask+0x63c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f006 f827 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80030a2:	f7fe fb7d 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 80030a6:	2032      	movs	r0, #50	; 0x32
 80030a8:	f7fe fb88 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 80030ac:	4ba0      	ldr	r3, [pc, #640]	; (8003330 <StreamTask+0x640>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80030b2:	4ba0      	ldr	r3, [pc, #640]	; (8003334 <StreamTask+0x644>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80030b8:	4b9f      	ldr	r3, [pc, #636]	; (8003338 <StreamTask+0x648>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f006 f8db 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 80030c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030c6:	f7fe fb79 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(-45,2);
 80030ca:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80030ce:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8003340 <StreamTask+0x650>
 80030d2:	f7fe fbeb 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80030d6:	4b97      	ldr	r3, [pc, #604]	; (8003334 <StreamTask+0x644>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80030dc:	f7fe fb60 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 80030e0:	f000 be83 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight3_3:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 80030e4:	4b8f      	ldr	r3, [pc, #572]	; (8003324 <StreamTask+0x634>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f006 f801 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80030ee:	4b8e      	ldr	r3, [pc, #568]	; (8003328 <StreamTask+0x638>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f005 fffc 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80030f8:	4b8c      	ldr	r3, [pc, #560]	; (800332c <StreamTask+0x63c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f005 fff7 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8003102:	f7fe fb4d 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003106:	2032      	movs	r0, #50	; 0x32
 8003108:	f7fe fb58 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 800310c:	4b88      	ldr	r3, [pc, #544]	; (8003330 <StreamTask+0x640>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8003112:	4b88      	ldr	r3, [pc, #544]	; (8003334 <StreamTask+0x644>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003118:	4b87      	ldr	r3, [pc, #540]	; (8003338 <StreamTask+0x648>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f006 f8ab 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8003122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003126:	f7fe fb49 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(45,2);
 800312a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800312e:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8003344 <StreamTask+0x654>
 8003132:	f7fe fbbb 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003136:	4b7f      	ldr	r3, [pc, #508]	; (8003334 <StreamTask+0x644>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 800313c:	f7fe fb30 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8003140:	f000 be53 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight4:
						  vTaskSuspend(DistanceCheckHandle);
 8003144:	4b77      	ldr	r3, [pc, #476]	; (8003324 <StreamTask+0x634>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f005 ffd1 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800314e:	4b76      	ldr	r3, [pc, #472]	; (8003328 <StreamTask+0x638>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f005 ffcc 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003158:	4b74      	ldr	r3, [pc, #464]	; (800332c <StreamTask+0x63c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f005 ffc7 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8003162:	f7fe fb1d 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003166:	2032      	movs	r0, #50	; 0x32
 8003168:	f7fe fb28 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 800316c:	4b70      	ldr	r3, [pc, #448]	; (8003330 <StreamTask+0x640>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8003172:	4b70      	ldr	r3, [pc, #448]	; (8003334 <StreamTask+0x644>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003178:	4b6f      	ldr	r3, [pc, #444]	; (8003338 <StreamTask+0x648>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f006 f87b 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8003182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003186:	f7fe fb19 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(-90,2);
 800318a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800318e:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800333c <StreamTask+0x64c>
 8003192:	f7fe fb8b 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003196:	4b67      	ldr	r3, [pc, #412]	; (8003334 <StreamTask+0x644>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 800319c:	f7fe fb00 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 80031a0:	f000 be23 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight5:
						  vTaskSuspend(DistanceCheckHandle);
 80031a4:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <StreamTask+0x634>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f005 ffa1 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80031ae:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <StreamTask+0x638>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f005 ff9c 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80031b8:	4b5c      	ldr	r3, [pc, #368]	; (800332c <StreamTask+0x63c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f005 ff97 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80031c2:	f7fe faed 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 80031c6:	2032      	movs	r0, #50	; 0x32
 80031c8:	f7fe faf8 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 80031cc:	4b58      	ldr	r3, [pc, #352]	; (8003330 <StreamTask+0x640>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80031d2:	4b58      	ldr	r3, [pc, #352]	; (8003334 <StreamTask+0x644>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80031d8:	4b57      	ldr	r3, [pc, #348]	; (8003338 <StreamTask+0x648>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f006 f84b 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 80031e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031e6:	f7fe fae9 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(90,2);
 80031ea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80031ee:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8003348 <StreamTask+0x658>
 80031f2:	f7fe fb5b 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80031f6:	4b4f      	ldr	r3, [pc, #316]	; (8003334 <StreamTask+0x644>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80031fc:	f7fe fad0 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8003200:	f000 bdf3 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight6:
						  vTaskSuspend(DistanceCheckHandle);
 8003204:	4b47      	ldr	r3, [pc, #284]	; (8003324 <StreamTask+0x634>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f005 ff71 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800320e:	4b46      	ldr	r3, [pc, #280]	; (8003328 <StreamTask+0x638>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f005 ff6c 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003218:	4b44      	ldr	r3, [pc, #272]	; (800332c <StreamTask+0x63c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f005 ff67 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8003222:	f7fe fabd 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003226:	2032      	movs	r0, #50	; 0x32
 8003228:	f7fe fac8 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 800322c:	4b40      	ldr	r3, [pc, #256]	; (8003330 <StreamTask+0x640>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8003232:	4b40      	ldr	r3, [pc, #256]	; (8003334 <StreamTask+0x644>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003238:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <StreamTask+0x648>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f006 f81b 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8003242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003246:	f7fe fab9 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(-90,2);
 800324a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800324e:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 800333c <StreamTask+0x64c>
 8003252:	f7fe fb2b 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003256:	4b37      	ldr	r3, [pc, #220]	; (8003334 <StreamTask+0x644>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 800325c:	f7fe faa0 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8003260:	f000 bdc3 	b.w	8003dea <StreamTask+0x10fa>
	  case TurnRight7:
						  vTaskSuspend(DistanceCheckHandle);
 8003264:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <StreamTask+0x634>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f005 ff41 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <StreamTask+0x638>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f005 ff3c 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <StreamTask+0x63c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f005 ff37 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8003282:	f7fe fa8d 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003286:	2032      	movs	r0, #50	; 0x32
 8003288:	f7fe fa98 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <StreamTask+0x640>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <StreamTask+0x644>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <StreamTask+0x648>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f005 ffeb 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 80032a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032a6:	f7fe fa89 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(90,2);
 80032aa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80032ae:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8003348 <StreamTask+0x658>
 80032b2:	f7fe fafb 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80032b6:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <StreamTask+0x644>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80032bc:	f7fe fa70 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 80032c0:	f000 bd93 	b.w	8003dea <StreamTask+0x10fa>

	  case TurnRight8:
						  vTaskSuspend(DistanceCheckHandle);
 80032c4:	4b17      	ldr	r3, [pc, #92]	; (8003324 <StreamTask+0x634>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f005 ff11 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <StreamTask+0x638>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f005 ff0c 	bl	80090f0 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <StreamTask+0x63c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f005 ff07 	bl	80090f0 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80032e2:	f7fe fa5d 	bl	80017a0 <Car_Stop>
	  	  	  	  	  	  delay(50);
 80032e6:	2032      	movs	r0, #50	; 0x32
 80032e8:	f7fe fa68 	bl	80017bc <delay>
	  	  	  	  	  	  distance_flag=0;
 80032ec:	4b10      	ldr	r3, [pc, #64]	; (8003330 <StreamTask+0x640>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <StreamTask+0x644>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <StreamTask+0x648>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f005 ffbb 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(500);
 8003302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003306:	f7fe fa59 	bl	80017bc <delay>
		  	  	  	  	  PID_Turning(90,2);
 800330a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800330e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003348 <StreamTask+0x658>
 8003312:	f7fe facb 	bl	80018ac <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <StreamTask+0x644>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 800331c:	f7fe fa40 	bl	80017a0 <Car_Stop>
		  		  	  	  break;
 8003320:	f000 bd63 	b.w	8003dea <StreamTask+0x10fa>
 8003324:	2000412c 	.word	0x2000412c
 8003328:	20004130 	.word	0x20004130
 800332c:	20004044 	.word	0x20004044
 8003330:	200002c4 	.word	0x200002c4
 8003334:	200002cc 	.word	0x200002cc
 8003338:	200042f4 	.word	0x200042f4
 800333c:	c2b40000 	.word	0xc2b40000
 8003340:	c2340000 	.word	0xc2340000
 8003344:	42340000 	.word	0x42340000
 8003348:	42b40000 	.word	0x42b40000

	  case GoStraight_Until_Barrier:
		  	  	  	  	  //state= Idle;
		  	  	  	  	  vTaskSuspend(PIDCameraHandle);
 800334c:	4b9e      	ldr	r3, [pc, #632]	; (80035c8 <StreamTask+0x8d8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f005 fecd 	bl	80090f0 <vTaskSuspend>
		  	  	  	  	  vTaskSuspend(GyroReceiveHandle);
 8003356:	4b9d      	ldr	r3, [pc, #628]	; (80035cc <StreamTask+0x8dc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f005 fec8 	bl	80090f0 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003360:	4b9b      	ldr	r3, [pc, #620]	; (80035d0 <StreamTask+0x8e0>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8003366:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800336a:	f7fe fa27 	bl	80017bc <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  critical_distance.front=350;
 800336e:	4b99      	ldr	r3, [pc, #612]	; (80035d4 <StreamTask+0x8e4>)
 8003370:	4a99      	ldr	r2, [pc, #612]	; (80035d8 <StreamTask+0x8e8>)
 8003372:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8003374:	4b99      	ldr	r3, [pc, #612]	; (80035dc <StreamTask+0x8ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f005 ff7d 	bl	8009278 <vTaskResume>
		  	  	  	  	  PWM_SET_LEFT(PWM_Mid);
 800337e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003382:	f7fe ff53 	bl	800222c <PWM_SET_LEFT>
		  	  	  	  	  PWM_SET_RIGHT(PWM_Mid);
 8003386:	f44f 7048 	mov.w	r0, #800	; 0x320
 800338a:	f7fe ff89 	bl	80022a0 <PWM_SET_RIGHT>
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 800338e:	4b94      	ldr	r3, [pc, #592]	; (80035e0 <StreamTask+0x8f0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f04f 31ff 	mov.w	r1, #4294967295
 8003396:	4618      	mov	r0, r3
 8003398:	f004 fdd0 	bl	8007f3c <osSemaphoreWait>
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 800339c:	4b90      	ldr	r3, [pc, #576]	; (80035e0 <StreamTask+0x8f0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f04f 31ff 	mov.w	r1, #4294967295
 80033a4:	4618      	mov	r0, r3
 80033a6:	f004 fdc9 	bl	8007f3c <osSemaphoreWait>
		  	  	  	  	  Car_Stop();
 80033aa:	f7fe f9f9 	bl	80017a0 <Car_Stop>
		  	  	  	      //vTaskSuspend(DistanceCheckHandle);
		  	  	  	  	  break;
 80033ae:	f000 bd1c 	b.w	8003dea <StreamTask+0x10fa>
	  case Go_Mile:
	  					  vTaskSuspend(DistanceCheckHandle);
 80033b2:	4b8a      	ldr	r3, [pc, #552]	; (80035dc <StreamTask+0x8ec>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f005 fe9a 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=33000;//室外
 80033bc:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80033c0:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80033c2:	4b88      	ldr	r3, [pc, #544]	; (80035e4 <StreamTask+0x8f4>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 80033c8:	4b80      	ldr	r3, [pc, #512]	; (80035cc <StreamTask+0x8dc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f005 ff53 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <StreamTask+0x8f8>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 80033d8:	4b84      	ldr	r3, [pc, #528]	; (80035ec <StreamTask+0x8fc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f005 ff4b 	bl	8009278 <vTaskResume>
						  delay(500);
 80033e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033e6:	f7fe f9e9 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 80033ea:	4b81      	ldr	r3, [pc, #516]	; (80035f0 <StreamTask+0x900>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f04f 31ff 	mov.w	r1, #4294967295
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 fda2 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 80033f8:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <StreamTask+0x904>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4413      	add	r3, r2
 8003402:	461a      	mov	r2, r3
 8003404:	4b78      	ldr	r3, [pc, #480]	; (80035e8 <StreamTask+0x8f8>)
 8003406:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003408:	4b7b      	ldr	r3, [pc, #492]	; (80035f8 <StreamTask+0x908>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 800340e:	4b7b      	ldr	r3, [pc, #492]	; (80035fc <StreamTask+0x90c>)
 8003410:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003414:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003416:	4b7a      	ldr	r3, [pc, #488]	; (8003600 <StreamTask+0x910>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f005 ff2c 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 8003420:	20c8      	movs	r0, #200	; 0xc8
 8003422:	f7fe f9cb 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003426:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <StreamTask+0x908>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 800342c:	4b70      	ldr	r3, [pc, #448]	; (80035f0 <StreamTask+0x900>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	4618      	mov	r0, r3
 8003436:	f004 fd81 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 800343a:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <StreamTask+0x908>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003440:	4b6f      	ldr	r3, [pc, #444]	; (8003600 <StreamTask+0x910>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f005 fe53 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 800344a:	f7fe f9a9 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 800344e:	4b65      	ldr	r3, [pc, #404]	; (80035e4 <StreamTask+0x8f4>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003454:	f000 bcc9 	b.w	8003dea <StreamTask+0x10fa>
	  case Go_Mile_1:
						  vTaskSuspend(DistanceCheckHandle);
 8003458:	4b60      	ldr	r3, [pc, #384]	; (80035dc <StreamTask+0x8ec>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f005 fe47 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=200;//室外
 8003462:	23c8      	movs	r3, #200	; 0xc8
 8003464:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  camera_recieve_IT_flag=1;
 8003466:	4b5a      	ldr	r3, [pc, #360]	; (80035d0 <StreamTask+0x8e0>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
						  vTaskResume(ColorcheckHandle);
 800346c:	4b65      	ldr	r3, [pc, #404]	; (8003604 <StreamTask+0x914>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f005 ff01 	bl	8009278 <vTaskResume>
						  gyro_reset_flag=0;
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <StreamTask+0x8f4>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 800347c:	4b53      	ldr	r3, [pc, #332]	; (80035cc <StreamTask+0x8dc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f005 fef9 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 8003486:	4b58      	ldr	r3, [pc, #352]	; (80035e8 <StreamTask+0x8f8>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 800348c:	4b57      	ldr	r3, [pc, #348]	; (80035ec <StreamTask+0x8fc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f005 fef1 	bl	8009278 <vTaskResume>
						  delay(500);
 8003496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800349a:	f7fe f98f 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 800349e:	4b54      	ldr	r3, [pc, #336]	; (80035f0 <StreamTask+0x900>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f04f 31ff 	mov.w	r1, #4294967295
 80034a6:	4618      	mov	r0, r3
 80034a8:	f004 fd48 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 80034ac:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <StreamTask+0x904>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4413      	add	r3, r2
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b4b      	ldr	r3, [pc, #300]	; (80035e8 <StreamTask+0x8f8>)
 80034ba:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 80034bc:	4b4e      	ldr	r3, [pc, #312]	; (80035f8 <StreamTask+0x908>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 80034c2:	4b4e      	ldr	r3, [pc, #312]	; (80035fc <StreamTask+0x90c>)
 80034c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80034c8:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 80034ca:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <StreamTask+0x910>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f005 fed2 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 80034d4:	20c8      	movs	r0, #200	; 0xc8
 80034d6:	f7fe f971 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <StreamTask+0x908>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <StreamTask+0x900>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 fd27 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 80034ee:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <StreamTask+0x908>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80034f4:	4b42      	ldr	r3, [pc, #264]	; (8003600 <StreamTask+0x910>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f005 fdf9 	bl	80090f0 <vTaskSuspend>
		  	  	  	      vTaskSuspend(ColorcheckHandle);
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <StreamTask+0x914>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f005 fdf4 	bl	80090f0 <vTaskSuspend>
		  	  	  	      camera_recieve_IT_flag=0;
 8003508:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <StreamTask+0x8e0>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
		  	  	  	      color_judge();
 800350e:	f7fe fe53 	bl	80021b8 <color_judge>
		  	  	  		  Car_Stop();
 8003512:	f7fe f945 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003516:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <StreamTask+0x8f4>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 800351c:	f000 bc65 	b.w	8003dea <StreamTask+0x10fa>
	  case Go_Mile_2_1:
						  vTaskSuspend(DistanceCheckHandle);
 8003520:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <StreamTask+0x8ec>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f005 fde3 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 800352a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800352e:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003530:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <StreamTask+0x8f4>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003536:	4b25      	ldr	r3, [pc, #148]	; (80035cc <StreamTask+0x8dc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f005 fe9c 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 8003540:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <StreamTask+0x8f8>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <StreamTask+0x8fc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f005 fe94 	bl	8009278 <vTaskResume>
						  delay(500);
 8003550:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003554:	f7fe f932 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <StreamTask+0x900>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	4618      	mov	r0, r3
 8003562:	f004 fceb 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003566:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <StreamTask+0x904>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4413      	add	r3, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <StreamTask+0x8f8>)
 8003574:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <StreamTask+0x908>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <StreamTask+0x90c>)
 800357e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003582:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003584:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <StreamTask+0x910>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f005 fe75 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 800358e:	20c8      	movs	r0, #200	; 0xc8
 8003590:	f7fe f914 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <StreamTask+0x908>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <StreamTask+0x900>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f04f 31ff 	mov.w	r1, #4294967295
 80035a2:	4618      	mov	r0, r3
 80035a4:	f004 fcca 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <StreamTask+0x908>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <StreamTask+0x910>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f005 fd9c 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 80035b8:	f7fe f8f2 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80035bc:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <StreamTask+0x8f4>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80035c2:	f000 bc12 	b.w	8003dea <StreamTask+0x10fa>
 80035c6:	bf00      	nop
 80035c8:	20004120 	.word	0x20004120
 80035cc:	200042f4 	.word	0x200042f4
 80035d0:	200002c8 	.word	0x200002c8
 80035d4:	200002ac 	.word	0x200002ac
 80035d8:	43af0000 	.word	0x43af0000
 80035dc:	2000412c 	.word	0x2000412c
 80035e0:	2000403c 	.word	0x2000403c
 80035e4:	200002cc 	.word	0x200002cc
 80035e8:	200002d4 	.word	0x200002d4
 80035ec:	20004044 	.word	0x20004044
 80035f0:	2000420c 	.word	0x2000420c
 80035f4:	200002d0 	.word	0x200002d0
 80035f8:	20000008 	.word	0x20000008
 80035fc:	20000000 	.word	0x20000000
 8003600:	20004130 	.word	0x20004130
 8003604:	20004210 	.word	0x20004210
	  case Go_Mile_2_2:
						  vTaskSuspend(DistanceCheckHandle);
 8003608:	4ba3      	ldr	r3, [pc, #652]	; (8003898 <StreamTask+0xba8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f005 fd6f 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003612:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003616:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003618:	4ba0      	ldr	r3, [pc, #640]	; (800389c <StreamTask+0xbac>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 800361e:	4ba0      	ldr	r3, [pc, #640]	; (80038a0 <StreamTask+0xbb0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f005 fe28 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 8003628:	4b9e      	ldr	r3, [pc, #632]	; (80038a4 <StreamTask+0xbb4>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 800362e:	4b9e      	ldr	r3, [pc, #632]	; (80038a8 <StreamTask+0xbb8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f005 fe20 	bl	8009278 <vTaskResume>
						  delay(500);
 8003638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800363c:	f7fe f8be 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003640:	4b9a      	ldr	r3, [pc, #616]	; (80038ac <StreamTask+0xbbc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f04f 31ff 	mov.w	r1, #4294967295
 8003648:	4618      	mov	r0, r3
 800364a:	f004 fc77 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 800364e:	4b98      	ldr	r3, [pc, #608]	; (80038b0 <StreamTask+0xbc0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4413      	add	r3, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4b92      	ldr	r3, [pc, #584]	; (80038a4 <StreamTask+0xbb4>)
 800365c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 800365e:	4b95      	ldr	r3, [pc, #596]	; (80038b4 <StreamTask+0xbc4>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003664:	4b94      	ldr	r3, [pc, #592]	; (80038b8 <StreamTask+0xbc8>)
 8003666:	f44f 7248 	mov.w	r2, #800	; 0x320
 800366a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 800366c:	4b93      	ldr	r3, [pc, #588]	; (80038bc <StreamTask+0xbcc>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f005 fe01 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 8003676:	20c8      	movs	r0, #200	; 0xc8
 8003678:	f7fe f8a0 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 800367c:	4b8d      	ldr	r3, [pc, #564]	; (80038b4 <StreamTask+0xbc4>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003682:	4b8a      	ldr	r3, [pc, #552]	; (80038ac <StreamTask+0xbbc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f04f 31ff 	mov.w	r1, #4294967295
 800368a:	4618      	mov	r0, r3
 800368c:	f004 fc56 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003690:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <StreamTask+0xbc4>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003696:	4b89      	ldr	r3, [pc, #548]	; (80038bc <StreamTask+0xbcc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f005 fd28 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 80036a0:	f7fe f87e 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80036a4:	4b7d      	ldr	r3, [pc, #500]	; (800389c <StreamTask+0xbac>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80036aa:	e39e      	b.n	8003dea <StreamTask+0x10fa>
	  case Go_Mile_2_3:
						  vTaskSuspend(DistanceCheckHandle);
 80036ac:	4b7a      	ldr	r3, [pc, #488]	; (8003898 <StreamTask+0xba8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f005 fd1d 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 80036b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80036ba:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80036bc:	4b77      	ldr	r3, [pc, #476]	; (800389c <StreamTask+0xbac>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 80036c2:	4b77      	ldr	r3, [pc, #476]	; (80038a0 <StreamTask+0xbb0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f005 fdd6 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 80036cc:	4b75      	ldr	r3, [pc, #468]	; (80038a4 <StreamTask+0xbb4>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 80036d2:	4b75      	ldr	r3, [pc, #468]	; (80038a8 <StreamTask+0xbb8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f005 fdce 	bl	8009278 <vTaskResume>
						  delay(500);
 80036dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036e0:	f7fe f86c 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 80036e4:	4b71      	ldr	r3, [pc, #452]	; (80038ac <StreamTask+0xbbc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ec:	4618      	mov	r0, r3
 80036ee:	f004 fc25 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 80036f2:	4b6f      	ldr	r3, [pc, #444]	; (80038b0 <StreamTask+0xbc0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4413      	add	r3, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b69      	ldr	r3, [pc, #420]	; (80038a4 <StreamTask+0xbb4>)
 8003700:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003702:	4b6c      	ldr	r3, [pc, #432]	; (80038b4 <StreamTask+0xbc4>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003708:	4b6b      	ldr	r3, [pc, #428]	; (80038b8 <StreamTask+0xbc8>)
 800370a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800370e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003710:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <StreamTask+0xbcc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f005 fdaf 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 800371a:	20c8      	movs	r0, #200	; 0xc8
 800371c:	f7fe f84e 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003720:	4b64      	ldr	r3, [pc, #400]	; (80038b4 <StreamTask+0xbc4>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003726:	4b61      	ldr	r3, [pc, #388]	; (80038ac <StreamTask+0xbbc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f04f 31ff 	mov.w	r1, #4294967295
 800372e:	4618      	mov	r0, r3
 8003730:	f004 fc04 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003734:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <StreamTask+0xbc4>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 800373a:	4b60      	ldr	r3, [pc, #384]	; (80038bc <StreamTask+0xbcc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f005 fcd6 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003744:	f7fe f82c 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003748:	4b54      	ldr	r3, [pc, #336]	; (800389c <StreamTask+0xbac>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 800374e:	e34c      	b.n	8003dea <StreamTask+0x10fa>

	  case Go_Mile_3_1:
						  vTaskSuspend(DistanceCheckHandle);
 8003750:	4b51      	ldr	r3, [pc, #324]	; (8003898 <StreamTask+0xba8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f005 fccb 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 800375a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800375e:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003760:	4b4e      	ldr	r3, [pc, #312]	; (800389c <StreamTask+0xbac>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003766:	4b4e      	ldr	r3, [pc, #312]	; (80038a0 <StreamTask+0xbb0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f005 fd84 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 8003770:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <StreamTask+0xbb4>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003776:	4b4c      	ldr	r3, [pc, #304]	; (80038a8 <StreamTask+0xbb8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f005 fd7c 	bl	8009278 <vTaskResume>
						  delay(500);
 8003780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003784:	f7fe f81a 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003788:	4b48      	ldr	r3, [pc, #288]	; (80038ac <StreamTask+0xbbc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f04f 31ff 	mov.w	r1, #4294967295
 8003790:	4618      	mov	r0, r3
 8003792:	f004 fbd3 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003796:	4b46      	ldr	r3, [pc, #280]	; (80038b0 <StreamTask+0xbc0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4413      	add	r3, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b40      	ldr	r3, [pc, #256]	; (80038a4 <StreamTask+0xbb4>)
 80037a4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 80037a6:	4b43      	ldr	r3, [pc, #268]	; (80038b4 <StreamTask+0xbc4>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 80037ac:	4b42      	ldr	r3, [pc, #264]	; (80038b8 <StreamTask+0xbc8>)
 80037ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80037b2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 80037b4:	4b41      	ldr	r3, [pc, #260]	; (80038bc <StreamTask+0xbcc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f005 fd5d 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 80037be:	20c8      	movs	r0, #200	; 0xc8
 80037c0:	f7fd fffc 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 80037c4:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <StreamTask+0xbc4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80037ca:	4b38      	ldr	r3, [pc, #224]	; (80038ac <StreamTask+0xbbc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f04f 31ff 	mov.w	r1, #4294967295
 80037d2:	4618      	mov	r0, r3
 80037d4:	f004 fbb2 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 80037d8:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <StreamTask+0xbc4>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80037de:	4b37      	ldr	r3, [pc, #220]	; (80038bc <StreamTask+0xbcc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f005 fc84 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 80037e8:	f7fd ffda 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80037ec:	4b2b      	ldr	r3, [pc, #172]	; (800389c <StreamTask+0xbac>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80037f2:	e2fa      	b.n	8003dea <StreamTask+0x10fa>
	  case Go_Mile_3_3:
						  vTaskSuspend(DistanceCheckHandle);
 80037f4:	4b28      	ldr	r3, [pc, #160]	; (8003898 <StreamTask+0xba8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f005 fc79 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 80037fe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003802:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <StreamTask+0xbac>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <StreamTask+0xbb0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f005 fd32 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 8003814:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <StreamTask+0xbb4>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 800381a:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <StreamTask+0xbb8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f005 fd2a 	bl	8009278 <vTaskResume>
						  delay(500);
 8003824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003828:	f7fd ffc8 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 800382c:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <StreamTask+0xbbc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	4618      	mov	r0, r3
 8003836:	f004 fb81 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <StreamTask+0xbc0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4413      	add	r3, r2
 8003844:	461a      	mov	r2, r3
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <StreamTask+0xbb4>)
 8003848:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <StreamTask+0xbc4>)
 800384c:	2201      	movs	r2, #1
 800384e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <StreamTask+0xbc8>)
 8003852:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003856:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003858:	4b18      	ldr	r3, [pc, #96]	; (80038bc <StreamTask+0xbcc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f005 fd0b 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 8003862:	20c8      	movs	r0, #200	; 0xc8
 8003864:	f7fd ffaa 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <StreamTask+0xbc4>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <StreamTask+0xbbc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f04f 31ff 	mov.w	r1, #4294967295
 8003876:	4618      	mov	r0, r3
 8003878:	f004 fb60 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <StreamTask+0xbc4>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <StreamTask+0xbcc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f005 fc32 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 800388c:	f7fd ff88 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <StreamTask+0xbac>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003896:	e2a8      	b.n	8003dea <StreamTask+0x10fa>
 8003898:	2000412c 	.word	0x2000412c
 800389c:	200002cc 	.word	0x200002cc
 80038a0:	200042f4 	.word	0x200042f4
 80038a4:	200002d4 	.word	0x200002d4
 80038a8:	20004044 	.word	0x20004044
 80038ac:	2000420c 	.word	0x2000420c
 80038b0:	200002d0 	.word	0x200002d0
 80038b4:	20000008 	.word	0x20000008
 80038b8:	20000000 	.word	0x20000000
 80038bc:	20004130 	.word	0x20004130
	  case Go_Mile_4:
	  					  vTaskSuspend(DistanceCheckHandle);
 80038c0:	4b95      	ldr	r3, [pc, #596]	; (8003b18 <StreamTask+0xe28>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f005 fc13 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=200;//室外
 80038ca:	23c8      	movs	r3, #200	; 0xc8
 80038cc:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80038ce:	4b93      	ldr	r3, [pc, #588]	; (8003b1c <StreamTask+0xe2c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 80038d4:	4b92      	ldr	r3, [pc, #584]	; (8003b20 <StreamTask+0xe30>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f005 fccd 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 80038de:	4b91      	ldr	r3, [pc, #580]	; (8003b24 <StreamTask+0xe34>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 80038e4:	4b90      	ldr	r3, [pc, #576]	; (8003b28 <StreamTask+0xe38>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f005 fcc5 	bl	8009278 <vTaskResume>
						  delay(500);
 80038ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038f2:	f7fd ff63 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 80038f6:	4b8d      	ldr	r3, [pc, #564]	; (8003b2c <StreamTask+0xe3c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f04f 31ff 	mov.w	r1, #4294967295
 80038fe:	4618      	mov	r0, r3
 8003900:	f004 fb1c 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003904:	4b8a      	ldr	r3, [pc, #552]	; (8003b30 <StreamTask+0xe40>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4413      	add	r3, r2
 800390e:	461a      	mov	r2, r3
 8003910:	4b84      	ldr	r3, [pc, #528]	; (8003b24 <StreamTask+0xe34>)
 8003912:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003914:	4b87      	ldr	r3, [pc, #540]	; (8003b34 <StreamTask+0xe44>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 800391a:	4b87      	ldr	r3, [pc, #540]	; (8003b38 <StreamTask+0xe48>)
 800391c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003920:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003922:	4b86      	ldr	r3, [pc, #536]	; (8003b3c <StreamTask+0xe4c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f005 fca6 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 800392c:	20c8      	movs	r0, #200	; 0xc8
 800392e:	f7fd ff45 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003932:	4b80      	ldr	r3, [pc, #512]	; (8003b34 <StreamTask+0xe44>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003938:	4b7c      	ldr	r3, [pc, #496]	; (8003b2c <StreamTask+0xe3c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f04f 31ff 	mov.w	r1, #4294967295
 8003940:	4618      	mov	r0, r3
 8003942:	f004 fafb 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003946:	4b7b      	ldr	r3, [pc, #492]	; (8003b34 <StreamTask+0xe44>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 800394c:	4b7b      	ldr	r3, [pc, #492]	; (8003b3c <StreamTask+0xe4c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f005 fbcd 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003956:	f7fd ff23 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 800395a:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <StreamTask+0xe2c>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003960:	e243      	b.n	8003dea <StreamTask+0x10fa>
	  case Go_Mile_5:
						  //vTaskSuspend(DistanceCheckHandle);
						  //pulse_incremnet=6900;//室内
						  //pulse_incremnet=0;//室外
						  //pulse_incremnet=600; //小正方形
		                  Ultrasonic_Feedback_front();
 8003962:	f7fe fa9f 	bl	8001ea4 <Ultrasonic_Feedback_front>
						  gyro_reset_flag=0;
 8003966:	4b6d      	ldr	r3, [pc, #436]	; (8003b1c <StreamTask+0xe2c>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 800396c:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <StreamTask+0xe30>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f005 fc81 	bl	8009278 <vTaskResume>
						  //critical_pulses=0;
						  //vTaskResume(MileageHandle);
						  delay(500);
 8003976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800397a:	f7fd ff1f 	bl	80017bc <delay>
						  //osSemaphoreWait(MileageSemHandle, osWaitForever);
						  //critical_pulses=pulse_incremnet+number_of_pulses;
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 800397e:	4b6d      	ldr	r3, [pc, #436]	; (8003b34 <StreamTask+0xe44>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003984:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <StreamTask+0xe48>)
 8003986:	f44f 7248 	mov.w	r2, #800	; 0x320
 800398a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 800398c:	4b6b      	ldr	r3, [pc, #428]	; (8003b3c <StreamTask+0xe4c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f005 fc71 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 8003996:	20c8      	movs	r0, #200	; 0xc8
 8003998:	f7fd ff10 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 800399c:	4b65      	ldr	r3, [pc, #404]	; (8003b34 <StreamTask+0xe44>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(UltraFrontSemHandle, osWaitForever);
 80039a2:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <StreamTask+0xe50>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f04f 31ff 	mov.w	r1, #4294967295
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 fac6 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 80039b0:	4b60      	ldr	r3, [pc, #384]	; (8003b34 <StreamTask+0xe44>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80039b6:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <StreamTask+0xe4c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f005 fb98 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 80039c0:	f7fd feee 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80039c4:	4b55      	ldr	r3, [pc, #340]	; (8003b1c <StreamTask+0xe2c>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80039ca:	e20e      	b.n	8003dea <StreamTask+0x10fa>
	  case Go_Mile_6:
	  	  	              vTaskSuspend(GyroReceiveHandle);
 80039cc:	4b54      	ldr	r3, [pc, #336]	; (8003b20 <StreamTask+0xe30>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f005 fb8d 	bl	80090f0 <vTaskSuspend>
		                  critical_pulses=0;
 80039d6:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <StreamTask+0xe34>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
	  	  	              vTaskSuspend(PIDCameraHandle);
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <StreamTask+0xe54>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f005 fb85 	bl	80090f0 <vTaskSuspend>
	  	  	              vTaskSuspend(DistanceCheckHandle);
 80039e6:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <StreamTask+0xe28>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f005 fb80 	bl	80090f0 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 80039f0:	4b55      	ldr	r3, [pc, #340]	; (8003b48 <StreamTask+0xe58>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 80039f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039fa:	f7fd fedf 	bl	80017bc <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  //critical_distance.front=350;
		  	  	  	  	  //vTaskResume(DistanceCheckHandle);
		  	  	  	      distance_flag=0;
 80039fe:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <StreamTask+0xe5c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
	  	                  stepping2();
 8003a04:	f7fe feb2 	bl	800276c <stepping2>
		  	  	  	      Car_Stop();
 8003a08:	f7fd feca 	bl	80017a0 <Car_Stop>
	  		              vTaskSuspend(GyroReceiveHandle);
 8003a0c:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <StreamTask+0xe30>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f005 fb6d 	bl	80090f0 <vTaskSuspend>
	  		              break;
 8003a16:	e1e8      	b.n	8003dea <StreamTask+0x10fa>
	  case Go_Mile_6_7:
	  					  vTaskSuspend(DistanceCheckHandle);
 8003a18:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <StreamTask+0xe28>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f005 fb67 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=100;//室外
 8003a22:	2364      	movs	r3, #100	; 0x64
 8003a24:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003a26:	4b3d      	ldr	r3, [pc, #244]	; (8003b1c <StreamTask+0xe2c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003a2c:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <StreamTask+0xe30>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f005 fc21 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 8003a36:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <StreamTask+0xe34>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <StreamTask+0xe38>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f005 fc19 	bl	8009278 <vTaskResume>
						  delay(500);
 8003a46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a4a:	f7fd feb7 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <StreamTask+0xe3c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f04f 31ff 	mov.w	r1, #4294967295
 8003a56:	4618      	mov	r0, r3
 8003a58:	f004 fa70 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003a5c:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <StreamTask+0xe40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4413      	add	r3, r2
 8003a66:	461a      	mov	r2, r3
 8003a68:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <StreamTask+0xe34>)
 8003a6a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003a6c:	4b31      	ldr	r3, [pc, #196]	; (8003b34 <StreamTask+0xe44>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003a72:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <StreamTask+0xe48>)
 8003a74:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003a78:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003a7a:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <StreamTask+0xe4c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f005 fbfa 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 8003a84:	20c8      	movs	r0, #200	; 0xc8
 8003a86:	f7fd fe99 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003a8a:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <StreamTask+0xe44>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003a90:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <StreamTask+0xe3c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 fa4f 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003a9e:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <StreamTask+0xe44>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <StreamTask+0xe4c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f005 fb21 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003aae:	f7fd fe77 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <StreamTask+0xe2c>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003ab8:	e197      	b.n	8003dea <StreamTask+0x10fa>
	  case Go_Mile_7:
	  	  	              vTaskSuspend(GyroReceiveHandle);
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <StreamTask+0xe30>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f005 fb16 	bl	80090f0 <vTaskSuspend>
		                  critical_pulses=0;
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <StreamTask+0xe34>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
	  	  	              vTaskSuspend(PIDCameraHandle);
 8003aca:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <StreamTask+0xe54>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f005 fb0e 	bl	80090f0 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <StreamTask+0xe58>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8003ada:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ade:	f7fd fe6d 	bl	80017bc <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  critical_distance.front=350;
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <StreamTask+0xe60>)
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <StreamTask+0xe64>)
 8003ae6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <StreamTask+0xe28>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f005 fbc3 	bl	8009278 <vTaskResume>
		  	  	  	      distance_flag=0;
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <StreamTask+0xe5c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
	  	                  stepping();
 8003af8:	f7fe fd7c 	bl	80025f4 <stepping>
		  	  	  	      Car_Stop();
 8003afc:	f7fd fe50 	bl	80017a0 <Car_Stop>
		  	  	  	      vTaskSuspend(DistanceCheckHandle);
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <StreamTask+0xe28>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f005 faf3 	bl	80090f0 <vTaskSuspend>
	  		              vTaskSuspend(GyroReceiveHandle);
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <StreamTask+0xe30>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f005 faee 	bl	80090f0 <vTaskSuspend>
	  		              break;
 8003b14:	e169      	b.n	8003dea <StreamTask+0x10fa>
 8003b16:	bf00      	nop
 8003b18:	2000412c 	.word	0x2000412c
 8003b1c:	200002cc 	.word	0x200002cc
 8003b20:	200042f4 	.word	0x200042f4
 8003b24:	200002d4 	.word	0x200002d4
 8003b28:	20004044 	.word	0x20004044
 8003b2c:	2000420c 	.word	0x2000420c
 8003b30:	200002d0 	.word	0x200002d0
 8003b34:	20000008 	.word	0x20000008
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	20004130 	.word	0x20004130
 8003b40:	20004128 	.word	0x20004128
 8003b44:	20004120 	.word	0x20004120
 8003b48:	200002c8 	.word	0x200002c8
 8003b4c:	200002c4 	.word	0x200002c4
 8003b50:	200002ac 	.word	0x200002ac
 8003b54:	43af0000 	.word	0x43af0000
	  case Go_Mile_8_Until_Apriltag:
						  vTaskSuspend(DistanceCheckHandle);
 8003b58:	4ba5      	ldr	r3, [pc, #660]	; (8003df0 <StreamTask+0x1100>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f005 fac7 	bl	80090f0 <vTaskSuspend>
						  gyro_reset_flag=0;
 8003b62:	4ba4      	ldr	r3, [pc, #656]	; (8003df4 <StreamTask+0x1104>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
						  camera_recieve_IT_flag=1;
 8003b68:	4ba3      	ldr	r3, [pc, #652]	; (8003df8 <StreamTask+0x1108>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
						  HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8003b6e:	2202      	movs	r2, #2
 8003b70:	49a2      	ldr	r1, [pc, #648]	; (8003dfc <StreamTask+0x110c>)
 8003b72:	48a3      	ldr	r0, [pc, #652]	; (8003e00 <StreamTask+0x1110>)
 8003b74:	f003 fba3 	bl	80072be <HAL_UART_Receive_IT>
						  vTaskResume(GyroReceiveHandle);
 8003b78:	4ba2      	ldr	r3, [pc, #648]	; (8003e04 <StreamTask+0x1114>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f005 fb7b 	bl	8009278 <vTaskResume>
						  delay(500);
 8003b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b86:	f7fd fe19 	bl	80017bc <delay>
						  PID_Straight_Reset_Flag=1;
 8003b8a:	4b9f      	ldr	r3, [pc, #636]	; (8003e08 <StreamTask+0x1118>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
						  go_straight_speed=PWM_Mid-200;
 8003b90:	4b9e      	ldr	r3, [pc, #632]	; (8003e0c <StreamTask+0x111c>)
 8003b92:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003b96:	601a      	str	r2, [r3, #0]
						  vTaskResume(GoStraightHandle);
 8003b98:	4b9d      	ldr	r3, [pc, #628]	; (8003e10 <StreamTask+0x1120>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f005 fb6b 	bl	8009278 <vTaskResume>
						  delay(500);
 8003ba2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ba6:	f7fd fe09 	bl	80017bc <delay>
						  PID_Straight_Reset_Flag=0;
 8003baa:	4b97      	ldr	r3, [pc, #604]	; (8003e08 <StreamTask+0x1118>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
						  osSemaphoreWait(ApriltagSemHandle, 0);
 8003bb0:	4b98      	ldr	r3, [pc, #608]	; (8003e14 <StreamTask+0x1124>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f004 f9c0 	bl	8007f3c <osSemaphoreWait>
						  osSemaphoreWait(ApriltagSemHandle, osWaitForever);
 8003bbc:	4b95      	ldr	r3, [pc, #596]	; (8003e14 <StreamTask+0x1124>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f004 f9b9 	bl	8007f3c <osSemaphoreWait>
						  PID_Straight_Reset_Flag=1;
 8003bca:	4b8f      	ldr	r3, [pc, #572]	; (8003e08 <StreamTask+0x1118>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
						  vTaskSuspend(GoStraightHandle);
 8003bd0:	4b8f      	ldr	r3, [pc, #572]	; (8003e10 <StreamTask+0x1120>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f005 fa8b 	bl	80090f0 <vTaskSuspend>
						  PWM_SET_LEFT(PWM_Mid-100);
 8003bda:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003bde:	f7fe fb25 	bl	800222c <PWM_SET_LEFT>
						  PWM_SET_RIGHT(PWM_Mid-100);
 8003be2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003be6:	f7fe fb5b 	bl	80022a0 <PWM_SET_RIGHT>
						  delay(1200);
 8003bea:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8003bee:	f7fd fde5 	bl	80017bc <delay>
						  Car_Stop();
 8003bf2:	f7fd fdd5 	bl	80017a0 <Car_Stop>
						  gyro_reset_flag=1;
 8003bf6:	4b7f      	ldr	r3, [pc, #508]	; (8003df4 <StreamTask+0x1104>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
						  //vTaskSuspend(MileageHandle);
						  break;
 8003bfc:	e0f5      	b.n	8003dea <StreamTask+0x10fa>
	  case Go_Mile_9:
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003bfe:	4b7e      	ldr	r3, [pc, #504]	; (8003df8 <StreamTask+0x1108>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
						  vTaskSuspend(DistanceCheckHandle);
 8003c04:	4b7a      	ldr	r3, [pc, #488]	; (8003df0 <StreamTask+0x1100>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f005 fa71 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003c0e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003c12:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003c14:	4b77      	ldr	r3, [pc, #476]	; (8003df4 <StreamTask+0x1104>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003c1a:	4b7a      	ldr	r3, [pc, #488]	; (8003e04 <StreamTask+0x1114>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f005 fb2a 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 8003c24:	4b7c      	ldr	r3, [pc, #496]	; (8003e18 <StreamTask+0x1128>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003c2a:	4b7c      	ldr	r3, [pc, #496]	; (8003e1c <StreamTask+0x112c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f005 fb22 	bl	8009278 <vTaskResume>
						  delay(500);
 8003c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c38:	f7fd fdc0 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003c3c:	4b78      	ldr	r3, [pc, #480]	; (8003e20 <StreamTask+0x1130>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	4618      	mov	r0, r3
 8003c46:	f004 f979 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003c4a:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <StreamTask+0x1134>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4413      	add	r3, r2
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <StreamTask+0x1128>)
 8003c58:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003c5a:	4b6b      	ldr	r3, [pc, #428]	; (8003e08 <StreamTask+0x1118>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003c60:	4b6a      	ldr	r3, [pc, #424]	; (8003e0c <StreamTask+0x111c>)
 8003c62:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c66:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003c68:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <StreamTask+0x1120>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f005 fb03 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 8003c72:	20c8      	movs	r0, #200	; 0xc8
 8003c74:	f7fd fda2 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003c78:	4b63      	ldr	r3, [pc, #396]	; (8003e08 <StreamTask+0x1118>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003c7e:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <StreamTask+0x1130>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f04f 31ff 	mov.w	r1, #4294967295
 8003c86:	4618      	mov	r0, r3
 8003c88:	f004 f958 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003c8c:	4b5e      	ldr	r3, [pc, #376]	; (8003e08 <StreamTask+0x1118>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003c92:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <StreamTask+0x1120>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f005 fa2a 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003c9c:	f7fd fd80 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003ca0:	4b54      	ldr	r3, [pc, #336]	; (8003df4 <StreamTask+0x1104>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003ca6:	e0a0      	b.n	8003dea <StreamTask+0x10fa>
	  case Go_Mile_10:
						 vTaskSuspend(DistanceCheckHandle);
 8003ca8:	4b51      	ldr	r3, [pc, #324]	; (8003df0 <StreamTask+0x1100>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f005 fa1f 	bl	80090f0 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003cb2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003cb6:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003cb8:	4b4e      	ldr	r3, [pc, #312]	; (8003df4 <StreamTask+0x1104>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003cbe:	4b51      	ldr	r3, [pc, #324]	; (8003e04 <StreamTask+0x1114>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f005 fad8 	bl	8009278 <vTaskResume>
						  critical_pulses=0;
 8003cc8:	4b53      	ldr	r3, [pc, #332]	; (8003e18 <StreamTask+0x1128>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003cce:	4b53      	ldr	r3, [pc, #332]	; (8003e1c <StreamTask+0x112c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f005 fad0 	bl	8009278 <vTaskResume>
						  delay(500);
 8003cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cdc:	f7fd fd6e 	bl	80017bc <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003ce0:	4b4f      	ldr	r3, [pc, #316]	; (8003e20 <StreamTask+0x1130>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f004 f927 	bl	8007f3c <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003cee:	4b4d      	ldr	r3, [pc, #308]	; (8003e24 <StreamTask+0x1134>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <StreamTask+0x1128>)
 8003cfc:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003cfe:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <StreamTask+0x1118>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003d04:	4b41      	ldr	r3, [pc, #260]	; (8003e0c <StreamTask+0x111c>)
 8003d06:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d0a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003d0c:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <StreamTask+0x1120>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f005 fab1 	bl	8009278 <vTaskResume>
		  	  	  	  	  delay(200);
 8003d16:	20c8      	movs	r0, #200	; 0xc8
 8003d18:	f7fd fd50 	bl	80017bc <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003d1c:	4b3a      	ldr	r3, [pc, #232]	; (8003e08 <StreamTask+0x1118>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003d22:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <StreamTask+0x1130>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f004 f906 	bl	8007f3c <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003d30:	4b35      	ldr	r3, [pc, #212]	; (8003e08 <StreamTask+0x1118>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003d36:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <StreamTask+0x1120>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f005 f9d8 	bl	80090f0 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003d40:	f7fd fd2e 	bl	80017a0 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <StreamTask+0x1104>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003d4a:	e04e      	b.n	8003dea <StreamTask+0x10fa>
	  case Apriltag_Check:
		  	  	  	  	  Car_Stop();
 8003d4c:	f7fd fd28 	bl	80017a0 <Car_Stop>
		  	  	  	  	  break;
 8003d50:	e04b      	b.n	8003dea <StreamTask+0x10fa>
	  case Apriltag_Adjust1:
						  vTaskSuspend(DistanceCheckHandle);
 8003d52:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <StreamTask+0x1100>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f005 f9ca 	bl	80090f0 <vTaskSuspend>
						  vTaskSuspend(GoStraightHandle);
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <StreamTask+0x1120>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f005 f9c5 	bl	80090f0 <vTaskSuspend>
						  //vTaskSuspend(MileageHandle);
						  gyro_reset_flag=1;
 8003d66:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <StreamTask+0x1104>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
						  Car_Stop();
 8003d6c:	f7fd fd18 	bl	80017a0 <Car_Stop>
						  delay(50);
 8003d70:	2032      	movs	r0, #50	; 0x32
 8003d72:	f7fd fd23 	bl	80017bc <delay>
						  distance_flag=0;
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <StreamTask+0x1138>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
						  delay(500);
 8003d7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d80:	f7fd fd1c 	bl	80017bc <delay>
						  PID_Apriltag(5);
 8003d84:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003d88:	f7fe fae8 	bl	800235c <PID_Apriltag>
						  Car_Stop();
 8003d8c:	f7fd fd08 	bl	80017a0 <Car_Stop>
						  break;
 8003d90:	e02b      	b.n	8003dea <StreamTask+0x10fa>
	  case Feeding:
		  	  	  	  	  Car_Stop();
 8003d92:	f7fd fd05 	bl	80017a0 <Car_Stop>
		  	  	  	  	  feeding();
 8003d96:	f7fe fdcb 	bl	8002930 <feeding>
		  	  	  	  	  break;
 8003d9a:	e026      	b.n	8003dea <StreamTask+0x10fa>
	  case Mile_Adjust:
		  	  	  	  	  vTaskResume(MileageHandle);
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <StreamTask+0x112c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f005 fa69 	bl	8009278 <vTaskResume>
		  	  	  	  	  osSemaphoreWait(MileageNegSemHandle, 0);
 8003da6:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <StreamTask+0x113c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f004 f8c5 	bl	8007f3c <osSemaphoreWait>
		  	  	  	  	  PWM_SET_LEFT(-PWM_Lowest-80);
 8003db2:	481f      	ldr	r0, [pc, #124]	; (8003e30 <StreamTask+0x1140>)
 8003db4:	f7fe fa3a 	bl	800222c <PWM_SET_LEFT>
		  	  	  		  PWM_SET_RIGHT(-PWM_Lowest-80);
 8003db8:	481d      	ldr	r0, [pc, #116]	; (8003e30 <StreamTask+0x1140>)
 8003dba:	f7fe fa71 	bl	80022a0 <PWM_SET_RIGHT>
		  	  	  		  osSemaphoreWait(MileageNegSemHandle, osWaitForever);
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <StreamTask+0x113c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 f8b8 	bl	8007f3c <osSemaphoreWait>
		  	  	  		  Car_Stop();
 8003dcc:	f7fd fce8 	bl	80017a0 <Car_Stop>
		  	  	  		  vTaskSuspend(MileageHandle);
 8003dd0:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <StreamTask+0x112c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f005 f98b 	bl	80090f0 <vTaskSuspend>
		  	  	  	  	  break;
 8003dda:	e006      	b.n	8003dea <StreamTask+0x10fa>
	  case Idle:
		  	  	  	  	  Car_Stop();
 8003ddc:	f7fd fce0 	bl	80017a0 <Car_Stop>
		  	  	  	  	  break;
 8003de0:	e003      	b.n	8003dea <StreamTask+0x10fa>
	  default :
		  	  	  	  	  Car_Initial();
 8003de2:	f7fd fca7 	bl	8001734 <Car_Initial>
		  	  	  	  	  break;
 8003de6:	e000      	b.n	8003dea <StreamTask+0x10fa>
		  continue;
 8003de8:	bf00      	nop
	  delay(50);
 8003dea:	f7fe bf8f 	b.w	8002d0c <StreamTask+0x1c>
 8003dee:	bf00      	nop
 8003df0:	2000412c 	.word	0x2000412c
 8003df4:	200002cc 	.word	0x200002cc
 8003df8:	200002c8 	.word	0x200002c8
 8003dfc:	20000294 	.word	0x20000294
 8003e00:	200042b0 	.word	0x200042b0
 8003e04:	200042f4 	.word	0x200042f4
 8003e08:	20000008 	.word	0x20000008
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	20004130 	.word	0x20004130
 8003e14:	2000421c 	.word	0x2000421c
 8003e18:	200002d4 	.word	0x200002d4
 8003e1c:	20004044 	.word	0x20004044
 8003e20:	2000420c 	.word	0x2000420c
 8003e24:	200002d0 	.word	0x200002d0
 8003e28:	200002c4 	.word	0x200002c4
 8003e2c:	20004220 	.word	0x20004220
 8003e30:	fffffdbc 	.word	0xfffffdbc

08003e34 <PIDCameraTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PIDCameraTask */
void PIDCameraTask(void const * argument)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PIDCameraTask */
		vTaskSuspend(PIDCameraHandle);
 8003e3c:	4b5e      	ldr	r3, [pc, #376]	; (8003fb8 <PIDCameraTask+0x184>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f005 f955 	bl	80090f0 <vTaskSuspend>
		float PID_Error_Last=0;
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
		float PID_Output=0;                    // PWM输出占空
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
		float Error = 0, Error_Total=0;
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
		int32_t PID_Input=0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
		camera_recieve_IT_flag=1;
 8003e62:	4b56      	ldr	r3, [pc, #344]	; (8003fbc <PIDCameraTask+0x188>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8003e68:	2202      	movs	r2, #2
 8003e6a:	4955      	ldr	r1, [pc, #340]	; (8003fc0 <PIDCameraTask+0x18c>)
 8003e6c:	4855      	ldr	r0, [pc, #340]	; (8003fc4 <PIDCameraTask+0x190>)
 8003e6e:	f003 fa26 	bl	80072be <HAL_UART_Receive_IT>
	  /* Infinite loop */
	  for(;;)
	  {
		  if(state == Idle)
 8003e72:	4b55      	ldr	r3, [pc, #340]	; (8003fc8 <PIDCameraTask+0x194>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b27      	cmp	r3, #39	; 0x27
 8003e78:	d105      	bne.n	8003e86 <PIDCameraTask+0x52>
		  {
			  vTaskSuspend(PIDCameraHandle);
 8003e7a:	4b4f      	ldr	r3, [pc, #316]	; (8003fb8 <PIDCameraTask+0x184>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f005 f936 	bl	80090f0 <vTaskSuspend>
			  continue;
 8003e84:	e097      	b.n	8003fb6 <PIDCameraTask+0x182>
		  }
//		  	 if(camera_ready_flag==0)
//		  		 continue;
//		  	 camera_ready_flag=0;
		  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8003e86:	4b51      	ldr	r3, [pc, #324]	; (8003fcc <PIDCameraTask+0x198>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 f854 	bl	8007f3c <osSemaphoreWait>
		  	 HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 8003e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e98:	484d      	ldr	r0, [pc, #308]	; (8003fd0 <PIDCameraTask+0x19c>)
 8003e9a:	f001 fa40 	bl	800531e <HAL_GPIO_TogglePin>
		  	 //delay(10);
		  	 //Data=0x03E8;
		  	 //PID_Input=-300;
		  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 8003e9e:	4b4d      	ldr	r3, [pc, #308]	; (8003fd4 <PIDCameraTask+0x1a0>)
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ea8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003eac:	60fb      	str	r3, [r7, #12]
		  	 if (PID_Input == -1000)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003eb4:	d07e      	beq.n	8003fb4 <PIDCameraTask+0x180>
		  		 continue;
		  	 Error = PID_Target - PID_Input;		  // 偏差 = 目标 - 实际
 8003eb6:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <PIDCameraTask+0x1a4>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eca:	edc7 7a04 	vstr	s15, [r7, #16]
		  	 PID_Output = Kp * Error  +
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <PIDCameraTask+0x1a8>)
 8003ed0:	ed93 7a00 	vldr	s14, [r3]
 8003ed4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
		  				  Kd * (Error - PID_Error_Last ) +
 8003edc:	edd7 6a04 	vldr	s13, [r7, #16]
 8003ee0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ee4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ee8:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <PIDCameraTask+0x1ac>)
 8003eea:	edd3 7a00 	vldr	s15, [r3]
 8003eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
		  	 PID_Output = Kp * Error  +
 8003ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efe:	edc7 7a06 	vstr	s15, [r7, #24]
		  				  Error_Total;
		  	 Error_Total=Error_Total+Ki*Error;
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <PIDCameraTask+0x1b0>)
 8003f04:	ed93 7a00 	vldr	s14, [r3]
 8003f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f10:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f18:	edc7 7a05 	vstr	s15, [r7, #20]
		  	 PID_Error_Last = Error;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	61fb      	str	r3, [r7, #28]
		  	 if(PID_Output < 0)
 8003f20:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2c:	d508      	bpl.n	8003f40 <PIDCameraTask+0x10c>
		  		 PID_Output-=PWM_Lowest;
 8003f2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f32:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003fe8 <PIDCameraTask+0x1b4>
 8003f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f3a:	edc7 7a06 	vstr	s15, [r7, #24]
 8003f3e:	e007      	b.n	8003f50 <PIDCameraTask+0x11c>
		  	 else
		  		 PID_Output+=PWM_Lowest;
 8003f40:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f44:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003fe8 <PIDCameraTask+0x1b4>
 8003f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f4c:	edc7 7a06 	vstr	s15, [r7, #24]
		     if(PID_Output > PWM_Higest-PWM_Mid) 			PID_Output =	2000-PWM_Mid;	    // 限幅
 8003f50:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f54:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003fec <PIDCameraTask+0x1b8>
 8003f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f60:	dd02      	ble.n	8003f68 <PIDCameraTask+0x134>
 8003f62:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <PIDCameraTask+0x1bc>)
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e00a      	b.n	8003f7e <PIDCameraTask+0x14a>
		     else if(PID_Output <-(PWM_Higest-PWM_Mid)) 	PID_Output = 	-(2000-PWM_Mid);
 8003f68:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f6c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003ff4 <PIDCameraTask+0x1c0>
 8003f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f78:	d501      	bpl.n	8003f7e <PIDCameraTask+0x14a>
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <PIDCameraTask+0x1c4>)
 8003f7c:	61bb      	str	r3, [r7, #24]
		     taskENTER_CRITICAL();
 8003f7e:	f006 f949 	bl	800a214 <vPortEnterCritical>
		     PWM_SET_RIGHT ((PWM_Mid + (int32_t) PID_Output));
 8003f82:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f8a:	ee17 3a90 	vmov	r3, s15
 8003f8e:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe f984 	bl	80022a0 <PWM_SET_RIGHT>
		     PWM_SET_LEFT  ((PWM_Mid - (int32_t) PID_Output));
 8003f98:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fa0:	ee17 3a90 	vmov	r3, s15
 8003fa4:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe f93f 	bl	800222c <PWM_SET_LEFT>
		     taskEXIT_CRITICAL();
 8003fae:	f006 f961 	bl	800a274 <vPortExitCritical>
 8003fb2:	e75e      	b.n	8003e72 <PIDCameraTask+0x3e>
		  		 continue;
 8003fb4:	bf00      	nop
		  if(state == Idle)
 8003fb6:	e75c      	b.n	8003e72 <PIDCameraTask+0x3e>
 8003fb8:	20004120 	.word	0x20004120
 8003fbc:	200002c8 	.word	0x200002c8
 8003fc0:	20000294 	.word	0x20000294
 8003fc4:	200042b0 	.word	0x200042b0
 8003fc8:	2000417c 	.word	0x2000417c
 8003fcc:	20004124 	.word	0x20004124
 8003fd0:	40021400 	.word	0x40021400
 8003fd4:	20000296 	.word	0x20000296
 8003fd8:	200002de 	.word	0x200002de
 8003fdc:	20000010 	.word	0x20000010
 8003fe0:	200002e4 	.word	0x200002e4
 8003fe4:	200002e0 	.word	0x200002e0
 8003fe8:	43fa0000 	.word	0x43fa0000
 8003fec:	44160000 	.word	0x44160000
 8003ff0:	44960000 	.word	0x44960000
 8003ff4:	c4160000 	.word	0xc4160000
 8003ff8:	c4960000 	.word	0xc4960000

08003ffc <GyroReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroReceiveTask */
void GyroReceiveTask(void const * argument)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	; 0x38
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroReceiveTask */
	vTaskSuspend(GyroReceiveHandle);
 8004004:	4ba6      	ldr	r3, [pc, #664]	; (80042a0 <GyroReceiveTask+0x2a4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f005 f871 	bl	80090f0 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  delay(100);
 800400e:	2064      	movs	r0, #100	; 0x64
 8004010:	f7fd fbd4 	bl	80017bc <delay>
	  uint8_t AxH=0, AxL=0;
 8004014:	2300      	movs	r3, #0
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800401a:	2300      	movs	r3, #0
 800401c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  int16_t Ax=0;
 8004020:	2300      	movs	r3, #0
 8004022:	853b      	strh	r3, [r7, #40]	; 0x28

	  uint8_t AyH=0,AyL=0;
 8004024:	2300      	movs	r3, #0
 8004026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800402a:	2300      	movs	r3, #0
 800402c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  int16_t Ay=0;
 8004030:	2300      	movs	r3, #0
 8004032:	84bb      	strh	r3, [r7, #36]	; 0x24

	  uint8_t YawH=0,YawL=0;
 8004034:	2300      	movs	r3, #0
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403a:	2300      	movs	r3, #0
 800403c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  int16_t Yaw=0;
 8004040:	2300      	movs	r3, #0
 8004042:	843b      	strh	r3, [r7, #32]

	  uint8_t sum=0;
 8004044:	2300      	movs	r3, #0
 8004046:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int i=0;
 800404a:	2300      	movs	r3, #0
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
	  int h=0;
 800404e:	2300      	movs	r3, #0
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint8_t GyroData[21]={0};
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	f107 030c 	add.w	r3, r7, #12
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	741a      	strb	r2, [r3, #16]
	  taskENTER_CRITICAL();
 8004066:	f006 f8d5 	bl	800a214 <vPortEnterCritical>
	  HAL_UART_Receive(&huart3, (uint8_t *) &GyroData, sizeof(GyroData), 50);
 800406a:	f107 0108 	add.w	r1, r7, #8
 800406e:	2332      	movs	r3, #50	; 0x32
 8004070:	2215      	movs	r2, #21
 8004072:	488c      	ldr	r0, [pc, #560]	; (80042a4 <GyroReceiveTask+0x2a8>)
 8004074:	f003 f881 	bl	800717a <HAL_UART_Receive>
	  taskEXIT_CRITICAL();
 8004078:	f006 f8fc 	bl	800a274 <vPortExitCritical>
	  while(h<14)
 800407c:	e009      	b.n	8004092 <GyroReceiveTask+0x96>
	  {
		  if(GyroData[h]==0x55)
 800407e:	f107 0208 	add.w	r2, r7, #8
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	4413      	add	r3, r2
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b55      	cmp	r3, #85	; 0x55
 800408a:	d006      	beq.n	800409a <GyroReceiveTask+0x9e>
			  break;
		  h++;
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	3301      	adds	r3, #1
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while(h<14)
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	2b0d      	cmp	r3, #13
 8004096:	ddf2      	ble.n	800407e <GyroReceiveTask+0x82>
 8004098:	e000      	b.n	800409c <GyroReceiveTask+0xa0>
			  break;
 800409a:	bf00      	nop
	  }
	  if(GyroData[h]!=0x55)
 800409c:	f107 0208 	add.w	r2, r7, #8
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	4413      	add	r3, r2
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b55      	cmp	r3, #85	; 0x55
 80040a8:	f040 80f3 	bne.w	8004292 <GyroReceiveTask+0x296>
		  continue;
	  if(GyroData[h+1]!=0x53)
 80040ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ae:	3301      	adds	r3, #1
 80040b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040b4:	4413      	add	r3, r2
 80040b6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80040ba:	2b53      	cmp	r3, #83	; 0x53
 80040bc:	f040 80eb 	bne.w	8004296 <GyroReceiveTask+0x29a>
		  continue;
	  i=0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
	  sum=0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  while(i<10)
 80040ca:	e00f      	b.n	80040ec <GyroReceiveTask+0xf0>
	  {
		  sum=sum+GyroData[h+i];
 80040cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	4413      	add	r3, r2
 80040d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040d6:	4413      	add	r3, r2
 80040d8:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 80040dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80040e0:	4413      	add	r3, r2
 80040e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  i++;
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	3301      	adds	r3, #1
 80040ea:	633b      	str	r3, [r7, #48]	; 0x30
	  while(i<10)
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	2b09      	cmp	r3, #9
 80040f0:	ddec      	ble.n	80040cc <GyroReceiveTask+0xd0>
	  }
	  	  if (sum!=GyroData[h+10])
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	330a      	adds	r3, #10
 80040f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040fa:	4413      	add	r3, r2
 80040fc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004100:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004104:	429a      	cmp	r2, r3
 8004106:	f040 80c8 	bne.w	800429a <GyroReceiveTask+0x29e>
	  		  continue;
	  AxL=GyroData[h+2];
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	3302      	adds	r3, #2
 800410e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004112:	4413      	add	r3, r2
 8004114:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004118:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  AxH=GyroData[h+3];
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	3303      	adds	r3, #3
 8004120:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004124:	4413      	add	r3, r2
 8004126:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  AyL=GyroData[h+4];
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	3304      	adds	r3, #4
 8004132:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004136:	4413      	add	r3, r2
 8004138:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800413c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  AyH=GyroData[h+5];
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	3305      	adds	r3, #5
 8004144:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004148:	4413      	add	r3, r2
 800414a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800414e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  YawL=GyroData[h+6];
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	3306      	adds	r3, #6
 8004156:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800415a:	4413      	add	r3, r2
 800415c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  YawH=GyroData[h+7];
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	3307      	adds	r3, #7
 8004168:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800416c:	4413      	add	r3, r2
 800416e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  Ax=((((int16_t) AxH)<<8) | AxL);
 8004176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	b21a      	sxth	r2, r3
 800417e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004182:	b21b      	sxth	r3, r3
 8004184:	4313      	orrs	r3, r2
 8004186:	853b      	strh	r3, [r7, #40]	; 0x28
	  Ay=((((int16_t) AyH)<<8) | AyL);
 8004188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	b21a      	sxth	r2, r3
 8004190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004194:	b21b      	sxth	r3, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	84bb      	strh	r3, [r7, #36]	; 0x24
	  Yaw=((((int16_t) YawH)<<8) | YawL);
 800419a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	b21a      	sxth	r2, r3
 80041a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	843b      	strh	r3, [r7, #32]
	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  //taskENTER_CRITICAL();
	  //HAL_UART_Transmit(&huart1, (uint8_t *) &Yaw, sizeof(Yaw), 0xFFFF);
	  //taskEXIT_CRITICAL();
	  if(gyro_reset_flag)
 80041ac:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <GyroReceiveTask+0x2ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <GyroReceiveTask+0x1c4>
	  {
		  vTaskSuspend(GyroReceiveHandle);
 80041b4:	4b3a      	ldr	r3, [pc, #232]	; (80042a0 <GyroReceiveTask+0x2a4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f004 ff99 	bl	80090f0 <vTaskSuspend>
		  continue;
 80041be:	e06d      	b.n	800429c <GyroReceiveTask+0x2a0>
	  }

	  angle.x=(((float)Ax) / 32768.0 * 180.0);
 80041c0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041cc:	ee17 0a90 	vmov	r0, s15
 80041d0:	f7fc f962 	bl	8000498 <__aeabi_f2d>
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <GyroReceiveTask+0x2b0>)
 80041da:	f7fc fadf 	bl	800079c <__aeabi_ddiv>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <GyroReceiveTask+0x2b4>)
 80041ec:	f7fc f9ac 	bl	8000548 <__aeabi_dmul>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f7fc fbe0 	bl	80009bc <__aeabi_d2f>
 80041fc:	4603      	mov	r3, r0
 80041fe:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <GyroReceiveTask+0x2b8>)
 8004200:	6013      	str	r3, [r2, #0]
	  angle.y=(((float)Ay) / 32768.0 * 180.0);
 8004202:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800420e:	ee17 0a90 	vmov	r0, s15
 8004212:	f7fc f941 	bl	8000498 <__aeabi_f2d>
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	4b24      	ldr	r3, [pc, #144]	; (80042ac <GyroReceiveTask+0x2b0>)
 800421c:	f7fc fabe 	bl	800079c <__aeabi_ddiv>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <GyroReceiveTask+0x2b4>)
 800422e:	f7fc f98b 	bl	8000548 <__aeabi_dmul>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	f7fc fbbf 	bl	80009bc <__aeabi_d2f>
 800423e:	4603      	mov	r3, r0
 8004240:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <GyroReceiveTask+0x2b8>)
 8004242:	6053      	str	r3, [r2, #4]
	  angle.z=(((float)Yaw) / 32768.0 * 180.0);
 8004244:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004248:	ee07 3a90 	vmov	s15, r3
 800424c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004250:	ee17 0a90 	vmov	r0, s15
 8004254:	f7fc f920 	bl	8000498 <__aeabi_f2d>
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <GyroReceiveTask+0x2b0>)
 800425e:	f7fc fa9d 	bl	800079c <__aeabi_ddiv>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <GyroReceiveTask+0x2b4>)
 8004270:	f7fc f96a 	bl	8000548 <__aeabi_dmul>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	f7fc fb9e 	bl	80009bc <__aeabi_d2f>
 8004280:	4603      	mov	r3, r0
 8004282:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <GyroReceiveTask+0x2b8>)
 8004284:	6093      	str	r3, [r2, #8]
	  osSemaphoreRelease(GyroReadySemHandle);
 8004286:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <GyroReceiveTask+0x2bc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f003 fea4 	bl	8007fd8 <osSemaphoreRelease>
 8004290:	e6bd      	b.n	800400e <GyroReceiveTask+0x12>
		  continue;
 8004292:	bf00      	nop
 8004294:	e6bb      	b.n	800400e <GyroReceiveTask+0x12>
		  continue;
 8004296:	bf00      	nop
 8004298:	e6b9      	b.n	800400e <GyroReceiveTask+0x12>
	  		  continue;
 800429a:	bf00      	nop
  {
 800429c:	e6b7      	b.n	800400e <GyroReceiveTask+0x12>
 800429e:	bf00      	nop
 80042a0:	200042f4 	.word	0x200042f4
 80042a4:	200040dc 	.word	0x200040dc
 80042a8:	200002cc 	.word	0x200002cc
 80042ac:	40e00000 	.word	0x40e00000
 80042b0:	40668000 	.word	0x40668000
 80042b4:	200002a0 	.word	0x200002a0
 80042b8:	20004218 	.word	0x20004218

080042bc <DistanceCheckTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DistanceCheckTask */
void DistanceCheckTask(void const * argument)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DistanceCheckTask */
	vTaskSuspend(DistanceCheckHandle);
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <DistanceCheckTask+0xa0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f004 ff11 	bl	80090f0 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  Distance distance={0.0,0.0};
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
	  Distance temp=Ultrasonic_Feedback();
 80042da:	f7fd fd81 	bl	8001de0 <Ultrasonic_Feedback>
 80042de:	eeb0 7a40 	vmov.f32	s14, s0
 80042e2:	eef0 7a60 	vmov.f32	s15, s1
 80042e6:	ed87 7a03 	vstr	s14, [r7, #12]
 80042ea:	edc7 7a04 	vstr	s15, [r7, #16]
	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  for(int i=0;i<1;i++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	e00a      	b.n	800430a <DistanceCheckTask+0x4e>
	  {
		  distance.front+=temp.front;
 80042f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80042f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80042fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004300:	edc7 7a05 	vstr	s15, [r7, #20]
	  for(int i=0;i<1;i++)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3301      	adds	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2b00      	cmp	r3, #0
 800430e:	ddf1      	ble.n	80042f4 <DistanceCheckTask+0x38>
	  }
	  distance.front/=1;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	617b      	str	r3, [r7, #20]
	  if(distance.front < critical_distance.front)
 8004314:	ed97 7a05 	vldr	s14, [r7, #20]
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <DistanceCheckTask+0xa4>)
 800431a:	edd3 7a00 	vldr	s15, [r3]
 800431e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004326:	d50e      	bpl.n	8004346 <DistanceCheckTask+0x8a>
	  {
		  distance_flag=1;
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <DistanceCheckTask+0xa8>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]
		  osSemaphoreRelease(CriticalDistanceSemHandle);
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <DistanceCheckTask+0xac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f003 fe50 	bl	8007fd8 <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 8004338:	2201      	movs	r2, #1
 800433a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800433e:	480b      	ldr	r0, [pc, #44]	; (800436c <DistanceCheckTask+0xb0>)
 8004340:	f000 ffd4 	bl	80052ec <HAL_GPIO_WritePin>
 8004344:	e7c3      	b.n	80042ce <DistanceCheckTask+0x12>
	  }
	  else
	  {
		  distance_flag=0;
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <DistanceCheckTask+0xa8>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 800434c:	2200      	movs	r2, #0
 800434e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004352:	4806      	ldr	r0, [pc, #24]	; (800436c <DistanceCheckTask+0xb0>)
 8004354:	f000 ffca 	bl	80052ec <HAL_GPIO_WritePin>
  {
 8004358:	e7b9      	b.n	80042ce <DistanceCheckTask+0x12>
 800435a:	bf00      	nop
 800435c:	2000412c 	.word	0x2000412c
 8004360:	200002ac 	.word	0x200002ac
 8004364:	200002c4 	.word	0x200002c4
 8004368:	2000403c 	.word	0x2000403c
 800436c:	40021400 	.word	0x40021400

08004370 <MileageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MileageTask */
void MileageTask(void const * argument)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MileageTask */
	//uint8_t mileage_counter;
	vTaskSuspend(MileageHandle);
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <MileageTask+0x60>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f004 feb7 	bl	80090f0 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  taskENTER_CRITICAL();
 8004382:	f005 ff47 	bl	800a214 <vPortEnterCritical>
	  //mileage_counter=__HAL_TIM_GET_COUNTER(&htim2);
	  //number_of_pulses=1000*(mileage_IT_number-1)+mileage_counter;
	  number_of_pulses=5000*mileage_IT_number+__HAL_TIM_GET_COUNTER(&htim2);
 8004386:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <MileageTask+0x64>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	461a      	mov	r2, r3
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <MileageTask+0x68>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	4413      	add	r3, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <MileageTask+0x6c>)
 80043a0:	601a      	str	r2, [r3, #0]
	  taskEXIT_CRITICAL();
 80043a2:	f005 ff67 	bl	800a274 <vPortExitCritical>
	  //HAL_UART_Transmit(&huart1, &number_of_pulses, sizeof(number_of_pulses), 1000);
	  if (number_of_pulses>critical_pulses)
 80043a6:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <MileageTask+0x6c>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <MileageTask+0x70>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	dd05      	ble.n	80043be <MileageTask+0x4e>
		  osSemaphoreRelease(MileageSemHandle);
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <MileageTask+0x74>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f003 fe0e 	bl	8007fd8 <osSemaphoreRelease>
 80043bc:	e004      	b.n	80043c8 <MileageTask+0x58>
	  else
		  osSemaphoreRelease(MileageNegSemHandle);
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <MileageTask+0x78>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f003 fe08 	bl	8007fd8 <osSemaphoreRelease>
	  delay(50);
 80043c8:	2032      	movs	r0, #50	; 0x32
 80043ca:	f7fd f9f7 	bl	80017bc <delay>
	  taskENTER_CRITICAL();
 80043ce:	e7d8      	b.n	8004382 <MileageTask+0x12>
 80043d0:	20004044 	.word	0x20004044
 80043d4:	20000004 	.word	0x20000004
 80043d8:	20004268 	.word	0x20004268
 80043dc:	200002d0 	.word	0x200002d0
 80043e0:	200002d4 	.word	0x200002d4
 80043e4:	2000420c 	.word	0x2000420c
 80043e8:	20004220 	.word	0x20004220

080043ec <GoStraightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GoStraightTask */
void GoStraightTask(void const * argument)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GoStraightTask */
	vTaskSuspend(GoStraightHandle);
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <GoStraightTask+0x3c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f004 fe79 	bl	80090f0 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	if (PID_Straight_Reset_Flag)
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <GoStraightTask+0x40>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10d      	bne.n	8004422 <GoStraightTask+0x36>
		continue;
	PID_Straight((float)go_straight_speed);
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <GoStraightTask+0x44>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004412:	eeb0 0a67 	vmov.f32	s0, s15
 8004416:	f7fd fbdd 	bl	8001bd4 <PID_Straight>
    delay(100);
 800441a:	2064      	movs	r0, #100	; 0x64
 800441c:	f7fd f9ce 	bl	80017bc <delay>
 8004420:	e7ed      	b.n	80043fe <GoStraightTask+0x12>
		continue;
 8004422:	bf00      	nop
	if (PID_Straight_Reset_Flag)
 8004424:	e7eb      	b.n	80043fe <GoStraightTask+0x12>
 8004426:	bf00      	nop
 8004428:	20004130 	.word	0x20004130
 800442c:	20000008 	.word	0x20000008
 8004430:	20000000 	.word	0x20000000

08004434 <ColorcheckTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ColorcheckTask */
void ColorcheckTask(void const * argument)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ColorcheckTask */
	vTaskSuspend(ColorcheckHandle);
 800443c:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <ColorcheckTask+0x88>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f004 fe55 	bl	80090f0 <vTaskSuspend>
	uint16_t temp=0;
 8004446:	2300      	movs	r3, #0
 8004448:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */

	HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 800444a:	2202      	movs	r2, #2
 800444c:	491c      	ldr	r1, [pc, #112]	; (80044c0 <ColorcheckTask+0x8c>)
 800444e:	481d      	ldr	r0, [pc, #116]	; (80044c4 <ColorcheckTask+0x90>)
 8004450:	f002 ff35 	bl	80072be <HAL_UART_Receive_IT>
	for(;;)
	{
		temp=0;
 8004454:	2300      	movs	r3, #0
 8004456:	81fb      	strh	r3, [r7, #14]
	  osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <ColorcheckTask+0x94>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f04f 31ff 	mov.w	r1, #4294967295
 8004460:	4618      	mov	r0, r3
 8004462:	f003 fd6b 	bl	8007f3c <osSemaphoreWait>
	  //camera_recieve_IT_flag=0;

	  temp = Camera_Data;
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <ColorcheckTask+0x98>)
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	81fb      	strh	r3, [r7, #14]
	  temp = temp&(0x1800);
 800446c:	89fb      	ldrh	r3, [r7, #14]
 800446e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004472:	81fb      	strh	r3, [r7, #14]
	  temp = (temp>>11);
 8004474:	89fb      	ldrh	r3, [r7, #14]
 8004476:	0adb      	lsrs	r3, r3, #11
 8004478:	81fb      	strh	r3, [r7, #14]
	  switch(temp)
 800447a:	89fb      	ldrh	r3, [r7, #14]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d014      	beq.n	80044aa <ColorcheckTask+0x76>
 8004480:	2b03      	cmp	r3, #3
 8004482:	dc19      	bgt.n	80044b8 <ColorcheckTask+0x84>
 8004484:	2b01      	cmp	r3, #1
 8004486:	d002      	beq.n	800448e <ColorcheckTask+0x5a>
 8004488:	2b02      	cmp	r3, #2
 800448a:	d007      	beq.n	800449c <ColorcheckTask+0x68>
		  break;
	  case 3:
		  yellow++;
		  break;
	  default:
		  break;
 800448c:	e014      	b.n	80044b8 <ColorcheckTask+0x84>
		  blue++;
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <ColorcheckTask+0x9c>)
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	3301      	adds	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <ColorcheckTask+0x9c>)
 8004498:	801a      	strh	r2, [r3, #0]
		  break;
 800449a:	e00e      	b.n	80044ba <ColorcheckTask+0x86>
		  pink++;
 800449c:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <ColorcheckTask+0xa0>)
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <ColorcheckTask+0xa0>)
 80044a6:	801a      	strh	r2, [r3, #0]
		  break;
 80044a8:	e007      	b.n	80044ba <ColorcheckTask+0x86>
		  yellow++;
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <ColorcheckTask+0xa4>)
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	3301      	adds	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <ColorcheckTask+0xa4>)
 80044b4:	801a      	strh	r2, [r3, #0]
		  break;
 80044b6:	e000      	b.n	80044ba <ColorcheckTask+0x86>
		  break;
 80044b8:	bf00      	nop
		temp=0;
 80044ba:	e7cb      	b.n	8004454 <ColorcheckTask+0x20>
 80044bc:	20004210 	.word	0x20004210
 80044c0:	20000294 	.word	0x20000294
 80044c4:	200042b0 	.word	0x200042b0
 80044c8:	20004124 	.word	0x20004124
 80044cc:	20000296 	.word	0x20000296
 80044d0:	200002d8 	.word	0x200002d8
 80044d4:	200002da 	.word	0x200002da
 80044d8:	200002dc 	.word	0x200002dc

080044dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a10      	ldr	r2, [pc, #64]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d102      	bne.n	80044f4 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80044ee:	f000 fbcd 	bl	8004c8c <HAL_IncTick>
	   	else
  		mileage_IT_number++;
  		//HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
  	}
  /* USER CODE END Callback 1 */
}
 80044f2:	e016      	b.n	8004522 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if(htim->Instance==TIM2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fc:	d111      	bne.n	8004522 <HAL_TIM_PeriodElapsedCallback+0x46>
		if(__HAL_TIM_GET_COUNTER(&htim2)>3000)
 80044fe:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004508:	4293      	cmp	r3, r2
 800450a:	d905      	bls.n	8004518 <HAL_TIM_PeriodElapsedCallback+0x3c>
	    	mileage_IT_number--;
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3b01      	subs	r3, #1
 8004512:	4a08      	ldr	r2, [pc, #32]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004514:	6013      	str	r3, [r2, #0]
}
 8004516:	e004      	b.n	8004522 <HAL_TIM_PeriodElapsedCallback+0x46>
  		mileage_IT_number++;
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	4a05      	ldr	r2, [pc, #20]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004520:	6013      	str	r3, [r2, #0]
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000
 8004530:	20004268 	.word	0x20004268
 8004534:	20000004 	.word	0x20000004

08004538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800453c:	b672      	cpsid	i
}
 800453e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004540:	e7fe      	b.n	8004540 <Error_Handler+0x8>
	...

08004544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_MspInit+0x54>)
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	4a11      	ldr	r2, [pc, #68]	; (8004598 <HAL_MspInit+0x54>)
 8004554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004558:	6453      	str	r3, [r2, #68]	; 0x44
 800455a:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <HAL_MspInit+0x54>)
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	603b      	str	r3, [r7, #0]
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_MspInit+0x54>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_MspInit+0x54>)
 8004570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <HAL_MspInit+0x54>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004582:	2200      	movs	r2, #0
 8004584:	210f      	movs	r1, #15
 8004586:	f06f 0001 	mvn.w	r0, #1
 800458a:	f000 fc57 	bl	8004e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800

0800459c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	; 0x30
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a4:	f107 031c 	add.w	r3, r7, #28
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	60da      	str	r2, [r3, #12]
 80045b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d134      	bne.n	8004628 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	4b34      	ldr	r3, [pc, #208]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	4a33      	ldr	r2, [pc, #204]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6413      	str	r3, [r2, #64]	; 0x40
 80045ce:	4b31      	ldr	r3, [pc, #196]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	4a2c      	ldr	r2, [pc, #176]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ea:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80045f6:	2322      	movs	r3, #34	; 0x22
 80045f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fa:	2302      	movs	r3, #2
 80045fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004602:	2300      	movs	r3, #0
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004606:	2301      	movs	r3, #1
 8004608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460a:	f107 031c 	add.w	r3, r7, #28
 800460e:	4619      	mov	r1, r3
 8004610:	4821      	ldr	r0, [pc, #132]	; (8004698 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004612:	f000 fccf 	bl	8004fb4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004616:	2200      	movs	r2, #0
 8004618:	2105      	movs	r1, #5
 800461a:	201c      	movs	r0, #28
 800461c:	f000 fc0e 	bl	8004e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004620:	201c      	movs	r0, #28
 8004622:	f000 fc27 	bl	8004e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004626:	e030      	b.n	800468a <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM8)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1b      	ldr	r2, [pc, #108]	; (800469c <HAL_TIM_Encoder_MspInit+0x100>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d12b      	bne.n	800468a <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	4b17      	ldr	r3, [pc, #92]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	6453      	str	r3, [r2, #68]	; 0x44
 8004642:	4b14      	ldr	r3, [pc, #80]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	4a0f      	ldr	r2, [pc, #60]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	6313      	str	r3, [r2, #48]	; 0x30
 800465e:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800466a:	23c0      	movs	r3, #192	; 0xc0
 800466c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466e:	2302      	movs	r3, #2
 8004670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	2300      	movs	r3, #0
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004676:	2300      	movs	r3, #0
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800467a:	2303      	movs	r3, #3
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800467e:	f107 031c 	add.w	r3, r7, #28
 8004682:	4619      	mov	r1, r3
 8004684:	4806      	ldr	r0, [pc, #24]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x104>)
 8004686:	f000 fc95 	bl	8004fb4 <HAL_GPIO_Init>
}
 800468a:	bf00      	nop
 800468c:	3730      	adds	r7, #48	; 0x30
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
 8004698:	40020000 	.word	0x40020000
 800469c:	40010400 	.word	0x40010400
 80046a0:	40020800 	.word	0x40020800

080046a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a15      	ldr	r2, [pc, #84]	; (8004708 <HAL_TIM_Base_MspInit+0x64>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	4b14      	ldr	r3, [pc, #80]	; (800470c <HAL_TIM_Base_MspInit+0x68>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	4a13      	ldr	r2, [pc, #76]	; (800470c <HAL_TIM_Base_MspInit+0x68>)
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	6413      	str	r3, [r2, #64]	; 0x40
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_TIM_Base_MspInit+0x68>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80046d2:	e012      	b.n	80046fa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0d      	ldr	r2, [pc, #52]	; (8004710 <HAL_TIM_Base_MspInit+0x6c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10d      	bne.n	80046fa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_TIM_Base_MspInit+0x68>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <HAL_TIM_Base_MspInit+0x68>)
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	6413      	str	r3, [r2, #64]	; 0x40
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <HAL_TIM_Base_MspInit+0x68>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	68bb      	ldr	r3, [r7, #8]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40000400 	.word	0x40000400
 800470c:	40023800 	.word	0x40023800
 8004710:	40000800 	.word	0x40000800

08004714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a24      	ldr	r2, [pc, #144]	; (80047c4 <HAL_TIM_MspPostInit+0xb0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d11e      	bne.n	8004774 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <HAL_TIM_MspPostInit+0xb4>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <HAL_TIM_MspPostInit+0xb4>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6313      	str	r3, [r2, #48]	; 0x30
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <HAL_TIM_MspPostInit+0xb4>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = leftPWM_Pin;
 8004752:	2340      	movs	r3, #64	; 0x40
 8004754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004756:	2302      	movs	r3, #2
 8004758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475e:	2300      	movs	r3, #0
 8004760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004762:	2302      	movs	r3, #2
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftPWM_GPIO_Port, &GPIO_InitStruct);
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	4619      	mov	r1, r3
 800476c:	4817      	ldr	r0, [pc, #92]	; (80047cc <HAL_TIM_MspPostInit+0xb8>)
 800476e:	f000 fc21 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004772:	e023      	b.n	80047bc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_TIM_MspPostInit+0xbc>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d11e      	bne.n	80047bc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_TIM_MspPostInit+0xb4>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <HAL_TIM_MspPostInit+0xb4>)
 8004788:	f043 0308 	orr.w	r3, r3, #8
 800478c:	6313      	str	r3, [r2, #48]	; 0x30
 800478e:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <HAL_TIM_MspPostInit+0xb4>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightPWM_Pin;
 800479a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800479e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a0:	2302      	movs	r3, #2
 80047a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a8:	2300      	movs	r3, #0
 80047aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80047ac:	2302      	movs	r3, #2
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightPWM_GPIO_Port, &GPIO_InitStruct);
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	4619      	mov	r1, r3
 80047b6:	4807      	ldr	r0, [pc, #28]	; (80047d4 <HAL_TIM_MspPostInit+0xc0>)
 80047b8:	f000 fbfc 	bl	8004fb4 <HAL_GPIO_Init>
}
 80047bc:	bf00      	nop
 80047be:	3728      	adds	r7, #40	; 0x28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40020000 	.word	0x40020000
 80047d0:	40000800 	.word	0x40000800
 80047d4:	40020c00 	.word	0x40020c00

080047d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b092      	sub	sp, #72	; 0x48
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a9a      	ldr	r2, [pc, #616]	; (8004a60 <HAL_UART_MspInit+0x288>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d135      	bne.n	8004866 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	633b      	str	r3, [r7, #48]	; 0x30
 80047fe:	4b99      	ldr	r3, [pc, #612]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	4a98      	ldr	r2, [pc, #608]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004808:	6413      	str	r3, [r2, #64]	; 0x40
 800480a:	4b96      	ldr	r3, [pc, #600]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481a:	4b92      	ldr	r3, [pc, #584]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4a91      	ldr	r2, [pc, #580]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004820:	f043 0304 	orr.w	r3, r3, #4
 8004824:	6313      	str	r3, [r2, #48]	; 0x30
 8004826:	4b8f      	ldr	r3, [pc, #572]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004832:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004838:	2302      	movs	r3, #2
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800483c:	2301      	movs	r3, #1
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004840:	2303      	movs	r3, #3
 8004842:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004844:	2308      	movs	r3, #8
 8004846:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004848:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800484c:	4619      	mov	r1, r3
 800484e:	4886      	ldr	r0, [pc, #536]	; (8004a68 <HAL_UART_MspInit+0x290>)
 8004850:	f000 fbb0 	bl	8004fb4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8004854:	2200      	movs	r2, #0
 8004856:	2105      	movs	r1, #5
 8004858:	2034      	movs	r0, #52	; 0x34
 800485a:	f000 faef 	bl	8004e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800485e:	2034      	movs	r0, #52	; 0x34
 8004860:	f000 fb08 	bl	8004e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004864:	e0f7      	b.n	8004a56 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==UART5)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a80      	ldr	r2, [pc, #512]	; (8004a6c <HAL_UART_MspInit+0x294>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d14b      	bne.n	8004908 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004870:	2300      	movs	r3, #0
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
 8004874:	4b7b      	ldr	r3, [pc, #492]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	4a7a      	ldr	r2, [pc, #488]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 800487a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487e:	6413      	str	r3, [r2, #64]	; 0x40
 8004880:	4b78      	ldr	r3, [pc, #480]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800488c:	2300      	movs	r3, #0
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
 8004890:	4b74      	ldr	r3, [pc, #464]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	4a73      	ldr	r2, [pc, #460]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004896:	f043 0304 	orr.w	r3, r3, #4
 800489a:	6313      	str	r3, [r2, #48]	; 0x30
 800489c:	4b71      	ldr	r3, [pc, #452]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048a8:	2300      	movs	r3, #0
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	4a6c      	ldr	r2, [pc, #432]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 80048b2:	f043 0308 	orr.w	r3, r3, #8
 80048b6:	6313      	str	r3, [r2, #48]	; 0x30
 80048b8:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	623b      	str	r3, [r7, #32]
 80048c2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80048c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ca:	2302      	movs	r3, #2
 80048cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ce:	2301      	movs	r3, #1
 80048d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d2:	2303      	movs	r3, #3
 80048d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80048d6:	2308      	movs	r3, #8
 80048d8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048de:	4619      	mov	r1, r3
 80048e0:	4861      	ldr	r0, [pc, #388]	; (8004a68 <HAL_UART_MspInit+0x290>)
 80048e2:	f000 fb67 	bl	8004fb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048e6:	2304      	movs	r3, #4
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ea:	2302      	movs	r3, #2
 80048ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ee:	2301      	movs	r3, #1
 80048f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f2:	2303      	movs	r3, #3
 80048f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80048f6:	2308      	movs	r3, #8
 80048f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048fe:	4619      	mov	r1, r3
 8004900:	485b      	ldr	r0, [pc, #364]	; (8004a70 <HAL_UART_MspInit+0x298>)
 8004902:	f000 fb57 	bl	8004fb4 <HAL_GPIO_Init>
}
 8004906:	e0a6      	b.n	8004a56 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a59      	ldr	r2, [pc, #356]	; (8004a74 <HAL_UART_MspInit+0x29c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d135      	bne.n	800497e <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	4b53      	ldr	r3, [pc, #332]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	4a52      	ldr	r2, [pc, #328]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 800491c:	f043 0310 	orr.w	r3, r3, #16
 8004920:	6453      	str	r3, [r2, #68]	; 0x44
 8004922:	4b50      	ldr	r3, [pc, #320]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4a4b      	ldr	r2, [pc, #300]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6313      	str	r3, [r2, #48]	; 0x30
 800493e:	4b49      	ldr	r3, [pc, #292]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800494a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004950:	2302      	movs	r3, #2
 8004952:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004954:	2300      	movs	r3, #0
 8004956:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004958:	2303      	movs	r3, #3
 800495a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800495c:	2307      	movs	r3, #7
 800495e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004960:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004964:	4619      	mov	r1, r3
 8004966:	4844      	ldr	r0, [pc, #272]	; (8004a78 <HAL_UART_MspInit+0x2a0>)
 8004968:	f000 fb24 	bl	8004fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800496c:	2200      	movs	r2, #0
 800496e:	2105      	movs	r1, #5
 8004970:	2025      	movs	r0, #37	; 0x25
 8004972:	f000 fa63 	bl	8004e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004976:	2025      	movs	r0, #37	; 0x25
 8004978:	f000 fa7c 	bl	8004e74 <HAL_NVIC_EnableIRQ>
}
 800497c:	e06b      	b.n	8004a56 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a3e      	ldr	r2, [pc, #248]	; (8004a7c <HAL_UART_MspInit+0x2a4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d134      	bne.n	80049f2 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	4a34      	ldr	r2, [pc, #208]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004996:	6413      	str	r3, [r2, #64]	; 0x40
 8004998:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a4:	2300      	movs	r3, #0
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	4b2e      	ldr	r3, [pc, #184]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	4a2d      	ldr	r2, [pc, #180]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6313      	str	r3, [r2, #48]	; 0x30
 80049b4:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049c0:	230c      	movs	r3, #12
 80049c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c4:	2302      	movs	r3, #2
 80049c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049cc:	2303      	movs	r3, #3
 80049ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049d0:	2307      	movs	r3, #7
 80049d2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049d8:	4619      	mov	r1, r3
 80049da:	4827      	ldr	r0, [pc, #156]	; (8004a78 <HAL_UART_MspInit+0x2a0>)
 80049dc:	f000 faea 	bl	8004fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80049e0:	2200      	movs	r2, #0
 80049e2:	2105      	movs	r1, #5
 80049e4:	2026      	movs	r0, #38	; 0x26
 80049e6:	f000 fa29 	bl	8004e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049ea:	2026      	movs	r0, #38	; 0x26
 80049ec:	f000 fa42 	bl	8004e74 <HAL_NVIC_EnableIRQ>
}
 80049f0:	e031      	b.n	8004a56 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART3)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <HAL_UART_MspInit+0x2a8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d12c      	bne.n	8004a56 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0c:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004a22:	f043 0302 	orr.w	r3, r3, #2
 8004a26:	6313      	str	r3, [r2, #48]	; 0x30
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <HAL_UART_MspInit+0x28c>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a42:	2303      	movs	r3, #3
 8004a44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a46:	2307      	movs	r3, #7
 8004a48:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a4e:	4619      	mov	r1, r3
 8004a50:	480c      	ldr	r0, [pc, #48]	; (8004a84 <HAL_UART_MspInit+0x2ac>)
 8004a52:	f000 faaf 	bl	8004fb4 <HAL_GPIO_Init>
}
 8004a56:	bf00      	nop
 8004a58:	3748      	adds	r7, #72	; 0x48
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40004c00 	.word	0x40004c00
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40020800 	.word	0x40020800
 8004a6c:	40005000 	.word	0x40005000
 8004a70:	40020c00 	.word	0x40020c00
 8004a74:	40011000 	.word	0x40011000
 8004a78:	40020000 	.word	0x40020000
 8004a7c:	40004400 	.word	0x40004400
 8004a80:	40004800 	.word	0x40004800
 8004a84:	40020400 	.word	0x40020400

08004a88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08c      	sub	sp, #48	; 0x30
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	2019      	movs	r0, #25
 8004a9e:	f000 f9cd 	bl	8004e3c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004aa2:	2019      	movs	r0, #25
 8004aa4:	f000 f9e6 	bl	8004e74 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	4b1f      	ldr	r3, [pc, #124]	; (8004b2c <HAL_InitTick+0xa4>)
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <HAL_InitTick+0xa4>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8004ab8:	4b1c      	ldr	r3, [pc, #112]	; (8004b2c <HAL_InitTick+0xa4>)
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ac4:	f107 0210 	add.w	r2, r7, #16
 8004ac8:	f107 0314 	add.w	r3, r7, #20
 8004acc:	4611      	mov	r1, r2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 f8c0 	bl	8005c54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004ad4:	f001 f8aa 	bl	8005c2c <HAL_RCC_GetPCLK2Freq>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <HAL_InitTick+0xa8>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0c9b      	lsrs	r3, r3, #18
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004aec:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_InitTick+0xac>)
 8004aee:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <HAL_InitTick+0xb0>)
 8004af0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004af2:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <HAL_InitTick+0xac>)
 8004af4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004af8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004afa:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <HAL_InitTick+0xac>)
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <HAL_InitTick+0xac>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_InitTick+0xac>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004b0c:	4809      	ldr	r0, [pc, #36]	; (8004b34 <HAL_InitTick+0xac>)
 8004b0e:	f001 f8ee 	bl	8005cee <HAL_TIM_Base_Init>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004b18:	4806      	ldr	r0, [pc, #24]	; (8004b34 <HAL_InitTick+0xac>)
 8004b1a:	f001 f937 	bl	8005d8c <HAL_TIM_Base_Start_IT>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	e000      	b.n	8004b24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3730      	adds	r7, #48	; 0x30
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	431bde83 	.word	0x431bde83
 8004b34:	200042f8 	.word	0x200042f8
 8004b38:	40010000 	.word	0x40010000

08004b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004b40:	f001 f8ba 	bl	8005cb8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b44:	e7fe      	b.n	8004b44 <NMI_Handler+0x8>

08004b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b46:	b480      	push	{r7}
 8004b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b4a:	e7fe      	b.n	8004b4a <HardFault_Handler+0x4>

08004b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b50:	e7fe      	b.n	8004b50 <MemManage_Handler+0x4>

08004b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b56:	e7fe      	b.n	8004b56 <BusFault_Handler+0x4>

08004b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b5c:	e7fe      	b.n	8004b5c <UsageFault_Handler+0x4>

08004b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b70:	4802      	ldr	r0, [pc, #8]	; (8004b7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004b72:	f001 fbd1 	bl	8006318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200042f8 	.word	0x200042f8

08004b80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b84:	4802      	ldr	r0, [pc, #8]	; (8004b90 <TIM2_IRQHandler+0x10>)
 8004b86:	f001 fbc7 	bl	8006318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20004268 	.word	0x20004268

08004b94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b98:	4802      	ldr	r0, [pc, #8]	; (8004ba4 <USART1_IRQHandler+0x10>)
 8004b9a:	f002 fbc1 	bl	8007320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b9e:	bf00      	nop
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200041c4 	.word	0x200041c4

08004ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004bac:	4802      	ldr	r0, [pc, #8]	; (8004bb8 <USART2_IRQHandler+0x10>)
 8004bae:	f002 fbb7 	bl	8007320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	200042b0 	.word	0x200042b0

08004bbc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004bc0:	4802      	ldr	r0, [pc, #8]	; (8004bcc <UART4_IRQHandler+0x10>)
 8004bc2:	f002 fbad 	bl	8007320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004bc6:	bf00      	nop
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20004224 	.word	0x20004224

08004bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <SystemInit+0x20>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <SystemInit+0x20>)
 8004bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004be4:	bf00      	nop
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bf8:	480d      	ldr	r0, [pc, #52]	; (8004c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bfa:	490e      	ldr	r1, [pc, #56]	; (8004c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bfc:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c00:	e002      	b.n	8004c08 <LoopCopyDataInit>

08004c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c06:	3304      	adds	r3, #4

08004c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c0c:	d3f9      	bcc.n	8004c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c0e:	4a0b      	ldr	r2, [pc, #44]	; (8004c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c10:	4c0b      	ldr	r4, [pc, #44]	; (8004c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c14:	e001      	b.n	8004c1a <LoopFillZerobss>

08004c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c18:	3204      	adds	r2, #4

08004c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c1c:	d3fb      	bcc.n	8004c16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c1e:	f7ff ffd7 	bl	8004bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c22:	f005 fe03 	bl	800a82c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c26:	f7fc f8af 	bl	8000d88 <main>
  bx  lr    
 8004c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c34:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8004c38:	0800aa00 	.word	0x0800aa00
  ldr r2, =_sbss
 8004c3c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8004c40:	20004344 	.word	0x20004344

08004c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c44:	e7fe      	b.n	8004c44 <ADC_IRQHandler>
	...

08004c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <HAL_Init+0x40>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0d      	ldr	r2, [pc, #52]	; (8004c88 <HAL_Init+0x40>)
 8004c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_Init+0x40>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <HAL_Init+0x40>)
 8004c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <HAL_Init+0x40>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <HAL_Init+0x40>)
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c70:	2003      	movs	r0, #3
 8004c72:	f000 f8d8 	bl	8004e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7ff ff06 	bl	8004a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c7c:	f7ff fc62 	bl	8004544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023c00 	.word	0x40023c00

08004c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_IncTick+0x20>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_IncTick+0x24>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <HAL_IncTick+0x24>)
 8004c9e:	6013      	str	r3, [r2, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	2000001c 	.word	0x2000001c
 8004cb0:	20004340 	.word	0x20004340

08004cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cb8:	4b03      	ldr	r3, [pc, #12]	; (8004cc8 <HAL_GetTick+0x14>)
 8004cba:	681b      	ldr	r3, [r3, #0]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20004340 	.word	0x20004340

08004ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <__NVIC_SetPriorityGrouping+0x44>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ce8:	4013      	ands	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cfe:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <__NVIC_SetPriorityGrouping+0x44>)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	60d3      	str	r3, [r2, #12]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <__NVIC_GetPriorityGrouping+0x18>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	f003 0307 	and.w	r3, r3, #7
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	e000ed00 	.word	0xe000ed00

08004d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	db0b      	blt.n	8004d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	f003 021f 	and.w	r2, r3, #31
 8004d48:	4907      	ldr	r1, [pc, #28]	; (8004d68 <__NVIC_EnableIRQ+0x38>)
 8004d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2001      	movs	r0, #1
 8004d52:	fa00 f202 	lsl.w	r2, r0, r2
 8004d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	e000e100 	.word	0xe000e100

08004d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	6039      	str	r1, [r7, #0]
 8004d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	db0a      	blt.n	8004d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	490c      	ldr	r1, [pc, #48]	; (8004db8 <__NVIC_SetPriority+0x4c>)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	0112      	lsls	r2, r2, #4
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	440b      	add	r3, r1
 8004d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d94:	e00a      	b.n	8004dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4908      	ldr	r1, [pc, #32]	; (8004dbc <__NVIC_SetPriority+0x50>)
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	3b04      	subs	r3, #4
 8004da4:	0112      	lsls	r2, r2, #4
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	440b      	add	r3, r1
 8004daa:	761a      	strb	r2, [r3, #24]
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	e000e100 	.word	0xe000e100
 8004dbc:	e000ed00 	.word	0xe000ed00

08004dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b089      	sub	sp, #36	; 0x24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f1c3 0307 	rsb	r3, r3, #7
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	bf28      	it	cs
 8004dde:	2304      	movcs	r3, #4
 8004de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3304      	adds	r3, #4
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d902      	bls.n	8004df0 <NVIC_EncodePriority+0x30>
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3b03      	subs	r3, #3
 8004dee:	e000      	b.n	8004df2 <NVIC_EncodePriority+0x32>
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	401a      	ands	r2, r3
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e08:	f04f 31ff 	mov.w	r1, #4294967295
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	43d9      	mvns	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e18:	4313      	orrs	r3, r2
         );
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ff4c 	bl	8004ccc <__NVIC_SetPriorityGrouping>
}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e4e:	f7ff ff61 	bl	8004d14 <__NVIC_GetPriorityGrouping>
 8004e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	6978      	ldr	r0, [r7, #20]
 8004e5a:	f7ff ffb1 	bl	8004dc0 <NVIC_EncodePriority>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff ff80 	bl	8004d6c <__NVIC_SetPriority>
}
 8004e6c:	bf00      	nop
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff ff54 	bl	8004d30 <__NVIC_EnableIRQ>
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e9e:	f7ff ff09 	bl	8004cb4 <HAL_GetTick>
 8004ea2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d008      	beq.n	8004ec2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2280      	movs	r2, #128	; 0x80
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e052      	b.n	8004f68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0216 	bic.w	r2, r2, #22
 8004ed0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ee0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d103      	bne.n	8004ef2 <HAL_DMA_Abort+0x62>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0208 	bic.w	r2, r2, #8
 8004f00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f12:	e013      	b.n	8004f3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f14:	f7ff fece 	bl	8004cb4 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b05      	cmp	r3, #5
 8004f20:	d90c      	bls.n	8004f3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2203      	movs	r2, #3
 8004f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e015      	b.n	8004f68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e4      	bne.n	8004f14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4e:	223f      	movs	r2, #63	; 0x3f
 8004f50:	409a      	lsls	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d004      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e00c      	b.n	8004fa8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2205      	movs	r2, #5
 8004f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0201 	bic.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	e16b      	b.n	80052a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	f040 815a 	bne.w	80052a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d005      	beq.n	8005006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005002:	2b02      	cmp	r3, #2
 8005004:	d130      	bne.n	8005068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	2203      	movs	r2, #3
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800503c:	2201      	movs	r2, #1
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4013      	ands	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 0201 	and.w	r2, r3, #1
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b03      	cmp	r3, #3
 8005072:	d017      	beq.n	80050a4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	2203      	movs	r2, #3
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4313      	orrs	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d123      	bne.n	80050f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	08da      	lsrs	r2, r3, #3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3208      	adds	r2, #8
 80050b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	220f      	movs	r2, #15
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	08da      	lsrs	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3208      	adds	r2, #8
 80050f2:	69b9      	ldr	r1, [r7, #24]
 80050f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	2203      	movs	r2, #3
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0203 	and.w	r2, r3, #3
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4313      	orrs	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80b4 	beq.w	80052a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	4b60      	ldr	r3, [pc, #384]	; (80052c0 <HAL_GPIO_Init+0x30c>)
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	4a5f      	ldr	r2, [pc, #380]	; (80052c0 <HAL_GPIO_Init+0x30c>)
 8005144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005148:	6453      	str	r3, [r2, #68]	; 0x44
 800514a:	4b5d      	ldr	r3, [pc, #372]	; (80052c0 <HAL_GPIO_Init+0x30c>)
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005156:	4a5b      	ldr	r2, [pc, #364]	; (80052c4 <HAL_GPIO_Init+0x310>)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	3302      	adds	r3, #2
 800515e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <HAL_GPIO_Init+0x314>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d02b      	beq.n	80051da <HAL_GPIO_Init+0x226>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a51      	ldr	r2, [pc, #324]	; (80052cc <HAL_GPIO_Init+0x318>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d025      	beq.n	80051d6 <HAL_GPIO_Init+0x222>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a50      	ldr	r2, [pc, #320]	; (80052d0 <HAL_GPIO_Init+0x31c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01f      	beq.n	80051d2 <HAL_GPIO_Init+0x21e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a4f      	ldr	r2, [pc, #316]	; (80052d4 <HAL_GPIO_Init+0x320>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d019      	beq.n	80051ce <HAL_GPIO_Init+0x21a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4e      	ldr	r2, [pc, #312]	; (80052d8 <HAL_GPIO_Init+0x324>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_GPIO_Init+0x216>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a4d      	ldr	r2, [pc, #308]	; (80052dc <HAL_GPIO_Init+0x328>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00d      	beq.n	80051c6 <HAL_GPIO_Init+0x212>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4c      	ldr	r2, [pc, #304]	; (80052e0 <HAL_GPIO_Init+0x32c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <HAL_GPIO_Init+0x20e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a4b      	ldr	r2, [pc, #300]	; (80052e4 <HAL_GPIO_Init+0x330>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_GPIO_Init+0x20a>
 80051ba:	2307      	movs	r3, #7
 80051bc:	e00e      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051be:	2308      	movs	r3, #8
 80051c0:	e00c      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051c2:	2306      	movs	r3, #6
 80051c4:	e00a      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051c6:	2305      	movs	r3, #5
 80051c8:	e008      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051ca:	2304      	movs	r3, #4
 80051cc:	e006      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051ce:	2303      	movs	r3, #3
 80051d0:	e004      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e002      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051da:	2300      	movs	r3, #0
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	f002 0203 	and.w	r2, r2, #3
 80051e2:	0092      	lsls	r2, r2, #2
 80051e4:	4093      	lsls	r3, r2
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051ec:	4935      	ldr	r1, [pc, #212]	; (80052c4 <HAL_GPIO_Init+0x310>)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	3302      	adds	r3, #2
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <HAL_GPIO_Init+0x334>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800521e:	4a32      	ldr	r2, [pc, #200]	; (80052e8 <HAL_GPIO_Init+0x334>)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005224:	4b30      	ldr	r3, [pc, #192]	; (80052e8 <HAL_GPIO_Init+0x334>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <HAL_GPIO_Init+0x334>)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800524e:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <HAL_GPIO_Init+0x334>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_GPIO_Init+0x334>)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_GPIO_Init+0x334>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800529c:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <HAL_GPIO_Init+0x334>)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	3301      	adds	r3, #1
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	f67f ae90 	bls.w	8004fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3724      	adds	r7, #36	; 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40013800 	.word	0x40013800
 80052c8:	40020000 	.word	0x40020000
 80052cc:	40020400 	.word	0x40020400
 80052d0:	40020800 	.word	0x40020800
 80052d4:	40020c00 	.word	0x40020c00
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40021400 	.word	0x40021400
 80052e0:	40021800 	.word	0x40021800
 80052e4:	40021c00 	.word	0x40021c00
 80052e8:	40013c00 	.word	0x40013c00

080052ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	807b      	strh	r3, [r7, #2]
 80052f8:	4613      	mov	r3, r2
 80052fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052fc:	787b      	ldrb	r3, [r7, #1]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005302:	887a      	ldrh	r2, [r7, #2]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005308:	e003      	b.n	8005312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	041a      	lsls	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	619a      	str	r2, [r3, #24]
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005330:	887a      	ldrh	r2, [r7, #2]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4013      	ands	r3, r2
 8005336:	041a      	lsls	r2, r3, #16
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	43d9      	mvns	r1, r3
 800533c:	887b      	ldrh	r3, [r7, #2]
 800533e:	400b      	ands	r3, r1
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	619a      	str	r2, [r3, #24]
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e264      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d075      	beq.n	800545e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005372:	4ba3      	ldr	r3, [pc, #652]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b04      	cmp	r3, #4
 800537c:	d00c      	beq.n	8005398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800537e:	4ba0      	ldr	r3, [pc, #640]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005386:	2b08      	cmp	r3, #8
 8005388:	d112      	bne.n	80053b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538a:	4b9d      	ldr	r3, [pc, #628]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005396:	d10b      	bne.n	80053b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	4b99      	ldr	r3, [pc, #612]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d05b      	beq.n	800545c <HAL_RCC_OscConfig+0x108>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d157      	bne.n	800545c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e23f      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d106      	bne.n	80053c8 <HAL_RCC_OscConfig+0x74>
 80053ba:	4b91      	ldr	r3, [pc, #580]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a90      	ldr	r2, [pc, #576]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e01d      	b.n	8005404 <HAL_RCC_OscConfig+0xb0>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x98>
 80053d2:	4b8b      	ldr	r3, [pc, #556]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a8a      	ldr	r2, [pc, #552]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b88      	ldr	r3, [pc, #544]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a87      	ldr	r2, [pc, #540]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0xb0>
 80053ec:	4b84      	ldr	r3, [pc, #528]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a83      	ldr	r2, [pc, #524]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b81      	ldr	r3, [pc, #516]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a80      	ldr	r2, [pc, #512]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80053fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d013      	beq.n	8005434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7ff fc52 	bl	8004cb4 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005414:	f7ff fc4e 	bl	8004cb4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e204      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b76      	ldr	r3, [pc, #472]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0xc0>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7ff fc3e 	bl	8004cb4 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800543c:	f7ff fc3a 	bl	8004cb4 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	; 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e1f0      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544e:	4b6c      	ldr	r3, [pc, #432]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0xe8>
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d063      	beq.n	8005532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800546a:	4b65      	ldr	r3, [pc, #404]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005476:	4b62      	ldr	r3, [pc, #392]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800547e:	2b08      	cmp	r3, #8
 8005480:	d11c      	bne.n	80054bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005482:	4b5f      	ldr	r3, [pc, #380]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d116      	bne.n	80054bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548e:	4b5c      	ldr	r3, [pc, #368]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <HAL_RCC_OscConfig+0x152>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e1c4      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	4b56      	ldr	r3, [pc, #344]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4952      	ldr	r1, [pc, #328]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ba:	e03a      	b.n	8005532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c4:	4b4f      	ldr	r3, [pc, #316]	; (8005604 <HAL_RCC_OscConfig+0x2b0>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ca:	f7ff fbf3 	bl	8004cb4 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d2:	f7ff fbef 	bl	8004cb4 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e1a5      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e4:	4b46      	ldr	r3, [pc, #280]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f0:	4b43      	ldr	r3, [pc, #268]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4940      	ldr	r1, [pc, #256]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	4313      	orrs	r3, r2
 8005502:	600b      	str	r3, [r1, #0]
 8005504:	e015      	b.n	8005532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005506:	4b3f      	ldr	r3, [pc, #252]	; (8005604 <HAL_RCC_OscConfig+0x2b0>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7ff fbd2 	bl	8004cb4 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005514:	f7ff fbce 	bl	8004cb4 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e184      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005526:	4b36      	ldr	r3, [pc, #216]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d030      	beq.n	80055a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005546:	4b30      	ldr	r3, [pc, #192]	; (8005608 <HAL_RCC_OscConfig+0x2b4>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7ff fbb2 	bl	8004cb4 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005554:	f7ff fbae 	bl	8004cb4 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e164      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005566:	4b26      	ldr	r3, [pc, #152]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x200>
 8005572:	e015      	b.n	80055a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005574:	4b24      	ldr	r3, [pc, #144]	; (8005608 <HAL_RCC_OscConfig+0x2b4>)
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800557a:	f7ff fb9b 	bl	8004cb4 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005582:	f7ff fb97 	bl	8004cb4 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e14d      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005594:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 8005596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f0      	bne.n	8005582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80a0 	beq.w	80056ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ae:	2300      	movs	r3, #0
 80055b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b2:	4b13      	ldr	r3, [pc, #76]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10f      	bne.n	80055de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055be:	2300      	movs	r3, #0
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055cc:	6413      	str	r3, [r2, #64]	; 0x40
 80055ce:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055da:	2301      	movs	r3, #1
 80055dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCC_OscConfig+0x2b8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d121      	bne.n	800562e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RCC_OscConfig+0x2b8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a07      	ldr	r2, [pc, #28]	; (800560c <HAL_RCC_OscConfig+0x2b8>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f6:	f7ff fb5d 	bl	8004cb4 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fc:	e011      	b.n	8005622 <HAL_RCC_OscConfig+0x2ce>
 80055fe:	bf00      	nop
 8005600:	40023800 	.word	0x40023800
 8005604:	42470000 	.word	0x42470000
 8005608:	42470e80 	.word	0x42470e80
 800560c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005610:	f7ff fb50 	bl	8004cb4 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e106      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005622:	4b85      	ldr	r3, [pc, #532]	; (8005838 <HAL_RCC_OscConfig+0x4e4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d106      	bne.n	8005644 <HAL_RCC_OscConfig+0x2f0>
 8005636:	4b81      	ldr	r3, [pc, #516]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563a:	4a80      	ldr	r2, [pc, #512]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	6713      	str	r3, [r2, #112]	; 0x70
 8005642:	e01c      	b.n	800567e <HAL_RCC_OscConfig+0x32a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b05      	cmp	r3, #5
 800564a:	d10c      	bne.n	8005666 <HAL_RCC_OscConfig+0x312>
 800564c:	4b7b      	ldr	r3, [pc, #492]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	4a7a      	ldr	r2, [pc, #488]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 8005652:	f043 0304 	orr.w	r3, r3, #4
 8005656:	6713      	str	r3, [r2, #112]	; 0x70
 8005658:	4b78      	ldr	r3, [pc, #480]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	4a77      	ldr	r2, [pc, #476]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	6713      	str	r3, [r2, #112]	; 0x70
 8005664:	e00b      	b.n	800567e <HAL_RCC_OscConfig+0x32a>
 8005666:	4b75      	ldr	r3, [pc, #468]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	4a74      	ldr	r2, [pc, #464]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	6713      	str	r3, [r2, #112]	; 0x70
 8005672:	4b72      	ldr	r3, [pc, #456]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	4a71      	ldr	r2, [pc, #452]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 8005678:	f023 0304 	bic.w	r3, r3, #4
 800567c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d015      	beq.n	80056b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005686:	f7ff fb15 	bl	8004cb4 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568c:	e00a      	b.n	80056a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800568e:	f7ff fb11 	bl	8004cb4 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f241 3288 	movw	r2, #5000	; 0x1388
 800569c:	4293      	cmp	r3, r2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e0c5      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a4:	4b65      	ldr	r3, [pc, #404]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0ee      	beq.n	800568e <HAL_RCC_OscConfig+0x33a>
 80056b0:	e014      	b.n	80056dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b2:	f7ff faff 	bl	8004cb4 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b8:	e00a      	b.n	80056d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7ff fafb 	bl	8004cb4 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e0af      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d0:	4b5a      	ldr	r3, [pc, #360]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 80056d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1ee      	bne.n	80056ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d105      	bne.n	80056ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e2:	4b56      	ldr	r3, [pc, #344]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	4a55      	ldr	r2, [pc, #340]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 80056e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 809b 	beq.w	800582e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056f8:	4b50      	ldr	r3, [pc, #320]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 030c 	and.w	r3, r3, #12
 8005700:	2b08      	cmp	r3, #8
 8005702:	d05c      	beq.n	80057be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d141      	bne.n	8005790 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570c:	4b4c      	ldr	r3, [pc, #304]	; (8005840 <HAL_RCC_OscConfig+0x4ec>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005712:	f7ff facf 	bl	8004cb4 <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800571a:	f7ff facb 	bl	8004cb4 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e081      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572c:	4b43      	ldr	r3, [pc, #268]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1f0      	bne.n	800571a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	019b      	lsls	r3, r3, #6
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	085b      	lsrs	r3, r3, #1
 8005750:	3b01      	subs	r3, #1
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	061b      	lsls	r3, r3, #24
 800575c:	4937      	ldr	r1, [pc, #220]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 800575e:	4313      	orrs	r3, r2
 8005760:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005762:	4b37      	ldr	r3, [pc, #220]	; (8005840 <HAL_RCC_OscConfig+0x4ec>)
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7ff faa4 	bl	8004cb4 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005770:	f7ff faa0 	bl	8004cb4 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e056      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005782:	4b2e      	ldr	r3, [pc, #184]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x41c>
 800578e:	e04e      	b.n	800582e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005790:	4b2b      	ldr	r3, [pc, #172]	; (8005840 <HAL_RCC_OscConfig+0x4ec>)
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005796:	f7ff fa8d 	bl	8004cb4 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800579e:	f7ff fa89 	bl	8004cb4 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e03f      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b0:	4b22      	ldr	r3, [pc, #136]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f0      	bne.n	800579e <HAL_RCC_OscConfig+0x44a>
 80057bc:	e037      	b.n	800582e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e032      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057ca:	4b1c      	ldr	r3, [pc, #112]	; (800583c <HAL_RCC_OscConfig+0x4e8>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d028      	beq.n	800582a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d121      	bne.n	800582a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d11a      	bne.n	800582a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057fa:	4013      	ands	r3, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005800:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005802:	4293      	cmp	r3, r2
 8005804:	d111      	bne.n	800582a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	085b      	lsrs	r3, r3, #1
 8005812:	3b01      	subs	r3, #1
 8005814:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005816:	429a      	cmp	r2, r3
 8005818:	d107      	bne.n	800582a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005826:	429a      	cmp	r2, r3
 8005828:	d001      	beq.n	800582e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40007000 	.word	0x40007000
 800583c:	40023800 	.word	0x40023800
 8005840:	42470060 	.word	0x42470060

08005844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0cc      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005858:	4b68      	ldr	r3, [pc, #416]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d90c      	bls.n	8005880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005866:	4b65      	ldr	r3, [pc, #404]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586e:	4b63      	ldr	r3, [pc, #396]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0b8      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005898:	4b59      	ldr	r3, [pc, #356]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4a58      	ldr	r2, [pc, #352]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b0:	4b53      	ldr	r3, [pc, #332]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4a52      	ldr	r2, [pc, #328]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058bc:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	494d      	ldr	r1, [pc, #308]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d044      	beq.n	8005964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d107      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	4b47      	ldr	r3, [pc, #284]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d119      	bne.n	8005922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e07f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d003      	beq.n	8005902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d107      	bne.n	8005912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005902:	4b3f      	ldr	r3, [pc, #252]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d109      	bne.n	8005922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e06f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005912:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e067      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005922:	4b37      	ldr	r3, [pc, #220]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f023 0203 	bic.w	r2, r3, #3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	4934      	ldr	r1, [pc, #208]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	4313      	orrs	r3, r2
 8005932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005934:	f7ff f9be 	bl	8004cb4 <HAL_GetTick>
 8005938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593a:	e00a      	b.n	8005952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593c:	f7ff f9ba 	bl	8004cb4 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f241 3288 	movw	r2, #5000	; 0x1388
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e04f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005952:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 020c 	and.w	r2, r3, #12
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	429a      	cmp	r2, r3
 8005962:	d1eb      	bne.n	800593c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005964:	4b25      	ldr	r3, [pc, #148]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d20c      	bcs.n	800598c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005972:	4b22      	ldr	r3, [pc, #136]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b20      	ldr	r3, [pc, #128]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d001      	beq.n	800598c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e032      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005998:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4916      	ldr	r1, [pc, #88]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059b6:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	490e      	ldr	r1, [pc, #56]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ca:	f000 f82d 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80059ce:	4602      	mov	r2, r0
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	490a      	ldr	r1, [pc, #40]	; (8005a04 <HAL_RCC_ClockConfig+0x1c0>)
 80059dc:	5ccb      	ldrb	r3, [r1, r3]
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <HAL_RCC_ClockConfig+0x1c4>)
 80059e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_RCC_ClockConfig+0x1c8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff f84c 	bl	8004a88 <HAL_InitTick>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40023c00 	.word	0x40023c00
 8005a00:	40023800 	.word	0x40023800
 8005a04:	0800a9d8 	.word	0x0800a9d8
 8005a08:	20000014 	.word	0x20000014
 8005a0c:	20000018 	.word	0x20000018

08005a10 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <HAL_RCC_EnableCSS+0x14>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	4247004c 	.word	0x4247004c

08005a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	607b      	str	r3, [r7, #4]
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a40:	4b67      	ldr	r3, [pc, #412]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 030c 	and.w	r3, r3, #12
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d00d      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0x40>
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	f200 80bd 	bhi.w	8005bcc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x34>
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d003      	beq.n	8005a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a5a:	e0b7      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a5c:	4b61      	ldr	r3, [pc, #388]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a5e:	60bb      	str	r3, [r7, #8]
       break;
 8005a60:	e0b7      	b.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a62:	4b61      	ldr	r3, [pc, #388]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a64:	60bb      	str	r3, [r7, #8]
      break;
 8005a66:	e0b4      	b.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a68:	4b5d      	ldr	r3, [pc, #372]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a72:	4b5b      	ldr	r3, [pc, #364]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d04d      	beq.n	8005b1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a7e:	4b58      	ldr	r3, [pc, #352]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	099b      	lsrs	r3, r3, #6
 8005a84:	461a      	mov	r2, r3
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a8e:	f04f 0100 	mov.w	r1, #0
 8005a92:	ea02 0800 	and.w	r8, r2, r0
 8005a96:	ea03 0901 	and.w	r9, r3, r1
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	014b      	lsls	r3, r1, #5
 8005aa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005aac:	0142      	lsls	r2, r0, #5
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	ebb0 0008 	subs.w	r0, r0, r8
 8005ab6:	eb61 0109 	sbc.w	r1, r1, r9
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	018b      	lsls	r3, r1, #6
 8005ac4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ac8:	0182      	lsls	r2, r0, #6
 8005aca:	1a12      	subs	r2, r2, r0
 8005acc:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad0:	f04f 0000 	mov.w	r0, #0
 8005ad4:	f04f 0100 	mov.w	r1, #0
 8005ad8:	00d9      	lsls	r1, r3, #3
 8005ada:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ade:	00d0      	lsls	r0, r2, #3
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	eb12 0208 	adds.w	r2, r2, r8
 8005ae8:	eb43 0309 	adc.w	r3, r3, r9
 8005aec:	f04f 0000 	mov.w	r0, #0
 8005af0:	f04f 0100 	mov.w	r1, #0
 8005af4:	0259      	lsls	r1, r3, #9
 8005af6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005afa:	0250      	lsls	r0, r2, #9
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4610      	mov	r0, r2
 8005b02:	4619      	mov	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	f7fa ffa6 	bl	8000a5c <__aeabi_uldivmod>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4613      	mov	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e04a      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b1a:	4b31      	ldr	r3, [pc, #196]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	099b      	lsrs	r3, r3, #6
 8005b20:	461a      	mov	r2, r3
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b2a:	f04f 0100 	mov.w	r1, #0
 8005b2e:	ea02 0400 	and.w	r4, r2, r0
 8005b32:	ea03 0501 	and.w	r5, r3, r1
 8005b36:	4620      	mov	r0, r4
 8005b38:	4629      	mov	r1, r5
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	014b      	lsls	r3, r1, #5
 8005b44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b48:	0142      	lsls	r2, r0, #5
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	1b00      	subs	r0, r0, r4
 8005b50:	eb61 0105 	sbc.w	r1, r1, r5
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	018b      	lsls	r3, r1, #6
 8005b5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b62:	0182      	lsls	r2, r0, #6
 8005b64:	1a12      	subs	r2, r2, r0
 8005b66:	eb63 0301 	sbc.w	r3, r3, r1
 8005b6a:	f04f 0000 	mov.w	r0, #0
 8005b6e:	f04f 0100 	mov.w	r1, #0
 8005b72:	00d9      	lsls	r1, r3, #3
 8005b74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b78:	00d0      	lsls	r0, r2, #3
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	1912      	adds	r2, r2, r4
 8005b80:	eb45 0303 	adc.w	r3, r5, r3
 8005b84:	f04f 0000 	mov.w	r0, #0
 8005b88:	f04f 0100 	mov.w	r1, #0
 8005b8c:	0299      	lsls	r1, r3, #10
 8005b8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b92:	0290      	lsls	r0, r2, #10
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	f7fa ff5a 	bl	8000a5c <__aeabi_uldivmod>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4613      	mov	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	60bb      	str	r3, [r7, #8]
      break;
 8005bca:	e002      	b.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bce:	60bb      	str	r3, [r7, #8]
      break;
 8005bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bde:	bf00      	nop
 8005be0:	40023800 	.word	0x40023800
 8005be4:	00f42400 	.word	0x00f42400
 8005be8:	007a1200 	.word	0x007a1200

08005bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000014 	.word	0x20000014

08005c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c08:	f7ff fff0 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0a9b      	lsrs	r3, r3, #10
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4903      	ldr	r1, [pc, #12]	; (8005c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40023800 	.word	0x40023800
 8005c28:	0800a9e8 	.word	0x0800a9e8

08005c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c30:	f7ff ffdc 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	0b5b      	lsrs	r3, r3, #13
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4903      	ldr	r1, [pc, #12]	; (8005c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	0800a9e8 	.word	0x0800a9e8

08005c54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	220f      	movs	r2, #15
 8005c62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0203 	and.w	r2, r3, #3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c88:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	08db      	lsrs	r3, r3, #3
 8005c8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <HAL_RCC_GetClockConfig+0x60>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0207 	and.w	r2, r3, #7
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	601a      	str	r2, [r3, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40023c00 	.word	0x40023c00

08005cb8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc4:	2b80      	cmp	r3, #128	; 0x80
 8005cc6:	d104      	bne.n	8005cd2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005cc8:	f000 f80a 	bl	8005ce0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <HAL_RCC_NMI_IRQHandler+0x24>)
 8005cce:	2280      	movs	r2, #128	; 0x80
 8005cd0:	701a      	strb	r2, [r3, #0]
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	4002380e 	.word	0x4002380e

08005ce0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e041      	b.n	8005d84 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7fe fcc5 	bl	80046a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f000 fda5 	bl	800687c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d001      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e04e      	b.n	8005e42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a23      	ldr	r2, [pc, #140]	; (8005e50 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d022      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d01d      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1f      	ldr	r2, [pc, #124]	; (8005e54 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1e      	ldr	r2, [pc, #120]	; (8005e58 <HAL_TIM_Base_Start_IT+0xcc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1b      	ldr	r2, [pc, #108]	; (8005e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a19      	ldr	r2, [pc, #100]	; (8005e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d111      	bne.n	8005e30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b06      	cmp	r3, #6
 8005e1c:	d010      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2e:	e007      	b.n	8005e40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40001800 	.word	0x40001800

08005e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e041      	b.n	8005f02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f839 	bl	8005f0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f000 fce6 	bl	800687c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
	...

08005f20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d109      	bne.n	8005f44 <HAL_TIM_PWM_Start+0x24>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	e022      	b.n	8005f8a <HAL_TIM_PWM_Start+0x6a>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d109      	bne.n	8005f5e <HAL_TIM_PWM_Start+0x3e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	bf14      	ite	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	2300      	moveq	r3, #0
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	e015      	b.n	8005f8a <HAL_TIM_PWM_Start+0x6a>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d109      	bne.n	8005f78 <HAL_TIM_PWM_Start+0x58>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	e008      	b.n	8005f8a <HAL_TIM_PWM_Start+0x6a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	bf14      	ite	ne
 8005f84:	2301      	movne	r3, #1
 8005f86:	2300      	moveq	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e07c      	b.n	800608c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <HAL_TIM_PWM_Start+0x82>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa0:	e013      	b.n	8005fca <HAL_TIM_PWM_Start+0xaa>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d104      	bne.n	8005fb2 <HAL_TIM_PWM_Start+0x92>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb0:	e00b      	b.n	8005fca <HAL_TIM_PWM_Start+0xaa>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0xa2>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc0:	e003      	b.n	8005fca <HAL_TIM_PWM_Start+0xaa>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 ff3c 	bl	8006e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2d      	ldr	r2, [pc, #180]	; (8006094 <HAL_TIM_PWM_Start+0x174>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIM_PWM_Start+0xcc>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2c      	ldr	r2, [pc, #176]	; (8006098 <HAL_TIM_PWM_Start+0x178>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d101      	bne.n	8005ff0 <HAL_TIM_PWM_Start+0xd0>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <HAL_TIM_PWM_Start+0xd2>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006004:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a22      	ldr	r2, [pc, #136]	; (8006094 <HAL_TIM_PWM_Start+0x174>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d022      	beq.n	8006056 <HAL_TIM_PWM_Start+0x136>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006018:	d01d      	beq.n	8006056 <HAL_TIM_PWM_Start+0x136>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a1f      	ldr	r2, [pc, #124]	; (800609c <HAL_TIM_PWM_Start+0x17c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d018      	beq.n	8006056 <HAL_TIM_PWM_Start+0x136>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <HAL_TIM_PWM_Start+0x180>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_TIM_PWM_Start+0x136>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <HAL_TIM_PWM_Start+0x184>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_TIM_PWM_Start+0x136>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a16      	ldr	r2, [pc, #88]	; (8006098 <HAL_TIM_PWM_Start+0x178>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_TIM_PWM_Start+0x136>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a18      	ldr	r2, [pc, #96]	; (80060a8 <HAL_TIM_PWM_Start+0x188>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_TIM_PWM_Start+0x136>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a16      	ldr	r2, [pc, #88]	; (80060ac <HAL_TIM_PWM_Start+0x18c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d111      	bne.n	800607a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b06      	cmp	r3, #6
 8006066:	d010      	beq.n	800608a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	e007      	b.n	800608a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0201 	orr.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40010000 	.word	0x40010000
 8006098:	40010400 	.word	0x40010400
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40000c00 	.word	0x40000c00
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40001800 	.word	0x40001800

080060b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e097      	b.n	80061f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fe fa5f 	bl	800459c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f4:	f023 0307 	bic.w	r3, r3, #7
 80060f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3304      	adds	r3, #4
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f000 fbb9 	bl	800687c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	4313      	orrs	r3, r2
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006150:	f023 030c 	bic.w	r3, r3, #12
 8006154:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800615c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	4313      	orrs	r3, r2
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	011a      	lsls	r2, r3, #4
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	031b      	lsls	r3, r3, #12
 8006180:	4313      	orrs	r3, r2
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	4313      	orrs	r3, r2
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006214:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800621c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006224:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d110      	bne.n	800624e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d102      	bne.n	8006238 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006232:	7b7b      	ldrb	r3, [r7, #13]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d001      	beq.n	800623c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e069      	b.n	8006310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800624c:	e031      	b.n	80062b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d110      	bne.n	8006276 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d102      	bne.n	8006260 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800625a:	7b3b      	ldrb	r3, [r7, #12]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d001      	beq.n	8006264 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e055      	b.n	8006310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006274:	e01d      	b.n	80062b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d108      	bne.n	800628e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006282:	7b7b      	ldrb	r3, [r7, #13]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d102      	bne.n	800628e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006288:	7b3b      	ldrb	r3, [r7, #12]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d001      	beq.n	8006292 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e03e      	b.n	8006310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_TIM_Encoder_Start+0xc4>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d008      	beq.n	80062d0 <HAL_TIM_Encoder_Start+0xd4>
 80062be:	e00f      	b.n	80062e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2201      	movs	r2, #1
 80062c6:	2100      	movs	r1, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fdc1 	bl	8006e50 <TIM_CCxChannelCmd>
      break;
 80062ce:	e016      	b.n	80062fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2201      	movs	r2, #1
 80062d6:	2104      	movs	r1, #4
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fdb9 	bl	8006e50 <TIM_CCxChannelCmd>
      break;
 80062de:	e00e      	b.n	80062fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2201      	movs	r2, #1
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fdb1 	bl	8006e50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	2104      	movs	r1, #4
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fdaa 	bl	8006e50 <TIM_CCxChannelCmd>
      break;
 80062fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b02      	cmp	r3, #2
 800632c:	d122      	bne.n	8006374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d11b      	bne.n	8006374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0202 	mvn.w	r2, #2
 8006344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa70 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 8006360:	e005      	b.n	800636e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa62 	bl	800682c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fa73 	bl	8006854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	2b04      	cmp	r3, #4
 8006380:	d122      	bne.n	80063c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b04      	cmp	r3, #4
 800638e:	d11b      	bne.n	80063c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0204 	mvn.w	r2, #4
 8006398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa46 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 80063b4:	e005      	b.n	80063c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fa38 	bl	800682c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa49 	bl	8006854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d122      	bne.n	800641c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d11b      	bne.n	800641c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0208 	mvn.w	r2, #8
 80063ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2204      	movs	r2, #4
 80063f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa1c 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 8006408:	e005      	b.n	8006416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa0e 	bl	800682c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa1f 	bl	8006854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0310 	and.w	r3, r3, #16
 8006426:	2b10      	cmp	r3, #16
 8006428:	d122      	bne.n	8006470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b10      	cmp	r3, #16
 8006436:	d11b      	bne.n	8006470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0210 	mvn.w	r2, #16
 8006440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2208      	movs	r2, #8
 8006446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9f2 	bl	8006840 <HAL_TIM_IC_CaptureCallback>
 800645c:	e005      	b.n	800646a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9e4 	bl	800682c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f9f5 	bl	8006854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b01      	cmp	r3, #1
 800647c:	d10e      	bne.n	800649c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	d107      	bne.n	800649c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0201 	mvn.w	r2, #1
 8006494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fe f820 	bl	80044dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a6:	2b80      	cmp	r3, #128	; 0x80
 80064a8:	d10e      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b4:	2b80      	cmp	r3, #128	; 0x80
 80064b6:	d107      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fd70 	bl	8006fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d10e      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d107      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9ba 	bl	8006868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d10e      	bne.n	8006520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b20      	cmp	r3, #32
 800650e:	d107      	bne.n	8006520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0220 	mvn.w	r2, #32
 8006518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fd3a 	bl	8006f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800653e:	2302      	movs	r3, #2
 8006540:	e0ac      	b.n	800669c <HAL_TIM_PWM_ConfigChannel+0x174>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b0c      	cmp	r3, #12
 800654e:	f200 809f 	bhi.w	8006690 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006552:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	0800658d 	.word	0x0800658d
 800655c:	08006691 	.word	0x08006691
 8006560:	08006691 	.word	0x08006691
 8006564:	08006691 	.word	0x08006691
 8006568:	080065cd 	.word	0x080065cd
 800656c:	08006691 	.word	0x08006691
 8006570:	08006691 	.word	0x08006691
 8006574:	08006691 	.word	0x08006691
 8006578:	0800660f 	.word	0x0800660f
 800657c:	08006691 	.word	0x08006691
 8006580:	08006691 	.word	0x08006691
 8006584:	08006691 	.word	0x08006691
 8006588:	0800664f 	.word	0x0800664f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fa12 	bl	80069bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0208 	orr.w	r2, r2, #8
 80065a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0204 	bic.w	r2, r2, #4
 80065b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6999      	ldr	r1, [r3, #24]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	619a      	str	r2, [r3, #24]
      break;
 80065ca:	e062      	b.n	8006692 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fa62 	bl	8006a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6999      	ldr	r1, [r3, #24]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	021a      	lsls	r2, r3, #8
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	619a      	str	r2, [r3, #24]
      break;
 800660c:	e041      	b.n	8006692 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fab7 	bl	8006b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0208 	orr.w	r2, r2, #8
 8006628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0204 	bic.w	r2, r2, #4
 8006638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69d9      	ldr	r1, [r3, #28]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	61da      	str	r2, [r3, #28]
      break;
 800664c:	e021      	b.n	8006692 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fb0b 	bl	8006c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69d9      	ldr	r1, [r3, #28]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	021a      	lsls	r2, r3, #8
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	61da      	str	r2, [r3, #28]
      break;
 800668e:	e000      	b.n	8006692 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006690:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_TIM_ConfigClockSource+0x18>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e0b3      	b.n	8006824 <HAL_TIM_ConfigClockSource+0x180>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f4:	d03e      	beq.n	8006774 <HAL_TIM_ConfigClockSource+0xd0>
 80066f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fa:	f200 8087 	bhi.w	800680c <HAL_TIM_ConfigClockSource+0x168>
 80066fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006702:	f000 8085 	beq.w	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670a:	d87f      	bhi.n	800680c <HAL_TIM_ConfigClockSource+0x168>
 800670c:	2b70      	cmp	r3, #112	; 0x70
 800670e:	d01a      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0xa2>
 8006710:	2b70      	cmp	r3, #112	; 0x70
 8006712:	d87b      	bhi.n	800680c <HAL_TIM_ConfigClockSource+0x168>
 8006714:	2b60      	cmp	r3, #96	; 0x60
 8006716:	d050      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x116>
 8006718:	2b60      	cmp	r3, #96	; 0x60
 800671a:	d877      	bhi.n	800680c <HAL_TIM_ConfigClockSource+0x168>
 800671c:	2b50      	cmp	r3, #80	; 0x50
 800671e:	d03c      	beq.n	800679a <HAL_TIM_ConfigClockSource+0xf6>
 8006720:	2b50      	cmp	r3, #80	; 0x50
 8006722:	d873      	bhi.n	800680c <HAL_TIM_ConfigClockSource+0x168>
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	d058      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x136>
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	d86f      	bhi.n	800680c <HAL_TIM_ConfigClockSource+0x168>
 800672c:	2b30      	cmp	r3, #48	; 0x30
 800672e:	d064      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x156>
 8006730:	2b30      	cmp	r3, #48	; 0x30
 8006732:	d86b      	bhi.n	800680c <HAL_TIM_ConfigClockSource+0x168>
 8006734:	2b20      	cmp	r3, #32
 8006736:	d060      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x156>
 8006738:	2b20      	cmp	r3, #32
 800673a:	d867      	bhi.n	800680c <HAL_TIM_ConfigClockSource+0x168>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d05c      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x156>
 8006740:	2b10      	cmp	r3, #16
 8006742:	d05a      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006744:	e062      	b.n	800680c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	6899      	ldr	r1, [r3, #8]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f000 fb5b 	bl	8006e10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006768:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	609a      	str	r2, [r3, #8]
      break;
 8006772:	e04e      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	6899      	ldr	r1, [r3, #8]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f000 fb44 	bl	8006e10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006796:	609a      	str	r2, [r3, #8]
      break;
 8006798:	e03b      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6859      	ldr	r1, [r3, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f000 fab8 	bl	8006d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2150      	movs	r1, #80	; 0x50
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fb11 	bl	8006dda <TIM_ITRx_SetConfig>
      break;
 80067b8:	e02b      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f000 fad7 	bl	8006d7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2160      	movs	r1, #96	; 0x60
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fb01 	bl	8006dda <TIM_ITRx_SetConfig>
      break;
 80067d8:	e01b      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6859      	ldr	r1, [r3, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f000 fa98 	bl	8006d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2140      	movs	r1, #64	; 0x40
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 faf1 	bl	8006dda <TIM_ITRx_SetConfig>
      break;
 80067f8:	e00b      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f000 fae8 	bl	8006dda <TIM_ITRx_SetConfig>
        break;
 800680a:	e002      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800680c:	bf00      	nop
 800680e:	e000      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006810:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a40      	ldr	r2, [pc, #256]	; (8006990 <TIM_Base_SetConfig+0x114>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d013      	beq.n	80068bc <TIM_Base_SetConfig+0x40>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689a:	d00f      	beq.n	80068bc <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a3d      	ldr	r2, [pc, #244]	; (8006994 <TIM_Base_SetConfig+0x118>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00b      	beq.n	80068bc <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a3c      	ldr	r2, [pc, #240]	; (8006998 <TIM_Base_SetConfig+0x11c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d007      	beq.n	80068bc <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a3b      	ldr	r2, [pc, #236]	; (800699c <TIM_Base_SetConfig+0x120>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d003      	beq.n	80068bc <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3a      	ldr	r2, [pc, #232]	; (80069a0 <TIM_Base_SetConfig+0x124>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d108      	bne.n	80068ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2f      	ldr	r2, [pc, #188]	; (8006990 <TIM_Base_SetConfig+0x114>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d02b      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068dc:	d027      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2c      	ldr	r2, [pc, #176]	; (8006994 <TIM_Base_SetConfig+0x118>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d023      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2b      	ldr	r2, [pc, #172]	; (8006998 <TIM_Base_SetConfig+0x11c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d01f      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2a      	ldr	r2, [pc, #168]	; (800699c <TIM_Base_SetConfig+0x120>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01b      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a29      	ldr	r2, [pc, #164]	; (80069a0 <TIM_Base_SetConfig+0x124>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d017      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a28      	ldr	r2, [pc, #160]	; (80069a4 <TIM_Base_SetConfig+0x128>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d013      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a27      	ldr	r2, [pc, #156]	; (80069a8 <TIM_Base_SetConfig+0x12c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00f      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a26      	ldr	r2, [pc, #152]	; (80069ac <TIM_Base_SetConfig+0x130>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00b      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a25      	ldr	r2, [pc, #148]	; (80069b0 <TIM_Base_SetConfig+0x134>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d007      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a24      	ldr	r2, [pc, #144]	; (80069b4 <TIM_Base_SetConfig+0x138>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d003      	beq.n	800692e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a23      	ldr	r2, [pc, #140]	; (80069b8 <TIM_Base_SetConfig+0x13c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d108      	bne.n	8006940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a0a      	ldr	r2, [pc, #40]	; (8006990 <TIM_Base_SetConfig+0x114>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d003      	beq.n	8006974 <TIM_Base_SetConfig+0xf8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a0c      	ldr	r2, [pc, #48]	; (80069a0 <TIM_Base_SetConfig+0x124>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d103      	bne.n	800697c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	691a      	ldr	r2, [r3, #16]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	615a      	str	r2, [r3, #20]
}
 8006982:	bf00      	nop
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40010000 	.word	0x40010000
 8006994:	40000400 	.word	0x40000400
 8006998:	40000800 	.word	0x40000800
 800699c:	40000c00 	.word	0x40000c00
 80069a0:	40010400 	.word	0x40010400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800
 80069b0:	40001800 	.word	0x40001800
 80069b4:	40001c00 	.word	0x40001c00
 80069b8:	40002000 	.word	0x40002000

080069bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f023 0201 	bic.w	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0303 	bic.w	r3, r3, #3
 80069f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f023 0302 	bic.w	r3, r3, #2
 8006a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a20      	ldr	r2, [pc, #128]	; (8006a94 <TIM_OC1_SetConfig+0xd8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d003      	beq.n	8006a20 <TIM_OC1_SetConfig+0x64>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a1f      	ldr	r2, [pc, #124]	; (8006a98 <TIM_OC1_SetConfig+0xdc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d10c      	bne.n	8006a3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f023 0308 	bic.w	r3, r3, #8
 8006a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f023 0304 	bic.w	r3, r3, #4
 8006a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <TIM_OC1_SetConfig+0xd8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d003      	beq.n	8006a4a <TIM_OC1_SetConfig+0x8e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a14      	ldr	r2, [pc, #80]	; (8006a98 <TIM_OC1_SetConfig+0xdc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d111      	bne.n	8006a6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	621a      	str	r2, [r3, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40010400 	.word	0x40010400

08006a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f023 0210 	bic.w	r2, r3, #16
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0320 	bic.w	r3, r3, #32
 8006ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a22      	ldr	r2, [pc, #136]	; (8006b80 <TIM_OC2_SetConfig+0xe4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_OC2_SetConfig+0x68>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a21      	ldr	r2, [pc, #132]	; (8006b84 <TIM_OC2_SetConfig+0xe8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d10d      	bne.n	8006b20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <TIM_OC2_SetConfig+0xe4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_OC2_SetConfig+0x94>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a16      	ldr	r2, [pc, #88]	; (8006b84 <TIM_OC2_SetConfig+0xe8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d113      	bne.n	8006b58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000
 8006b84:	40010400 	.word	0x40010400

08006b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0303 	bic.w	r3, r3, #3
 8006bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a21      	ldr	r2, [pc, #132]	; (8006c68 <TIM_OC3_SetConfig+0xe0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_OC3_SetConfig+0x66>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a20      	ldr	r2, [pc, #128]	; (8006c6c <TIM_OC3_SetConfig+0xe4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d10d      	bne.n	8006c0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a16      	ldr	r2, [pc, #88]	; (8006c68 <TIM_OC3_SetConfig+0xe0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_OC3_SetConfig+0x92>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <TIM_OC3_SetConfig+0xe4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d113      	bne.n	8006c42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	621a      	str	r2, [r3, #32]
}
 8006c5c:	bf00      	nop
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40010400 	.word	0x40010400

08006c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	031b      	lsls	r3, r3, #12
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a12      	ldr	r2, [pc, #72]	; (8006d14 <TIM_OC4_SetConfig+0xa4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_OC4_SetConfig+0x68>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a11      	ldr	r2, [pc, #68]	; (8006d18 <TIM_OC4_SetConfig+0xa8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d109      	bne.n	8006cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	019b      	lsls	r3, r3, #6
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40010400 	.word	0x40010400

08006d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f023 0201 	bic.w	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 030a 	bic.w	r3, r3, #10
 8006d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	621a      	str	r2, [r3, #32]
}
 8006d6e:	bf00      	nop
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b087      	sub	sp, #28
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f023 0210 	bic.w	r2, r3, #16
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	031b      	lsls	r3, r3, #12
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006db6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f043 0307 	orr.w	r3, r3, #7
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	609a      	str	r2, [r3, #8]
}
 8006e04:	bf00      	nop
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	021a      	lsls	r2, r3, #8
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	609a      	str	r2, [r3, #8]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	2201      	movs	r2, #1
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1a      	ldr	r2, [r3, #32]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	401a      	ands	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a1a      	ldr	r2, [r3, #32]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	fa01 f303 	lsl.w	r3, r1, r3
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
	...

08006e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e05a      	b.n	8006f6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a21      	ldr	r2, [pc, #132]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d022      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f00:	d01d      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1d      	ldr	r2, [pc, #116]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d018      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1b      	ldr	r2, [pc, #108]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d013      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1a      	ldr	r2, [pc, #104]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00e      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a18      	ldr	r2, [pc, #96]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d009      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a17      	ldr	r2, [pc, #92]	; (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d004      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a15      	ldr	r2, [pc, #84]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d10c      	bne.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40010400 	.word	0x40010400
 8006f8c:	40014000 	.word	0x40014000
 8006f90:	40001800 	.word	0x40001800

08006f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e03f      	b.n	800704e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fd fbf8 	bl	80047d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2224      	movs	r2, #36	; 0x24
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fd13 	bl	8007a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b08a      	sub	sp, #40	; 0x28
 800705a:	af02      	add	r7, sp, #8
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	603b      	str	r3, [r7, #0]
 8007062:	4613      	mov	r3, r2
 8007064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b20      	cmp	r3, #32
 8007074:	d17c      	bne.n	8007170 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_UART_Transmit+0x2c>
 800707c:	88fb      	ldrh	r3, [r7, #6]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e075      	b.n	8007172 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_UART_Transmit+0x3e>
 8007090:	2302      	movs	r3, #2
 8007092:	e06e      	b.n	8007172 <HAL_UART_Transmit+0x11c>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2221      	movs	r2, #33	; 0x21
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070aa:	f7fd fe03 	bl	8004cb4 <HAL_GetTick>
 80070ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	88fa      	ldrh	r2, [r7, #6]
 80070b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	88fa      	ldrh	r2, [r7, #6]
 80070ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c4:	d108      	bne.n	80070d8 <HAL_UART_Transmit+0x82>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d104      	bne.n	80070d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	61bb      	str	r3, [r7, #24]
 80070d6:	e003      	b.n	80070e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80070e8:	e02a      	b.n	8007140 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2200      	movs	r2, #0
 80070f2:	2180      	movs	r1, #128	; 0x80
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fad5 	bl	80076a4 <UART_WaitOnFlagUntilTimeout>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e036      	b.n	8007172 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	3302      	adds	r3, #2
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	e007      	b.n	8007132 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	781a      	ldrb	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	3301      	adds	r3, #1
 8007130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1cf      	bne.n	80070ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2200      	movs	r2, #0
 8007152:	2140      	movs	r1, #64	; 0x40
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 faa5 	bl	80076a4 <UART_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e006      	b.n	8007172 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	e000      	b.n	8007172 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007170:	2302      	movs	r3, #2
  }
}
 8007172:	4618      	mov	r0, r3
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b08a      	sub	sp, #40	; 0x28
 800717e:	af02      	add	r7, sp, #8
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	603b      	str	r3, [r7, #0]
 8007186:	4613      	mov	r3, r2
 8007188:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b20      	cmp	r3, #32
 8007198:	f040 808c 	bne.w	80072b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_UART_Receive+0x2e>
 80071a2:	88fb      	ldrh	r3, [r7, #6]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e084      	b.n	80072b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_UART_Receive+0x40>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e07d      	b.n	80072b6 <HAL_UART_Receive+0x13c>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2222      	movs	r2, #34	; 0x22
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071d6:	f7fd fd6d 	bl	8004cb4 <HAL_GetTick>
 80071da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	88fa      	ldrh	r2, [r7, #6]
 80071e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f0:	d108      	bne.n	8007204 <HAL_UART_Receive+0x8a>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	e003      	b.n	800720c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007208:	2300      	movs	r3, #0
 800720a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007214:	e043      	b.n	800729e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2200      	movs	r2, #0
 800721e:	2120      	movs	r1, #32
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fa3f 	bl	80076a4 <UART_WaitOnFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e042      	b.n	80072b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10c      	bne.n	8007250 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	b29b      	uxth	r3, r3
 800723e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007242:	b29a      	uxth	r2, r3
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	3302      	adds	r3, #2
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	e01f      	b.n	8007290 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007258:	d007      	beq.n	800726a <HAL_UART_Receive+0xf0>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <HAL_UART_Receive+0xfe>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	b2da      	uxtb	r2, r3
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	e008      	b.n	800728a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007284:	b2da      	uxtb	r2, r3
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	3301      	adds	r3, #1
 800728e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1b6      	bne.n	8007216 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	e000      	b.n	80072b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80072b4:	2302      	movs	r3, #2
  }
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3720      	adds	r7, #32
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	4613      	mov	r3, r2
 80072ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d11d      	bne.n	8007314 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <HAL_UART_Receive_IT+0x26>
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e016      	b.n	8007316 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_UART_Receive_IT+0x38>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e00f      	b.n	8007316 <HAL_UART_Receive_IT+0x58>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	461a      	mov	r2, r3
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fa14 	bl	8007738 <UART_Start_Receive_IT>
 8007310:	4603      	mov	r3, r0
 8007312:	e000      	b.n	8007316 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007314:	2302      	movs	r3, #2
  }
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007340:	2300      	movs	r3, #0
 8007342:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10d      	bne.n	8007372 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <HAL_UART_IRQHandler+0x52>
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	f003 0320 	and.w	r3, r3, #32
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fac7 	bl	80078fe <UART_Receive_IT>
      return;
 8007370:	e17c      	b.n	800766c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80b1 	beq.w	80074dc <HAL_UART_IRQHandler+0x1bc>
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d105      	bne.n	8007390 <HAL_UART_IRQHandler+0x70>
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80a6 	beq.w	80074dc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <HAL_UART_IRQHandler+0x90>
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	f043 0201 	orr.w	r2, r3, #1
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <HAL_UART_IRQHandler+0xb0>
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	f043 0202 	orr.w	r2, r3, #2
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_UART_IRQHandler+0xd0>
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	f043 0204 	orr.w	r2, r3, #4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00f      	beq.n	800741a <HAL_UART_IRQHandler+0xfa>
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	f003 0320 	and.w	r3, r3, #32
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <HAL_UART_IRQHandler+0xee>
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f043 0208 	orr.w	r2, r3, #8
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 811f 	beq.w	8007662 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d007      	beq.n	800743e <HAL_UART_IRQHandler+0x11e>
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fa60 	bl	80078fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	bf0c      	ite	eq
 800744c:	2301      	moveq	r3, #1
 800744e:	2300      	movne	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <HAL_UART_IRQHandler+0x146>
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d031      	beq.n	80074ca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f9a0 	bl	80077ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	d123      	bne.n	80074c2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695a      	ldr	r2, [r3, #20]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007488:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	2b00      	cmp	r3, #0
 8007490:	d013      	beq.n	80074ba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	4a77      	ldr	r2, [pc, #476]	; (8007674 <HAL_UART_IRQHandler+0x354>)
 8007498:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fd fd66 	bl	8004f70 <HAL_DMA_Abort_IT>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d016      	beq.n	80074d8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b8:	e00e      	b.n	80074d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fa fe3e 	bl	800213c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c0:	e00a      	b.n	80074d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fa fe3a 	bl	800213c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c8:	e006      	b.n	80074d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fa fe36 	bl	800213c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074d6:	e0c4      	b.n	8007662 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d8:	bf00      	nop
    return;
 80074da:	e0c2      	b.n	8007662 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	f040 80a2 	bne.w	800762a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	f003 0310 	and.w	r3, r3, #16
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 809c 	beq.w	800762a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f003 0310 	and.w	r3, r3, #16
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8096 	beq.w	800762a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	d14f      	bne.n	80075c2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800752c:	8a3b      	ldrh	r3, [r7, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 8099 	beq.w	8007666 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007538:	8a3a      	ldrh	r2, [r7, #16]
 800753a:	429a      	cmp	r2, r3
 800753c:	f080 8093 	bcs.w	8007666 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8a3a      	ldrh	r2, [r7, #16]
 8007544:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007550:	d02b      	beq.n	80075aa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007560:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695a      	ldr	r2, [r3, #20]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0201 	bic.w	r2, r2, #1
 8007570:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	695a      	ldr	r2, [r3, #20]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007580:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0210 	bic.w	r2, r2, #16
 800759e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd fc73 	bl	8004e90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f866 	bl	800768c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80075c0:	e051      	b.n	8007666 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d047      	beq.n	800766a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80075da:	8a7b      	ldrh	r3, [r7, #18]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d044      	beq.n	800766a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075ee:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	695a      	ldr	r2, [r3, #20]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0210 	bic.w	r2, r2, #16
 800761c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800761e:	8a7b      	ldrh	r3, [r7, #18]
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f832 	bl	800768c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007628:	e01f      	b.n	800766a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <HAL_UART_IRQHandler+0x326>
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f8f5 	bl	800782e <UART_Transmit_IT>
    return;
 8007644:	e012      	b.n	800766c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00d      	beq.n	800766c <HAL_UART_IRQHandler+0x34c>
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f937 	bl	80078ce <UART_EndTransmit_IT>
    return;
 8007660:	e004      	b.n	800766c <HAL_UART_IRQHandler+0x34c>
    return;
 8007662:	bf00      	nop
 8007664:	e002      	b.n	800766c <HAL_UART_IRQHandler+0x34c>
      return;
 8007666:	bf00      	nop
 8007668:	e000      	b.n	800766c <HAL_UART_IRQHandler+0x34c>
      return;
 800766a:	bf00      	nop
  }
}
 800766c:	3728      	adds	r7, #40	; 0x28
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	08007807 	.word	0x08007807

08007678 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	4613      	mov	r3, r2
 80076b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076b4:	e02c      	b.n	8007710 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d028      	beq.n	8007710 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d007      	beq.n	80076d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076c4:	f7fd faf6 	bl	8004cb4 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d21d      	bcs.n	8007710 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68da      	ldr	r2, [r3, #12]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695a      	ldr	r2, [r3, #20]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0201 	bic.w	r2, r2, #1
 80076f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2220      	movs	r2, #32
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e00f      	b.n	8007730 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4013      	ands	r3, r2
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	429a      	cmp	r2, r3
 800771e:	bf0c      	ite	eq
 8007720:	2301      	moveq	r3, #1
 8007722:	2300      	movne	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	429a      	cmp	r2, r3
 800772c:	d0c3      	beq.n	80076b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	88fa      	ldrh	r2, [r7, #6]
 8007750:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2222      	movs	r2, #34	; 0x22
 8007762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800777c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695a      	ldr	r2, [r3, #20]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0201 	orr.w	r2, r2, #1
 800778c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0220 	orr.w	r2, r2, #32
 800779c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80077c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695a      	ldr	r2, [r3, #20]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d107      	bne.n	80077ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0210 	bic.w	r2, r2, #16
 80077ea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7fa fc8b 	bl	800213c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800782e:	b480      	push	{r7}
 8007830:	b085      	sub	sp, #20
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b21      	cmp	r3, #33	; 0x21
 8007840:	d13e      	bne.n	80078c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784a:	d114      	bne.n	8007876 <UART_Transmit_IT+0x48>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d110      	bne.n	8007876 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007868:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	1c9a      	adds	r2, r3, #2
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	621a      	str	r2, [r3, #32]
 8007874:	e008      	b.n	8007888 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	1c59      	adds	r1, r3, #1
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6211      	str	r1, [r2, #32]
 8007880:	781a      	ldrb	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800788c:	b29b      	uxth	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	b29b      	uxth	r3, r3
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	4619      	mov	r1, r3
 8007896:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10f      	bne.n	80078bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	e000      	b.n	80078c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078c0:	2302      	movs	r3, #2
  }
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68da      	ldr	r2, [r3, #12]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fec2 	bl	8007678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b22      	cmp	r3, #34	; 0x22
 8007910:	f040 8087 	bne.w	8007a22 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791c:	d117      	bne.n	800794e <UART_Receive_IT+0x50>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d113      	bne.n	800794e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	b29b      	uxth	r3, r3
 8007938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793c:	b29a      	uxth	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	1c9a      	adds	r2, r3, #2
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	629a      	str	r2, [r3, #40]	; 0x28
 800794c:	e026      	b.n	800799c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007954:	2300      	movs	r3, #0
 8007956:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007960:	d007      	beq.n	8007972 <UART_Receive_IT+0x74>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <UART_Receive_IT+0x82>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	b2da      	uxtb	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	e008      	b.n	8007992 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800798c:	b2da      	uxtb	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	4619      	mov	r1, r3
 80079aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d136      	bne.n	8007a1e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0220 	bic.w	r2, r2, #32
 80079be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0201 	bic.w	r2, r2, #1
 80079de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d10e      	bne.n	8007a0e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0210 	bic.w	r2, r2, #16
 80079fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff fe40 	bl	800768c <HAL_UARTEx_RxEventCallback>
 8007a0c:	e002      	b.n	8007a14 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fa fa8c 	bl	8001f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e002      	b.n	8007a24 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e000      	b.n	8007a24 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007a22:	2302      	movs	r3, #2
  }
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	b09f      	sub	sp, #124	; 0x7c
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a42:	68d9      	ldr	r1, [r3, #12]
 8007a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	ea40 0301 	orr.w	r3, r0, r1
 8007a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a70:	f021 010c 	bic.w	r1, r1, #12
 8007a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8a:	6999      	ldr	r1, [r3, #24]
 8007a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	ea40 0301 	orr.w	r3, r0, r1
 8007a94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	4bc5      	ldr	r3, [pc, #788]	; (8007db0 <UART_SetConfig+0x384>)
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d004      	beq.n	8007aaa <UART_SetConfig+0x7e>
 8007aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	4bc3      	ldr	r3, [pc, #780]	; (8007db4 <UART_SetConfig+0x388>)
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d103      	bne.n	8007ab2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007aaa:	f7fe f8bf 	bl	8005c2c <HAL_RCC_GetPCLK2Freq>
 8007aae:	6778      	str	r0, [r7, #116]	; 0x74
 8007ab0:	e002      	b.n	8007ab8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ab2:	f7fe f8a7 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8007ab6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac0:	f040 80b6 	bne.w	8007c30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac6:	461c      	mov	r4, r3
 8007ac8:	f04f 0500 	mov.w	r5, #0
 8007acc:	4622      	mov	r2, r4
 8007ace:	462b      	mov	r3, r5
 8007ad0:	1891      	adds	r1, r2, r2
 8007ad2:	6439      	str	r1, [r7, #64]	; 0x40
 8007ad4:	415b      	adcs	r3, r3
 8007ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007adc:	1912      	adds	r2, r2, r4
 8007ade:	eb45 0303 	adc.w	r3, r5, r3
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f04f 0100 	mov.w	r1, #0
 8007aea:	00d9      	lsls	r1, r3, #3
 8007aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007af0:	00d0      	lsls	r0, r2, #3
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	1911      	adds	r1, r2, r4
 8007af8:	6639      	str	r1, [r7, #96]	; 0x60
 8007afa:	416b      	adcs	r3, r5
 8007afc:	667b      	str	r3, [r7, #100]	; 0x64
 8007afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	461a      	mov	r2, r3
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	1891      	adds	r1, r2, r2
 8007b0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b0c:	415b      	adcs	r3, r3
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007b18:	f7f8 ffa0 	bl	8000a5c <__aeabi_uldivmod>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4ba5      	ldr	r3, [pc, #660]	; (8007db8 <UART_SetConfig+0x38c>)
 8007b22:	fba3 2302 	umull	r2, r3, r3, r2
 8007b26:	095b      	lsrs	r3, r3, #5
 8007b28:	011e      	lsls	r6, r3, #4
 8007b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b2c:	461c      	mov	r4, r3
 8007b2e:	f04f 0500 	mov.w	r5, #0
 8007b32:	4622      	mov	r2, r4
 8007b34:	462b      	mov	r3, r5
 8007b36:	1891      	adds	r1, r2, r2
 8007b38:	6339      	str	r1, [r7, #48]	; 0x30
 8007b3a:	415b      	adcs	r3, r3
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b42:	1912      	adds	r2, r2, r4
 8007b44:	eb45 0303 	adc.w	r3, r5, r3
 8007b48:	f04f 0000 	mov.w	r0, #0
 8007b4c:	f04f 0100 	mov.w	r1, #0
 8007b50:	00d9      	lsls	r1, r3, #3
 8007b52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b56:	00d0      	lsls	r0, r2, #3
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	1911      	adds	r1, r2, r4
 8007b5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b60:	416b      	adcs	r3, r5
 8007b62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	1891      	adds	r1, r2, r2
 8007b70:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b72:	415b      	adcs	r3, r3
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007b7e:	f7f8 ff6d 	bl	8000a5c <__aeabi_uldivmod>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4b8c      	ldr	r3, [pc, #560]	; (8007db8 <UART_SetConfig+0x38c>)
 8007b88:	fba3 1302 	umull	r1, r3, r3, r2
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	2164      	movs	r1, #100	; 0x64
 8007b90:	fb01 f303 	mul.w	r3, r1, r3
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	3332      	adds	r3, #50	; 0x32
 8007b9a:	4a87      	ldr	r2, [pc, #540]	; (8007db8 <UART_SetConfig+0x38c>)
 8007b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba0:	095b      	lsrs	r3, r3, #5
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ba8:	441e      	add	r6, r3
 8007baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bac:	4618      	mov	r0, r3
 8007bae:	f04f 0100 	mov.w	r1, #0
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	1894      	adds	r4, r2, r2
 8007bb8:	623c      	str	r4, [r7, #32]
 8007bba:	415b      	adcs	r3, r3
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bc2:	1812      	adds	r2, r2, r0
 8007bc4:	eb41 0303 	adc.w	r3, r1, r3
 8007bc8:	f04f 0400 	mov.w	r4, #0
 8007bcc:	f04f 0500 	mov.w	r5, #0
 8007bd0:	00dd      	lsls	r5, r3, #3
 8007bd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bd6:	00d4      	lsls	r4, r2, #3
 8007bd8:	4622      	mov	r2, r4
 8007bda:	462b      	mov	r3, r5
 8007bdc:	1814      	adds	r4, r2, r0
 8007bde:	653c      	str	r4, [r7, #80]	; 0x50
 8007be0:	414b      	adcs	r3, r1
 8007be2:	657b      	str	r3, [r7, #84]	; 0x54
 8007be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	461a      	mov	r2, r3
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	1891      	adds	r1, r2, r2
 8007bf0:	61b9      	str	r1, [r7, #24]
 8007bf2:	415b      	adcs	r3, r3
 8007bf4:	61fb      	str	r3, [r7, #28]
 8007bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bfa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007bfe:	f7f8 ff2d 	bl	8000a5c <__aeabi_uldivmod>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4b6c      	ldr	r3, [pc, #432]	; (8007db8 <UART_SetConfig+0x38c>)
 8007c08:	fba3 1302 	umull	r1, r3, r3, r2
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	2164      	movs	r1, #100	; 0x64
 8007c10:	fb01 f303 	mul.w	r3, r1, r3
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	3332      	adds	r3, #50	; 0x32
 8007c1a:	4a67      	ldr	r2, [pc, #412]	; (8007db8 <UART_SetConfig+0x38c>)
 8007c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c20:	095b      	lsrs	r3, r3, #5
 8007c22:	f003 0207 	and.w	r2, r3, #7
 8007c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4432      	add	r2, r6
 8007c2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c2e:	e0b9      	b.n	8007da4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c32:	461c      	mov	r4, r3
 8007c34:	f04f 0500 	mov.w	r5, #0
 8007c38:	4622      	mov	r2, r4
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	1891      	adds	r1, r2, r2
 8007c3e:	6139      	str	r1, [r7, #16]
 8007c40:	415b      	adcs	r3, r3
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c48:	1912      	adds	r2, r2, r4
 8007c4a:	eb45 0303 	adc.w	r3, r5, r3
 8007c4e:	f04f 0000 	mov.w	r0, #0
 8007c52:	f04f 0100 	mov.w	r1, #0
 8007c56:	00d9      	lsls	r1, r3, #3
 8007c58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c5c:	00d0      	lsls	r0, r2, #3
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	eb12 0804 	adds.w	r8, r2, r4
 8007c66:	eb43 0905 	adc.w	r9, r3, r5
 8007c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f04f 0100 	mov.w	r1, #0
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	008b      	lsls	r3, r1, #2
 8007c7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c82:	0082      	lsls	r2, r0, #2
 8007c84:	4640      	mov	r0, r8
 8007c86:	4649      	mov	r1, r9
 8007c88:	f7f8 fee8 	bl	8000a5c <__aeabi_uldivmod>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4b49      	ldr	r3, [pc, #292]	; (8007db8 <UART_SetConfig+0x38c>)
 8007c92:	fba3 2302 	umull	r2, r3, r3, r2
 8007c96:	095b      	lsrs	r3, r3, #5
 8007c98:	011e      	lsls	r6, r3, #4
 8007c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f04f 0100 	mov.w	r1, #0
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	1894      	adds	r4, r2, r2
 8007ca8:	60bc      	str	r4, [r7, #8]
 8007caa:	415b      	adcs	r3, r3
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cb2:	1812      	adds	r2, r2, r0
 8007cb4:	eb41 0303 	adc.w	r3, r1, r3
 8007cb8:	f04f 0400 	mov.w	r4, #0
 8007cbc:	f04f 0500 	mov.w	r5, #0
 8007cc0:	00dd      	lsls	r5, r3, #3
 8007cc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cc6:	00d4      	lsls	r4, r2, #3
 8007cc8:	4622      	mov	r2, r4
 8007cca:	462b      	mov	r3, r5
 8007ccc:	1814      	adds	r4, r2, r0
 8007cce:	64bc      	str	r4, [r7, #72]	; 0x48
 8007cd0:	414b      	adcs	r3, r1
 8007cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f04f 0100 	mov.w	r1, #0
 8007cde:	f04f 0200 	mov.w	r2, #0
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	008b      	lsls	r3, r1, #2
 8007ce8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cec:	0082      	lsls	r2, r0, #2
 8007cee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007cf2:	f7f8 feb3 	bl	8000a5c <__aeabi_uldivmod>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4b2f      	ldr	r3, [pc, #188]	; (8007db8 <UART_SetConfig+0x38c>)
 8007cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	2164      	movs	r1, #100	; 0x64
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	3332      	adds	r3, #50	; 0x32
 8007d0e:	4a2a      	ldr	r2, [pc, #168]	; (8007db8 <UART_SetConfig+0x38c>)
 8007d10:	fba2 2303 	umull	r2, r3, r2, r3
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d1a:	441e      	add	r6, r3
 8007d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f04f 0100 	mov.w	r1, #0
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	1894      	adds	r4, r2, r2
 8007d2a:	603c      	str	r4, [r7, #0]
 8007d2c:	415b      	adcs	r3, r3
 8007d2e:	607b      	str	r3, [r7, #4]
 8007d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d34:	1812      	adds	r2, r2, r0
 8007d36:	eb41 0303 	adc.w	r3, r1, r3
 8007d3a:	f04f 0400 	mov.w	r4, #0
 8007d3e:	f04f 0500 	mov.w	r5, #0
 8007d42:	00dd      	lsls	r5, r3, #3
 8007d44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d48:	00d4      	lsls	r4, r2, #3
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	462b      	mov	r3, r5
 8007d4e:	eb12 0a00 	adds.w	sl, r2, r0
 8007d52:	eb43 0b01 	adc.w	fp, r3, r1
 8007d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f04f 0100 	mov.w	r1, #0
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	008b      	lsls	r3, r1, #2
 8007d6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d6e:	0082      	lsls	r2, r0, #2
 8007d70:	4650      	mov	r0, sl
 8007d72:	4659      	mov	r1, fp
 8007d74:	f7f8 fe72 	bl	8000a5c <__aeabi_uldivmod>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <UART_SetConfig+0x38c>)
 8007d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	2164      	movs	r1, #100	; 0x64
 8007d86:	fb01 f303 	mul.w	r3, r1, r3
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	3332      	adds	r3, #50	; 0x32
 8007d90:	4a09      	ldr	r2, [pc, #36]	; (8007db8 <UART_SetConfig+0x38c>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	095b      	lsrs	r3, r3, #5
 8007d98:	f003 020f 	and.w	r2, r3, #15
 8007d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4432      	add	r2, r6
 8007da2:	609a      	str	r2, [r3, #8]
}
 8007da4:	bf00      	nop
 8007da6:	377c      	adds	r7, #124	; 0x7c
 8007da8:	46bd      	mov	sp, r7
 8007daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dae:	bf00      	nop
 8007db0:	40011000 	.word	0x40011000
 8007db4:	40011400 	.word	0x40011400
 8007db8:	51eb851f 	.word	0x51eb851f

08007dbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dce:	2b84      	cmp	r3, #132	; 0x84
 8007dd0:	d005      	beq.n	8007dde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007dd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	3303      	adds	r3, #3
 8007ddc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007dde:	68fb      	ldr	r3, [r7, #12]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007df2:	f3ef 8305 	mrs	r3, IPSR
 8007df6:	607b      	str	r3, [r7, #4]
  return(result);
 8007df8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bf14      	ite	ne
 8007dfe:	2301      	movne	r3, #1
 8007e00:	2300      	moveq	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e14:	f001 fa8e 	bl	8009334 <vTaskStartScheduler>
  
  return osOK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007e22:	f7ff ffe3 	bl	8007dec <inHandlerMode>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007e2c:	f001 fb9c 	bl	8009568 <xTaskGetTickCountFromISR>
 8007e30:	4603      	mov	r3, r0
 8007e32:	e002      	b.n	8007e3a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007e34:	f001 fb88 	bl	8009548 <xTaskGetTickCount>
 8007e38:	4603      	mov	r3, r0
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e40:	b089      	sub	sp, #36	; 0x24
 8007e42:	af04      	add	r7, sp, #16
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d020      	beq.n	8007e92 <osThreadCreate+0x54>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01c      	beq.n	8007e92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685c      	ldr	r4, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681d      	ldr	r5, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691e      	ldr	r6, [r3, #16]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff ffa6 	bl	8007dbc <makeFreeRtosPriority>
 8007e70:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e7a:	9202      	str	r2, [sp, #8]
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	9100      	str	r1, [sp, #0]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	4632      	mov	r2, r6
 8007e84:	4629      	mov	r1, r5
 8007e86:	4620      	mov	r0, r4
 8007e88:	f000 ff20 	bl	8008ccc <xTaskCreateStatic>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	e01c      	b.n	8007ecc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685c      	ldr	r4, [r3, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e9e:	b29e      	uxth	r6, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff ff88 	bl	8007dbc <makeFreeRtosPriority>
 8007eac:	4602      	mov	r2, r0
 8007eae:	f107 030c 	add.w	r3, r7, #12
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	9200      	str	r2, [sp, #0]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	4632      	mov	r2, r6
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 ff62 	bl	8008d86 <xTaskCreate>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d001      	beq.n	8007ecc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e000      	b.n	8007ece <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ed6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b086      	sub	sp, #24
 8007eda:	af02      	add	r7, sp, #8
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00f      	beq.n	8007f08 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d10a      	bne.n	8007f04 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	9200      	str	r2, [sp, #0]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2100      	movs	r1, #0
 8007efa:	2001      	movs	r0, #1
 8007efc:	f000 f9d4 	bl	80082a8 <xQueueGenericCreateStatic>
 8007f00:	4603      	mov	r3, r0
 8007f02:	e016      	b.n	8007f32 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e014      	b.n	8007f32 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d110      	bne.n	8007f30 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007f0e:	2203      	movs	r2, #3
 8007f10:	2100      	movs	r1, #0
 8007f12:	2001      	movs	r0, #1
 8007f14:	f000 fa40 	bl	8008398 <xQueueGenericCreate>
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d005      	beq.n	8007f2c <osSemaphoreCreate+0x56>
 8007f20:	2300      	movs	r3, #0
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 fa90 	bl	800844c <xQueueGenericSend>
      return sema;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	e000      	b.n	8007f32 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007f30:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007f50:	2380      	movs	r3, #128	; 0x80
 8007f52:	e03a      	b.n	8007fca <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5e:	d103      	bne.n	8007f68 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	e009      	b.n	8007f7c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d006      	beq.n	8007f7c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <osSemaphoreWait+0x40>
      ticks = 1;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007f7c:	f7ff ff36 	bl	8007dec <inHandlerMode>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d017      	beq.n	8007fb6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007f86:	f107 0308 	add.w	r3, r7, #8
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fcf4 	bl	800897c <xQueueReceiveFromISR>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d001      	beq.n	8007f9e <osSemaphoreWait+0x62>
      return osErrorOS;
 8007f9a:	23ff      	movs	r3, #255	; 0xff
 8007f9c:	e015      	b.n	8007fca <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d011      	beq.n	8007fc8 <osSemaphoreWait+0x8c>
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <osSemaphoreWait+0x98>)
 8007fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	e008      	b.n	8007fc8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007fb6:	68f9      	ldr	r1, [r7, #12]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fbd3 	bl	8008764 <xQueueSemaphoreTake>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d001      	beq.n	8007fc8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007fc4:	23ff      	movs	r3, #255	; 0xff
 8007fc6:	e000      	b.n	8007fca <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007fe8:	f7ff ff00 	bl	8007dec <inHandlerMode>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d016      	beq.n	8008020 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007ff2:	f107 0308 	add.w	r3, r7, #8
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fb25 	bl	8008648 <xQueueGiveFromISR>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b01      	cmp	r3, #1
 8008002:	d001      	beq.n	8008008 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008004:	23ff      	movs	r3, #255	; 0xff
 8008006:	e017      	b.n	8008038 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d013      	beq.n	8008036 <osSemaphoreRelease+0x5e>
 800800e:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <osSemaphoreRelease+0x68>)
 8008010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	e00a      	b.n	8008036 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008020:	2300      	movs	r3, #0
 8008022:	2200      	movs	r2, #0
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa10 	bl	800844c <xQueueGenericSend>
 800802c:	4603      	mov	r3, r0
 800802e:	2b01      	cmp	r3, #1
 8008030:	d001      	beq.n	8008036 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008032:	23ff      	movs	r3, #255	; 0xff
 8008034:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008036:	68fb      	ldr	r3, [r7, #12]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <osDelayUntil+0x18>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	e000      	b.n	800805e <osDelayUntil+0x1a>
 800805c:	2301      	movs	r3, #1
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 ffc7 	bl	8008ff4 <vTaskDelayUntil>
  
  return osOK;
 8008066:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f103 0208 	add.w	r2, r3, #8
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f04f 32ff 	mov.w	r2, #4294967295
 8008088:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f103 0208 	add.w	r2, r3, #8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f103 0208 	add.w	r2, r3, #8
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008128:	d103      	bne.n	8008132 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e00c      	b.n	800814c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3308      	adds	r3, #8
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	e002      	b.n	8008140 <vListInsert+0x2e>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	429a      	cmp	r2, r3
 800814a:	d2f6      	bcs.n	800813a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	601a      	str	r2, [r3, #0]
}
 8008178:	bf00      	nop
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6892      	ldr	r2, [r2, #8]
 800819a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6852      	ldr	r2, [r2, #4]
 80081a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d103      	bne.n	80081b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	1e5a      	subs	r2, r3, #1
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008202:	f002 f807 	bl	800a214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008212:	fb01 f303 	mul.w	r3, r1, r3
 8008216:	441a      	add	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	3b01      	subs	r3, #1
 8008234:	68f9      	ldr	r1, [r7, #12]
 8008236:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	441a      	add	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	22ff      	movs	r2, #255	; 0xff
 8008246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	22ff      	movs	r2, #255	; 0xff
 800824e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d114      	bne.n	8008282 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01a      	beq.n	8008296 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3310      	adds	r3, #16
 8008264:	4618      	mov	r0, r3
 8008266:	f001 fac9 	bl	80097fc <xTaskRemoveFromEventList>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d012      	beq.n	8008296 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008270:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <xQueueGenericReset+0xcc>)
 8008272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	e009      	b.n	8008296 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3310      	adds	r3, #16
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fef2 	bl	8008070 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3324      	adds	r3, #36	; 0x24
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff feed 	bl	8008070 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008296:	f001 ffed 	bl	800a274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800829a:	2301      	movs	r3, #1
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	e000ed04 	.word	0xe000ed04

080082a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08e      	sub	sp, #56	; 0x38
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <xQueueGenericCreateStatic+0x52>
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <xQueueGenericCreateStatic+0x56>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e000      	b.n	8008300 <xQueueGenericCreateStatic+0x58>
 80082fe:	2300      	movs	r3, #0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10a      	bne.n	800831a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	623b      	str	r3, [r7, #32]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <xQueueGenericCreateStatic+0x7e>
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <xQueueGenericCreateStatic+0x82>
 8008326:	2301      	movs	r3, #1
 8008328:	e000      	b.n	800832c <xQueueGenericCreateStatic+0x84>
 800832a:	2300      	movs	r3, #0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	61fb      	str	r3, [r7, #28]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008346:	2348      	movs	r3, #72	; 0x48
 8008348:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b48      	cmp	r3, #72	; 0x48
 800834e:	d00a      	beq.n	8008366 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	61bb      	str	r3, [r7, #24]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008366:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00d      	beq.n	800838e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800837a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	4613      	mov	r3, r2
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	68b9      	ldr	r1, [r7, #8]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f83f 	bl	800840c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008390:	4618      	mov	r0, r3
 8008392:	3730      	adds	r7, #48	; 0x30
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08a      	sub	sp, #40	; 0x28
 800839c:	af02      	add	r7, sp, #8
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	4613      	mov	r3, r2
 80083a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10a      	bne.n	80083c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	613b      	str	r3, [r7, #16]
}
 80083be:	bf00      	nop
 80083c0:	e7fe      	b.n	80083c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	fb02 f303 	mul.w	r3, r2, r3
 80083ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	3348      	adds	r3, #72	; 0x48
 80083d0:	4618      	mov	r0, r3
 80083d2:	f002 f841 	bl	800a458 <pvPortMalloc>
 80083d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d011      	beq.n	8008402 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	3348      	adds	r3, #72	; 0x48
 80083e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083f0:	79fa      	ldrb	r2, [r7, #7]
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	4613      	mov	r3, r2
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f805 	bl	800840c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008402:	69bb      	ldr	r3, [r7, #24]
	}
 8008404:	4618      	mov	r0, r3
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	e002      	b.n	800842e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800843a:	2101      	movs	r1, #1
 800843c:	69b8      	ldr	r0, [r7, #24]
 800843e:	f7ff fecb 	bl	80081d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08e      	sub	sp, #56	; 0x38
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800845a:	2300      	movs	r3, #0
 800845c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xQueueGenericSend+0x32>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d103      	bne.n	800848c <xQueueGenericSend+0x40>
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <xQueueGenericSend+0x44>
 800848c:	2301      	movs	r3, #1
 800848e:	e000      	b.n	8008492 <xQueueGenericSend+0x46>
 8008490:	2300      	movs	r3, #0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10a      	bne.n	80084ac <xQueueGenericSend+0x60>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084a8:	bf00      	nop
 80084aa:	e7fe      	b.n	80084aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d103      	bne.n	80084ba <xQueueGenericSend+0x6e>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d101      	bne.n	80084be <xQueueGenericSend+0x72>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <xQueueGenericSend+0x74>
 80084be:	2300      	movs	r3, #0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <xQueueGenericSend+0x8e>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	623b      	str	r3, [r7, #32]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084da:	f001 fb4b 	bl	8009b74 <xTaskGetSchedulerState>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <xQueueGenericSend+0x9e>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <xQueueGenericSend+0xa2>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <xQueueGenericSend+0xa4>
 80084ee:	2300      	movs	r3, #0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <xQueueGenericSend+0xbe>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	61fb      	str	r3, [r7, #28]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800850a:	f001 fe83 	bl	800a214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008516:	429a      	cmp	r2, r3
 8008518:	d302      	bcc.n	8008520 <xQueueGenericSend+0xd4>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d129      	bne.n	8008574 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008526:	f000 fac1 	bl	8008aac <prvCopyDataToQueue>
 800852a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	2b00      	cmp	r3, #0
 8008532:	d010      	beq.n	8008556 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	3324      	adds	r3, #36	; 0x24
 8008538:	4618      	mov	r0, r3
 800853a:	f001 f95f 	bl	80097fc <xTaskRemoveFromEventList>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d013      	beq.n	800856c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008544:	4b3f      	ldr	r3, [pc, #252]	; (8008644 <xQueueGenericSend+0x1f8>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	e00a      	b.n	800856c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d007      	beq.n	800856c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800855c:	4b39      	ldr	r3, [pc, #228]	; (8008644 <xQueueGenericSend+0x1f8>)
 800855e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800856c:	f001 fe82 	bl	800a274 <vPortExitCritical>
				return pdPASS;
 8008570:	2301      	movs	r3, #1
 8008572:	e063      	b.n	800863c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d103      	bne.n	8008582 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800857a:	f001 fe7b 	bl	800a274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800857e:	2300      	movs	r3, #0
 8008580:	e05c      	b.n	800863c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008584:	2b00      	cmp	r3, #0
 8008586:	d106      	bne.n	8008596 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008588:	f107 0314 	add.w	r3, r7, #20
 800858c:	4618      	mov	r0, r3
 800858e:	f001 f997 	bl	80098c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008592:	2301      	movs	r3, #1
 8008594:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008596:	f001 fe6d 	bl	800a274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800859a:	f000 ff2b 	bl	80093f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800859e:	f001 fe39 	bl	800a214 <vPortEnterCritical>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085a8:	b25b      	sxtb	r3, r3
 80085aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ae:	d103      	bne.n	80085b8 <xQueueGenericSend+0x16c>
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085be:	b25b      	sxtb	r3, r3
 80085c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c4:	d103      	bne.n	80085ce <xQueueGenericSend+0x182>
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ce:	f001 fe51 	bl	800a274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085d2:	1d3a      	adds	r2, r7, #4
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	4611      	mov	r1, r2
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 f986 	bl	80098ec <xTaskCheckForTimeOut>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d124      	bne.n	8008630 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085e8:	f000 fb58 	bl	8008c9c <prvIsQueueFull>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d018      	beq.n	8008624 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	3310      	adds	r3, #16
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	4611      	mov	r1, r2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 f8da 	bl	80097b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008602:	f000 fae3 	bl	8008bcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008606:	f000 ff03 	bl	8009410 <xTaskResumeAll>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	f47f af7c 	bne.w	800850a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008612:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <xQueueGenericSend+0x1f8>)
 8008614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	e772      	b.n	800850a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008626:	f000 fad1 	bl	8008bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800862a:	f000 fef1 	bl	8009410 <xTaskResumeAll>
 800862e:	e76c      	b.n	800850a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008632:	f000 facb 	bl	8008bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008636:	f000 feeb 	bl	8009410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800863a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800863c:	4618      	mov	r0, r3
 800863e:	3738      	adds	r7, #56	; 0x38
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08e      	sub	sp, #56	; 0x38
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	623b      	str	r3, [r7, #32]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <xQueueGiveFromISR+0x48>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	61fb      	str	r3, [r7, #28]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <xQueueGiveFromISR+0x58>
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <xQueueGiveFromISR+0x5c>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <xQueueGiveFromISR+0x5e>
 80086a4:	2300      	movs	r3, #0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	61bb      	str	r3, [r7, #24]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086c0:	f001 fe8a 	bl	800a3d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086c4:	f3ef 8211 	mrs	r2, BASEPRI
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	617a      	str	r2, [r7, #20]
 80086da:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80086dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d22b      	bcs.n	8008748 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008702:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870a:	d112      	bne.n	8008732 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d016      	beq.n	8008742 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	3324      	adds	r3, #36	; 0x24
 8008718:	4618      	mov	r0, r3
 800871a:	f001 f86f 	bl	80097fc <xTaskRemoveFromEventList>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00e      	beq.n	8008742 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2201      	movs	r2, #1
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	e007      	b.n	8008742 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008736:	3301      	adds	r3, #1
 8008738:	b2db      	uxtb	r3, r3
 800873a:	b25a      	sxtb	r2, r3
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008742:	2301      	movs	r3, #1
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
 8008746:	e001      	b.n	800874c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008748:	2300      	movs	r3, #0
 800874a:	637b      	str	r3, [r7, #52]	; 0x34
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008756:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800875a:	4618      	mov	r0, r3
 800875c:	3738      	adds	r7, #56	; 0x38
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08e      	sub	sp, #56	; 0x38
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800876e:	2300      	movs	r3, #0
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008776:	2300      	movs	r3, #0
 8008778:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	623b      	str	r3, [r7, #32]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	61fb      	str	r3, [r7, #28]
}
 80087b0:	bf00      	nop
 80087b2:	e7fe      	b.n	80087b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087b4:	f001 f9de 	bl	8009b74 <xTaskGetSchedulerState>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <xQueueSemaphoreTake+0x60>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <xQueueSemaphoreTake+0x64>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e000      	b.n	80087ca <xQueueSemaphoreTake+0x66>
 80087c8:	2300      	movs	r3, #0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10a      	bne.n	80087e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	61bb      	str	r3, [r7, #24]
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087e4:	f001 fd16 	bl	800a214 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d024      	beq.n	800883e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	1e5a      	subs	r2, r3, #1
 80087f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008804:	f001 fb5e 	bl	8009ec4 <pvTaskIncrementMutexHeldCount>
 8008808:	4602      	mov	r2, r0
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00f      	beq.n	8008836 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	3310      	adds	r3, #16
 800881a:	4618      	mov	r0, r3
 800881c:	f000 ffee 	bl	80097fc <xTaskRemoveFromEventList>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008826:	4b54      	ldr	r3, [pc, #336]	; (8008978 <xQueueSemaphoreTake+0x214>)
 8008828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008836:	f001 fd1d 	bl	800a274 <vPortExitCritical>
				return pdPASS;
 800883a:	2301      	movs	r3, #1
 800883c:	e097      	b.n	800896e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d111      	bne.n	8008868 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	617b      	str	r3, [r7, #20]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008860:	f001 fd08 	bl	800a274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008864:	2300      	movs	r3, #0
 8008866:	e082      	b.n	800896e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800886e:	f107 030c 	add.w	r3, r7, #12
 8008872:	4618      	mov	r0, r3
 8008874:	f001 f824 	bl	80098c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008878:	2301      	movs	r3, #1
 800887a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800887c:	f001 fcfa 	bl	800a274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008880:	f000 fdb8 	bl	80093f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008884:	f001 fcc6 	bl	800a214 <vPortEnterCritical>
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800888e:	b25b      	sxtb	r3, r3
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008894:	d103      	bne.n	800889e <xQueueSemaphoreTake+0x13a>
 8008896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088a4:	b25b      	sxtb	r3, r3
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088aa:	d103      	bne.n	80088b4 <xQueueSemaphoreTake+0x150>
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088b4:	f001 fcde 	bl	800a274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088b8:	463a      	mov	r2, r7
 80088ba:	f107 030c 	add.w	r3, r7, #12
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 f813 	bl	80098ec <xTaskCheckForTimeOut>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d132      	bne.n	8008932 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ce:	f000 f9cf 	bl	8008c70 <prvIsQueueEmpty>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d026      	beq.n	8008926 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d109      	bne.n	80088f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80088e0:	f001 fc98 	bl	800a214 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 f961 	bl	8009bb0 <xTaskPriorityInherit>
 80088ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80088f0:	f001 fcc0 	bl	800a274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	3324      	adds	r3, #36	; 0x24
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	4611      	mov	r1, r2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 ff59 	bl	80097b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008904:	f000 f962 	bl	8008bcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008908:	f000 fd82 	bl	8009410 <xTaskResumeAll>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	f47f af68 	bne.w	80087e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008914:	4b18      	ldr	r3, [pc, #96]	; (8008978 <xQueueSemaphoreTake+0x214>)
 8008916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	e75e      	b.n	80087e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008928:	f000 f950 	bl	8008bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800892c:	f000 fd70 	bl	8009410 <xTaskResumeAll>
 8008930:	e758      	b.n	80087e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008934:	f000 f94a 	bl	8008bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008938:	f000 fd6a 	bl	8009410 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800893c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800893e:	f000 f997 	bl	8008c70 <prvIsQueueEmpty>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	f43f af4d 	beq.w	80087e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00d      	beq.n	800896c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008950:	f001 fc60 	bl	800a214 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008956:	f000 f891 	bl	8008a7c <prvGetDisinheritPriorityAfterTimeout>
 800895a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008962:	4618      	mov	r0, r3
 8008964:	f001 fa20 	bl	8009da8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008968:	f001 fc84 	bl	800a274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800896c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800896e:	4618      	mov	r0, r3
 8008970:	3738      	adds	r7, #56	; 0x38
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08e      	sub	sp, #56	; 0x38
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	623b      	str	r3, [r7, #32]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <xQueueReceiveFromISR+0x3a>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <xQueueReceiveFromISR+0x3e>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <xQueueReceiveFromISR+0x40>
 80089ba:	2300      	movs	r3, #0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10a      	bne.n	80089d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	61fb      	str	r3, [r7, #28]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089d6:	f001 fcff 	bl	800a3d8 <vPortValidateInterruptPriority>
	__asm volatile
 80089da:	f3ef 8211 	mrs	r2, BASEPRI
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	61ba      	str	r2, [r7, #24]
 80089f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80089f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d02f      	beq.n	8008a62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a10:	f000 f8b6 	bl	8008b80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	1e5a      	subs	r2, r3, #1
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008a1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a24:	d112      	bne.n	8008a4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d016      	beq.n	8008a5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	3310      	adds	r3, #16
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 fee2 	bl	80097fc <xTaskRemoveFromEventList>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00e      	beq.n	8008a5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e007      	b.n	8008a5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a50:	3301      	adds	r3, #1
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	b25a      	sxtb	r2, r3
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a60:	e001      	b.n	8008a66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f383 8811 	msr	BASEPRI, r3
}
 8008a70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3738      	adds	r7, #56	; 0x38
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d006      	beq.n	8008a9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f1c3 0307 	rsb	r3, r3, #7
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	e001      	b.n	8008a9e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
	}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10d      	bne.n	8008ae6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d14d      	bne.n	8008b6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 f8e0 	bl	8009c9c <xTaskPriorityDisinherit>
 8008adc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	609a      	str	r2, [r3, #8]
 8008ae4:	e043      	b.n	8008b6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d119      	bne.n	8008b20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6858      	ldr	r0, [r3, #4]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	461a      	mov	r2, r3
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	f001 febc 	bl	800a874 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b04:	441a      	add	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d32b      	bcc.n	8008b6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	605a      	str	r2, [r3, #4]
 8008b1e:	e026      	b.n	8008b6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	68d8      	ldr	r0, [r3, #12]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b28:	461a      	mov	r2, r3
 8008b2a:	68b9      	ldr	r1, [r7, #8]
 8008b2c:	f001 fea2 	bl	800a874 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b38:	425b      	negs	r3, r3
 8008b3a:	441a      	add	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d207      	bcs.n	8008b5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b54:	425b      	negs	r3, r3
 8008b56:	441a      	add	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d105      	bne.n	8008b6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1c5a      	adds	r2, r3, #1
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b76:	697b      	ldr	r3, [r7, #20]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d018      	beq.n	8008bc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68da      	ldr	r2, [r3, #12]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	441a      	add	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d303      	bcc.n	8008bb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68d9      	ldr	r1, [r3, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	6838      	ldr	r0, [r7, #0]
 8008bc0:	f001 fe58 	bl	800a874 <memcpy>
	}
}
 8008bc4:	bf00      	nop
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bd4:	f001 fb1e 	bl	800a214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008be0:	e011      	b.n	8008c06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d012      	beq.n	8008c10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	3324      	adds	r3, #36	; 0x24
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fe04 	bl	80097fc <xTaskRemoveFromEventList>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bfa:	f000 fed9 	bl	80099b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dce9      	bgt.n	8008be2 <prvUnlockQueue+0x16>
 8008c0e:	e000      	b.n	8008c12 <prvUnlockQueue+0x46>
					break;
 8008c10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	22ff      	movs	r2, #255	; 0xff
 8008c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c1a:	f001 fb2b 	bl	800a274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c1e:	f001 faf9 	bl	800a214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c2a:	e011      	b.n	8008c50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d012      	beq.n	8008c5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3310      	adds	r3, #16
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fddf 	bl	80097fc <xTaskRemoveFromEventList>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c44:	f000 feb4 	bl	80099b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dce9      	bgt.n	8008c2c <prvUnlockQueue+0x60>
 8008c58:	e000      	b.n	8008c5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	22ff      	movs	r2, #255	; 0xff
 8008c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c64:	f001 fb06 	bl	800a274 <vPortExitCritical>
}
 8008c68:	bf00      	nop
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c78:	f001 facc 	bl	800a214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	e001      	b.n	8008c8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c8e:	f001 faf1 	bl	800a274 <vPortExitCritical>

	return xReturn;
 8008c92:	68fb      	ldr	r3, [r7, #12]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ca4:	f001 fab6 	bl	800a214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d102      	bne.n	8008cba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	e001      	b.n	8008cbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cbe:	f001 fad9 	bl	800a274 <vPortExitCritical>

	return xReturn;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08e      	sub	sp, #56	; 0x38
 8008cd0:	af04      	add	r7, sp, #16
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	623b      	str	r3, [r7, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <xTaskCreateStatic+0x46>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	61fb      	str	r3, [r7, #28]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d12:	2354      	movs	r3, #84	; 0x54
 8008d14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b54      	cmp	r3, #84	; 0x54
 8008d1a:	d00a      	beq.n	8008d32 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	61bb      	str	r3, [r7, #24]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d01e      	beq.n	8008d78 <xTaskCreateStatic+0xac>
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01b      	beq.n	8008d78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d52:	2300      	movs	r3, #0
 8008d54:	9303      	str	r3, [sp, #12]
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	f107 0314 	add.w	r3, r7, #20
 8008d5e:	9301      	str	r3, [sp, #4]
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f850 	bl	8008e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d72:	f000 f8d5 	bl	8008f20 <prvAddNewTaskToReadyList>
 8008d76:	e001      	b.n	8008d7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d7c:	697b      	ldr	r3, [r7, #20]
	}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3728      	adds	r7, #40	; 0x28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b08c      	sub	sp, #48	; 0x30
 8008d8a:	af04      	add	r7, sp, #16
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	4613      	mov	r3, r2
 8008d94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f001 fb5c 	bl	800a458 <pvPortMalloc>
 8008da0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00e      	beq.n	8008dc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008da8:	2054      	movs	r0, #84	; 0x54
 8008daa:	f001 fb55 	bl	800a458 <pvPortMalloc>
 8008dae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	631a      	str	r2, [r3, #48]	; 0x30
 8008dbc:	e005      	b.n	8008dca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dbe:	6978      	ldr	r0, [r7, #20]
 8008dc0:	f001 fc16 	bl	800a5f0 <vPortFree>
 8008dc4:	e001      	b.n	8008dca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d017      	beq.n	8008e00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dd8:	88fa      	ldrh	r2, [r7, #6]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9303      	str	r3, [sp, #12]
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	9302      	str	r3, [sp, #8]
 8008de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de4:	9301      	str	r3, [sp, #4]
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68b9      	ldr	r1, [r7, #8]
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 f80e 	bl	8008e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008df4:	69f8      	ldr	r0, [r7, #28]
 8008df6:	f000 f893 	bl	8008f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	61bb      	str	r3, [r7, #24]
 8008dfe:	e002      	b.n	8008e06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e00:	f04f 33ff 	mov.w	r3, #4294967295
 8008e04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e06:	69bb      	ldr	r3, [r7, #24]
	}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f023 0307 	bic.w	r3, r3, #7
 8008e36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	617b      	str	r3, [r7, #20]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01f      	beq.n	8008e9e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e5e:	2300      	movs	r3, #0
 8008e60:	61fb      	str	r3, [r7, #28]
 8008e62:	e012      	b.n	8008e8a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	4413      	add	r3, r2
 8008e6a:	7819      	ldrb	r1, [r3, #0]
 8008e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	3334      	adds	r3, #52	; 0x34
 8008e74:	460a      	mov	r2, r1
 8008e76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d006      	beq.n	8008e92 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	3301      	adds	r3, #1
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	2b0f      	cmp	r3, #15
 8008e8e:	d9e9      	bls.n	8008e64 <prvInitialiseNewTask+0x54>
 8008e90:	e000      	b.n	8008e94 <prvInitialiseNewTask+0x84>
			{
				break;
 8008e92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e9c:	e003      	b.n	8008ea6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	2b06      	cmp	r3, #6
 8008eaa:	d901      	bls.n	8008eb0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008eac:	2306      	movs	r3, #6
 8008eae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff f8f2 	bl	80080b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	3318      	adds	r3, #24
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff f8ed 	bl	80080b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	f1c3 0207 	rsb	r2, r3, #7
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	2200      	movs	r2, #0
 8008ef0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	68f9      	ldr	r1, [r7, #12]
 8008efe:	69b8      	ldr	r0, [r7, #24]
 8008f00:	f001 f85a 	bl	8009fb8 <pxPortInitialiseStack>
 8008f04:	4602      	mov	r2, r0
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f16:	bf00      	nop
 8008f18:	3720      	adds	r7, #32
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f28:	f001 f974 	bl	800a214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f2c:	4b2a      	ldr	r3, [pc, #168]	; (8008fd8 <prvAddNewTaskToReadyList+0xb8>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3301      	adds	r3, #1
 8008f32:	4a29      	ldr	r2, [pc, #164]	; (8008fd8 <prvAddNewTaskToReadyList+0xb8>)
 8008f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f36:	4b29      	ldr	r3, [pc, #164]	; (8008fdc <prvAddNewTaskToReadyList+0xbc>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f3e:	4a27      	ldr	r2, [pc, #156]	; (8008fdc <prvAddNewTaskToReadyList+0xbc>)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f44:	4b24      	ldr	r3, [pc, #144]	; (8008fd8 <prvAddNewTaskToReadyList+0xb8>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d110      	bne.n	8008f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f4c:	f000 fd54 	bl	80099f8 <prvInitialiseTaskLists>
 8008f50:	e00d      	b.n	8008f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f52:	4b23      	ldr	r3, [pc, #140]	; (8008fe0 <prvAddNewTaskToReadyList+0xc0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d109      	bne.n	8008f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f5a:	4b20      	ldr	r3, [pc, #128]	; (8008fdc <prvAddNewTaskToReadyList+0xbc>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d802      	bhi.n	8008f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f68:	4a1c      	ldr	r2, [pc, #112]	; (8008fdc <prvAddNewTaskToReadyList+0xbc>)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f6e:	4b1d      	ldr	r3, [pc, #116]	; (8008fe4 <prvAddNewTaskToReadyList+0xc4>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	4a1b      	ldr	r2, [pc, #108]	; (8008fe4 <prvAddNewTaskToReadyList+0xc4>)
 8008f76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	409a      	lsls	r2, r3
 8008f80:	4b19      	ldr	r3, [pc, #100]	; (8008fe8 <prvAddNewTaskToReadyList+0xc8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	4a18      	ldr	r2, [pc, #96]	; (8008fe8 <prvAddNewTaskToReadyList+0xc8>)
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8e:	4613      	mov	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4a15      	ldr	r2, [pc, #84]	; (8008fec <prvAddNewTaskToReadyList+0xcc>)
 8008f98:	441a      	add	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	f7ff f892 	bl	80080ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fa6:	f001 f965 	bl	800a274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008faa:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <prvAddNewTaskToReadyList+0xc0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00e      	beq.n	8008fd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fb2:	4b0a      	ldr	r3, [pc, #40]	; (8008fdc <prvAddNewTaskToReadyList+0xbc>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d207      	bcs.n	8008fd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <prvAddNewTaskToReadyList+0xd0>)
 8008fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	200003e8 	.word	0x200003e8
 8008fdc:	200002e8 	.word	0x200002e8
 8008fe0:	200003f4 	.word	0x200003f4
 8008fe4:	20000404 	.word	0x20000404
 8008fe8:	200003f0 	.word	0x200003f0
 8008fec:	200002ec 	.word	0x200002ec
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08a      	sub	sp, #40	; 0x28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008ffe:	2300      	movs	r3, #0
 8009000:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10a      	bne.n	800901e <vTaskDelayUntil+0x2a>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	617b      	str	r3, [r7, #20]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <vTaskDelayUntil+0x46>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	613b      	str	r3, [r7, #16]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800903a:	4b2a      	ldr	r3, [pc, #168]	; (80090e4 <vTaskDelayUntil+0xf0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00a      	beq.n	8009058 <vTaskDelayUntil+0x64>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	60fb      	str	r3, [r7, #12]
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009058:	f000 f9cc 	bl	80093f4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800905c:	4b22      	ldr	r3, [pc, #136]	; (80090e8 <vTaskDelayUntil+0xf4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	4413      	add	r3, r2
 800906a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6a3a      	ldr	r2, [r7, #32]
 8009072:	429a      	cmp	r2, r3
 8009074:	d20b      	bcs.n	800908e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	429a      	cmp	r2, r3
 800907e:	d211      	bcs.n	80090a4 <vTaskDelayUntil+0xb0>
 8009080:	69fa      	ldr	r2, [r7, #28]
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	429a      	cmp	r2, r3
 8009086:	d90d      	bls.n	80090a4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009088:	2301      	movs	r3, #1
 800908a:	627b      	str	r3, [r7, #36]	; 0x24
 800908c:	e00a      	b.n	80090a4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69fa      	ldr	r2, [r7, #28]
 8009094:	429a      	cmp	r2, r3
 8009096:	d303      	bcc.n	80090a0 <vTaskDelayUntil+0xac>
 8009098:	69fa      	ldr	r2, [r7, #28]
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	429a      	cmp	r2, r3
 800909e:	d901      	bls.n	80090a4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80090a0:	2301      	movs	r3, #1
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d006      	beq.n	80090be <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80090b0:	69fa      	ldr	r2, [r7, #28]
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	2100      	movs	r1, #0
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 ff17 	bl	8009eec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80090be:	f000 f9a7 	bl	8009410 <xTaskResumeAll>
 80090c2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d107      	bne.n	80090da <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80090ca:	4b08      	ldr	r3, [pc, #32]	; (80090ec <vTaskDelayUntil+0xf8>)
 80090cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090da:	bf00      	nop
 80090dc:	3728      	adds	r7, #40	; 0x28
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000410 	.word	0x20000410
 80090e8:	200003ec 	.word	0x200003ec
 80090ec:	e000ed04 	.word	0xe000ed04

080090f0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80090f8:	f001 f88c 	bl	800a214 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d102      	bne.n	8009108 <vTaskSuspend+0x18>
 8009102:	4b3c      	ldr	r3, [pc, #240]	; (80091f4 <vTaskSuspend+0x104>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	e000      	b.n	800910a <vTaskSuspend+0x1a>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3304      	adds	r3, #4
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff f837 	bl	8008184 <uxListRemove>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d115      	bne.n	8009148 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009120:	4935      	ldr	r1, [pc, #212]	; (80091f8 <vTaskSuspend+0x108>)
 8009122:	4613      	mov	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <vTaskSuspend+0x58>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009136:	2201      	movs	r2, #1
 8009138:	fa02 f303 	lsl.w	r3, r2, r3
 800913c:	43da      	mvns	r2, r3
 800913e:	4b2f      	ldr	r3, [pc, #188]	; (80091fc <vTaskSuspend+0x10c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4013      	ands	r3, r2
 8009144:	4a2d      	ldr	r2, [pc, #180]	; (80091fc <vTaskSuspend+0x10c>)
 8009146:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3318      	adds	r3, #24
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff f815 	bl	8008184 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3304      	adds	r3, #4
 800915e:	4619      	mov	r1, r3
 8009160:	4827      	ldr	r0, [pc, #156]	; (8009200 <vTaskSuspend+0x110>)
 8009162:	f7fe ffb2 	bl	80080ca <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b01      	cmp	r3, #1
 8009170:	d103      	bne.n	800917a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800917a:	f001 f87b 	bl	800a274 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800917e:	4b21      	ldr	r3, [pc, #132]	; (8009204 <vTaskSuspend+0x114>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009186:	f001 f845 	bl	800a214 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800918a:	f000 fcd3 	bl	8009b34 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800918e:	f001 f871 	bl	800a274 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009192:	4b18      	ldr	r3, [pc, #96]	; (80091f4 <vTaskSuspend+0x104>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	429a      	cmp	r2, r3
 800919a:	d127      	bne.n	80091ec <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800919c:	4b19      	ldr	r3, [pc, #100]	; (8009204 <vTaskSuspend+0x114>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d017      	beq.n	80091d4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80091a4:	4b18      	ldr	r3, [pc, #96]	; (8009208 <vTaskSuspend+0x118>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00a      	beq.n	80091c2 <vTaskSuspend+0xd2>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60bb      	str	r3, [r7, #8]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80091c2:	4b12      	ldr	r3, [pc, #72]	; (800920c <vTaskSuspend+0x11c>)
 80091c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091d2:	e00b      	b.n	80091ec <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80091d4:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <vTaskSuspend+0x110>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	4b0d      	ldr	r3, [pc, #52]	; (8009210 <vTaskSuspend+0x120>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d103      	bne.n	80091e8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80091e0:	4b04      	ldr	r3, [pc, #16]	; (80091f4 <vTaskSuspend+0x104>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
	}
 80091e6:	e001      	b.n	80091ec <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80091e8:	f000 fa88 	bl	80096fc <vTaskSwitchContext>
	}
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	200002e8 	.word	0x200002e8
 80091f8:	200002ec 	.word	0x200002ec
 80091fc:	200003f0 	.word	0x200003f0
 8009200:	200003d4 	.word	0x200003d4
 8009204:	200003f4 	.word	0x200003f4
 8009208:	20000410 	.word	0x20000410
 800920c:	e000ed04 	.word	0xe000ed04
 8009210:	200003e8 	.word	0x200003e8

08009214 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	60fb      	str	r3, [r7, #12]
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	4a0a      	ldr	r2, [pc, #40]	; (8009270 <prvTaskIsTaskSuspended+0x5c>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d10a      	bne.n	8009260 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924e:	4a09      	ldr	r2, [pc, #36]	; (8009274 <prvTaskIsTaskSuspended+0x60>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d005      	beq.n	8009260 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800925c:	2301      	movs	r3, #1
 800925e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009260:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009262:	4618      	mov	r0, r3
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	200003d4 	.word	0x200003d4
 8009274:	200003a8 	.word	0x200003a8

08009278 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10a      	bne.n	80092a0 <vTaskResume+0x28>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	60bb      	str	r3, [r7, #8]
}
 800929c:	bf00      	nop
 800929e:	e7fe      	b.n	800929e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80092a0:	4b20      	ldr	r3, [pc, #128]	; (8009324 <vTaskResume+0xac>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d037      	beq.n	800931a <vTaskResume+0xa2>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d034      	beq.n	800931a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80092b0:	f000 ffb0 	bl	800a214 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff ffad 	bl	8009214 <prvTaskIsTaskSuspended>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d02a      	beq.n	8009316 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe ff5d 	bl	8008184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	2201      	movs	r2, #1
 80092d0:	409a      	lsls	r2, r3
 80092d2:	4b15      	ldr	r3, [pc, #84]	; (8009328 <vTaskResume+0xb0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	4a13      	ldr	r2, [pc, #76]	; (8009328 <vTaskResume+0xb0>)
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4a10      	ldr	r2, [pc, #64]	; (800932c <vTaskResume+0xb4>)
 80092ea:	441a      	add	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3304      	adds	r3, #4
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	f7fe fee9 	bl	80080ca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	4b09      	ldr	r3, [pc, #36]	; (8009324 <vTaskResume+0xac>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009302:	429a      	cmp	r2, r3
 8009304:	d307      	bcc.n	8009316 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009306:	4b0a      	ldr	r3, [pc, #40]	; (8009330 <vTaskResume+0xb8>)
 8009308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009316:	f000 ffad 	bl	800a274 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	200002e8 	.word	0x200002e8
 8009328:	200003f0 	.word	0x200003f0
 800932c:	200002ec 	.word	0x200002ec
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08a      	sub	sp, #40	; 0x28
 8009338:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009342:	463a      	mov	r2, r7
 8009344:	1d39      	adds	r1, r7, #4
 8009346:	f107 0308 	add.w	r3, r7, #8
 800934a:	4618      	mov	r0, r3
 800934c:	f7f7 fd02 	bl	8000d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	9202      	str	r2, [sp, #8]
 8009358:	9301      	str	r3, [sp, #4]
 800935a:	2300      	movs	r3, #0
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	2300      	movs	r3, #0
 8009360:	460a      	mov	r2, r1
 8009362:	491e      	ldr	r1, [pc, #120]	; (80093dc <vTaskStartScheduler+0xa8>)
 8009364:	481e      	ldr	r0, [pc, #120]	; (80093e0 <vTaskStartScheduler+0xac>)
 8009366:	f7ff fcb1 	bl	8008ccc <xTaskCreateStatic>
 800936a:	4603      	mov	r3, r0
 800936c:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <vTaskStartScheduler+0xb0>)
 800936e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009370:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <vTaskStartScheduler+0xb0>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009378:	2301      	movs	r3, #1
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	e001      	b.n	8009382 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800937e:	2300      	movs	r3, #0
 8009380:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d116      	bne.n	80093b6 <vTaskStartScheduler+0x82>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	613b      	str	r3, [r7, #16]
}
 800939a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800939c:	4b12      	ldr	r3, [pc, #72]	; (80093e8 <vTaskStartScheduler+0xb4>)
 800939e:	f04f 32ff 	mov.w	r2, #4294967295
 80093a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093a4:	4b11      	ldr	r3, [pc, #68]	; (80093ec <vTaskStartScheduler+0xb8>)
 80093a6:	2201      	movs	r2, #1
 80093a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093aa:	4b11      	ldr	r3, [pc, #68]	; (80093f0 <vTaskStartScheduler+0xbc>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093b0:	f000 fe8e 	bl	800a0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093b4:	e00e      	b.n	80093d4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093bc:	d10a      	bne.n	80093d4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	60fb      	str	r3, [r7, #12]
}
 80093d0:	bf00      	nop
 80093d2:	e7fe      	b.n	80093d2 <vTaskStartScheduler+0x9e>
}
 80093d4:	bf00      	nop
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	0800a9d0 	.word	0x0800a9d0
 80093e0:	080099c9 	.word	0x080099c9
 80093e4:	2000040c 	.word	0x2000040c
 80093e8:	20000408 	.word	0x20000408
 80093ec:	200003f4 	.word	0x200003f4
 80093f0:	200003ec 	.word	0x200003ec

080093f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093f8:	4b04      	ldr	r3, [pc, #16]	; (800940c <vTaskSuspendAll+0x18>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3301      	adds	r3, #1
 80093fe:	4a03      	ldr	r2, [pc, #12]	; (800940c <vTaskSuspendAll+0x18>)
 8009400:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009402:	bf00      	nop
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	20000410 	.word	0x20000410

08009410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800941a:	2300      	movs	r3, #0
 800941c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800941e:	4b41      	ldr	r3, [pc, #260]	; (8009524 <xTaskResumeAll+0x114>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10a      	bne.n	800943c <xTaskResumeAll+0x2c>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	603b      	str	r3, [r7, #0]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800943c:	f000 feea 	bl	800a214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009440:	4b38      	ldr	r3, [pc, #224]	; (8009524 <xTaskResumeAll+0x114>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3b01      	subs	r3, #1
 8009446:	4a37      	ldr	r2, [pc, #220]	; (8009524 <xTaskResumeAll+0x114>)
 8009448:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800944a:	4b36      	ldr	r3, [pc, #216]	; (8009524 <xTaskResumeAll+0x114>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d161      	bne.n	8009516 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009452:	4b35      	ldr	r3, [pc, #212]	; (8009528 <xTaskResumeAll+0x118>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d05d      	beq.n	8009516 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800945a:	e02e      	b.n	80094ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945c:	4b33      	ldr	r3, [pc, #204]	; (800952c <xTaskResumeAll+0x11c>)
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3318      	adds	r3, #24
 8009468:	4618      	mov	r0, r3
 800946a:	f7fe fe8b 	bl	8008184 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3304      	adds	r3, #4
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fe86 	bl	8008184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	2201      	movs	r2, #1
 800947e:	409a      	lsls	r2, r3
 8009480:	4b2b      	ldr	r3, [pc, #172]	; (8009530 <xTaskResumeAll+0x120>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4313      	orrs	r3, r2
 8009486:	4a2a      	ldr	r2, [pc, #168]	; (8009530 <xTaskResumeAll+0x120>)
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4a27      	ldr	r2, [pc, #156]	; (8009534 <xTaskResumeAll+0x124>)
 8009498:	441a      	add	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3304      	adds	r3, #4
 800949e:	4619      	mov	r1, r3
 80094a0:	4610      	mov	r0, r2
 80094a2:	f7fe fe12 	bl	80080ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094aa:	4b23      	ldr	r3, [pc, #140]	; (8009538 <xTaskResumeAll+0x128>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d302      	bcc.n	80094ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80094b4:	4b21      	ldr	r3, [pc, #132]	; (800953c <xTaskResumeAll+0x12c>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094ba:	4b1c      	ldr	r3, [pc, #112]	; (800952c <xTaskResumeAll+0x11c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1cc      	bne.n	800945c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094c8:	f000 fb34 	bl	8009b34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094cc:	4b1c      	ldr	r3, [pc, #112]	; (8009540 <xTaskResumeAll+0x130>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d010      	beq.n	80094fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094d8:	f000 f858 	bl	800958c <xTaskIncrementTick>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80094e2:	4b16      	ldr	r3, [pc, #88]	; (800953c <xTaskResumeAll+0x12c>)
 80094e4:	2201      	movs	r2, #1
 80094e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1f1      	bne.n	80094d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80094f4:	4b12      	ldr	r3, [pc, #72]	; (8009540 <xTaskResumeAll+0x130>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094fa:	4b10      	ldr	r3, [pc, #64]	; (800953c <xTaskResumeAll+0x12c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009502:	2301      	movs	r3, #1
 8009504:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009506:	4b0f      	ldr	r3, [pc, #60]	; (8009544 <xTaskResumeAll+0x134>)
 8009508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009516:	f000 fead 	bl	800a274 <vPortExitCritical>

	return xAlreadyYielded;
 800951a:	68bb      	ldr	r3, [r7, #8]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	20000410 	.word	0x20000410
 8009528:	200003e8 	.word	0x200003e8
 800952c:	200003a8 	.word	0x200003a8
 8009530:	200003f0 	.word	0x200003f0
 8009534:	200002ec 	.word	0x200002ec
 8009538:	200002e8 	.word	0x200002e8
 800953c:	200003fc 	.word	0x200003fc
 8009540:	200003f8 	.word	0x200003f8
 8009544:	e000ed04 	.word	0xe000ed04

08009548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800954e:	4b05      	ldr	r3, [pc, #20]	; (8009564 <xTaskGetTickCount+0x1c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009554:	687b      	ldr	r3, [r7, #4]
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	200003ec 	.word	0x200003ec

08009568 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800956e:	f000 ff33 	bl	800a3d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009572:	2300      	movs	r3, #0
 8009574:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009576:	4b04      	ldr	r3, [pc, #16]	; (8009588 <xTaskGetTickCountFromISR+0x20>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800957c:	683b      	ldr	r3, [r7, #0]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	200003ec 	.word	0x200003ec

0800958c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009596:	4b4e      	ldr	r3, [pc, #312]	; (80096d0 <xTaskIncrementTick+0x144>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f040 808e 	bne.w	80096bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095a0:	4b4c      	ldr	r3, [pc, #304]	; (80096d4 <xTaskIncrementTick+0x148>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3301      	adds	r3, #1
 80095a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095a8:	4a4a      	ldr	r2, [pc, #296]	; (80096d4 <xTaskIncrementTick+0x148>)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d120      	bne.n	80095f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80095b4:	4b48      	ldr	r3, [pc, #288]	; (80096d8 <xTaskIncrementTick+0x14c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	603b      	str	r3, [r7, #0]
}
 80095d0:	bf00      	nop
 80095d2:	e7fe      	b.n	80095d2 <xTaskIncrementTick+0x46>
 80095d4:	4b40      	ldr	r3, [pc, #256]	; (80096d8 <xTaskIncrementTick+0x14c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	4b40      	ldr	r3, [pc, #256]	; (80096dc <xTaskIncrementTick+0x150>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a3e      	ldr	r2, [pc, #248]	; (80096d8 <xTaskIncrementTick+0x14c>)
 80095e0:	6013      	str	r3, [r2, #0]
 80095e2:	4a3e      	ldr	r2, [pc, #248]	; (80096dc <xTaskIncrementTick+0x150>)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	4b3d      	ldr	r3, [pc, #244]	; (80096e0 <xTaskIncrementTick+0x154>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3301      	adds	r3, #1
 80095ee:	4a3c      	ldr	r2, [pc, #240]	; (80096e0 <xTaskIncrementTick+0x154>)
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	f000 fa9f 	bl	8009b34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095f6:	4b3b      	ldr	r3, [pc, #236]	; (80096e4 <xTaskIncrementTick+0x158>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d348      	bcc.n	8009692 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009600:	4b35      	ldr	r3, [pc, #212]	; (80096d8 <xTaskIncrementTick+0x14c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d104      	bne.n	8009614 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800960a:	4b36      	ldr	r3, [pc, #216]	; (80096e4 <xTaskIncrementTick+0x158>)
 800960c:	f04f 32ff 	mov.w	r2, #4294967295
 8009610:	601a      	str	r2, [r3, #0]
					break;
 8009612:	e03e      	b.n	8009692 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009614:	4b30      	ldr	r3, [pc, #192]	; (80096d8 <xTaskIncrementTick+0x14c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d203      	bcs.n	8009634 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800962c:	4a2d      	ldr	r2, [pc, #180]	; (80096e4 <xTaskIncrementTick+0x158>)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009632:	e02e      	b.n	8009692 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	3304      	adds	r3, #4
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fda3 	bl	8008184 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	3318      	adds	r3, #24
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe fd9a 	bl	8008184 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	2201      	movs	r2, #1
 8009656:	409a      	lsls	r2, r3
 8009658:	4b23      	ldr	r3, [pc, #140]	; (80096e8 <xTaskIncrementTick+0x15c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4313      	orrs	r3, r2
 800965e:	4a22      	ldr	r2, [pc, #136]	; (80096e8 <xTaskIncrementTick+0x15c>)
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009666:	4613      	mov	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4a1f      	ldr	r2, [pc, #124]	; (80096ec <xTaskIncrementTick+0x160>)
 8009670:	441a      	add	r2, r3
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	3304      	adds	r3, #4
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f7fe fd26 	bl	80080ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009682:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <xTaskIncrementTick+0x164>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	429a      	cmp	r2, r3
 800968a:	d3b9      	bcc.n	8009600 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800968c:	2301      	movs	r3, #1
 800968e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009690:	e7b6      	b.n	8009600 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009692:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <xTaskIncrementTick+0x164>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009698:	4914      	ldr	r1, [pc, #80]	; (80096ec <xTaskIncrementTick+0x160>)
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	440b      	add	r3, r1
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d901      	bls.n	80096ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80096aa:	2301      	movs	r3, #1
 80096ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096ae:	4b11      	ldr	r3, [pc, #68]	; (80096f4 <xTaskIncrementTick+0x168>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d007      	beq.n	80096c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80096b6:	2301      	movs	r3, #1
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	e004      	b.n	80096c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096bc:	4b0e      	ldr	r3, [pc, #56]	; (80096f8 <xTaskIncrementTick+0x16c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3301      	adds	r3, #1
 80096c2:	4a0d      	ldr	r2, [pc, #52]	; (80096f8 <xTaskIncrementTick+0x16c>)
 80096c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096c6:	697b      	ldr	r3, [r7, #20]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20000410 	.word	0x20000410
 80096d4:	200003ec 	.word	0x200003ec
 80096d8:	200003a0 	.word	0x200003a0
 80096dc:	200003a4 	.word	0x200003a4
 80096e0:	20000400 	.word	0x20000400
 80096e4:	20000408 	.word	0x20000408
 80096e8:	200003f0 	.word	0x200003f0
 80096ec:	200002ec 	.word	0x200002ec
 80096f0:	200002e8 	.word	0x200002e8
 80096f4:	200003fc 	.word	0x200003fc
 80096f8:	200003f8 	.word	0x200003f8

080096fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009702:	4b27      	ldr	r3, [pc, #156]	; (80097a0 <vTaskSwitchContext+0xa4>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800970a:	4b26      	ldr	r3, [pc, #152]	; (80097a4 <vTaskSwitchContext+0xa8>)
 800970c:	2201      	movs	r2, #1
 800970e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009710:	e03f      	b.n	8009792 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009712:	4b24      	ldr	r3, [pc, #144]	; (80097a4 <vTaskSwitchContext+0xa8>)
 8009714:	2200      	movs	r2, #0
 8009716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009718:	4b23      	ldr	r3, [pc, #140]	; (80097a8 <vTaskSwitchContext+0xac>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	fab3 f383 	clz	r3, r3
 8009724:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009726:	7afb      	ldrb	r3, [r7, #11]
 8009728:	f1c3 031f 	rsb	r3, r3, #31
 800972c:	617b      	str	r3, [r7, #20]
 800972e:	491f      	ldr	r1, [pc, #124]	; (80097ac <vTaskSwitchContext+0xb0>)
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	440b      	add	r3, r1
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	607b      	str	r3, [r7, #4]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <vTaskSwitchContext+0x5a>
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	4613      	mov	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4a12      	ldr	r2, [pc, #72]	; (80097ac <vTaskSwitchContext+0xb0>)
 8009764:	4413      	add	r3, r2
 8009766:	613b      	str	r3, [r7, #16]
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	605a      	str	r2, [r3, #4]
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	3308      	adds	r3, #8
 800977a:	429a      	cmp	r2, r3
 800977c:	d104      	bne.n	8009788 <vTaskSwitchContext+0x8c>
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	605a      	str	r2, [r3, #4]
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	4a08      	ldr	r2, [pc, #32]	; (80097b0 <vTaskSwitchContext+0xb4>)
 8009790:	6013      	str	r3, [r2, #0]
}
 8009792:	bf00      	nop
 8009794:	371c      	adds	r7, #28
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20000410 	.word	0x20000410
 80097a4:	200003fc 	.word	0x200003fc
 80097a8:	200003f0 	.word	0x200003f0
 80097ac:	200002ec 	.word	0x200002ec
 80097b0:	200002e8 	.word	0x200002e8

080097b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10a      	bne.n	80097da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	60fb      	str	r3, [r7, #12]
}
 80097d6:	bf00      	nop
 80097d8:	e7fe      	b.n	80097d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097da:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <vTaskPlaceOnEventList+0x44>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3318      	adds	r3, #24
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7fe fc95 	bl	8008112 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097e8:	2101      	movs	r1, #1
 80097ea:	6838      	ldr	r0, [r7, #0]
 80097ec:	f000 fb7e 	bl	8009eec <prvAddCurrentTaskToDelayedList>
}
 80097f0:	bf00      	nop
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	200002e8 	.word	0x200002e8

080097fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	60fb      	str	r3, [r7, #12]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	3318      	adds	r3, #24
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe fca9 	bl	8008184 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009832:	4b1d      	ldr	r3, [pc, #116]	; (80098a8 <xTaskRemoveFromEventList+0xac>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d11c      	bne.n	8009874 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3304      	adds	r3, #4
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fca0 	bl	8008184 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	2201      	movs	r2, #1
 800984a:	409a      	lsls	r2, r3
 800984c:	4b17      	ldr	r3, [pc, #92]	; (80098ac <xTaskRemoveFromEventList+0xb0>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4313      	orrs	r3, r2
 8009852:	4a16      	ldr	r2, [pc, #88]	; (80098ac <xTaskRemoveFromEventList+0xb0>)
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4a13      	ldr	r2, [pc, #76]	; (80098b0 <xTaskRemoveFromEventList+0xb4>)
 8009864:	441a      	add	r2, r3
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	3304      	adds	r3, #4
 800986a:	4619      	mov	r1, r3
 800986c:	4610      	mov	r0, r2
 800986e:	f7fe fc2c 	bl	80080ca <vListInsertEnd>
 8009872:	e005      	b.n	8009880 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	3318      	adds	r3, #24
 8009878:	4619      	mov	r1, r3
 800987a:	480e      	ldr	r0, [pc, #56]	; (80098b4 <xTaskRemoveFromEventList+0xb8>)
 800987c:	f7fe fc25 	bl	80080ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009884:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <xTaskRemoveFromEventList+0xbc>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	429a      	cmp	r2, r3
 800988c:	d905      	bls.n	800989a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800988e:	2301      	movs	r3, #1
 8009890:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009892:	4b0a      	ldr	r3, [pc, #40]	; (80098bc <xTaskRemoveFromEventList+0xc0>)
 8009894:	2201      	movs	r2, #1
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	e001      	b.n	800989e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800989a:	2300      	movs	r3, #0
 800989c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800989e:	697b      	ldr	r3, [r7, #20]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20000410 	.word	0x20000410
 80098ac:	200003f0 	.word	0x200003f0
 80098b0:	200002ec 	.word	0x200002ec
 80098b4:	200003a8 	.word	0x200003a8
 80098b8:	200002e8 	.word	0x200002e8
 80098bc:	200003fc 	.word	0x200003fc

080098c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098c8:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <vTaskInternalSetTimeOutState+0x24>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <vTaskInternalSetTimeOutState+0x28>)
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	605a      	str	r2, [r3, #4]
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	20000400 	.word	0x20000400
 80098e8:	200003ec 	.word	0x200003ec

080098ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10a      	bne.n	8009912 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	613b      	str	r3, [r7, #16]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	60fb      	str	r3, [r7, #12]
}
 800992a:	bf00      	nop
 800992c:	e7fe      	b.n	800992c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800992e:	f000 fc71 	bl	800a214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009932:	4b1d      	ldr	r3, [pc, #116]	; (80099a8 <xTaskCheckForTimeOut+0xbc>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	69ba      	ldr	r2, [r7, #24]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994a:	d102      	bne.n	8009952 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800994c:	2300      	movs	r3, #0
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	e023      	b.n	800999a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	4b15      	ldr	r3, [pc, #84]	; (80099ac <xTaskCheckForTimeOut+0xc0>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d007      	beq.n	800996e <xTaskCheckForTimeOut+0x82>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	429a      	cmp	r2, r3
 8009966:	d302      	bcc.n	800996e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009968:	2301      	movs	r3, #1
 800996a:	61fb      	str	r3, [r7, #28]
 800996c:	e015      	b.n	800999a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	429a      	cmp	r2, r3
 8009976:	d20b      	bcs.n	8009990 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	1ad2      	subs	r2, r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7ff ff9b 	bl	80098c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	e004      	b.n	800999a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2200      	movs	r2, #0
 8009994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009996:	2301      	movs	r3, #1
 8009998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800999a:	f000 fc6b 	bl	800a274 <vPortExitCritical>

	return xReturn;
 800999e:	69fb      	ldr	r3, [r7, #28]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3720      	adds	r7, #32
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	200003ec 	.word	0x200003ec
 80099ac:	20000400 	.word	0x20000400

080099b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099b4:	4b03      	ldr	r3, [pc, #12]	; (80099c4 <vTaskMissedYield+0x14>)
 80099b6:	2201      	movs	r2, #1
 80099b8:	601a      	str	r2, [r3, #0]
}
 80099ba:	bf00      	nop
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	200003fc 	.word	0x200003fc

080099c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099d0:	f000 f852 	bl	8009a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099d4:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <prvIdleTask+0x28>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d9f9      	bls.n	80099d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099dc:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <prvIdleTask+0x2c>)
 80099de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099ec:	e7f0      	b.n	80099d0 <prvIdleTask+0x8>
 80099ee:	bf00      	nop
 80099f0:	200002ec 	.word	0x200002ec
 80099f4:	e000ed04 	.word	0xe000ed04

080099f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099fe:	2300      	movs	r3, #0
 8009a00:	607b      	str	r3, [r7, #4]
 8009a02:	e00c      	b.n	8009a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4a12      	ldr	r2, [pc, #72]	; (8009a58 <prvInitialiseTaskLists+0x60>)
 8009a10:	4413      	add	r3, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe fb2c 	bl	8008070 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	607b      	str	r3, [r7, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b06      	cmp	r3, #6
 8009a22:	d9ef      	bls.n	8009a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a24:	480d      	ldr	r0, [pc, #52]	; (8009a5c <prvInitialiseTaskLists+0x64>)
 8009a26:	f7fe fb23 	bl	8008070 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a2a:	480d      	ldr	r0, [pc, #52]	; (8009a60 <prvInitialiseTaskLists+0x68>)
 8009a2c:	f7fe fb20 	bl	8008070 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a30:	480c      	ldr	r0, [pc, #48]	; (8009a64 <prvInitialiseTaskLists+0x6c>)
 8009a32:	f7fe fb1d 	bl	8008070 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a36:	480c      	ldr	r0, [pc, #48]	; (8009a68 <prvInitialiseTaskLists+0x70>)
 8009a38:	f7fe fb1a 	bl	8008070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a3c:	480b      	ldr	r0, [pc, #44]	; (8009a6c <prvInitialiseTaskLists+0x74>)
 8009a3e:	f7fe fb17 	bl	8008070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a42:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <prvInitialiseTaskLists+0x78>)
 8009a44:	4a05      	ldr	r2, [pc, #20]	; (8009a5c <prvInitialiseTaskLists+0x64>)
 8009a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <prvInitialiseTaskLists+0x7c>)
 8009a4a:	4a05      	ldr	r2, [pc, #20]	; (8009a60 <prvInitialiseTaskLists+0x68>)
 8009a4c:	601a      	str	r2, [r3, #0]
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	200002ec 	.word	0x200002ec
 8009a5c:	20000378 	.word	0x20000378
 8009a60:	2000038c 	.word	0x2000038c
 8009a64:	200003a8 	.word	0x200003a8
 8009a68:	200003bc 	.word	0x200003bc
 8009a6c:	200003d4 	.word	0x200003d4
 8009a70:	200003a0 	.word	0x200003a0
 8009a74:	200003a4 	.word	0x200003a4

08009a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a7e:	e019      	b.n	8009ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a80:	f000 fbc8 	bl	800a214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a84:	4b10      	ldr	r3, [pc, #64]	; (8009ac8 <prvCheckTasksWaitingTermination+0x50>)
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fb77 	bl	8008184 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a96:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <prvCheckTasksWaitingTermination+0x54>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	4a0b      	ldr	r2, [pc, #44]	; (8009acc <prvCheckTasksWaitingTermination+0x54>)
 8009a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <prvCheckTasksWaitingTermination+0x58>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	4a0a      	ldr	r2, [pc, #40]	; (8009ad0 <prvCheckTasksWaitingTermination+0x58>)
 8009aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009aaa:	f000 fbe3 	bl	800a274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f810 	bl	8009ad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ab4:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <prvCheckTasksWaitingTermination+0x58>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e1      	bne.n	8009a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	200003bc 	.word	0x200003bc
 8009acc:	200003e8 	.word	0x200003e8
 8009ad0:	200003d0 	.word	0x200003d0

08009ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d108      	bne.n	8009af8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fd80 	bl	800a5f0 <vPortFree>
				vPortFree( pxTCB );
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fd7d 	bl	800a5f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009af6:	e018      	b.n	8009b2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d103      	bne.n	8009b0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fd74 	bl	800a5f0 <vPortFree>
	}
 8009b08:	e00f      	b.n	8009b2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d00a      	beq.n	8009b2a <prvDeleteTCB+0x56>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	60fb      	str	r3, [r7, #12]
}
 8009b26:	bf00      	nop
 8009b28:	e7fe      	b.n	8009b28 <prvDeleteTCB+0x54>
	}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b3a:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <prvResetNextTaskUnblockTime+0x38>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d104      	bne.n	8009b4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b44:	4b0a      	ldr	r3, [pc, #40]	; (8009b70 <prvResetNextTaskUnblockTime+0x3c>)
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b4c:	e008      	b.n	8009b60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4e:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <prvResetNextTaskUnblockTime+0x38>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	4a04      	ldr	r2, [pc, #16]	; (8009b70 <prvResetNextTaskUnblockTime+0x3c>)
 8009b5e:	6013      	str	r3, [r2, #0]
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	200003a0 	.word	0x200003a0
 8009b70:	20000408 	.word	0x20000408

08009b74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <xTaskGetSchedulerState+0x34>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b82:	2301      	movs	r3, #1
 8009b84:	607b      	str	r3, [r7, #4]
 8009b86:	e008      	b.n	8009b9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b88:	4b08      	ldr	r3, [pc, #32]	; (8009bac <xTaskGetSchedulerState+0x38>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d102      	bne.n	8009b96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b90:	2302      	movs	r3, #2
 8009b92:	607b      	str	r3, [r7, #4]
 8009b94:	e001      	b.n	8009b9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b96:	2300      	movs	r3, #0
 8009b98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b9a:	687b      	ldr	r3, [r7, #4]
	}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	200003f4 	.word	0x200003f4
 8009bac:	20000410 	.word	0x20000410

08009bb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d05e      	beq.n	8009c84 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bca:	4b31      	ldr	r3, [pc, #196]	; (8009c90 <xTaskPriorityInherit+0xe0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d24e      	bcs.n	8009c72 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	db06      	blt.n	8009bea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bdc:	4b2c      	ldr	r3, [pc, #176]	; (8009c90 <xTaskPriorityInherit+0xe0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	f1c3 0207 	rsb	r2, r3, #7
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	6959      	ldr	r1, [r3, #20]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4a26      	ldr	r2, [pc, #152]	; (8009c94 <xTaskPriorityInherit+0xe4>)
 8009bfc:	4413      	add	r3, r2
 8009bfe:	4299      	cmp	r1, r3
 8009c00:	d12f      	bne.n	8009c62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	3304      	adds	r3, #4
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fe fabc 	bl	8008184 <uxListRemove>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	2201      	movs	r2, #1
 8009c18:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1c:	43da      	mvns	r2, r3
 8009c1e:	4b1e      	ldr	r3, [pc, #120]	; (8009c98 <xTaskPriorityInherit+0xe8>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4013      	ands	r3, r2
 8009c24:	4a1c      	ldr	r2, [pc, #112]	; (8009c98 <xTaskPriorityInherit+0xe8>)
 8009c26:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c28:	4b19      	ldr	r3, [pc, #100]	; (8009c90 <xTaskPriorityInherit+0xe0>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c36:	2201      	movs	r2, #1
 8009c38:	409a      	lsls	r2, r3
 8009c3a:	4b17      	ldr	r3, [pc, #92]	; (8009c98 <xTaskPriorityInherit+0xe8>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	4a15      	ldr	r2, [pc, #84]	; (8009c98 <xTaskPriorityInherit+0xe8>)
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c48:	4613      	mov	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4a10      	ldr	r2, [pc, #64]	; (8009c94 <xTaskPriorityInherit+0xe4>)
 8009c52:	441a      	add	r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	3304      	adds	r3, #4
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	f7fe fa35 	bl	80080ca <vListInsertEnd>
 8009c60:	e004      	b.n	8009c6c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c62:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <xTaskPriorityInherit+0xe0>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e008      	b.n	8009c84 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c76:	4b06      	ldr	r3, [pc, #24]	; (8009c90 <xTaskPriorityInherit+0xe0>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d201      	bcs.n	8009c84 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009c80:	2301      	movs	r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c84:	68fb      	ldr	r3, [r7, #12]
	}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200002e8 	.word	0x200002e8
 8009c94:	200002ec 	.word	0x200002ec
 8009c98:	200003f0 	.word	0x200003f0

08009c9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d06e      	beq.n	8009d90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009cb2:	4b3a      	ldr	r3, [pc, #232]	; (8009d9c <xTaskPriorityDisinherit+0x100>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d00a      	beq.n	8009cd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	60fb      	str	r3, [r7, #12]
}
 8009cce:	bf00      	nop
 8009cd0:	e7fe      	b.n	8009cd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	60bb      	str	r3, [r7, #8]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf4:	1e5a      	subs	r2, r3, #1
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d044      	beq.n	8009d90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d140      	bne.n	8009d90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	3304      	adds	r3, #4
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe fa36 	bl	8008184 <uxListRemove>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d115      	bne.n	8009d4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d22:	491f      	ldr	r1, [pc, #124]	; (8009da0 <xTaskPriorityDisinherit+0x104>)
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	440b      	add	r3, r1
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xTaskPriorityDisinherit+0xae>
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	2201      	movs	r2, #1
 8009d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d3e:	43da      	mvns	r2, r3
 8009d40:	4b18      	ldr	r3, [pc, #96]	; (8009da4 <xTaskPriorityDisinherit+0x108>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4013      	ands	r3, r2
 8009d46:	4a17      	ldr	r2, [pc, #92]	; (8009da4 <xTaskPriorityDisinherit+0x108>)
 8009d48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	f1c3 0207 	rsb	r2, r3, #7
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d62:	2201      	movs	r2, #1
 8009d64:	409a      	lsls	r2, r3
 8009d66:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <xTaskPriorityDisinherit+0x108>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	4a0d      	ldr	r2, [pc, #52]	; (8009da4 <xTaskPriorityDisinherit+0x108>)
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4a08      	ldr	r2, [pc, #32]	; (8009da0 <xTaskPriorityDisinherit+0x104>)
 8009d7e:	441a      	add	r2, r3
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	3304      	adds	r3, #4
 8009d84:	4619      	mov	r1, r3
 8009d86:	4610      	mov	r0, r2
 8009d88:	f7fe f99f 	bl	80080ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d90:	697b      	ldr	r3, [r7, #20]
	}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	200002e8 	.word	0x200002e8
 8009da0:	200002ec 	.word	0x200002ec
 8009da4:	200003f0 	.word	0x200003f0

08009da8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009db6:	2301      	movs	r3, #1
 8009db8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d077      	beq.n	8009eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	60fb      	str	r3, [r7, #12]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d902      	bls.n	8009dee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	61fb      	str	r3, [r7, #28]
 8009dec:	e002      	b.n	8009df4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	69fa      	ldr	r2, [r7, #28]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d058      	beq.n	8009eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d153      	bne.n	8009eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009e08:	4b2b      	ldr	r3, [pc, #172]	; (8009eb8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d10a      	bne.n	8009e28 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	60bb      	str	r3, [r7, #8]
}
 8009e24:	bf00      	nop
 8009e26:	e7fe      	b.n	8009e26 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	69fa      	ldr	r2, [r7, #28]
 8009e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	db04      	blt.n	8009e46 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	f1c3 0207 	rsb	r2, r3, #7
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	6959      	ldr	r1, [r3, #20]
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4a19      	ldr	r2, [pc, #100]	; (8009ebc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009e56:	4413      	add	r3, r2
 8009e58:	4299      	cmp	r1, r3
 8009e5a:	d129      	bne.n	8009eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe f98f 	bl	8008184 <uxListRemove>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10a      	bne.n	8009e82 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	2201      	movs	r2, #1
 8009e72:	fa02 f303 	lsl.w	r3, r2, r3
 8009e76:	43da      	mvns	r2, r3
 8009e78:	4b11      	ldr	r3, [pc, #68]	; (8009ec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	4a10      	ldr	r2, [pc, #64]	; (8009ec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009e80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e86:	2201      	movs	r2, #1
 8009e88:	409a      	lsls	r2, r3
 8009e8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	4a0b      	ldr	r2, [pc, #44]	; (8009ec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a06      	ldr	r2, [pc, #24]	; (8009ebc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fe f90d 	bl	80080ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009eb0:	bf00      	nop
 8009eb2:	3720      	adds	r7, #32
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	200002e8 	.word	0x200002e8
 8009ebc:	200002ec 	.word	0x200002ec
 8009ec0:	200003f0 	.word	0x200003f0

08009ec4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009ec4:	b480      	push	{r7}
 8009ec6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009ec8:	4b07      	ldr	r3, [pc, #28]	; (8009ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d004      	beq.n	8009eda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009ed0:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ed6:	3201      	adds	r2, #1
 8009ed8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009eda:	4b03      	ldr	r3, [pc, #12]	; (8009ee8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009edc:	681b      	ldr	r3, [r3, #0]
	}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	200002e8 	.word	0x200002e8

08009eec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ef6:	4b29      	ldr	r3, [pc, #164]	; (8009f9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009efc:	4b28      	ldr	r3, [pc, #160]	; (8009fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3304      	adds	r3, #4
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fe f93e 	bl	8008184 <uxListRemove>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10b      	bne.n	8009f26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009f0e:	4b24      	ldr	r3, [pc, #144]	; (8009fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f14:	2201      	movs	r2, #1
 8009f16:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1a:	43da      	mvns	r2, r3
 8009f1c:	4b21      	ldr	r3, [pc, #132]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4013      	ands	r3, r2
 8009f22:	4a20      	ldr	r2, [pc, #128]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2c:	d10a      	bne.n	8009f44 <prvAddCurrentTaskToDelayedList+0x58>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d007      	beq.n	8009f44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f34:	4b1a      	ldr	r3, [pc, #104]	; (8009fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	481a      	ldr	r0, [pc, #104]	; (8009fa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f3e:	f7fe f8c4 	bl	80080ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f42:	e026      	b.n	8009f92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4413      	add	r3, r2
 8009f4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f4c:	4b14      	ldr	r3, [pc, #80]	; (8009fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d209      	bcs.n	8009f70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f5c:	4b13      	ldr	r3, [pc, #76]	; (8009fac <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	4b0f      	ldr	r3, [pc, #60]	; (8009fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f7fe f8d2 	bl	8008112 <vListInsert>
}
 8009f6e:	e010      	b.n	8009f92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f70:	4b0f      	ldr	r3, [pc, #60]	; (8009fb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	4b0a      	ldr	r3, [pc, #40]	; (8009fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	f7fe f8c8 	bl	8008112 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f82:	4b0c      	ldr	r3, [pc, #48]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d202      	bcs.n	8009f92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f8c:	4a09      	ldr	r2, [pc, #36]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	6013      	str	r3, [r2, #0]
}
 8009f92:	bf00      	nop
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	200003ec 	.word	0x200003ec
 8009fa0:	200002e8 	.word	0x200002e8
 8009fa4:	200003f0 	.word	0x200003f0
 8009fa8:	200003d4 	.word	0x200003d4
 8009fac:	200003a4 	.word	0x200003a4
 8009fb0:	200003a0 	.word	0x200003a0
 8009fb4:	20000408 	.word	0x20000408

08009fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3b04      	subs	r3, #4
 8009fc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3b04      	subs	r3, #4
 8009fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f023 0201 	bic.w	r2, r3, #1
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3b04      	subs	r3, #4
 8009fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fe8:	4a0c      	ldr	r2, [pc, #48]	; (800a01c <pxPortInitialiseStack+0x64>)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3b14      	subs	r3, #20
 8009ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3b04      	subs	r3, #4
 8009ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f06f 0202 	mvn.w	r2, #2
 800a006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3b20      	subs	r3, #32
 800a00c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a00e:	68fb      	ldr	r3, [r7, #12]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	0800a021 	.word	0x0800a021

0800a020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a026:	2300      	movs	r3, #0
 800a028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a02a:	4b12      	ldr	r3, [pc, #72]	; (800a074 <prvTaskExitError+0x54>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a032:	d00a      	beq.n	800a04a <prvTaskExitError+0x2a>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60fb      	str	r3, [r7, #12]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <prvTaskExitError+0x28>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	60bb      	str	r3, [r7, #8]
}
 800a05c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a05e:	bf00      	nop
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0fc      	beq.n	800a060 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a066:	bf00      	nop
 800a068:	bf00      	nop
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	20000020 	.word	0x20000020
	...

0800a080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <pxCurrentTCBConst2>)
 800a082:	6819      	ldr	r1, [r3, #0]
 800a084:	6808      	ldr	r0, [r1, #0]
 800a086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	f380 8809 	msr	PSP, r0
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f04f 0000 	mov.w	r0, #0
 800a096:	f380 8811 	msr	BASEPRI, r0
 800a09a:	4770      	bx	lr
 800a09c:	f3af 8000 	nop.w

0800a0a0 <pxCurrentTCBConst2>:
 800a0a0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop

0800a0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0a8:	4808      	ldr	r0, [pc, #32]	; (800a0cc <prvPortStartFirstTask+0x24>)
 800a0aa:	6800      	ldr	r0, [r0, #0]
 800a0ac:	6800      	ldr	r0, [r0, #0]
 800a0ae:	f380 8808 	msr	MSP, r0
 800a0b2:	f04f 0000 	mov.w	r0, #0
 800a0b6:	f380 8814 	msr	CONTROL, r0
 800a0ba:	b662      	cpsie	i
 800a0bc:	b661      	cpsie	f
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	df00      	svc	0
 800a0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0ca:	bf00      	nop
 800a0cc:	e000ed08 	.word	0xe000ed08

0800a0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0d6:	4b46      	ldr	r3, [pc, #280]	; (800a1f0 <xPortStartScheduler+0x120>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a46      	ldr	r2, [pc, #280]	; (800a1f4 <xPortStartScheduler+0x124>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d10a      	bne.n	800a0f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	613b      	str	r3, [r7, #16]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0f6:	4b3e      	ldr	r3, [pc, #248]	; (800a1f0 <xPortStartScheduler+0x120>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a3f      	ldr	r2, [pc, #252]	; (800a1f8 <xPortStartScheduler+0x128>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d10a      	bne.n	800a116 <xPortStartScheduler+0x46>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	60fb      	str	r3, [r7, #12]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a116:	4b39      	ldr	r3, [pc, #228]	; (800a1fc <xPortStartScheduler+0x12c>)
 800a118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	22ff      	movs	r2, #255	; 0xff
 800a126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	4b31      	ldr	r3, [pc, #196]	; (800a200 <xPortStartScheduler+0x130>)
 800a13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a13e:	4b31      	ldr	r3, [pc, #196]	; (800a204 <xPortStartScheduler+0x134>)
 800a140:	2207      	movs	r2, #7
 800a142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a144:	e009      	b.n	800a15a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a146:	4b2f      	ldr	r3, [pc, #188]	; (800a204 <xPortStartScheduler+0x134>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	4a2d      	ldr	r2, [pc, #180]	; (800a204 <xPortStartScheduler+0x134>)
 800a14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	b2db      	uxtb	r3, r3
 800a158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a162:	2b80      	cmp	r3, #128	; 0x80
 800a164:	d0ef      	beq.n	800a146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a166:	4b27      	ldr	r3, [pc, #156]	; (800a204 <xPortStartScheduler+0x134>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f1c3 0307 	rsb	r3, r3, #7
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d00a      	beq.n	800a188 <xPortStartScheduler+0xb8>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	60bb      	str	r3, [r7, #8]
}
 800a184:	bf00      	nop
 800a186:	e7fe      	b.n	800a186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a188:	4b1e      	ldr	r3, [pc, #120]	; (800a204 <xPortStartScheduler+0x134>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	021b      	lsls	r3, r3, #8
 800a18e:	4a1d      	ldr	r2, [pc, #116]	; (800a204 <xPortStartScheduler+0x134>)
 800a190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a192:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <xPortStartScheduler+0x134>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a19a:	4a1a      	ldr	r2, [pc, #104]	; (800a204 <xPortStartScheduler+0x134>)
 800a19c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1a6:	4b18      	ldr	r3, [pc, #96]	; (800a208 <xPortStartScheduler+0x138>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a17      	ldr	r2, [pc, #92]	; (800a208 <xPortStartScheduler+0x138>)
 800a1ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1b2:	4b15      	ldr	r3, [pc, #84]	; (800a208 <xPortStartScheduler+0x138>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a14      	ldr	r2, [pc, #80]	; (800a208 <xPortStartScheduler+0x138>)
 800a1b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1be:	f000 f8dd 	bl	800a37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1c2:	4b12      	ldr	r3, [pc, #72]	; (800a20c <xPortStartScheduler+0x13c>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1c8:	f000 f8fc 	bl	800a3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1cc:	4b10      	ldr	r3, [pc, #64]	; (800a210 <xPortStartScheduler+0x140>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a0f      	ldr	r2, [pc, #60]	; (800a210 <xPortStartScheduler+0x140>)
 800a1d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1d8:	f7ff ff66 	bl	800a0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1dc:	f7ff fa8e 	bl	80096fc <vTaskSwitchContext>
	prvTaskExitError();
 800a1e0:	f7ff ff1e 	bl	800a020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	e000ed00 	.word	0xe000ed00
 800a1f4:	410fc271 	.word	0x410fc271
 800a1f8:	410fc270 	.word	0x410fc270
 800a1fc:	e000e400 	.word	0xe000e400
 800a200:	20000414 	.word	0x20000414
 800a204:	20000418 	.word	0x20000418
 800a208:	e000ed20 	.word	0xe000ed20
 800a20c:	20000020 	.word	0x20000020
 800a210:	e000ef34 	.word	0xe000ef34

0800a214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	607b      	str	r3, [r7, #4]
}
 800a22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a22e:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <vPortEnterCritical+0x58>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	4a0d      	ldr	r2, [pc, #52]	; (800a26c <vPortEnterCritical+0x58>)
 800a236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <vPortEnterCritical+0x58>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d10f      	bne.n	800a260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a240:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <vPortEnterCritical+0x5c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <vPortEnterCritical+0x4c>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	603b      	str	r3, [r7, #0]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <vPortEnterCritical+0x4a>
	}
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	20000020 	.word	0x20000020
 800a270:	e000ed04 	.word	0xe000ed04

0800a274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a27a:	4b12      	ldr	r3, [pc, #72]	; (800a2c4 <vPortExitCritical+0x50>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10a      	bne.n	800a298 <vPortExitCritical+0x24>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	607b      	str	r3, [r7, #4]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a298:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <vPortExitCritical+0x50>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	4a09      	ldr	r2, [pc, #36]	; (800a2c4 <vPortExitCritical+0x50>)
 800a2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2a2:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <vPortExitCritical+0x50>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d105      	bne.n	800a2b6 <vPortExitCritical+0x42>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	f383 8811 	msr	BASEPRI, r3
}
 800a2b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	20000020 	.word	0x20000020
	...

0800a2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2d0:	f3ef 8009 	mrs	r0, PSP
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	4b15      	ldr	r3, [pc, #84]	; (800a330 <pxCurrentTCBConst>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	f01e 0f10 	tst.w	lr, #16
 800a2e0:	bf08      	it	eq
 800a2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ea:	6010      	str	r0, [r2, #0]
 800a2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2f4:	f380 8811 	msr	BASEPRI, r0
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f7ff f9fc 	bl	80096fc <vTaskSwitchContext>
 800a304:	f04f 0000 	mov.w	r0, #0
 800a308:	f380 8811 	msr	BASEPRI, r0
 800a30c:	bc09      	pop	{r0, r3}
 800a30e:	6819      	ldr	r1, [r3, #0]
 800a310:	6808      	ldr	r0, [r1, #0]
 800a312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a316:	f01e 0f10 	tst.w	lr, #16
 800a31a:	bf08      	it	eq
 800a31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a320:	f380 8809 	msr	PSP, r0
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	f3af 8000 	nop.w

0800a330 <pxCurrentTCBConst>:
 800a330:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop

0800a338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	607b      	str	r3, [r7, #4]
}
 800a350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a352:	f7ff f91b 	bl	800958c <xTaskIncrementTick>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a35c:	4b06      	ldr	r3, [pc, #24]	; (800a378 <SysTick_Handler+0x40>)
 800a35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	2300      	movs	r3, #0
 800a366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	f383 8811 	msr	BASEPRI, r3
}
 800a36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a380:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <vPortSetupTimerInterrupt+0x34>)
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a386:	4b0b      	ldr	r3, [pc, #44]	; (800a3b4 <vPortSetupTimerInterrupt+0x38>)
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <vPortSetupTimerInterrupt+0x3c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a0a      	ldr	r2, [pc, #40]	; (800a3bc <vPortSetupTimerInterrupt+0x40>)
 800a392:	fba2 2303 	umull	r2, r3, r2, r3
 800a396:	099b      	lsrs	r3, r3, #6
 800a398:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <vPortSetupTimerInterrupt+0x44>)
 800a39a:	3b01      	subs	r3, #1
 800a39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a39e:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <vPortSetupTimerInterrupt+0x34>)
 800a3a0:	2207      	movs	r2, #7
 800a3a2:	601a      	str	r2, [r3, #0]
}
 800a3a4:	bf00      	nop
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	e000e010 	.word	0xe000e010
 800a3b4:	e000e018 	.word	0xe000e018
 800a3b8:	20000014 	.word	0x20000014
 800a3bc:	10624dd3 	.word	0x10624dd3
 800a3c0:	e000e014 	.word	0xe000e014

0800a3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a3d4 <vPortEnableVFP+0x10>
 800a3c8:	6801      	ldr	r1, [r0, #0]
 800a3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3ce:	6001      	str	r1, [r0, #0]
 800a3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3d2:	bf00      	nop
 800a3d4:	e000ed88 	.word	0xe000ed88

0800a3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3de:	f3ef 8305 	mrs	r3, IPSR
 800a3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b0f      	cmp	r3, #15
 800a3e8:	d914      	bls.n	800a414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3ea:	4a17      	ldr	r2, [pc, #92]	; (800a448 <vPortValidateInterruptPriority+0x70>)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3f4:	4b15      	ldr	r3, [pc, #84]	; (800a44c <vPortValidateInterruptPriority+0x74>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	7afa      	ldrb	r2, [r7, #11]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d20a      	bcs.n	800a414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	607b      	str	r3, [r7, #4]
}
 800a410:	bf00      	nop
 800a412:	e7fe      	b.n	800a412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a414:	4b0e      	ldr	r3, [pc, #56]	; (800a450 <vPortValidateInterruptPriority+0x78>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <vPortValidateInterruptPriority+0x7c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	429a      	cmp	r2, r3
 800a422:	d90a      	bls.n	800a43a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	603b      	str	r3, [r7, #0]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <vPortValidateInterruptPriority+0x60>
	}
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	e000e3f0 	.word	0xe000e3f0
 800a44c:	20000414 	.word	0x20000414
 800a450:	e000ed0c 	.word	0xe000ed0c
 800a454:	20000418 	.word	0x20000418

0800a458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08a      	sub	sp, #40	; 0x28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a460:	2300      	movs	r3, #0
 800a462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a464:	f7fe ffc6 	bl	80093f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a468:	4b5b      	ldr	r3, [pc, #364]	; (800a5d8 <pvPortMalloc+0x180>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a470:	f000 f920 	bl	800a6b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a474:	4b59      	ldr	r3, [pc, #356]	; (800a5dc <pvPortMalloc+0x184>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4013      	ands	r3, r2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f040 8093 	bne.w	800a5a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d01d      	beq.n	800a4c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a488:	2208      	movs	r2, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4413      	add	r3, r2
 800a48e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f003 0307 	and.w	r3, r3, #7
 800a496:	2b00      	cmp	r3, #0
 800a498:	d014      	beq.n	800a4c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f023 0307 	bic.w	r3, r3, #7
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <pvPortMalloc+0x6c>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	617b      	str	r3, [r7, #20]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d06e      	beq.n	800a5a8 <pvPortMalloc+0x150>
 800a4ca:	4b45      	ldr	r3, [pc, #276]	; (800a5e0 <pvPortMalloc+0x188>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d869      	bhi.n	800a5a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4d4:	4b43      	ldr	r3, [pc, #268]	; (800a5e4 <pvPortMalloc+0x18c>)
 800a4d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4d8:	4b42      	ldr	r3, [pc, #264]	; (800a5e4 <pvPortMalloc+0x18c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4de:	e004      	b.n	800a4ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d903      	bls.n	800a4fc <pvPortMalloc+0xa4>
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f1      	bne.n	800a4e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4fc:	4b36      	ldr	r3, [pc, #216]	; (800a5d8 <pvPortMalloc+0x180>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a502:	429a      	cmp	r2, r3
 800a504:	d050      	beq.n	800a5a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2208      	movs	r2, #8
 800a50c:	4413      	add	r3, r2
 800a50e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	1ad2      	subs	r2, r2, r3
 800a520:	2308      	movs	r3, #8
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	429a      	cmp	r2, r3
 800a526:	d91f      	bls.n	800a568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4413      	add	r3, r2
 800a52e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00a      	beq.n	800a550 <pvPortMalloc+0xf8>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	613b      	str	r3, [r7, #16]
}
 800a54c:	bf00      	nop
 800a54e:	e7fe      	b.n	800a54e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	1ad2      	subs	r2, r2, r3
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a562:	69b8      	ldr	r0, [r7, #24]
 800a564:	f000 f908 	bl	800a778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a568:	4b1d      	ldr	r3, [pc, #116]	; (800a5e0 <pvPortMalloc+0x188>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	4a1b      	ldr	r2, [pc, #108]	; (800a5e0 <pvPortMalloc+0x188>)
 800a574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a576:	4b1a      	ldr	r3, [pc, #104]	; (800a5e0 <pvPortMalloc+0x188>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	4b1b      	ldr	r3, [pc, #108]	; (800a5e8 <pvPortMalloc+0x190>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d203      	bcs.n	800a58a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a582:	4b17      	ldr	r3, [pc, #92]	; (800a5e0 <pvPortMalloc+0x188>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a18      	ldr	r2, [pc, #96]	; (800a5e8 <pvPortMalloc+0x190>)
 800a588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <pvPortMalloc+0x184>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	431a      	orrs	r2, r3
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	2200      	movs	r2, #0
 800a59c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a59e:	4b13      	ldr	r3, [pc, #76]	; (800a5ec <pvPortMalloc+0x194>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	4a11      	ldr	r2, [pc, #68]	; (800a5ec <pvPortMalloc+0x194>)
 800a5a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5a8:	f7fe ff32 	bl	8009410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <pvPortMalloc+0x174>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	60fb      	str	r3, [r7, #12]
}
 800a5c8:	bf00      	nop
 800a5ca:	e7fe      	b.n	800a5ca <pvPortMalloc+0x172>
	return pvReturn;
 800a5cc:	69fb      	ldr	r3, [r7, #28]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3728      	adds	r7, #40	; 0x28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20004024 	.word	0x20004024
 800a5dc:	20004038 	.word	0x20004038
 800a5e0:	20004028 	.word	0x20004028
 800a5e4:	2000401c 	.word	0x2000401c
 800a5e8:	2000402c 	.word	0x2000402c
 800a5ec:	20004030 	.word	0x20004030

0800a5f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d04d      	beq.n	800a69e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a602:	2308      	movs	r3, #8
 800a604:	425b      	negs	r3, r3
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	4413      	add	r3, r2
 800a60a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	4b24      	ldr	r3, [pc, #144]	; (800a6a8 <vPortFree+0xb8>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4013      	ands	r3, r2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10a      	bne.n	800a634 <vPortFree+0x44>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	60fb      	str	r3, [r7, #12]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00a      	beq.n	800a652 <vPortFree+0x62>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	60bb      	str	r3, [r7, #8]
}
 800a64e:	bf00      	nop
 800a650:	e7fe      	b.n	800a650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <vPortFree+0xb8>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4013      	ands	r3, r2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01e      	beq.n	800a69e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d11a      	bne.n	800a69e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <vPortFree+0xb8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	43db      	mvns	r3, r3
 800a672:	401a      	ands	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a678:	f7fe febc 	bl	80093f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <vPortFree+0xbc>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4413      	add	r3, r2
 800a686:	4a09      	ldr	r2, [pc, #36]	; (800a6ac <vPortFree+0xbc>)
 800a688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a68a:	6938      	ldr	r0, [r7, #16]
 800a68c:	f000 f874 	bl	800a778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <vPortFree+0xc0>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	4a06      	ldr	r2, [pc, #24]	; (800a6b0 <vPortFree+0xc0>)
 800a698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a69a:	f7fe feb9 	bl	8009410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a69e:	bf00      	nop
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20004038 	.word	0x20004038
 800a6ac:	20004028 	.word	0x20004028
 800a6b0:	20004034 	.word	0x20004034

0800a6b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a6be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6c0:	4b27      	ldr	r3, [pc, #156]	; (800a760 <prvHeapInit+0xac>)
 800a6c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00c      	beq.n	800a6e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3307      	adds	r3, #7
 800a6d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 0307 	bic.w	r3, r3, #7
 800a6da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	4a1f      	ldr	r2, [pc, #124]	; (800a760 <prvHeapInit+0xac>)
 800a6e4:	4413      	add	r3, r2
 800a6e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6ec:	4a1d      	ldr	r2, [pc, #116]	; (800a764 <prvHeapInit+0xb0>)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <prvHeapInit+0xb0>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a700:	2208      	movs	r2, #8
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	1a9b      	subs	r3, r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 0307 	bic.w	r3, r3, #7
 800a70e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4a15      	ldr	r2, [pc, #84]	; (800a768 <prvHeapInit+0xb4>)
 800a714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a716:	4b14      	ldr	r3, [pc, #80]	; (800a768 <prvHeapInit+0xb4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2200      	movs	r2, #0
 800a71c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a71e:	4b12      	ldr	r3, [pc, #72]	; (800a768 <prvHeapInit+0xb4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a734:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <prvHeapInit+0xb4>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	4a0a      	ldr	r2, [pc, #40]	; (800a76c <prvHeapInit+0xb8>)
 800a742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	4a09      	ldr	r2, [pc, #36]	; (800a770 <prvHeapInit+0xbc>)
 800a74a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a74c:	4b09      	ldr	r3, [pc, #36]	; (800a774 <prvHeapInit+0xc0>)
 800a74e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a752:	601a      	str	r2, [r3, #0]
}
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	2000041c 	.word	0x2000041c
 800a764:	2000401c 	.word	0x2000401c
 800a768:	20004024 	.word	0x20004024
 800a76c:	2000402c 	.word	0x2000402c
 800a770:	20004028 	.word	0x20004028
 800a774:	20004038 	.word	0x20004038

0800a778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a780:	4b28      	ldr	r3, [pc, #160]	; (800a824 <prvInsertBlockIntoFreeList+0xac>)
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e002      	b.n	800a78c <prvInsertBlockIntoFreeList+0x14>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	429a      	cmp	r2, r3
 800a794:	d8f7      	bhi.n	800a786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d108      	bne.n	800a7ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	441a      	add	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	441a      	add	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d118      	bne.n	800a800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b15      	ldr	r3, [pc, #84]	; (800a828 <prvInsertBlockIntoFreeList+0xb0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d00d      	beq.n	800a7f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	441a      	add	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	e008      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7f6:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <prvInsertBlockIntoFreeList+0xb0>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	e003      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d002      	beq.n	800a816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a816:	bf00      	nop
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	2000401c 	.word	0x2000401c
 800a828:	20004024 	.word	0x20004024

0800a82c <__libc_init_array>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	4d0d      	ldr	r5, [pc, #52]	; (800a864 <__libc_init_array+0x38>)
 800a830:	4c0d      	ldr	r4, [pc, #52]	; (800a868 <__libc_init_array+0x3c>)
 800a832:	1b64      	subs	r4, r4, r5
 800a834:	10a4      	asrs	r4, r4, #2
 800a836:	2600      	movs	r6, #0
 800a838:	42a6      	cmp	r6, r4
 800a83a:	d109      	bne.n	800a850 <__libc_init_array+0x24>
 800a83c:	4d0b      	ldr	r5, [pc, #44]	; (800a86c <__libc_init_array+0x40>)
 800a83e:	4c0c      	ldr	r4, [pc, #48]	; (800a870 <__libc_init_array+0x44>)
 800a840:	f000 f82e 	bl	800a8a0 <_init>
 800a844:	1b64      	subs	r4, r4, r5
 800a846:	10a4      	asrs	r4, r4, #2
 800a848:	2600      	movs	r6, #0
 800a84a:	42a6      	cmp	r6, r4
 800a84c:	d105      	bne.n	800a85a <__libc_init_array+0x2e>
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
 800a850:	f855 3b04 	ldr.w	r3, [r5], #4
 800a854:	4798      	blx	r3
 800a856:	3601      	adds	r6, #1
 800a858:	e7ee      	b.n	800a838 <__libc_init_array+0xc>
 800a85a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a85e:	4798      	blx	r3
 800a860:	3601      	adds	r6, #1
 800a862:	e7f2      	b.n	800a84a <__libc_init_array+0x1e>
 800a864:	0800a9f8 	.word	0x0800a9f8
 800a868:	0800a9f8 	.word	0x0800a9f8
 800a86c:	0800a9f8 	.word	0x0800a9f8
 800a870:	0800a9fc 	.word	0x0800a9fc

0800a874 <memcpy>:
 800a874:	440a      	add	r2, r1
 800a876:	4291      	cmp	r1, r2
 800a878:	f100 33ff 	add.w	r3, r0, #4294967295
 800a87c:	d100      	bne.n	800a880 <memcpy+0xc>
 800a87e:	4770      	bx	lr
 800a880:	b510      	push	{r4, lr}
 800a882:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a88a:	4291      	cmp	r1, r2
 800a88c:	d1f9      	bne.n	800a882 <memcpy+0xe>
 800a88e:	bd10      	pop	{r4, pc}

0800a890 <memset>:
 800a890:	4402      	add	r2, r0
 800a892:	4603      	mov	r3, r0
 800a894:	4293      	cmp	r3, r2
 800a896:	d100      	bne.n	800a89a <memset+0xa>
 800a898:	4770      	bx	lr
 800a89a:	f803 1b01 	strb.w	r1, [r3], #1
 800a89e:	e7f9      	b.n	800a894 <memset+0x4>

0800a8a0 <_init>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	bf00      	nop
 800a8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a6:	bc08      	pop	{r3}
 800a8a8:	469e      	mov	lr, r3
 800a8aa:	4770      	bx	lr

0800a8ac <_fini>:
 800a8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ae:	bf00      	nop
 800a8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8b2:	bc08      	pop	{r3}
 800a8b4:	469e      	mov	lr, r3
 800a8b6:	4770      	bx	lr

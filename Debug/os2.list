
os2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080080c8  080080c8  000180c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800818c  0800818c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008194  08008194  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800819c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041fc  20000014  080081b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004210  080081b0  00024210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e3d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003007  00000000  00000000  00035e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00038e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022030  00000000  00000000  0003b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013699  00000000  00000000  0005d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2fc0  00000000  00000000  00070959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143919  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eac  00000000  00000000  0014396c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080b0 	.word	0x080080b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080080b0 	.word	0x080080b0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96e 	b.w	8000d00 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468c      	mov	ip, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8083 	bne.w	8000b52 <__udivmoddi4+0x116>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d947      	bls.n	8000ae2 <__udivmoddi4+0xa6>
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	b142      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	f1c2 0020 	rsb	r0, r2, #32
 8000a5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a60:	4091      	lsls	r1, r2
 8000a62:	4097      	lsls	r7, r2
 8000a64:	ea40 0c01 	orr.w	ip, r0, r1
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbbc f6f8 	udiv	r6, ip, r8
 8000a74:	fa1f fe87 	uxth.w	lr, r7
 8000a78:	fb08 c116 	mls	r1, r8, r6, ip
 8000a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a80:	fb06 f10e 	mul.w	r1, r6, lr
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8e:	f080 8119 	bcs.w	8000cc4 <__udivmoddi4+0x288>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8116 	bls.w	8000cc4 <__udivmoddi4+0x288>
 8000a98:	3e02      	subs	r6, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa4:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	193c      	adds	r4, r7, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8105 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	f240 8102 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000acc:	eba4 040e 	sub.w	r4, r4, lr
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	b11d      	cbz	r5, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c5 4300 	strd	r4, r3, [r5]
 8000adc:	4631      	mov	r1, r6
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b902      	cbnz	r2, 8000ae6 <__udivmoddi4+0xaa>
 8000ae4:	deff      	udf	#255	; 0xff
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d150      	bne.n	8000b90 <__udivmoddi4+0x154>
 8000aee:	1bcb      	subs	r3, r1, r7
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	fa1f f887 	uxth.w	r8, r7
 8000af8:	2601      	movs	r6, #1
 8000afa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b08:	fb08 f30c 	mul.w	r3, r8, ip
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000b10:	1879      	adds	r1, r7, r1
 8000b12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0xe2>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	f200 80e9 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b1e:	4684      	mov	ip, r0
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	b2a3      	uxth	r3, r4
 8000b24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b30:	fb08 f800 	mul.w	r8, r8, r0
 8000b34:	45a0      	cmp	r8, r4
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x10c>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x10a>
 8000b40:	45a0      	cmp	r8, r4
 8000b42:	f200 80d9 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b46:	4618      	mov	r0, r3
 8000b48:	eba4 0408 	sub.w	r4, r4, r8
 8000b4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b50:	e7bf      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x12e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <__udivmoddi4+0x282>
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b62:	4630      	mov	r0, r6
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f683 	clz	r6, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d14a      	bne.n	8000c08 <__udivmoddi4+0x1cc>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0x140>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80b8 	bhi.w	8000cec <__udivmoddi4+0x2b0>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	468c      	mov	ip, r1
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d0a8      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f603 	lsr.w	r6, r0, r3
 8000b98:	4097      	lsls	r7, r2
 8000b9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	4330      	orrs	r0, r6
 8000ba6:	0c03      	lsrs	r3, r0, #16
 8000ba8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f108 	mul.w	r1, r6, r8
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x19c>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bca:	f080 808d 	bcs.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 808a 	bls.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b281      	uxth	r1, r0
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb00 f308 	mul.w	r3, r0, r8
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x1c4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bf6:	d273      	bcs.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d971      	bls.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4439      	add	r1, r7
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c06:	e778      	b.n	8000afa <__udivmoddi4+0xbe>
 8000c08:	f1c6 0c20 	rsb	ip, r6, #32
 8000c0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c14:	431c      	orrs	r4, r3
 8000c16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c26:	431f      	orrs	r7, r3
 8000c28:	0c3b      	lsrs	r3, r7, #16
 8000c2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c2e:	fa1f f884 	uxth.w	r8, r4
 8000c32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3e:	458a      	cmp	sl, r1
 8000c40:	fa02 f206 	lsl.w	r2, r2, r6
 8000c44:	fa00 f306 	lsl.w	r3, r0, r6
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x220>
 8000c4a:	1861      	adds	r1, r4, r1
 8000c4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c50:	d248      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c52:	458a      	cmp	sl, r1
 8000c54:	d946      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4421      	add	r1, r4
 8000c5c:	eba1 010a 	sub.w	r1, r1, sl
 8000c60:	b2bf      	uxth	r7, r7
 8000c62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c6e:	fb00 f808 	mul.w	r8, r0, r8
 8000c72:	45b8      	cmp	r8, r7
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x24a>
 8000c76:	19e7      	adds	r7, r4, r7
 8000c78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7c:	d22e      	bcs.n	8000cdc <__udivmoddi4+0x2a0>
 8000c7e:	45b8      	cmp	r8, r7
 8000c80:	d92c      	bls.n	8000cdc <__udivmoddi4+0x2a0>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4427      	add	r7, r4
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	eba7 0708 	sub.w	r7, r7, r8
 8000c8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c92:	454f      	cmp	r7, r9
 8000c94:	46c6      	mov	lr, r8
 8000c96:	4649      	mov	r1, r9
 8000c98:	d31a      	bcc.n	8000cd0 <__udivmoddi4+0x294>
 8000c9a:	d017      	beq.n	8000ccc <__udivmoddi4+0x290>
 8000c9c:	b15d      	cbz	r5, 8000cb6 <__udivmoddi4+0x27a>
 8000c9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ca2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ca6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000caa:	40f2      	lsrs	r2, r6
 8000cac:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb0:	40f7      	lsrs	r7, r6
 8000cb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e70b      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e9      	b.n	8000a9c <__udivmoddi4+0x60>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6fd      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000ccc:	4543      	cmp	r3, r8
 8000cce:	d2e5      	bcs.n	8000c9c <__udivmoddi4+0x260>
 8000cd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7df      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e7d2      	b.n	8000c86 <__udivmoddi4+0x24a>
 8000ce0:	4660      	mov	r0, ip
 8000ce2:	e78d      	b.n	8000c00 <__udivmoddi4+0x1c4>
 8000ce4:	4681      	mov	r9, r0
 8000ce6:	e7b9      	b.n	8000c5c <__udivmoddi4+0x220>
 8000ce8:	4666      	mov	r6, ip
 8000cea:	e775      	b.n	8000bd8 <__udivmoddi4+0x19c>
 8000cec:	4630      	mov	r0, r6
 8000cee:	e74a      	b.n	8000b86 <__udivmoddi4+0x14a>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	4439      	add	r1, r7
 8000cf6:	e713      	b.n	8000b20 <__udivmoddi4+0xe4>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	e724      	b.n	8000b48 <__udivmoddi4+0x10c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <vApplicationGetIdleTaskMemory+0x30>)
 8000d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000030 	.word	0x20000030
 8000d34:	20000084 	.word	0x20000084

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	b0a2      	sub	sp, #136	; 0x88
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f001 fcb9 	bl	80026b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f89b 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 fa99 	bl	800127c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d4a:	f000 fa19 	bl	8001180 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d4e:	f000 f901 	bl	8000f54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d52:	f000 f975 	bl	8001040 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 fa3d 	bl	80011d4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d5a:	f000 fa65 	bl	8001228 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000d5e:	f000 f9e5 	bl	800112c <MX_UART5_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CameraUARTSem */
  osSemaphoreDef(CameraUARTSem);
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  CameraUARTSemHandle = osSemaphoreCreate(osSemaphore(CameraUARTSem), 1);
 8000d6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d72:	2101      	movs	r1, #1
 8000d74:	4618      	mov	r0, r3
 8000d76:	f004 fcba 	bl	80056ee <osSemaphoreCreate>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a34      	ldr	r2, [pc, #208]	; (8000e50 <main+0x118>)
 8000d7e:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReadySem */
  osSemaphoreDef(GyroReadySem);
 8000d80:	2300      	movs	r3, #0
 8000d82:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d84:	2300      	movs	r3, #0
 8000d86:	67fb      	str	r3, [r7, #124]	; 0x7c
  GyroReadySemHandle = osSemaphoreCreate(osSemaphore(GyroReadySem), 1);
 8000d88:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 fcad 	bl	80056ee <osSemaphoreCreate>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <main+0x11c>)
 8000d98:	6013      	str	r3, [r2, #0]

  /* definition and creation of CriticalDistanceSem */
  osSemaphoreDef(CriticalDistanceSem);
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	673b      	str	r3, [r7, #112]	; 0x70
 8000d9e:	2300      	movs	r3, #0
 8000da0:	677b      	str	r3, [r7, #116]	; 0x74
  CriticalDistanceSemHandle = osSemaphoreCreate(osSemaphore(CriticalDistanceSem), 1);
 8000da2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000da6:	2101      	movs	r1, #1
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fca0 	bl	80056ee <osSemaphoreCreate>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <main+0x120>)
 8000db2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Stream */
  osThreadDef(Stream, StreamTask, osPriorityNormal, 0, 128);
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <main+0x124>)
 8000db6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000dba:	461d      	mov	r5, r3
 8000dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StreamHandle = osThreadCreate(osThread(Stream), NULL);
 8000dc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f004 fc41 	bl	8005656 <osThreadCreate>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <main+0x128>)
 8000dd8:	6013      	str	r3, [r2, #0]

  /* definition and creation of PIDCamera */
  osThreadDef(PIDCamera, PIDCameraTask, osPriorityNormal, 0, 128);
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <main+0x12c>)
 8000ddc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000de0:	461d      	mov	r5, r3
 8000de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PIDCameraHandle = osThreadCreate(osThread(PIDCamera), NULL);
 8000dee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fc2e 	bl	8005656 <osThreadCreate>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <main+0x130>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReceive */
  osThreadDef(GyroReceive, GyroReceiveTask, osPriorityNormal, 0, 128);
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <main+0x134>)
 8000e02:	f107 041c 	add.w	r4, r7, #28
 8000e06:	461d      	mov	r5, r3
 8000e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GyroReceiveHandle = osThreadCreate(osThread(GyroReceive), NULL);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 fc1b 	bl	8005656 <osThreadCreate>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <main+0x138>)
 8000e24:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistanceCheck */
  osThreadDef(DistanceCheck, DistanceCheckTask, osPriorityNormal, 0, 128);
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <main+0x13c>)
 8000e28:	463c      	mov	r4, r7
 8000e2a:	461d      	mov	r5, r3
 8000e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DistanceCheckHandle = osThreadCreate(osThread(DistanceCheck), NULL);
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fc0a 	bl	8005656 <osThreadCreate>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <main+0x140>)
 8000e46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e48:	f004 fbee 	bl	8005628 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <main+0x114>
 8000e4e:	bf00      	nop
 8000e50:	20004098 	.word	0x20004098
 8000e54:	20004178 	.word	0x20004178
 8000e58:	20004004 	.word	0x20004004
 8000e5c:	080080f8 	.word	0x080080f8
 8000e60:	20004174 	.word	0x20004174
 8000e64:	08008114 	.word	0x08008114
 8000e68:	20004094 	.word	0x20004094
 8000e6c:	08008130 	.word	0x08008130
 8000e70:	200041c0 	.word	0x200041c0
 8000e74:	0800814c 	.word	0x0800814c
 8000e78:	2000409c 	.word	0x2000409c

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	; 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2230      	movs	r2, #48	; 0x30
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 f908 	bl	80080a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <SystemClock_Config+0xd0>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <SystemClock_Config+0xd0>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <SystemClock_Config+0xd0>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <SystemClock_Config+0xd4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <SystemClock_Config+0xd4>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <SystemClock_Config+0xd4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ef0:	23a8      	movs	r3, #168	; 0xa8
 8000ef2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efc:	f107 0320 	add.w	r3, r7, #32
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 ff5d 	bl	8002dc0 <HAL_RCC_OscConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f0c:	f001 f920 	bl	8002150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f10:	230f      	movs	r3, #15
 8000f12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f14:	2302      	movs	r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 f9be 	bl	80032b0 <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f3a:	f001 f909 	bl	8002150 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f3e:	f002 fa9d 	bl	800347c <HAL_RCC_EnableCSS>
}
 8000f42:	bf00      	nop
 8000f44:	3750      	adds	r7, #80	; 0x50
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000

08000f54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	; 0x38
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000f86:	4a2d      	ldr	r2, [pc, #180]	; (800103c <MX_TIM3_Init+0xe8>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 61-1;
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000f8c:	223c      	movs	r2, #60	; 0x3c
 8000f8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000f98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000faa:	4823      	ldr	r0, [pc, #140]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000fac:	f002 fbd5 	bl	800375a <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fb6:	f001 f8cb 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481c      	ldr	r0, [pc, #112]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000fc8:	f002 ff6e 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fd2:	f001 f8bd 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000fd8:	f002 fc7e 	bl	80038d8 <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fe2:	f001 f8b5 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4810      	ldr	r0, [pc, #64]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000ff6:	f003 fb53 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001000:	f001 f8a6 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	; 0x60
 8001006:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <MX_TIM3_Init+0xe4>)
 800101c:	f002 fe86 	bl	8003d2c <HAL_TIM_PWM_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001026:	f001 f893 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <MX_TIM3_Init+0xe4>)
 800102c:	f001 f8fa 	bl	8002224 <HAL_TIM_MspPostInit>

}
 8001030:	bf00      	nop
 8001032:	3738      	adds	r7, #56	; 0x38
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200040a0 	.word	0x200040a0
 800103c:	40000400 	.word	0x40000400

08001040 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_TIM4_Init+0xe4>)
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <MX_TIM4_Init+0xe8>)
 8001074:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 61-1;
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_TIM4_Init+0xe4>)
 8001078:	223c      	movs	r2, #60	; 0x3c
 800107a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <MX_TIM4_Init+0xe4>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MX_TIM4_Init+0xe4>)
 8001084:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001088:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <MX_TIM4_Init+0xe4>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <MX_TIM4_Init+0xe4>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001096:	4823      	ldr	r0, [pc, #140]	; (8001124 <MX_TIM4_Init+0xe4>)
 8001098:	f002 fb5f 	bl	800375a <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010a2:	f001 f855 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b0:	4619      	mov	r1, r3
 80010b2:	481c      	ldr	r0, [pc, #112]	; (8001124 <MX_TIM4_Init+0xe4>)
 80010b4:	f002 fef8 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80010be:	f001 f847 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010c2:	4818      	ldr	r0, [pc, #96]	; (8001124 <MX_TIM4_Init+0xe4>)
 80010c4:	f002 fc08 	bl	80038d8 <HAL_TIM_PWM_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010ce:	f001 f83f 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	4619      	mov	r1, r3
 80010e0:	4810      	ldr	r0, [pc, #64]	; (8001124 <MX_TIM4_Init+0xe4>)
 80010e2:	f003 fadd 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80010ec:	f001 f830 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <MX_TIM4_Init+0xe4>)
 8001108:	f002 fe10 	bl	8003d2c <HAL_TIM_PWM_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001112:	f001 f81d 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001116:	4803      	ldr	r0, [pc, #12]	; (8001124 <MX_TIM4_Init+0xe4>)
 8001118:	f001 f884 	bl	8002224 <HAL_TIM_MspPostInit>

}
 800111c:	bf00      	nop
 800111e:	3738      	adds	r7, #56	; 0x38
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20004008 	.word	0x20004008
 8001128:	40000800 	.word	0x40000800

0800112c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_UART5_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_UART5_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_UART5_Init+0x4c>)
 8001138:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800113c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_UART5_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_UART5_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_UART5_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_UART5_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_UART5_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_UART5_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_UART5_Init+0x4c>)
 8001164:	f003 fb2c 	bl	80047c0 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800116e:	f000 ffef 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200040ec 	.word	0x200040ec
 800117c:	40005000 	.word	0x40005000

08001180 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_USART1_UART_Init+0x50>)
 8001188:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011b8:	f003 fb02 	bl	80047c0 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011c2:	f000 ffc5 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20004130 	.word	0x20004130
 80011d0:	40011000 	.word	0x40011000

080011d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART2_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 800120c:	f003 fad8 	bl	80047c0 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 ff9b 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000417c 	.word	0x2000417c
 8001224:	40004400 	.word	0x40004400

08001228 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART3_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART3_UART_Init+0x4c>)
 8001260:	f003 faae 	bl	80047c0 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f000 ff71 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20004050 	.word	0x20004050
 8001278:	40004800 	.word	0x40004800

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <MX_GPIO_Init+0x144>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <MX_GPIO_Init+0x144>)
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a42      	ldr	r2, [pc, #264]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a3b      	ldr	r2, [pc, #236]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <MX_GPIO_Init+0x144>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <MX_GPIO_Init+0x144>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a2d      	ldr	r2, [pc, #180]	; (80013c0 <MX_GPIO_Init+0x144>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <MX_GPIO_Init+0x144>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <MX_GPIO_Init+0x144>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <MX_GPIO_Init+0x144>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <MX_GPIO_Init+0x144>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LEDBlue_Pin|LEDGreen_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001340:	4820      	ldr	r0, [pc, #128]	; (80013c4 <MX_GPIO_Init+0x148>)
 8001342:	f001 fd09 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rightPWMGND_GPIO_Port, rightPWMGND_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134c:	481e      	ldr	r0, [pc, #120]	; (80013c8 <MX_GPIO_Init+0x14c>)
 800134e:	f001 fd03 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(leftPWMGND_GPIO_Port, leftPWMGND_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001358:	481c      	ldr	r0, [pc, #112]	; (80013cc <MX_GPIO_Init+0x150>)
 800135a:	f001 fcfd 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDBlue_Pin LEDGreen_Pin */
  GPIO_InitStruct.Pin = LEDBlue_Pin|LEDGreen_Pin;
 800135e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4813      	ldr	r0, [pc, #76]	; (80013c4 <MX_GPIO_Init+0x148>)
 8001378:	f001 fb52 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : rightPWMGND_Pin */
  GPIO_InitStruct.Pin = rightPWMGND_Pin;
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001386:	2302      	movs	r3, #2
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(rightPWMGND_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_GPIO_Init+0x14c>)
 8001396:	f001 fb43 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftPWMGND_Pin */
  GPIO_InitStruct.Pin = leftPWMGND_Pin;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a4:	2302      	movs	r3, #2
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftPWMGND_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_GPIO_Init+0x150>)
 80013b4:	f001 fb34 	bl	8002a20 <HAL_GPIO_Init>

}
 80013b8:	bf00      	nop
 80013ba:	3730      	adds	r7, #48	; 0x30
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40021400 	.word	0x40021400
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40020000 	.word	0x40020000

080013d0 <Car_Initial>:

/* USER CODE BEGIN 4 */
void Car_Initial(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 80013d4:	f006 fb26 	bl	8007a24 <vPortEnterCritical>
	state=Initial;
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <Car_Initial+0x28>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);//�????????????????????????????????????????????启左侧PWM
 80013de:	2100      	movs	r1, #0
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <Car_Initial+0x2c>)
 80013e2:	f002 fad3 	bl	800398c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);//�????????????????????????????????????????????启右侧PWM
 80013e6:	2100      	movs	r1, #0
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <Car_Initial+0x30>)
 80013ea:	f002 facf 	bl	800398c <HAL_TIM_PWM_Start>
	taskEXIT_CRITICAL();
 80013ee:	f006 fb49 	bl	8007a84 <vPortExitCritical>
	//vTaskSuspend(UART_RTHandle);//Suspend UART R and T
	//vTaskSuspend(PIDCameraHandle);//Suspend PID module
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200040e8 	.word	0x200040e8
 80013fc:	200040a0 	.word	0x200040a0
 8001400:	20004008 	.word	0x20004008

08001404 <Car_Stop>:

void Car_Stop(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	PWM_SET_LEFT(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f000 fad7 	bl	80019bc <PWM_SET_LEFT>
	PWM_SET_RIGHT(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f000 fb0c 	bl	8001a2c <PWM_SET_RIGHT>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <delay>:

void delay(uint32_t time_ms)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	uint32_t PreviousWakeTime=osKernelSysTick();
 8001420:	f004 f909 	bl	8005636 <osKernelSysTick>
 8001424:	4603      	mov	r3, r0
 8001426:	60fb      	str	r3, [r7, #12]
	osDelayUntil(&PreviousWakeTime, time_ms);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fa14 	bl	800585c <osDelayUntil>
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <Angle_Diff>:

float Angle_Diff(float target, float input)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	ed87 0a01 	vstr	s0, [r7, #4]
 8001446:	edc7 0a00 	vstr	s1, [r7]
	float Error;
	if(target >= 180)
 800144a:	edd7 7a01 	vldr	s15, [r7, #4]
 800144e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80014fc <Angle_Diff+0xc0>
 8001452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	db08      	blt.n	800146e <Angle_Diff+0x32>
		target=-360+target;
 800145c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001460:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001500 <Angle_Diff+0xc4>
 8001464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001468:	edc7 7a01 	vstr	s15, [r7, #4]
 800146c:	e010      	b.n	8001490 <Angle_Diff+0x54>
	else if(target <=-180)
 800146e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001472:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001504 <Angle_Diff+0xc8>
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	d807      	bhi.n	8001490 <Angle_Diff+0x54>
		target=360+target;
 8001480:	edd7 7a01 	vldr	s15, [r7, #4]
 8001484:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001500 <Angle_Diff+0xc4>
 8001488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800148c:	edc7 7a01 	vstr	s15, [r7, #4]
	Error = target - input;
 8001490:	ed97 7a01 	vldr	s14, [r7, #4]
 8001494:	edd7 7a00 	vldr	s15, [r7]
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	edc7 7a03 	vstr	s15, [r7, #12]
		if(Error >= 180)
 80014a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014a4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80014fc <Angle_Diff+0xc0>
 80014a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	db08      	blt.n	80014c4 <Angle_Diff+0x88>
			Error=Error-360;
 80014b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001500 <Angle_Diff+0xc4>
 80014ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014be:	edc7 7a03 	vstr	s15, [r7, #12]
 80014c2:	e010      	b.n	80014e6 <Angle_Diff+0xaa>
		else if(Error <= -180)
 80014c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001504 <Angle_Diff+0xc8>
 80014cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	d807      	bhi.n	80014e6 <Angle_Diff+0xaa>
			Error=Error+360;
 80014d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014da:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001500 <Angle_Diff+0xc4>
 80014de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014e2:	edc7 7a03 	vstr	s15, [r7, #12]
	return Error;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	ee07 3a90 	vmov	s15, r3
}
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	43340000 	.word	0x43340000
 8001500:	43b40000 	.word	0x43b40000
 8001504:	c3340000 	.word	0xc3340000

08001508 <PID_Turning>:
// 		}
// 	 }
//}

int PID_Turning(float increment_angle,float Accept_Error)//If we want to turn right, parameter is negative
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b090      	sub	sp, #64	; 0x40
 800150c:	af00      	add	r7, sp, #0
 800150e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001512:	edc7 0a00 	vstr	s1, [r7]
			float PID_target=0;
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
			float PID_Error_Last=0;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
			float initial_yaw=0;
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
			float PID_Output=0,PID_Input=0;;
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
			float Error = 0, Error_Total=0;
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
			float KP=7, KI=0.05, KD=0;
 8001540:	4b9a      	ldr	r3, [pc, #616]	; (80017ac <PID_Turning+0x2a4>)
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	4b9a      	ldr	r3, [pc, #616]	; (80017b0 <PID_Turning+0x2a8>)
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
			int t=0;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
			uint8_t Flag=0; //Indicate that if verifying process begin.
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Car_Stop();
 8001558:	f7ff ff54 	bl	8001404 <Car_Stop>
			//delay(1500);
			for(int i=0;i<20;i++)			//Get average initial direction
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
 8001560:	e015      	b.n	800158e <PID_Turning+0x86>
			{
//				if(gyro_ready_flag)
//				{
					//gyro_ready_flag=0;
					osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001562:	4b94      	ldr	r3, [pc, #592]	; (80017b4 <PID_Turning+0x2ac>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f04f 31ff 	mov.w	r1, #4294967295
 800156a:	4618      	mov	r0, r3
 800156c:	f004 f8f2 	bl	8005754 <osSemaphoreWait>
					//ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(portMAX_DELAY));
					initial_yaw+=angle.z;
 8001570:	4b91      	ldr	r3, [pc, #580]	; (80017b8 <PID_Turning+0x2b0>)
 8001572:	edd3 7a02 	vldr	s15, [r3, #8]
 8001576:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
					delay(40);
 8001582:	2028      	movs	r0, #40	; 0x28
 8001584:	f7ff ff48 	bl	8001418 <delay>
			for(int i=0;i<20;i++)			//Get average initial direction
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	3301      	adds	r3, #1
 800158c:	623b      	str	r3, [r7, #32]
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	2b13      	cmp	r3, #19
 8001592:	dde6      	ble.n	8001562 <PID_Turning+0x5a>
//				}
//				else
//					continue;
			}
			initial_yaw=initial_yaw/20;
 8001594:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001598:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800159c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			PID_target=initial_yaw + increment_angle;
 80015a4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80015a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			if(PID_target > 180)
 80015b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015b8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80017bc <PID_Turning+0x2b4>
 80015bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	dd07      	ble.n	80015d6 <PID_Turning+0xce>
				PID_target=-360+PID_target;
 80015c6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015ca:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80017c0 <PID_Turning+0x2b8>
 80015ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015d2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			if(PID_target <-180)
 80015d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015da:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80017c4 <PID_Turning+0x2bc>
 80015de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d507      	bpl.n	80015f8 <PID_Turning+0xf0>
				PID_target=360+PID_target;
 80015e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015ec:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80017c0 <PID_Turning+0x2b8>
 80015f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
//			  			  return 1;
//			  		  }
//			  	  if(gyro_ready_flag==0)
//			  		  continue;
//			  	  gyro_ready_flag=0;
			  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 80015f8:	4b6e      	ldr	r3, [pc, #440]	; (80017b4 <PID_Turning+0x2ac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	4618      	mov	r0, r3
 8001602:	f004 f8a7 	bl	8005754 <osSemaphoreWait>
			  	 //ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(portMAX_DELAY));

			  	 PID_Input = angle.z;
 8001606:	4b6c      	ldr	r3, [pc, #432]	; (80017b8 <PID_Turning+0x2b0>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61fb      	str	r3, [r7, #28]
			  	 Error=Angle_Diff(PID_target, PID_Input);
 800160c:	edd7 0a07 	vldr	s1, [r7, #28]
 8001610:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001614:	f7ff ff12 	bl	800143c <Angle_Diff>
 8001618:	ed87 0a06 	vstr	s0, [r7, #24]
			  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 800161c:	edd7 7a00 	vldr	s15, [r7]
 8001620:	eef1 7a67 	vneg.f32	s15, s15
 8001624:	ed97 7a06 	vldr	s14, [r7, #24]
 8001628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	dd17      	ble.n	8001662 <PID_Turning+0x15a>
 8001632:	ed97 7a06 	vldr	s14, [r7, #24]
 8001636:	edd7 7a00 	vldr	s15, [r7]
 800163a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	d50e      	bpl.n	8001662 <PID_Turning+0x15a>
 8001644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10a      	bne.n	8001662 <PID_Turning+0x15a>
			  	 {
			  		 t++;
 800164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164e:	3301      	adds	r3, #1
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
			  		if(t>2)
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	2b02      	cmp	r3, #2
 8001656:	dd04      	ble.n	8001662 <PID_Turning+0x15a>
			  		{
			  			Flag = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  			t=0;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
			  		}
			  	 }
			  	 if(Flag)
 8001662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001666:	2b00      	cmp	r3, #0
 8001668:	d026      	beq.n	80016b8 <PID_Turning+0x1b0>
			  	 {
			  		if(t>Angle_stable_cycles)
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	2b08      	cmp	r3, #8
 800166e:	dd06      	ble.n	800167e <PID_Turning+0x176>
			  		{
			  			Flag=0;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  			t=0;
 8001676:	2300      	movs	r3, #0
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
			  			return 0;
 800167a:	2300      	movs	r3, #0
 800167c:	e092      	b.n	80017a4 <PID_Turning+0x29c>
			  		}
			  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 800167e:	edd7 7a00 	vldr	s15, [r7]
 8001682:	eef1 7a67 	vneg.f32	s15, s15
 8001686:	ed97 7a06 	vldr	s14, [r7, #24]
 800168a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	dd0c      	ble.n	80016ae <PID_Turning+0x1a6>
 8001694:	ed97 7a06 	vldr	s14, [r7, #24]
 8001698:	edd7 7a00 	vldr	s15, [r7]
 800169c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d503      	bpl.n	80016ae <PID_Turning+0x1a6>
			  		{
			  			t++;
 80016a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a8:	3301      	adds	r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ac:	e004      	b.n	80016b8 <PID_Turning+0x1b0>
			  		}
			  		else
			  		{
			  			Flag=0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  			t=0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
			  		}
			  	 }
			     PID_Output = KP * Error  +
 80016b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80016bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80016c0:	ee27 7a27 	vmul.f32	s14, s14, s15
			 				  KD * (Error - PID_Error_Last ) +
 80016c4:	edd7 6a06 	vldr	s13, [r7, #24]
 80016c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
			     PID_Output = KP * Error  +
 80016d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016dc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
							  Error_Total;
			     Error_Total=Error_Total+KI*Error;
 80016e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80016ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			     PID_Error_Last = Error;
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	63bb      	str	r3, [r7, #56]	; 0x38
			     if(PID_Output < 0)
 8001704:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	d513      	bpl.n	800173a <PID_Turning+0x232>
			     {
			    	 PID_Output-=PWM_Lowest;
 8001712:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001716:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80017c8 <PID_Turning+0x2c0>
 800171a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800171e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			    	 if(-PID_Output > PWM_Higest)
 8001722:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001726:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80017cc <PID_Turning+0x2c4>
 800172a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	d520      	bpl.n	8001776 <PID_Turning+0x26e>
			    	 	PID_Output=-PWM_Higest;
 8001734:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <PID_Turning+0x2c8>)
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
 8001738:	e01d      	b.n	8001776 <PID_Turning+0x26e>
			     }

			     else if(PID_Output > 0)
 800173a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800173e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	dd13      	ble.n	8001770 <PID_Turning+0x268>
			     {
			    	 PID_Output+=PWM_Lowest;
 8001748:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800174c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80017c8 <PID_Turning+0x2c0>
 8001750:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001754:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			    	 if(-PID_Output > PWM_Higest)
 8001758:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800175c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80017cc <PID_Turning+0x2c4>
 8001760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	d505      	bpl.n	8001776 <PID_Turning+0x26e>
			    	 	PID_Output=-PWM_Higest;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <PID_Turning+0x2c8>)
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
 800176e:	e002      	b.n	8001776 <PID_Turning+0x26e>
			     }
			     else
			    	PID_Output=0;
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
//			     {
//			    	 if(-PID_Output > PWM_Higest)
//			    		 PID_Output=-PWM_Higest;
//			    	 if(-PID_Output < PWM_Lowest)
//			    	 	 PID_Output=-PWM_Lowest;
			    	 taskENTER_CRITICAL();
 8001776:	f006 f955 	bl	8007a24 <vPortEnterCritical>
			    	 PWM_SET_RIGHT ((int32_t) PID_Output);
 800177a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800177e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001782:	ee17 0a90 	vmov	r0, s15
 8001786:	f000 f951 	bl	8001a2c <PWM_SET_RIGHT>
			    	 PWM_SET_LEFT((int32_t)(-PID_Output));
 800178a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800178e:	eef1 7a67 	vneg.f32	s15, s15
 8001792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001796:	ee17 0a90 	vmov	r0, s15
 800179a:	f000 f90f 	bl	80019bc <PWM_SET_LEFT>
			    	 taskEXIT_CRITICAL();
 800179e:	f006 f971 	bl	8007a84 <vPortExitCritical>
			  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 80017a2:	e729      	b.n	80015f8 <PID_Turning+0xf0>
			     }
			     delay(2);
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3740      	adds	r7, #64	; 0x40
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40e00000 	.word	0x40e00000
 80017b0:	3d4ccccd 	.word	0x3d4ccccd
 80017b4:	20004178 	.word	0x20004178
 80017b8:	20000288 	.word	0x20000288
 80017bc:	43340000 	.word	0x43340000
 80017c0:	43b40000 	.word	0x43b40000
 80017c4:	c3340000 	.word	0xc3340000
 80017c8:	43c80000 	.word	0x43c80000
 80017cc:	c47a0000 	.word	0xc47a0000
 80017d0:	c47a0000 	.word	0xc47a0000

080017d4 <Ultrasonic_Feedback>:

Distance Ultrasonic_Feedback(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
	uint8_t info=0xA0;
 80017da:	23a0      	movs	r3, #160	; 0xa0
 80017dc:	74fb      	strb	r3, [r7, #19]
	uint8_t Rx_Buf[3]={0,0,0};
 80017de:	4a28      	ldr	r2, [pc, #160]	; (8001880 <Ultrasonic_Feedback+0xac>)
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	4611      	mov	r1, r2
 80017e8:	8019      	strh	r1, [r3, #0]
 80017ea:	3302      	adds	r3, #2
 80017ec:	0c12      	lsrs	r2, r2, #16
 80017ee:	701a      	strb	r2, [r3, #0]
	uint32_t Data=0x00000000;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
	Distance distance={0.0,0.0};
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
 8001800:	f107 0113 	add.w	r1, r7, #19
 8001804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001808:	2201      	movs	r2, #1
 800180a:	481e      	ldr	r0, [pc, #120]	; (8001884 <Ultrasonic_Feedback+0xb0>)
 800180c:	f003 f825 	bl	800485a <HAL_UART_Transmit>
	//delay(200);
	HAL_UART_Receive(&huart5,(uint8_t*) &Rx_Buf,3,1000);
 8001810:	f107 0110 	add.w	r1, r7, #16
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	2203      	movs	r2, #3
 800181a:	481a      	ldr	r0, [pc, #104]	; (8001884 <Ultrasonic_Feedback+0xb0>)
 800181c:	f003 f8af 	bl	800497e <HAL_UART_Receive>
	Data=Data | (((uint32_t) (Rx_Buf[0]))<<16);
 8001820:	7c3b      	ldrb	r3, [r7, #16]
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	4313      	orrs	r3, r2
 8001828:	61fb      	str	r3, [r7, #28]
	Data=Data | (((uint32_t) (Rx_Buf[1]))<<8);
 800182a:	7c7b      	ldrb	r3, [r7, #17]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	4313      	orrs	r3, r2
 8001832:	61fb      	str	r3, [r7, #28]
	Data=Data |((uint32_t) (Rx_Buf[2]));
 8001834:	7cbb      	ldrb	r3, [r7, #18]
 8001836:	461a      	mov	r2, r3
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	4313      	orrs	r3, r2
 800183c:	61fb      	str	r3, [r7, #28]
	//HAL_UART_Transmit(&huart1, (uint8_t *) &Data, 4, 0xFFFF);
	distance.front=Data/1000;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <Ultrasonic_Feedback+0xb4>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	099b      	lsrs	r3, r3, #6
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001850:	edc7 7a02 	vstr	s15, [r7, #8]
	return distance;
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	f107 0208 	add.w	r2, r7, #8
 800185c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001860:	e883 0003 	stmia.w	r3, {r0, r1}
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	ee07 2a10 	vmov	s14, r2
 800186c:	ee07 3a90 	vmov	s15, r3
}
 8001870:	eeb0 0a47 	vmov.f32	s0, s14
 8001874:	eef0 0a67 	vmov.f32	s1, s15
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	08008168 	.word	0x08008168
 8001884:	200040ec 	.word	0x200040ec
 8001888:	10624dd3 	.word	0x10624dd3

0800188c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  	if (huart->Instance==USART2){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <HAL_UART_RxCpltCallback+0x7c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12f      	bne.n	80018fe <HAL_UART_RxCpltCallback+0x72>
  		Camera_Data=0x0000;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_UART_RxCpltCallback+0x80>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data | (((uint16_t) (Rx_Buf[0]))<<8);
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_UART_RxCpltCallback+0x84>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_UART_RxCpltCallback+0x80>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_UART_RxCpltCallback+0x80>)
 80018be:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data|((uint16_t) (Rx_Buf[1]));
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_UART_RxCpltCallback+0x84>)
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_UART_RxCpltCallback+0x80>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_UART_RxCpltCallback+0x80>)
 80018d4:	801a      	strh	r2, [r3, #0]
  		//Data=Data & (0x07F0);
  		//HAL_UART_Transmit(&huart1, (uint8_t*) &Data,2,10);
  		//HAL_UART_AbortReceive_IT(&huart1);
  		Rx_Buf[0]=0;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_UART_RxCpltCallback+0x84>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
  		Rx_Buf[1]=0;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_UART_RxCpltCallback+0x84>)
 80018de:	2200      	movs	r2, #0
 80018e0:	705a      	strb	r2, [r3, #1]
  		//camera_ready_flag=1;
  		osSemaphoreRelease(CameraUARTSemHandle);
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_UART_RxCpltCallback+0x88>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 ff82 	bl	80057f0 <osSemaphoreRelease>
  		if(camera_recieve_IT_flag)
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_UART_RxCpltCallback+0x8c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <HAL_UART_RxCpltCallback+0x72>
  		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 80018f4:	2202      	movs	r2, #2
 80018f6:	4906      	ldr	r1, [pc, #24]	; (8001910 <HAL_UART_RxCpltCallback+0x84>)
 80018f8:	4808      	ldr	r0, [pc, #32]	; (800191c <HAL_UART_RxCpltCallback+0x90>)
 80018fa:	f003 f8e2 	bl	8004ac2 <HAL_UART_Receive_IT>
//  			Rx_Buf_Sonic[1]=0;
//  			Rx_Buf_Sonic[2]=0;
//  			HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Sonic,3);
//  			HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
//  		}
  }
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40004400 	.word	0x40004400
 800190c:	20000286 	.word	0x20000286
 8001910:	20000284 	.word	0x20000284
 8001914:	20004098 	.word	0x20004098
 8001918:	200002a0 	.word	0x200002a0
 800191c:	2000417c 	.word	0x2000417c

08001920 <State_Transition>:

uint8_t State_Transition(State* current_state)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	State next_state = Unknow;
 8001928:	2306      	movs	r3, #6
 800192a:	73fb      	strb	r3, [r7, #15]
	switch(state)
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <State_Transition+0x90>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	2b03      	cmp	r3, #3
 8001934:	d82b      	bhi.n	800198e <State_Transition+0x6e>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <State_Transition+0x1c>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001953 	.word	0x08001953
 8001944:	08001967 	.word	0x08001967
 8001948:	0800196d 	.word	0x0800196d
	{
		case Initial:
					next_state = GoStraight;
 800194c:	2304      	movs	r3, #4
 800194e:	73fb      	strb	r3, [r7, #15]
					break;
 8001950:	e01f      	b.n	8001992 <State_Transition+0x72>
		case Line_Search:
					if(distance_flag==0)
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <State_Transition+0x94>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <State_Transition+0x40>
						next_state = Line_Search;
 800195a:	2302      	movs	r3, #2
 800195c:	73fb      	strb	r3, [r7, #15]
					else
						next_state= TurnRight;
					break;
 800195e:	e018      	b.n	8001992 <State_Transition+0x72>
						next_state= TurnRight;
 8001960:	2303      	movs	r3, #3
 8001962:	73fb      	strb	r3, [r7, #15]
					break;
 8001964:	e015      	b.n	8001992 <State_Transition+0x72>
		case TurnRight:
					next_state = GoStraight;
 8001966:	2304      	movs	r3, #4
 8001968:	73fb      	strb	r3, [r7, #15]
					break;
 800196a:	e012      	b.n	8001992 <State_Transition+0x72>
		case GoStraight:
					osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <State_Transition+0x98>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	4618      	mov	r0, r3
 8001976:	f003 feed 	bl	8005754 <osSemaphoreWait>
					if(distance_flag==0)
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <State_Transition+0x94>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <State_Transition+0x68>
						next_state = GoStraight;
 8001982:	2304      	movs	r3, #4
 8001984:	73fb      	strb	r3, [r7, #15]
					else
						next_state = TurnRight;
					break;
 8001986:	e004      	b.n	8001992 <State_Transition+0x72>
						next_state = TurnRight;
 8001988:	2303      	movs	r3, #3
 800198a:	73fb      	strb	r3, [r7, #15]
					break;
 800198c:	e001      	b.n	8001992 <State_Transition+0x72>
		default:
					next_state = Initial;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
	}
	if (next_state == *current_state)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	429a      	cmp	r2, r3
 800199a:	d101      	bne.n	80019a0 <State_Transition+0x80>
		return 1;
 800199c:	2301      	movs	r3, #1
 800199e:	e003      	b.n	80019a8 <State_Transition+0x88>
	else
	{

		*current_state=next_state;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	701a      	strb	r2, [r3, #0]
		return 0;
 80019a6:	2300      	movs	r3, #0
	}
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200040e8 	.word	0x200040e8
 80019b4:	2000029c 	.word	0x2000029c
 80019b8:	20004004 	.word	0x20004004

080019bc <PWM_SET_LEFT>:

void PWM_SET_LEFT(int32_t duty)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da11      	bge.n	80019ee <PWM_SET_LEFT+0x32>
		{
		if (duty <= -2000)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80019d0:	dc02      	bgt.n	80019d8 <PWM_SET_LEFT+0x1c>
			duty = 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e003      	b.n	80019e0 <PWM_SET_LEFT+0x24>
		else
			duty = 2000 + duty;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80019de:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	480f      	ldr	r0, [pc, #60]	; (8001a24 <PWM_SET_LEFT+0x68>)
 80019e8:	f001 f9b6 	bl	8002d58 <HAL_GPIO_WritePin>
 80019ec:	e00a      	b.n	8001a04 <PWM_SET_LEFT+0x48>
		}
	else
		{
			if (duty == 0)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <PWM_SET_LEFT+0x3c>
				duty = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019fe:	4809      	ldr	r0, [pc, #36]	; (8001a24 <PWM_SET_LEFT+0x68>)
 8001a00:	f001 f9aa 	bl	8002d58 <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a0a:	dd02      	ble.n	8001a12 <PWM_SET_LEFT+0x56>
		duty = 2000;
 8001a0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a10:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,duty);
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <PWM_SET_LEFT+0x6c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40020000 	.word	0x40020000
 8001a28:	200040a0 	.word	0x200040a0

08001a2c <PWM_SET_RIGHT>:

void PWM_SET_RIGHT(int32_t duty)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da11      	bge.n	8001a5e <PWM_SET_RIGHT+0x32>
		{
		if (duty <= -2000)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8001a40:	dc02      	bgt.n	8001a48 <PWM_SET_RIGHT+0x1c>
			duty = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	e003      	b.n	8001a50 <PWM_SET_RIGHT+0x24>
		else
			duty = 2000 + duty;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a4e:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a56:	480f      	ldr	r0, [pc, #60]	; (8001a94 <PWM_SET_RIGHT+0x68>)
 8001a58:	f001 f97e 	bl	8002d58 <HAL_GPIO_WritePin>
 8001a5c:	e00a      	b.n	8001a74 <PWM_SET_RIGHT+0x48>
		}
	else
		{
			if (duty == 0)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <PWM_SET_RIGHT+0x3c>
				duty = 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <PWM_SET_RIGHT+0x68>)
 8001a70:	f001 f972 	bl	8002d58 <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a7a:	dd02      	ble.n	8001a82 <PWM_SET_RIGHT+0x56>
		duty = 2000;
 8001a7c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a80:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,duty);
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <PWM_SET_RIGHT+0x6c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	20004008 	.word	0x20004008

08001a9c <StreamTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StreamTask */
void StreamTask(void const * argument)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t Same_State_Flag=0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
	Car_Initial();
 8001aa8:	f7ff fc92 	bl	80013d0 <Car_Initial>
	delay(1000);
 8001aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ab0:	f7ff fcb2 	bl	8001418 <delay>
  /* Infinite loop */
  for(;;)
  {

	  delay(50);
 8001ab4:	2032      	movs	r0, #50	; 0x32
 8001ab6:	f7ff fcaf 	bl	8001418 <delay>
	  //delay(10);
	  //PreviousWakeTime = osKernelSysTick()
	  //osDelayUntil(&PreviousWakeTime = osKernelSysTick(), 500);
	  //HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 8001aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001abe:	4848      	ldr	r0, [pc, #288]	; (8001be0 <StreamTask+0x144>)
 8001ac0:	f001 f963 	bl	8002d8a <HAL_GPIO_TogglePin>
	  Same_State_Flag = State_Transition(&state);
 8001ac4:	4847      	ldr	r0, [pc, #284]	; (8001be4 <StreamTask+0x148>)
 8001ac6:	f7ff ff2b 	bl	8001920 <State_Transition>
 8001aca:	4603      	mov	r3, r0
 8001acc:	73fb      	strb	r3, [r7, #15]
	  if(Same_State_Flag)
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f040 8082 	bne.w	8001bda <StreamTask+0x13e>
		  continue;
	  switch(state)
 8001ad6:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <StreamTask+0x148>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d879      	bhi.n	8001bd4 <StreamTask+0x138>
 8001ae0:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <StreamTask+0x4c>)
 8001ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae6:	bf00      	nop
 8001ae8:	08001afd 	.word	0x08001afd
 8001aec:	08001b17 	.word	0x08001b17
 8001af0:	08001b37 	.word	0x08001b37
 8001af4:	08001b97 	.word	0x08001b97
 8001af8:	08001bd1 	.word	0x08001bd1
	  {
	  case Initial:
		  	  	  	  	  state= Idle;
 8001afc:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <StreamTask+0x148>)
 8001afe:	2205      	movs	r2, #5
 8001b00:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8001b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b06:	f7ff fc87 	bl	8001418 <delay>
		  	  	  	      state= Initial;
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <StreamTask+0x148>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  Car_Initial();
 8001b10:	f7ff fc5e 	bl	80013d0 <Car_Initial>
		  	  	  	  	  break;
 8001b14:	e062      	b.n	8001bdc <StreamTask+0x140>
	  case Line_Search:
		  	  	  	  	  state= Idle;
 8001b16:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <StreamTask+0x148>)
 8001b18:	2205      	movs	r2, #5
 8001b1a:	701a      	strb	r2, [r3, #0]
		  		  	  	  delay(500);
 8001b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b20:	f7ff fc7a 	bl	8001418 <delay>
		  		  	  	  state= Line_Search;
 8001b24:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <StreamTask+0x148>)
 8001b26:	2202      	movs	r2, #2
 8001b28:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  vTaskResume(PIDCameraHandle);
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <StreamTask+0x14c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f004 ffae 	bl	8006a90 <vTaskResume>
		  	  	  	  	  //vTaskResume(GyroReceiveHandle);
		  	  	  	  	  break;
 8001b34:	e052      	b.n	8001bdc <StreamTask+0x140>
	  case TurnRight:
	  	  	  	  	  	  //state= Idle;
	  	  	  	  	  	  Car_Stop();
 8001b36:	f7ff fc65 	bl	8001404 <Car_Stop>
	  	  	  	  	  	  vTaskSuspend(PIDCameraHandle);
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <StreamTask+0x14c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fee2 	bl	8006908 <vTaskSuspend>
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <StreamTask+0x150>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f004 fedd 	bl	8006908 <vTaskSuspend>
	  	  	  	  	  	  camera_recieve_IT_flag=0;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <StreamTask+0x154>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  delay(50);
 8001b54:	2032      	movs	r0, #50	; 0x32
 8001b56:	f7ff fc5f 	bl	8001418 <delay>
	  	  	  	  	  	  state= TurnRight;
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <StreamTask+0x148>)
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	701a      	strb	r2, [r3, #0]
	  	  	  	  	  	  distance_flag=0;
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <StreamTask+0x158>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <StreamTask+0x15c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 ff90 	bl	8006a90 <vTaskResume>
		  	  	  	  	  PID_Turning(-90,1.5);
 8001b70:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8001b74:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001bfc <StreamTask+0x160>
 8001b78:	f7ff fcc6 	bl	8001508 <PID_Turning>
		  	  	  	  	  vTaskSuspend(GyroReceiveHandle);
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <StreamTask+0x15c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f004 fec1 	bl	8006908 <vTaskSuspend>
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <StreamTask+0x150>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 ff80 	bl	8006a90 <vTaskResume>
		  	  	  	  	  Car_Stop();
 8001b90:	f7ff fc38 	bl	8001404 <Car_Stop>
		  		  	  	  break;
 8001b94:	e022      	b.n	8001bdc <StreamTask+0x140>
	  case GoStraight:
		  	  	  	  	  //state= Idle;
		  	  	  	  	  vTaskSuspend(PIDCameraHandle);
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <StreamTask+0x14c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 feb4 	bl	8006908 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <StreamTask+0x154>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8001ba6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001baa:	f7ff fc35 	bl	8001418 <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  critical_distance.front=350;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <StreamTask+0x164>)
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <StreamTask+0x168>)
 8001bb2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <StreamTask+0x150>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 ff69 	bl	8006a90 <vTaskResume>
		  	  	  	  	  PWM_SET_LEFT(PWM_Mid);
 8001bbe:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001bc2:	f7ff fefb 	bl	80019bc <PWM_SET_LEFT>
		  	  	  	  	  PWM_SET_RIGHT(PWM_Mid);
 8001bc6:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001bca:	f7ff ff2f 	bl	8001a2c <PWM_SET_RIGHT>
		  	  	  	  	  //osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
		  	  	  	  	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
		  	  	  	  	  break;
 8001bce:	e005      	b.n	8001bdc <StreamTask+0x140>
	  case Idle:
		  	  	  	  	  Car_Stop();
 8001bd0:	f7ff fc18 	bl	8001404 <Car_Stop>
	  default :
		  	  	  	  	  Car_Initial();
 8001bd4:	f7ff fbfc 	bl	80013d0 <Car_Initial>
 8001bd8:	e76c      	b.n	8001ab4 <StreamTask+0x18>
		  continue;
 8001bda:	bf00      	nop
	  delay(50);
 8001bdc:	e76a      	b.n	8001ab4 <StreamTask+0x18>
 8001bde:	bf00      	nop
 8001be0:	40021400 	.word	0x40021400
 8001be4:	200040e8 	.word	0x200040e8
 8001be8:	20004094 	.word	0x20004094
 8001bec:	2000409c 	.word	0x2000409c
 8001bf0:	200002a0 	.word	0x200002a0
 8001bf4:	2000029c 	.word	0x2000029c
 8001bf8:	200041c0 	.word	0x200041c0
 8001bfc:	c2b40000 	.word	0xc2b40000
 8001c00:	20000294 	.word	0x20000294
 8001c04:	43af0000 	.word	0x43af0000

08001c08 <PIDCameraTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PIDCameraTask */
void PIDCameraTask(void const * argument)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PIDCameraTask */
		vTaskSuspend(PIDCameraHandle);
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <PIDCameraTask+0x184>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 fe77 	bl	8006908 <vTaskSuspend>
		float PID_Error_Last=0;
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
		float PID_Output=0;                    // PWM输出占空
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
		float Error = 0, Error_Total=0;
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
		int32_t PID_Input=0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
		camera_recieve_IT_flag=1;
 8001c36:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <PIDCameraTask+0x188>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4955      	ldr	r1, [pc, #340]	; (8001d94 <PIDCameraTask+0x18c>)
 8001c40:	4855      	ldr	r0, [pc, #340]	; (8001d98 <PIDCameraTask+0x190>)
 8001c42:	f002 ff3e 	bl	8004ac2 <HAL_UART_Receive_IT>
	  /* Infinite loop */
	  for(;;)
	  {
		  if(state == Idle)
 8001c46:	4b55      	ldr	r3, [pc, #340]	; (8001d9c <PIDCameraTask+0x194>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d105      	bne.n	8001c5a <PIDCameraTask+0x52>
		  {
			  vTaskSuspend(PIDCameraHandle);
 8001c4e:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <PIDCameraTask+0x184>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fe58 	bl	8006908 <vTaskSuspend>
			  continue;
 8001c58:	e097      	b.n	8001d8a <PIDCameraTask+0x182>
		  }
//		  	 if(camera_ready_flag==0)
//		  		 continue;
//		  	 camera_ready_flag=0;
		  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8001c5a:	4b51      	ldr	r3, [pc, #324]	; (8001da0 <PIDCameraTask+0x198>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fd76 	bl	8005754 <osSemaphoreWait>
		  	 HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 8001c68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c6c:	484d      	ldr	r0, [pc, #308]	; (8001da4 <PIDCameraTask+0x19c>)
 8001c6e:	f001 f88c 	bl	8002d8a <HAL_GPIO_TogglePin>
		  	 //delay(10);
		  	 //Data=0x03E8;
		  	 //PID_Input=-300;
		  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <PIDCameraTask+0x1a0>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c7c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001c80:	60fb      	str	r3, [r7, #12]
		  	 if (PID_Input == -1000)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001c88:	d07e      	beq.n	8001d88 <PIDCameraTask+0x180>
		  		 continue;
		  	 Error = PID_Target - PID_Input;		  // 偏差 = 目标 - 实际
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <PIDCameraTask+0x1a4>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9e:	edc7 7a04 	vstr	s15, [r7, #16]
		  	 PID_Output = Kp * Error  +
 8001ca2:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <PIDCameraTask+0x1a8>)
 8001ca4:	ed93 7a00 	vldr	s14, [r3]
 8001ca8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cac:	ee27 7a27 	vmul.f32	s14, s14, s15
		  				  Kd * (Error - PID_Error_Last ) +
 8001cb0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001cb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cb8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <PIDCameraTask+0x1ac>)
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
		  	 PID_Output = Kp * Error  +
 8001cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cca:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd2:	edc7 7a06 	vstr	s15, [r7, #24]
		  				  Error_Total;
		  	 Error_Total=Error_Total+Ki*Error;
 8001cd6:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <PIDCameraTask+0x1b0>)
 8001cd8:	ed93 7a00 	vldr	s14, [r3]
 8001cdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	edc7 7a05 	vstr	s15, [r7, #20]
		  	 PID_Error_Last = Error;
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	61fb      	str	r3, [r7, #28]
		  	 if(PID_Output < 0)
 8001cf4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	d508      	bpl.n	8001d14 <PIDCameraTask+0x10c>
		  		 PID_Output-=PWM_Lowest;
 8001d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d06:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001dbc <PIDCameraTask+0x1b4>
 8001d0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d0e:	edc7 7a06 	vstr	s15, [r7, #24]
 8001d12:	e007      	b.n	8001d24 <PIDCameraTask+0x11c>
		  	 else
		  		 PID_Output+=PWM_Lowest;
 8001d14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d18:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001dbc <PIDCameraTask+0x1b4>
 8001d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d20:	edc7 7a06 	vstr	s15, [r7, #24]
		     if(PID_Output > PWM_Higest-PWM_Mid) 			PID_Output =	2000-PWM_Mid;	    // 限幅
 8001d24:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d28:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001dbc <PIDCameraTask+0x1b4>
 8001d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	dd02      	ble.n	8001d3c <PIDCameraTask+0x134>
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <PIDCameraTask+0x1b8>)
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	e00a      	b.n	8001d52 <PIDCameraTask+0x14a>
		     else if(PID_Output <-(PWM_Higest-PWM_Mid)) 	PID_Output = 	-(2000-PWM_Mid);
 8001d3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d40:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001dc4 <PIDCameraTask+0x1bc>
 8001d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	d501      	bpl.n	8001d52 <PIDCameraTask+0x14a>
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <PIDCameraTask+0x1c0>)
 8001d50:	61bb      	str	r3, [r7, #24]
		     taskENTER_CRITICAL();
 8001d52:	f005 fe67 	bl	8007a24 <vPortEnterCritical>
		     PWM_SET_RIGHT ((PWM_Mid + (int32_t) PID_Output));
 8001d56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5e:	ee17 3a90 	vmov	r3, s15
 8001d62:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fe60 	bl	8001a2c <PWM_SET_RIGHT>
		     PWM_SET_LEFT  ((PWM_Mid - (int32_t) PID_Output));
 8001d6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d74:	ee17 3a90 	vmov	r3, s15
 8001d78:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fe1d 	bl	80019bc <PWM_SET_LEFT>
		     taskEXIT_CRITICAL();
 8001d82:	f005 fe7f 	bl	8007a84 <vPortExitCritical>
 8001d86:	e75e      	b.n	8001c46 <PIDCameraTask+0x3e>
		  		 continue;
 8001d88:	bf00      	nop
		  if(state == Idle)
 8001d8a:	e75c      	b.n	8001c46 <PIDCameraTask+0x3e>
 8001d8c:	20004094 	.word	0x20004094
 8001d90:	200002a0 	.word	0x200002a0
 8001d94:	20000284 	.word	0x20000284
 8001d98:	2000417c 	.word	0x2000417c
 8001d9c:	200040e8 	.word	0x200040e8
 8001da0:	20004098 	.word	0x20004098
 8001da4:	40021400 	.word	0x40021400
 8001da8:	20000286 	.word	0x20000286
 8001dac:	200002a4 	.word	0x200002a4
 8001db0:	20000000 	.word	0x20000000
 8001db4:	200002ac 	.word	0x200002ac
 8001db8:	200002a8 	.word	0x200002a8
 8001dbc:	43c80000 	.word	0x43c80000
 8001dc0:	44af0000 	.word	0x44af0000
 8001dc4:	c3c80000 	.word	0xc3c80000
 8001dc8:	c4af0000 	.word	0xc4af0000

08001dcc <GyroReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroReceiveTask */
void GyroReceiveTask(void const * argument)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroReceiveTask */
	vTaskSuspend(GyroReceiveHandle);
 8001dd4:	4ba1      	ldr	r3, [pc, #644]	; (800205c <GyroReceiveTask+0x290>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 fd95 	bl	8006908 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  delay(100);
 8001dde:	2064      	movs	r0, #100	; 0x64
 8001de0:	f7ff fb1a 	bl	8001418 <delay>
	  uint8_t AxH=0, AxL=0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  int16_t Ax=0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	853b      	strh	r3, [r7, #40]	; 0x28

	  uint8_t AyH=0,AyL=0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  int16_t Ay=0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	84bb      	strh	r3, [r7, #36]	; 0x24

	  uint8_t YawH=0,YawL=0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  int16_t Yaw=0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	843b      	strh	r3, [r7, #32]

	  uint8_t sum=0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int i=0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
	  int h=0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint8_t GyroData[21]={0};
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	741a      	strb	r2, [r3, #16]
	  taskENTER_CRITICAL();
 8001e36:	f005 fdf5 	bl	8007a24 <vPortEnterCritical>
	  HAL_UART_Receive(&huart3, (uint8_t *) &GyroData, sizeof(GyroData), 300);
 8001e3a:	f107 0108 	add.w	r1, r7, #8
 8001e3e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e42:	2215      	movs	r2, #21
 8001e44:	4886      	ldr	r0, [pc, #536]	; (8002060 <GyroReceiveTask+0x294>)
 8001e46:	f002 fd9a 	bl	800497e <HAL_UART_Receive>
	  taskEXIT_CRITICAL();
 8001e4a:	f005 fe1b 	bl	8007a84 <vPortExitCritical>
	  while(h<14)
 8001e4e:	e009      	b.n	8001e64 <GyroReceiveTask+0x98>
	  {
		  if(GyroData[h]==0x55)
 8001e50:	f107 0208 	add.w	r2, r7, #8
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b55      	cmp	r3, #85	; 0x55
 8001e5c:	d006      	beq.n	8001e6c <GyroReceiveTask+0xa0>
			  break;
		  h++;
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	3301      	adds	r3, #1
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while(h<14)
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	2b0d      	cmp	r3, #13
 8001e68:	ddf2      	ble.n	8001e50 <GyroReceiveTask+0x84>
 8001e6a:	e000      	b.n	8001e6e <GyroReceiveTask+0xa2>
			  break;
 8001e6c:	bf00      	nop
	  }
	  if(GyroData[h]!=0x55)
 8001e6e:	f107 0208 	add.w	r2, r7, #8
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b55      	cmp	r3, #85	; 0x55
 8001e7a:	f040 80e9 	bne.w	8002050 <GyroReceiveTask+0x284>
		  continue;
	  if(GyroData[h+1]!=0x53)
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	3301      	adds	r3, #1
 8001e82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e86:	4413      	add	r3, r2
 8001e88:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001e8c:	2b53      	cmp	r3, #83	; 0x53
 8001e8e:	f040 80e1 	bne.w	8002054 <GyroReceiveTask+0x288>
		  continue;
	  i=0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
	  sum=0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  while(i<10)
 8001e9c:	e00f      	b.n	8001ebe <GyroReceiveTask+0xf2>
	  {
		  sum=sum+GyroData[h+i];
 8001e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8001eae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  i++;
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eba:	3301      	adds	r3, #1
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
	  while(i<10)
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	ddec      	ble.n	8001e9e <GyroReceiveTask+0xd2>
	  }
	  	  if (sum!=GyroData[h+10])
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	330a      	adds	r3, #10
 8001ec8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ecc:	4413      	add	r3, r2
 8001ece:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001ed2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	f040 80be 	bne.w	8002058 <GyroReceiveTask+0x28c>
	  		  continue;
	  AxL=GyroData[h+2];
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	3302      	adds	r3, #2
 8001ee0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001eea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  AxH=GyroData[h+3];
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  AyL=GyroData[h+4];
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	3304      	adds	r3, #4
 8001f04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f08:	4413      	add	r3, r2
 8001f0a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  AyH=GyroData[h+5];
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	3305      	adds	r3, #5
 8001f16:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  YawL=GyroData[h+6];
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	3306      	adds	r3, #6
 8001f28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001f32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  YawH=GyroData[h+7];
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	3307      	adds	r3, #7
 8001f3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f3e:	4413      	add	r3, r2
 8001f40:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  Ax=((((int16_t) AxH)<<8) | AxL);
 8001f48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	853b      	strh	r3, [r7, #40]	; 0x28
	  Ay=((((int16_t) AyH)<<8) | AyL);
 8001f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	84bb      	strh	r3, [r7, #36]	; 0x24
	  Yaw=((((int16_t) YawH)<<8) | YawL);
 8001f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	843b      	strh	r3, [r7, #32]

	  //taskENTER_CRITICAL();
	  //HAL_UART_Transmit(&huart1, (uint8_t *) &Yaw, sizeof(Yaw), 0xFFFF);
	  //taskEXIT_CRITICAL();
	  angle.x=(((float)Ax) / 32768.0 * 180.0);
 8001f7e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8a:	ee17 0a90 	vmov	r0, s15
 8001f8e:	f7fe fa83 	bl	8000498 <__aeabi_f2d>
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <GyroReceiveTask+0x298>)
 8001f98:	f7fe fc00 	bl	800079c <__aeabi_ddiv>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <GyroReceiveTask+0x29c>)
 8001faa:	f7fe facd 	bl	8000548 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fcd9 	bl	800096c <__aeabi_d2f>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a2b      	ldr	r2, [pc, #172]	; (800206c <GyroReceiveTask+0x2a0>)
 8001fbe:	6013      	str	r3, [r2, #0]
	  angle.y=(((float)Ay) / 32768.0 * 180.0);
 8001fc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fcc:	ee17 0a90 	vmov	r0, s15
 8001fd0:	f7fe fa62 	bl	8000498 <__aeabi_f2d>
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <GyroReceiveTask+0x298>)
 8001fda:	f7fe fbdf 	bl	800079c <__aeabi_ddiv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <GyroReceiveTask+0x29c>)
 8001fec:	f7fe faac 	bl	8000548 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7fe fcb8 	bl	800096c <__aeabi_d2f>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	; (800206c <GyroReceiveTask+0x2a0>)
 8002000:	6053      	str	r3, [r2, #4]
	  angle.z=(((float)Yaw) / 32768.0 * 180.0);
 8002002:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	ee17 0a90 	vmov	r0, s15
 8002012:	f7fe fa41 	bl	8000498 <__aeabi_f2d>
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <GyroReceiveTask+0x298>)
 800201c:	f7fe fbbe 	bl	800079c <__aeabi_ddiv>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <GyroReceiveTask+0x29c>)
 800202e:	f7fe fa8b 	bl	8000548 <__aeabi_dmul>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fc97 	bl	800096c <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <GyroReceiveTask+0x2a0>)
 8002042:	6093      	str	r3, [r2, #8]

	  //gyro_ready_flag=1;
	  //xSemaphoreGive(GyroReadySemHandle)
	  osSemaphoreRelease(GyroReadySemHandle);
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <GyroReceiveTask+0x2a4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fbd1 	bl	80057f0 <osSemaphoreRelease>
 800204e:	e6c6      	b.n	8001dde <GyroReceiveTask+0x12>
		  continue;
 8002050:	bf00      	nop
 8002052:	e6c4      	b.n	8001dde <GyroReceiveTask+0x12>
		  continue;
 8002054:	bf00      	nop
 8002056:	e6c2      	b.n	8001dde <GyroReceiveTask+0x12>
	  		  continue;
 8002058:	bf00      	nop
  {
 800205a:	e6c0      	b.n	8001dde <GyroReceiveTask+0x12>
 800205c:	200041c0 	.word	0x200041c0
 8002060:	20004050 	.word	0x20004050
 8002064:	40e00000 	.word	0x40e00000
 8002068:	40668000 	.word	0x40668000
 800206c:	20000288 	.word	0x20000288
 8002070:	20004178 	.word	0x20004178

08002074 <DistanceCheckTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DistanceCheckTask */
void DistanceCheckTask(void const * argument)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DistanceCheckTask */
	vTaskSuspend(DistanceCheckHandle);
 800207c:	4b26      	ldr	r3, [pc, #152]	; (8002118 <DistanceCheckTask+0xa4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f004 fc41 	bl	8006908 <vTaskSuspend>
//	  if(state == Idle)
//	  	  {
//	  	  	  vTaskSuspend(DistanceCheckHandle);
//	  	  	  continue;
//	  	  }
	  Distance distance={0.0,0.0};
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
	  Distance temp=Ultrasonic_Feedback();
 8002092:	f7ff fb9f 	bl	80017d4 <Ultrasonic_Feedback>
 8002096:	eeb0 7a40 	vmov.f32	s14, s0
 800209a:	eef0 7a60 	vmov.f32	s15, s1
 800209e:	ed87 7a03 	vstr	s14, [r7, #12]
 80020a2:	edc7 7a04 	vstr	s15, [r7, #16]

	  //Distance temp=distance;
	  for(int i=0;i<1;i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e00d      	b.n	80020c8 <DistanceCheckTask+0x54>
	  {
		  distance.front+=temp.front;
 80020ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80020b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b8:	edc7 7a05 	vstr	s15, [r7, #20]
	  	  delay(100);
 80020bc:	2064      	movs	r0, #100	; 0x64
 80020be:	f7ff f9ab 	bl	8001418 <delay>
	  for(int i=0;i<1;i++)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3301      	adds	r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	ddee      	ble.n	80020ac <DistanceCheckTask+0x38>
	  }
	  distance.front/=1;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	617b      	str	r3, [r7, #20]
	  if(distance.front < critical_distance.front)
 80020d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <DistanceCheckTask+0xa8>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	d50e      	bpl.n	8002104 <DistanceCheckTask+0x90>
	  {
		  distance_flag=1;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <DistanceCheckTask+0xac>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
		  osSemaphoreRelease(CriticalDistanceSemHandle);
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <DistanceCheckTask+0xb0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 fb7d 	bl	80057f0 <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 80020f6:	2201      	movs	r2, #1
 80020f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020fc:	480a      	ldr	r0, [pc, #40]	; (8002128 <DistanceCheckTask+0xb4>)
 80020fe:	f000 fe2b 	bl	8002d58 <HAL_GPIO_WritePin>
 8002102:	e7c0      	b.n	8002086 <DistanceCheckTask+0x12>
	  }
	  else
	  {
		  distance_flag=0;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <DistanceCheckTask+0xac>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <DistanceCheckTask+0xb4>)
 8002112:	f000 fe21 	bl	8002d58 <HAL_GPIO_WritePin>
  {
 8002116:	e7b6      	b.n	8002086 <DistanceCheckTask+0x12>
 8002118:	2000409c 	.word	0x2000409c
 800211c:	20000294 	.word	0x20000294
 8002120:	2000029c 	.word	0x2000029c
 8002124:	20004004 	.word	0x20004004
 8002128:	40021400 	.word	0x40021400

0800212c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800213e:	f000 fadb 	bl	80026f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40010000 	.word	0x40010000

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002158:	e7fe      	b.n	8002158 <Error_Handler+0x8>
	...

0800215c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_MspInit+0x54>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_MspInit+0x54>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_MspInit+0x54>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_MspInit+0x54>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_MspInit+0x54>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_MspInit+0x54>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	210f      	movs	r1, #15
 800219e:	f06f 0001 	mvn.w	r0, #1
 80021a2:	f000 fb81 	bl	80028a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a15      	ldr	r2, [pc, #84]	; (8002218 <HAL_TIM_Base_MspInit+0x64>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10e      	bne.n	80021e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_TIM_Base_MspInit+0x68>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <HAL_TIM_Base_MspInit+0x68>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_TIM_Base_MspInit+0x68>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021e2:	e012      	b.n	800220a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <HAL_TIM_Base_MspInit+0x6c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10d      	bne.n	800220a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_TIM_Base_MspInit+0x68>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a09      	ldr	r2, [pc, #36]	; (800221c <HAL_TIM_Base_MspInit+0x68>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_TIM_Base_MspInit+0x68>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40000400 	.word	0x40000400
 800221c:	40023800 	.word	0x40023800
 8002220:	40000800 	.word	0x40000800

08002224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <HAL_TIM_MspPostInit+0xb0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d11e      	bne.n	8002284 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = leftPWM_Pin;
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002272:	2302      	movs	r3, #2
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftPWM_GPIO_Port, &GPIO_InitStruct);
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4619      	mov	r1, r3
 800227c:	4817      	ldr	r0, [pc, #92]	; (80022dc <HAL_TIM_MspPostInit+0xb8>)
 800227e:	f000 fbcf 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002282:	e023      	b.n	80022cc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_TIM_MspPostInit+0xbc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d11e      	bne.n	80022cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 8002298:	f043 0308 	orr.w	r3, r3, #8
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightPWM_Pin;
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022bc:	2302      	movs	r3, #2
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightPWM_GPIO_Port, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <HAL_TIM_MspPostInit+0xc0>)
 80022c8:	f000 fbaa 	bl	8002a20 <HAL_GPIO_Init>
}
 80022cc:	bf00      	nop
 80022ce:	3728      	adds	r7, #40	; 0x28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40000800 	.word	0x40000800
 80022e4:	40020c00 	.word	0x40020c00

080022e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b090      	sub	sp, #64	; 0x40
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a7c      	ldr	r2, [pc, #496]	; (80024f8 <HAL_UART_MspInit+0x210>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d14b      	bne.n	80023a2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 800230e:	4b7b      	ldr	r3, [pc, #492]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a7a      	ldr	r2, [pc, #488]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b78      	ldr	r3, [pc, #480]	; (80024fc <HAL_UART_MspInit+0x214>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	4b74      	ldr	r3, [pc, #464]	; (80024fc <HAL_UART_MspInit+0x214>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a73      	ldr	r2, [pc, #460]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b71      	ldr	r3, [pc, #452]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a6c      	ldr	r2, [pc, #432]	; (80024fc <HAL_UART_MspInit+0x214>)
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800235e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002368:	2301      	movs	r3, #1
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002370:	2308      	movs	r3, #8
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	4861      	ldr	r0, [pc, #388]	; (8002500 <HAL_UART_MspInit+0x218>)
 800237c:	f000 fb50 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002380:	2304      	movs	r3, #4
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002388:	2301      	movs	r3, #1
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002390:	2308      	movs	r3, #8
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002398:	4619      	mov	r1, r3
 800239a:	485a      	ldr	r0, [pc, #360]	; (8002504 <HAL_UART_MspInit+0x21c>)
 800239c:	f000 fb40 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023a0:	e0a6      	b.n	80024f0 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_UART_MspInit+0x220>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d135      	bne.n	8002418 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	4b52      	ldr	r3, [pc, #328]	; (80024fc <HAL_UART_MspInit+0x214>)
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	4a51      	ldr	r2, [pc, #324]	; (80024fc <HAL_UART_MspInit+0x214>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	6453      	str	r3, [r2, #68]	; 0x44
 80023bc:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <HAL_UART_MspInit+0x214>)
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <HAL_UART_MspInit+0x214>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4a4a      	ldr	r2, [pc, #296]	; (80024fc <HAL_UART_MspInit+0x214>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6313      	str	r3, [r2, #48]	; 0x30
 80023d8:	4b48      	ldr	r3, [pc, #288]	; (80024fc <HAL_UART_MspInit+0x214>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f6:	2307      	movs	r3, #7
 80023f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fe:	4619      	mov	r1, r3
 8002400:	4842      	ldr	r0, [pc, #264]	; (800250c <HAL_UART_MspInit+0x224>)
 8002402:	f000 fb0d 	bl	8002a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2105      	movs	r1, #5
 800240a:	2025      	movs	r0, #37	; 0x25
 800240c:	f000 fa4c 	bl	80028a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002410:	2025      	movs	r0, #37	; 0x25
 8002412:	f000 fa65 	bl	80028e0 <HAL_NVIC_EnableIRQ>
}
 8002416:	e06b      	b.n	80024f0 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a3c      	ldr	r2, [pc, #240]	; (8002510 <HAL_UART_MspInit+0x228>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d134      	bne.n	800248c <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	4b35      	ldr	r3, [pc, #212]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a34      	ldr	r2, [pc, #208]	; (80024fc <HAL_UART_MspInit+0x214>)
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b32      	ldr	r3, [pc, #200]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a2d      	ldr	r2, [pc, #180]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_UART_MspInit+0x214>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800245a:	230c      	movs	r3, #12
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800246a:	2307      	movs	r3, #7
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002472:	4619      	mov	r1, r3
 8002474:	4825      	ldr	r0, [pc, #148]	; (800250c <HAL_UART_MspInit+0x224>)
 8002476:	f000 fad3 	bl	8002a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2105      	movs	r1, #5
 800247e:	2026      	movs	r0, #38	; 0x26
 8002480:	f000 fa12 	bl	80028a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002484:	2026      	movs	r0, #38	; 0x26
 8002486:	f000 fa2b 	bl	80028e0 <HAL_NVIC_EnableIRQ>
}
 800248a:	e031      	b.n	80024f0 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_UART_MspInit+0x22c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12c      	bne.n	80024f0 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_UART_MspInit+0x214>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a17      	ldr	r2, [pc, #92]	; (80024fc <HAL_UART_MspInit+0x214>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_UART_MspInit+0x214>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_UART_MspInit+0x214>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_UART_MspInit+0x214>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_UART_MspInit+0x214>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e0:	2307      	movs	r3, #7
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e8:	4619      	mov	r1, r3
 80024ea:	480b      	ldr	r0, [pc, #44]	; (8002518 <HAL_UART_MspInit+0x230>)
 80024ec:	f000 fa98 	bl	8002a20 <HAL_GPIO_Init>
}
 80024f0:	bf00      	nop
 80024f2:	3740      	adds	r7, #64	; 0x40
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40005000 	.word	0x40005000
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40011000 	.word	0x40011000
 800250c:	40020000 	.word	0x40020000
 8002510:	40004400 	.word	0x40004400
 8002514:	40004800 	.word	0x40004800
 8002518:	40020400 	.word	0x40020400

0800251c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800252c:	2200      	movs	r2, #0
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	2019      	movs	r0, #25
 8002532:	f000 f9b9 	bl	80028a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002536:	2019      	movs	r0, #25
 8002538:	f000 f9d2 	bl	80028e0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <HAL_InitTick+0xa4>)
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_InitTick+0xa4>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6453      	str	r3, [r2, #68]	; 0x44
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_InitTick+0xa4>)
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002558:	f107 0210 	add.w	r2, r7, #16
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f001 f8ac 	bl	80036c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002568:	f001 f896 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 800256c:	4603      	mov	r3, r0
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_InitTick+0xa8>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	3b01      	subs	r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_InitTick+0xac>)
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <HAL_InitTick+0xb0>)
 8002584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_InitTick+0xac>)
 8002588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800258c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_InitTick+0xac>)
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_InitTick+0xac>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_InitTick+0xac>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80025a0:	4809      	ldr	r0, [pc, #36]	; (80025c8 <HAL_InitTick+0xac>)
 80025a2:	f001 f8da 	bl	800375a <HAL_TIM_Base_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d104      	bne.n	80025b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80025ac:	4806      	ldr	r0, [pc, #24]	; (80025c8 <HAL_InitTick+0xac>)
 80025ae:	f001 f923 	bl	80037f8 <HAL_TIM_Base_Start_IT>
 80025b2:	4603      	mov	r3, r0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3730      	adds	r7, #48	; 0x30
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	431bde83 	.word	0x431bde83
 80025c8:	200041c4 	.word	0x200041c4
 80025cc:	40010000 	.word	0x40010000

080025d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80025d4:	f001 f8a6 	bl	8003724 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <NMI_Handler+0x8>

080025da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <HardFault_Handler+0x4>

080025e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <MemManage_Handler+0x4>

080025e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ea:	e7fe      	b.n	80025ea <BusFault_Handler+0x4>

080025ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <UsageFault_Handler+0x4>

080025f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002606:	f001 fa89 	bl	8003b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200041c4 	.word	0x200041c4

08002614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <USART1_IRQHandler+0x10>)
 800261a:	f002 fa83 	bl	8004b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20004130 	.word	0x20004130

08002628 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <USART2_IRQHandler+0x10>)
 800262e:	f002 fa79 	bl	8004b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000417c 	.word	0x2000417c

0800263c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <SystemInit+0x20>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <SystemInit+0x20>)
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800264c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002664:	480d      	ldr	r0, [pc, #52]	; (800269c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002666:	490e      	ldr	r1, [pc, #56]	; (80026a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800267c:	4c0b      	ldr	r4, [pc, #44]	; (80026ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800268a:	f7ff ffd7 	bl	800263c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800268e:	f005 fcd5 	bl	800803c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002692:	f7fe fb51 	bl	8000d38 <main>
  bx  lr    
 8002696:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80026a4:	0800819c 	.word	0x0800819c
  ldr r2, =_sbss
 80026a8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80026ac:	20004210 	.word	0x20004210

080026b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <ADC_IRQHandler>
	...

080026b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_Init+0x40>)
 80026be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_Init+0x40>)
 80026ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_Init+0x40>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026dc:	2003      	movs	r0, #3
 80026de:	f000 f8d8 	bl	8002892 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7ff ff1a 	bl	800251c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e8:	f7ff fd38 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	2000000c 	.word	0x2000000c
 800271c:	2000420c 	.word	0x2000420c

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	2000420c 	.word	0x2000420c

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4907      	ldr	r1, [pc, #28]	; (80027d4 <__NVIC_EnableIRQ+0x38>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff4c 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ba:	f7ff ff61 	bl	8002780 <__NVIC_GetPriorityGrouping>
 80028be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	6978      	ldr	r0, [r7, #20]
 80028c6:	f7ff ffb1 	bl	800282c <NVIC_EncodePriority>
 80028ca:	4602      	mov	r2, r0
 80028cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff80 	bl	80027d8 <__NVIC_SetPriority>
}
 80028d8:	bf00      	nop
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff54 	bl	800279c <__NVIC_EnableIRQ>
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800290a:	f7ff ff09 	bl	8002720 <HAL_GetTick>
 800290e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d008      	beq.n	800292e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e052      	b.n	80029d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0216 	bic.w	r2, r2, #22
 800293c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <HAL_DMA_Abort+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0208 	bic.w	r2, r2, #8
 800296c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297e:	e013      	b.n	80029a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002980:	f7ff fece 	bl	8002720 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b05      	cmp	r3, #5
 800298c:	d90c      	bls.n	80029a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e015      	b.n	80029d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e4      	bne.n	8002980 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	223f      	movs	r2, #63	; 0x3f
 80029bc:	409a      	lsls	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d004      	beq.n	80029fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00c      	b.n	8002a14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2205      	movs	r2, #5
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e16b      	b.n	8002d14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 815a 	bne.w	8002d0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d005      	beq.n	8002a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d130      	bne.n	8002ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0201 	and.w	r2, r3, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d017      	beq.n	8002b10 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d123      	bne.n	8002b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	69b9      	ldr	r1, [r7, #24]
 8002b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80b4 	beq.w	8002d0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <HAL_GPIO_Init+0x30c>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a5f      	ldr	r2, [pc, #380]	; (8002d2c <HAL_GPIO_Init+0x30c>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <HAL_GPIO_Init+0x30c>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc2:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_GPIO_Init+0x310>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a52      	ldr	r2, [pc, #328]	; (8002d34 <HAL_GPIO_Init+0x314>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d02b      	beq.n	8002c46 <HAL_GPIO_Init+0x226>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a51      	ldr	r2, [pc, #324]	; (8002d38 <HAL_GPIO_Init+0x318>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d025      	beq.n	8002c42 <HAL_GPIO_Init+0x222>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a50      	ldr	r2, [pc, #320]	; (8002d3c <HAL_GPIO_Init+0x31c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <HAL_GPIO_Init+0x21e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4f      	ldr	r2, [pc, #316]	; (8002d40 <HAL_GPIO_Init+0x320>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d019      	beq.n	8002c3a <HAL_GPIO_Init+0x21a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4e      	ldr	r2, [pc, #312]	; (8002d44 <HAL_GPIO_Init+0x324>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x216>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4d      	ldr	r2, [pc, #308]	; (8002d48 <HAL_GPIO_Init+0x328>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x212>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4c      	ldr	r2, [pc, #304]	; (8002d4c <HAL_GPIO_Init+0x32c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x20e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4b      	ldr	r2, [pc, #300]	; (8002d50 <HAL_GPIO_Init+0x330>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x20a>
 8002c26:	2307      	movs	r3, #7
 8002c28:	e00e      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	e00c      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c2e:	2306      	movs	r3, #6
 8002c30:	e00a      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c32:	2305      	movs	r3, #5
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c36:	2304      	movs	r3, #4
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c46:	2300      	movs	r3, #0
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	4093      	lsls	r3, r2
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c58:	4935      	ldr	r1, [pc, #212]	; (8002d30 <HAL_GPIO_Init+0x310>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c8a:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c90:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb4:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cde:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	f67f ae90 	bls.w	8002a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40021400 	.word	0x40021400
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	40021c00 	.word	0x40021c00
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d9c:	887a      	ldrh	r2, [r7, #2]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4013      	ands	r3, r2
 8002da2:	041a      	lsls	r2, r3, #16
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	400b      	ands	r3, r1
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e264      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d075      	beq.n	8002eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dde:	4ba3      	ldr	r3, [pc, #652]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d00c      	beq.n	8002e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dea:	4ba0      	ldr	r3, [pc, #640]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d112      	bne.n	8002e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df6:	4b9d      	ldr	r3, [pc, #628]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e02:	d10b      	bne.n	8002e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	4b99      	ldr	r3, [pc, #612]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d05b      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x108>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d157      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e23f      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e24:	d106      	bne.n	8002e34 <HAL_RCC_OscConfig+0x74>
 8002e26:	4b91      	ldr	r3, [pc, #580]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a90      	ldr	r2, [pc, #576]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e01d      	b.n	8002e70 <HAL_RCC_OscConfig+0xb0>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x98>
 8002e3e:	4b8b      	ldr	r3, [pc, #556]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a8a      	ldr	r2, [pc, #552]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b88      	ldr	r3, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a87      	ldr	r2, [pc, #540]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0xb0>
 8002e58:	4b84      	ldr	r3, [pc, #528]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a83      	ldr	r2, [pc, #524]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b81      	ldr	r3, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a80      	ldr	r2, [pc, #512]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d013      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7ff fc52 	bl	8002720 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e80:	f7ff fc4e 	bl	8002720 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e204      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e92:	4b76      	ldr	r3, [pc, #472]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0xc0>
 8002e9e:	e014      	b.n	8002eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7ff fc3e 	bl	8002720 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7ff fc3a 	bl	8002720 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1f0      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eba:	4b6c      	ldr	r3, [pc, #432]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xe8>
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d063      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee2:	4b62      	ldr	r3, [pc, #392]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d11c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eee:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d116      	bne.n	8002f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efa:	4b5c      	ldr	r3, [pc, #368]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_RCC_OscConfig+0x152>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e1c4      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f12:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4952      	ldr	r1, [pc, #328]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f26:	e03a      	b.n	8002f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_OscConfig+0x2b0>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7ff fbf3 	bl	8002720 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3e:	f7ff fbef 	bl	8002720 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e1a5      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f50:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4940      	ldr	r1, [pc, #256]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]
 8002f70:	e015      	b.n	8002f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_OscConfig+0x2b0>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7ff fbd2 	bl	8002720 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f80:	f7ff fbce 	bl	8002720 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e184      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	4b36      	ldr	r3, [pc, #216]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d030      	beq.n	800300c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb2:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_RCC_OscConfig+0x2b4>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7ff fbb2 	bl	8002720 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7ff fbae 	bl	8002720 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e164      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x200>
 8002fde:	e015      	b.n	800300c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe0:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCC_OscConfig+0x2b4>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe6:	f7ff fb9b 	bl	8002720 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fee:	f7ff fb97 	bl	8002720 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e14d      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003000:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8003002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80a0 	beq.w	800315a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	4a0e      	ldr	r2, [pc, #56]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 8003034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003038:	6413      	str	r3, [r2, #64]	; 0x40
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCC_OscConfig+0x2ac>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003046:	2301      	movs	r3, #1
 8003048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x2b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d121      	bne.n	800309a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCC_OscConfig+0x2b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a07      	ldr	r2, [pc, #28]	; (8003078 <HAL_RCC_OscConfig+0x2b8>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003062:	f7ff fb5d 	bl	8002720 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	e011      	b.n	800308e <HAL_RCC_OscConfig+0x2ce>
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	42470000 	.word	0x42470000
 8003074:	42470e80 	.word	0x42470e80
 8003078:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307c:	f7ff fb50 	bl	8002720 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e106      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <HAL_RCC_OscConfig+0x4e4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d106      	bne.n	80030b0 <HAL_RCC_OscConfig+0x2f0>
 80030a2:	4b81      	ldr	r3, [pc, #516]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a80      	ldr	r2, [pc, #512]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	e01c      	b.n	80030ea <HAL_RCC_OscConfig+0x32a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d10c      	bne.n	80030d2 <HAL_RCC_OscConfig+0x312>
 80030b8:	4b7b      	ldr	r3, [pc, #492]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a7a      	ldr	r2, [pc, #488]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
 80030c4:	4b78      	ldr	r3, [pc, #480]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a77      	ldr	r2, [pc, #476]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	e00b      	b.n	80030ea <HAL_RCC_OscConfig+0x32a>
 80030d2:	4b75      	ldr	r3, [pc, #468]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a74      	ldr	r2, [pc, #464]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	4b72      	ldr	r3, [pc, #456]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a71      	ldr	r2, [pc, #452]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80030e4:	f023 0304 	bic.w	r3, r3, #4
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d015      	beq.n	800311e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7ff fb15 	bl	8002720 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7ff fb11 	bl	8002720 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e0c5      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003110:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ee      	beq.n	80030fa <HAL_RCC_OscConfig+0x33a>
 800311c:	e014      	b.n	8003148 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7ff faff 	bl	8002720 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7ff fafb 	bl	8002720 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0af      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ee      	bne.n	8003126 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d105      	bne.n	800315a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b56      	ldr	r3, [pc, #344]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a55      	ldr	r2, [pc, #340]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 809b 	beq.w	800329a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b08      	cmp	r3, #8
 800316e:	d05c      	beq.n	800322a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d141      	bne.n	80031fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_RCC_OscConfig+0x4ec>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7ff facf 	bl	8002720 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7ff facb 	bl	8002720 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e081      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003198:	4b43      	ldr	r3, [pc, #268]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	019b      	lsls	r3, r3, #6
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	3b01      	subs	r3, #1
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	061b      	lsls	r3, r3, #24
 80031c8:	4937      	ldr	r1, [pc, #220]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_RCC_OscConfig+0x4ec>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7ff faa4 	bl	8002720 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7ff faa0 	bl	8002720 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e056      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x41c>
 80031fa:	e04e      	b.n	800329a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCC_OscConfig+0x4ec>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7ff fa8d 	bl	8002720 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7ff fa89 	bl	8002720 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e03f      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321c:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x44a>
 8003228:	e037      	b.n	800329a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e032      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <HAL_RCC_OscConfig+0x4e8>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d028      	beq.n	8003296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d121      	bne.n	8003296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d11a      	bne.n	8003296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800326c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	3b01      	subs	r3, #1
 8003280:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d107      	bne.n	8003296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40007000 	.word	0x40007000
 80032a8:	40023800 	.word	0x40023800
 80032ac:	42470060 	.word	0x42470060

080032b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0cc      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b68      	ldr	r3, [pc, #416]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d90c      	bls.n	80032ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b63      	ldr	r3, [pc, #396]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0b8      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003304:	4b59      	ldr	r3, [pc, #356]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a58      	ldr	r2, [pc, #352]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800330e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800331c:	4b53      	ldr	r3, [pc, #332]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a52      	ldr	r2, [pc, #328]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003328:	4b50      	ldr	r3, [pc, #320]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	494d      	ldr	r1, [pc, #308]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d044      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d119      	bne.n	800338e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07f      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d003      	beq.n	800336e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336a:	2b03      	cmp	r3, #3
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336e:	4b3f      	ldr	r3, [pc, #252]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e06f      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337e:	4b3b      	ldr	r3, [pc, #236]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e067      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4934      	ldr	r1, [pc, #208]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	4313      	orrs	r3, r2
 800339e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a0:	f7ff f9be 	bl	8002720 <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	e00a      	b.n	80033be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7ff f9ba 	bl	8002720 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e04f      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	4b2b      	ldr	r3, [pc, #172]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 020c 	and.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d1eb      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d0:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d20c      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e032      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4916      	ldr	r1, [pc, #88]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	490e      	ldr	r1, [pc, #56]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003436:	f000 f82d 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	490a      	ldr	r1, [pc, #40]	; (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	5ccb      	ldrb	r3, [r1, r3]
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff f860 	bl	800251c <HAL_InitTick>

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023c00 	.word	0x40023c00
 800346c:	40023800 	.word	0x40023800
 8003470:	08008174 	.word	0x08008174
 8003474:	20000004 	.word	0x20000004
 8003478:	20000008 	.word	0x20000008

0800347c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <HAL_RCC_EnableCSS+0x14>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	4247004c 	.word	0x4247004c

08003494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	2300      	movs	r3, #0
 80034a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ac:	4b67      	ldr	r3, [pc, #412]	; (800364c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d00d      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x40>
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	f200 80bd 	bhi.w	8003638 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x34>
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x3a>
 80034c6:	e0b7      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b61      	ldr	r3, [pc, #388]	; (8003650 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034ca:	60bb      	str	r3, [r7, #8]
       break;
 80034cc:	e0b7      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ce:	4b61      	ldr	r3, [pc, #388]	; (8003654 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80034d0:	60bb      	str	r3, [r7, #8]
      break;
 80034d2:	e0b4      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d4:	4b5d      	ldr	r3, [pc, #372]	; (800364c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034de:	4b5b      	ldr	r3, [pc, #364]	; (800364c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d04d      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b58      	ldr	r3, [pc, #352]	; (800364c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	461a      	mov	r2, r3
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	ea02 0800 	and.w	r8, r2, r0
 8003502:	ea03 0901 	and.w	r9, r3, r1
 8003506:	4640      	mov	r0, r8
 8003508:	4649      	mov	r1, r9
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	014b      	lsls	r3, r1, #5
 8003514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003518:	0142      	lsls	r2, r0, #5
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	ebb0 0008 	subs.w	r0, r0, r8
 8003522:	eb61 0109 	sbc.w	r1, r1, r9
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	018b      	lsls	r3, r1, #6
 8003530:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003534:	0182      	lsls	r2, r0, #6
 8003536:	1a12      	subs	r2, r2, r0
 8003538:	eb63 0301 	sbc.w	r3, r3, r1
 800353c:	f04f 0000 	mov.w	r0, #0
 8003540:	f04f 0100 	mov.w	r1, #0
 8003544:	00d9      	lsls	r1, r3, #3
 8003546:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800354a:	00d0      	lsls	r0, r2, #3
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	eb12 0208 	adds.w	r2, r2, r8
 8003554:	eb43 0309 	adc.w	r3, r3, r9
 8003558:	f04f 0000 	mov.w	r0, #0
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	0259      	lsls	r1, r3, #9
 8003562:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003566:	0250      	lsls	r0, r2, #9
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	461a      	mov	r2, r3
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	f7fd fa48 	bl	8000a0c <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4613      	mov	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e04a      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003586:	4b31      	ldr	r3, [pc, #196]	; (800364c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	461a      	mov	r2, r3
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	ea02 0400 	and.w	r4, r2, r0
 800359e:	ea03 0501 	and.w	r5, r3, r1
 80035a2:	4620      	mov	r0, r4
 80035a4:	4629      	mov	r1, r5
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	014b      	lsls	r3, r1, #5
 80035b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035b4:	0142      	lsls	r2, r0, #5
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	1b00      	subs	r0, r0, r4
 80035bc:	eb61 0105 	sbc.w	r1, r1, r5
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	018b      	lsls	r3, r1, #6
 80035ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035ce:	0182      	lsls	r2, r0, #6
 80035d0:	1a12      	subs	r2, r2, r0
 80035d2:	eb63 0301 	sbc.w	r3, r3, r1
 80035d6:	f04f 0000 	mov.w	r0, #0
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	00d9      	lsls	r1, r3, #3
 80035e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035e4:	00d0      	lsls	r0, r2, #3
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	1912      	adds	r2, r2, r4
 80035ec:	eb45 0303 	adc.w	r3, r5, r3
 80035f0:	f04f 0000 	mov.w	r0, #0
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	0299      	lsls	r1, r3, #10
 80035fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035fe:	0290      	lsls	r0, r2, #10
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	461a      	mov	r2, r3
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	f7fd f9fc 	bl	8000a0c <__aeabi_uldivmod>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4613      	mov	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	3301      	adds	r3, #1
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	60bb      	str	r3, [r7, #8]
      break;
 8003636:	e002      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800363a:	60bb      	str	r3, [r7, #8]
      break;
 800363c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363e:	68bb      	ldr	r3, [r7, #8]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	00f42400 	.word	0x00f42400
 8003654:	007a1200 	.word	0x007a1200

08003658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCC_GetHCLKFreq+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003674:	f7ff fff0 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	08008184 	.word	0x08008184

08003698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800369c:	f7ff ffdc 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0b5b      	lsrs	r3, r3, #13
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08008184 	.word	0x08008184

080036c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	220f      	movs	r2, #15
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_RCC_GetClockConfig+0x5c>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0203 	and.w	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_RCC_GetClockConfig+0x5c>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_RCC_GetClockConfig+0x5c>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	08db      	lsrs	r3, r3, #3
 80036fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_RCC_GetClockConfig+0x60>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0207 	and.w	r2, r3, #7
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	601a      	str	r2, [r3, #0]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	40023c00 	.word	0x40023c00

08003724 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_NMI_IRQHandler+0x20>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d104      	bne.n	800373e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003734:	f000 f80a 	bl	800374c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_RCC_NMI_IRQHandler+0x24>)
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	701a      	strb	r2, [r3, #0]
  }
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	4002380e 	.word	0x4002380e

0800374c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e041      	b.n	80037f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fe fd17 	bl	80021b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f000 fc71 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d001      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e04e      	b.n	80038ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a23      	ldr	r2, [pc, #140]	; (80038bc <HAL_TIM_Base_Start_IT+0xc4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d022      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d01d      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d018      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00e      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d111      	bne.n	800389c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b06      	cmp	r3, #6
 8003888:	d010      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0201 	orr.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389a:	e007      	b.n	80038ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800
 80038c8:	40000c00 	.word	0x40000c00
 80038cc:	40010400 	.word	0x40010400
 80038d0:	40014000 	.word	0x40014000
 80038d4:	40001800 	.word	0x40001800

080038d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e041      	b.n	800396e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f839 	bl	8003976 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f000 fbb2 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_TIM_PWM_Start+0x24>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e022      	b.n	80039f6 <HAL_TIM_PWM_Start+0x6a>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d109      	bne.n	80039ca <HAL_TIM_PWM_Start+0x3e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	bf14      	ite	ne
 80039c2:	2301      	movne	r3, #1
 80039c4:	2300      	moveq	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	e015      	b.n	80039f6 <HAL_TIM_PWM_Start+0x6a>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d109      	bne.n	80039e4 <HAL_TIM_PWM_Start+0x58>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e008      	b.n	80039f6 <HAL_TIM_PWM_Start+0x6a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e07c      	b.n	8003af8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_PWM_Start+0x82>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0c:	e013      	b.n	8003a36 <HAL_TIM_PWM_Start+0xaa>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d104      	bne.n	8003a1e <HAL_TIM_PWM_Start+0x92>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a1c:	e00b      	b.n	8003a36 <HAL_TIM_PWM_Start+0xaa>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d104      	bne.n	8003a2e <HAL_TIM_PWM_Start+0xa2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2c:	e003      	b.n	8003a36 <HAL_TIM_PWM_Start+0xaa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fe08 	bl	8004654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2d      	ldr	r2, [pc, #180]	; (8003b00 <HAL_TIM_PWM_Start+0x174>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_TIM_PWM_Start+0xcc>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	; (8003b04 <HAL_TIM_PWM_Start+0x178>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_TIM_PWM_Start+0xd0>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_TIM_PWM_Start+0xd2>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <HAL_TIM_PWM_Start+0x174>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d022      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x136>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d01d      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x136>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <HAL_TIM_PWM_Start+0x17c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x136>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <HAL_TIM_PWM_Start+0x180>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x136>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <HAL_TIM_PWM_Start+0x184>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x136>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_TIM_PWM_Start+0x178>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x136>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <HAL_TIM_PWM_Start+0x188>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x136>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <HAL_TIM_PWM_Start+0x18c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d111      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b06      	cmp	r3, #6
 8003ad2:	d010      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	e007      	b.n	8003af6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40010400 	.word	0x40010400
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00
 8003b14:	40014000 	.word	0x40014000
 8003b18:	40001800 	.word	0x40001800

08003b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d122      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d11b      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0202 	mvn.w	r2, #2
 8003b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa70 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa62 	bl	8004030 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fa73 	bl	8004058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d122      	bne.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d11b      	bne.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0204 	mvn.w	r2, #4
 8003b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa46 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 8003bb8:	e005      	b.n	8003bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fa38 	bl	8004030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fa49 	bl	8004058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d122      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d11b      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0208 	mvn.w	r2, #8
 8003bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa1c 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 8003c0c:	e005      	b.n	8003c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fa0e 	bl	8004030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fa1f 	bl	8004058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d122      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d11b      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0210 	mvn.w	r2, #16
 8003c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f9f2 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9e4 	bl	8004030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f9f5 	bl	8004058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d10e      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0201 	mvn.w	r2, #1
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fe fa46 	bl	800212c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb8:	2b80      	cmp	r3, #128	; 0x80
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fd70 	bl	80047ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f9ba 	bl	800406c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0220 	mvn.w	r2, #32
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fd3a 	bl	8004798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0ac      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	f200 809f 	bhi.w	8003e94 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d91 	.word	0x08003d91
 8003d60:	08003e95 	.word	0x08003e95
 8003d64:	08003e95 	.word	0x08003e95
 8003d68:	08003e95 	.word	0x08003e95
 8003d6c:	08003dd1 	.word	0x08003dd1
 8003d70:	08003e95 	.word	0x08003e95
 8003d74:	08003e95 	.word	0x08003e95
 8003d78:	08003e95 	.word	0x08003e95
 8003d7c:	08003e13 	.word	0x08003e13
 8003d80:	08003e95 	.word	0x08003e95
 8003d84:	08003e95 	.word	0x08003e95
 8003d88:	08003e95 	.word	0x08003e95
 8003d8c:	08003e53 	.word	0x08003e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fa12 	bl	80041c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0208 	orr.w	r2, r2, #8
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	619a      	str	r2, [r3, #24]
      break;
 8003dce:	e062      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fa62 	bl	80042a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6999      	ldr	r1, [r3, #24]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	619a      	str	r2, [r3, #24]
      break;
 8003e10:	e041      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fab7 	bl	800438c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0208 	orr.w	r2, r2, #8
 8003e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0204 	bic.w	r2, r2, #4
 8003e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69d9      	ldr	r1, [r3, #28]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	61da      	str	r2, [r3, #28]
      break;
 8003e50:	e021      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fb0b 	bl	8004474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69d9      	ldr	r1, [r3, #28]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	021a      	lsls	r2, r3, #8
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	61da      	str	r2, [r3, #28]
      break;
 8003e92:	e000      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIM_ConfigClockSource+0x18>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e0b3      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x180>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ee6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef8:	d03e      	beq.n	8003f78 <HAL_TIM_ConfigClockSource+0xd0>
 8003efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efe:	f200 8087 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x168>
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f06:	f000 8085 	beq.w	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d87f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x168>
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d01a      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0xa2>
 8003f14:	2b70      	cmp	r3, #112	; 0x70
 8003f16:	d87b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x168>
 8003f18:	2b60      	cmp	r3, #96	; 0x60
 8003f1a:	d050      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x116>
 8003f1c:	2b60      	cmp	r3, #96	; 0x60
 8003f1e:	d877      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x168>
 8003f20:	2b50      	cmp	r3, #80	; 0x50
 8003f22:	d03c      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xf6>
 8003f24:	2b50      	cmp	r3, #80	; 0x50
 8003f26:	d873      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x168>
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d058      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x136>
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d86f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x168>
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d064      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x156>
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d86b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x168>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d060      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x156>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d867      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x168>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x156>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d05a      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f48:	e062      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f000 fb5b 	bl	8004614 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	609a      	str	r2, [r3, #8]
      break;
 8003f76:	e04e      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f000 fb44 	bl	8004614 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9a:	609a      	str	r2, [r3, #8]
      break;
 8003f9c:	e03b      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 fab8 	bl	8004520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2150      	movs	r1, #80	; 0x50
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fb11 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e02b      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 fad7 	bl	800457e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2160      	movs	r1, #96	; 0x60
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fb01 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e01b      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fa98 	bl	8004520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 faf1 	bl	80045de <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e00b      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 fae8 	bl	80045de <TIM_ITRx_SetConfig>
        break;
 800400e:	e002      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004010:	bf00      	nop
 8004012:	e000      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004014:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a40      	ldr	r2, [pc, #256]	; (8004194 <TIM_Base_SetConfig+0x114>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d00f      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3d      	ldr	r2, [pc, #244]	; (8004198 <TIM_Base_SetConfig+0x118>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3c      	ldr	r2, [pc, #240]	; (800419c <TIM_Base_SetConfig+0x11c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3b      	ldr	r2, [pc, #236]	; (80041a0 <TIM_Base_SetConfig+0x120>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3a      	ldr	r2, [pc, #232]	; (80041a4 <TIM_Base_SetConfig+0x124>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d108      	bne.n	80040d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2f      	ldr	r2, [pc, #188]	; (8004194 <TIM_Base_SetConfig+0x114>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d02b      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e0:	d027      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2c      	ldr	r2, [pc, #176]	; (8004198 <TIM_Base_SetConfig+0x118>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d023      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2b      	ldr	r2, [pc, #172]	; (800419c <TIM_Base_SetConfig+0x11c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01f      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2a      	ldr	r2, [pc, #168]	; (80041a0 <TIM_Base_SetConfig+0x120>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01b      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <TIM_Base_SetConfig+0x124>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d017      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a28      	ldr	r2, [pc, #160]	; (80041a8 <TIM_Base_SetConfig+0x128>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a27      	ldr	r2, [pc, #156]	; (80041ac <TIM_Base_SetConfig+0x12c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00f      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <TIM_Base_SetConfig+0x130>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00b      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <TIM_Base_SetConfig+0x134>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <TIM_Base_SetConfig+0x138>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a23      	ldr	r2, [pc, #140]	; (80041bc <TIM_Base_SetConfig+0x13c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <TIM_Base_SetConfig+0x114>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_Base_SetConfig+0xf8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <TIM_Base_SetConfig+0x124>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d103      	bne.n	8004180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	615a      	str	r2, [r3, #20]
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800
 80041a0:	40000c00 	.word	0x40000c00
 80041a4:	40010400 	.word	0x40010400
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800
 80041b4:	40001800 	.word	0x40001800
 80041b8:	40001c00 	.word	0x40001c00
 80041bc:	40002000 	.word	0x40002000

080041c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f023 0302 	bic.w	r3, r3, #2
 8004208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a20      	ldr	r2, [pc, #128]	; (8004298 <TIM_OC1_SetConfig+0xd8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_OC1_SetConfig+0x64>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <TIM_OC1_SetConfig+0xdc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d10c      	bne.n	800423e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 0308 	bic.w	r3, r3, #8
 800422a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a15      	ldr	r2, [pc, #84]	; (8004298 <TIM_OC1_SetConfig+0xd8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_OC1_SetConfig+0x8e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <TIM_OC1_SetConfig+0xdc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d111      	bne.n	8004272 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40010000 	.word	0x40010000
 800429c:	40010400 	.word	0x40010400

080042a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f023 0210 	bic.w	r2, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f023 0320 	bic.w	r3, r3, #32
 80042ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a22      	ldr	r2, [pc, #136]	; (8004384 <TIM_OC2_SetConfig+0xe4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_OC2_SetConfig+0x68>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a21      	ldr	r2, [pc, #132]	; (8004388 <TIM_OC2_SetConfig+0xe8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10d      	bne.n	8004324 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a17      	ldr	r2, [pc, #92]	; (8004384 <TIM_OC2_SetConfig+0xe4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d003      	beq.n	8004334 <TIM_OC2_SetConfig+0x94>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a16      	ldr	r2, [pc, #88]	; (8004388 <TIM_OC2_SetConfig+0xe8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d113      	bne.n	800435c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800433a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40010400 	.word	0x40010400

0800438c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a21      	ldr	r2, [pc, #132]	; (800446c <TIM_OC3_SetConfig+0xe0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_OC3_SetConfig+0x66>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a20      	ldr	r2, [pc, #128]	; (8004470 <TIM_OC3_SetConfig+0xe4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10d      	bne.n	800440e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a16      	ldr	r2, [pc, #88]	; (800446c <TIM_OC3_SetConfig+0xe0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_OC3_SetConfig+0x92>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <TIM_OC3_SetConfig+0xe4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d113      	bne.n	8004446 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800442c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	621a      	str	r2, [r3, #32]
}
 8004460:	bf00      	nop
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40010000 	.word	0x40010000
 8004470:	40010400 	.word	0x40010400

08004474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	031b      	lsls	r3, r3, #12
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a12      	ldr	r2, [pc, #72]	; (8004518 <TIM_OC4_SetConfig+0xa4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_OC4_SetConfig+0x68>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a11      	ldr	r2, [pc, #68]	; (800451c <TIM_OC4_SetConfig+0xa8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d109      	bne.n	80044f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40010400 	.word	0x40010400

08004520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f023 0201 	bic.w	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800454a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 030a 	bic.w	r3, r3, #10
 800455c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457e:	b480      	push	{r7}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0210 	bic.w	r2, r3, #16
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	031b      	lsls	r3, r3, #12
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f043 0307 	orr.w	r3, r3, #7
 8004600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	609a      	str	r2, [r3, #8]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	021a      	lsls	r2, r3, #8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	431a      	orrs	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	609a      	str	r2, [r3, #8]
}
 8004648:	bf00      	nop
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	2201      	movs	r2, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1a      	ldr	r2, [r3, #32]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	43db      	mvns	r3, r3
 8004676:	401a      	ands	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	fa01 f303 	lsl.w	r3, r1, r3
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e05a      	b.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a21      	ldr	r2, [pc, #132]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d022      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d01d      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1d      	ldr	r2, [pc, #116]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d018      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d013      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1a      	ldr	r2, [pc, #104]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00e      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a18      	ldr	r2, [pc, #96]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d009      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a17      	ldr	r2, [pc, #92]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a15      	ldr	r2, [pc, #84]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10c      	bne.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	4313      	orrs	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40010400 	.word	0x40010400
 8004790:	40014000 	.word	0x40014000
 8004794:	40001800 	.word	0x40001800

08004798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e03f      	b.n	8004852 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fd fd7e 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	; 0x24
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fd1d 	bl	8005244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b08a      	sub	sp, #40	; 0x28
 800485e:	af02      	add	r7, sp, #8
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b20      	cmp	r3, #32
 8004878:	d17c      	bne.n	8004974 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_UART_Transmit+0x2c>
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e075      	b.n	8004976 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_UART_Transmit+0x3e>
 8004894:	2302      	movs	r3, #2
 8004896:	e06e      	b.n	8004976 <HAL_UART_Transmit+0x11c>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2221      	movs	r2, #33	; 0x21
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ae:	f7fd ff37 	bl	8002720 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c8:	d108      	bne.n	80048dc <HAL_UART_Transmit+0x82>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	e003      	b.n	80048e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048ec:	e02a      	b.n	8004944 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fadf 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e036      	b.n	8004976 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	3302      	adds	r3, #2
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	e007      	b.n	8004936 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1cf      	bne.n	80048ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	2140      	movs	r1, #64	; 0x40
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 faaf 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e006      	b.n	8004976 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e000      	b.n	8004976 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b08a      	sub	sp, #40	; 0x28
 8004982:	af02      	add	r7, sp, #8
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	f040 808c 	bne.w	8004ab8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Receive+0x2e>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e084      	b.n	8004aba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_UART_Receive+0x40>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e07d      	b.n	8004aba <HAL_UART_Receive+0x13c>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2222      	movs	r2, #34	; 0x22
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049da:	f7fd fea1 	bl	8002720 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f4:	d108      	bne.n	8004a08 <HAL_UART_Receive+0x8a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	e003      	b.n	8004a10 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004a18:	e043      	b.n	8004aa2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2120      	movs	r1, #32
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fa49 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e042      	b.n	8004aba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	e01f      	b.n	8004a94 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5c:	d007      	beq.n	8004a6e <HAL_UART_Receive+0xf0>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <HAL_UART_Receive+0xfe>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e008      	b.n	8004a8e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	3301      	adds	r3, #1
 8004a92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1b6      	bne.n	8004a1a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	4613      	mov	r3, r2
 8004ace:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d11d      	bne.n	8004b18 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_UART_Receive_IT+0x26>
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e016      	b.n	8004b1a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Receive_IT+0x38>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e00f      	b.n	8004b1a <HAL_UART_Receive_IT+0x58>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fa1e 	bl	8004f50 <UART_Start_Receive_IT>
 8004b14:	4603      	mov	r3, r0
 8004b16:	e000      	b.n	8004b1a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10d      	bne.n	8004b76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_UART_IRQHandler+0x52>
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fad1 	bl	8005116 <UART_Receive_IT>
      return;
 8004b74:	e17c      	b.n	8004e70 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80b1 	beq.w	8004ce0 <HAL_UART_IRQHandler+0x1bc>
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <HAL_UART_IRQHandler+0x70>
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80a6 	beq.w	8004ce0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x90>
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f043 0201 	orr.w	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_UART_IRQHandler+0xb0>
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f043 0202 	orr.w	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_UART_IRQHandler+0xd0>
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f043 0204 	orr.w	r2, r3, #4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00f      	beq.n	8004c1e <HAL_UART_IRQHandler+0xfa>
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_UART_IRQHandler+0xee>
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f043 0208 	orr.w	r2, r3, #8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 811f 	beq.w	8004e66 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <HAL_UART_IRQHandler+0x11e>
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fa6a 	bl	8005116 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d102      	bne.n	8004c6a <HAL_UART_IRQHandler+0x146>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d031      	beq.n	8004cce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f9aa 	bl	8004fc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b40      	cmp	r3, #64	; 0x40
 8004c7c:	d123      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d013      	beq.n	8004cbe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	4a77      	ldr	r2, [pc, #476]	; (8004e78 <HAL_UART_IRQHandler+0x354>)
 8004c9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fd fe9a 	bl	80029dc <HAL_DMA_Abort_IT>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cb8:	4610      	mov	r0, r2
 8004cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	e00e      	b.n	8004cdc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8e6 	bl	8004e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	e00a      	b.n	8004cdc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f8e2 	bl	8004e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	e006      	b.n	8004cdc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8de 	bl	8004e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cda:	e0c4      	b.n	8004e66 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	bf00      	nop
    return;
 8004cde:	e0c2      	b.n	8004e66 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	f040 80a2 	bne.w	8004e2e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 809c 	beq.w	8004e2e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8096 	beq.w	8004e2e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d14f      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d30:	8a3b      	ldrh	r3, [r7, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8099 	beq.w	8004e6a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d3c:	8a3a      	ldrh	r2, [r7, #16]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	f080 8093 	bcs.w	8004e6a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8a3a      	ldrh	r2, [r7, #16]
 8004d48:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d54:	d02b      	beq.n	8004dae <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d64:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d84:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0210 	bic.w	r2, r2, #16
 8004da2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fd fda7 	bl	80028fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f870 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dc4:	e051      	b.n	8004e6a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d047      	beq.n	8004e6e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004dde:	8a7b      	ldrh	r3, [r7, #18]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d044      	beq.n	8004e6e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004df2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0210 	bic.w	r2, r2, #16
 8004e20:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e22:	8a7b      	ldrh	r3, [r7, #18]
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f83c 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e2c:	e01f      	b.n	8004e6e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_UART_IRQHandler+0x326>
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f8ff 	bl	8005046 <UART_Transmit_IT>
    return;
 8004e48:	e012      	b.n	8004e70 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <HAL_UART_IRQHandler+0x34c>
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f941 	bl	80050e6 <UART_EndTransmit_IT>
    return;
 8004e64:	e004      	b.n	8004e70 <HAL_UART_IRQHandler+0x34c>
    return;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <HAL_UART_IRQHandler+0x34c>
      return;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_UART_IRQHandler+0x34c>
      return;
 8004e6e:	bf00      	nop
  }
}
 8004e70:	3728      	adds	r7, #40	; 0x28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	0800501f 	.word	0x0800501f

08004e7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ecc:	e02c      	b.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d028      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <UART_WaitOnFlagUntilTimeout+0x30>
 8004edc:	f7fd fc20 	bl	8002720 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d21d      	bcs.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004efa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695a      	ldr	r2, [r3, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e00f      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4013      	ands	r3, r2
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d0c3      	beq.n	8004ece <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2222      	movs	r2, #34	; 0x22
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0201 	orr.w	r2, r2, #1
 8004fa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0220 	orr.w	r2, r2, #32
 8004fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695a      	ldr	r2, [r3, #20]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0201 	bic.w	r2, r2, #1
 8004fea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0210 	bic.w	r2, r2, #16
 8005002:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff ff29 	bl	8004e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b21      	cmp	r3, #33	; 0x21
 8005058:	d13e      	bne.n	80050d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005062:	d114      	bne.n	800508e <UART_Transmit_IT+0x48>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d110      	bne.n	800508e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	1c9a      	adds	r2, r3, #2
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	621a      	str	r2, [r3, #32]
 800508c:	e008      	b.n	80050a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	1c59      	adds	r1, r3, #1
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6211      	str	r1, [r2, #32]
 8005098:	781a      	ldrb	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4619      	mov	r1, r3
 80050ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10f      	bne.n	80050d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff feb8 	bl	8004e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b22      	cmp	r3, #34	; 0x22
 8005128:	f040 8087 	bne.w	800523a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005134:	d117      	bne.n	8005166 <UART_Receive_IT+0x50>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d113      	bne.n	8005166 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005154:	b29a      	uxth	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	1c9a      	adds	r2, r3, #2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
 8005164:	e026      	b.n	80051b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005178:	d007      	beq.n	800518a <UART_Receive_IT+0x74>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <UART_Receive_IT+0x82>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e008      	b.n	80051aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29b      	uxth	r3, r3
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	4619      	mov	r1, r3
 80051c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d136      	bne.n	8005236 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0220 	bic.w	r2, r2, #32
 80051d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10e      	bne.n	8005226 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0210 	bic.w	r2, r2, #16
 8005216:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800521c:	4619      	mov	r1, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff fe40 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
 8005224:	e002      	b.n	800522c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc fb30 	bl	800188c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e002      	b.n	800523c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e000      	b.n	800523c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800523a:	2302      	movs	r3, #2
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005248:	b09f      	sub	sp, #124	; 0x7c
 800524a:	af00      	add	r7, sp, #0
 800524c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800524e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	68d9      	ldr	r1, [r3, #12]
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	ea40 0301 	orr.w	r3, r0, r1
 8005264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	431a      	orrs	r2, r3
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	431a      	orrs	r2, r3
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	4313      	orrs	r3, r2
 800527c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005288:	f021 010c 	bic.w	r1, r1, #12
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005292:	430b      	orrs	r3, r1
 8005294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	6999      	ldr	r1, [r3, #24]
 80052a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	ea40 0301 	orr.w	r3, r0, r1
 80052ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4bc5      	ldr	r3, [pc, #788]	; (80055c8 <UART_SetConfig+0x384>)
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d004      	beq.n	80052c2 <UART_SetConfig+0x7e>
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4bc3      	ldr	r3, [pc, #780]	; (80055cc <UART_SetConfig+0x388>)
 80052be:	429a      	cmp	r2, r3
 80052c0:	d103      	bne.n	80052ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052c2:	f7fe f9e9 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 80052c6:	6778      	str	r0, [r7, #116]	; 0x74
 80052c8:	e002      	b.n	80052d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ca:	f7fe f9d1 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 80052ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d8:	f040 80b6 	bne.w	8005448 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052de:	461c      	mov	r4, r3
 80052e0:	f04f 0500 	mov.w	r5, #0
 80052e4:	4622      	mov	r2, r4
 80052e6:	462b      	mov	r3, r5
 80052e8:	1891      	adds	r1, r2, r2
 80052ea:	6439      	str	r1, [r7, #64]	; 0x40
 80052ec:	415b      	adcs	r3, r3
 80052ee:	647b      	str	r3, [r7, #68]	; 0x44
 80052f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052f4:	1912      	adds	r2, r2, r4
 80052f6:	eb45 0303 	adc.w	r3, r5, r3
 80052fa:	f04f 0000 	mov.w	r0, #0
 80052fe:	f04f 0100 	mov.w	r1, #0
 8005302:	00d9      	lsls	r1, r3, #3
 8005304:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005308:	00d0      	lsls	r0, r2, #3
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	1911      	adds	r1, r2, r4
 8005310:	6639      	str	r1, [r7, #96]	; 0x60
 8005312:	416b      	adcs	r3, r5
 8005314:	667b      	str	r3, [r7, #100]	; 0x64
 8005316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	461a      	mov	r2, r3
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	1891      	adds	r1, r2, r2
 8005322:	63b9      	str	r1, [r7, #56]	; 0x38
 8005324:	415b      	adcs	r3, r3
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800532c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005330:	f7fb fb6c 	bl	8000a0c <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4ba5      	ldr	r3, [pc, #660]	; (80055d0 <UART_SetConfig+0x38c>)
 800533a:	fba3 2302 	umull	r2, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	011e      	lsls	r6, r3, #4
 8005342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005344:	461c      	mov	r4, r3
 8005346:	f04f 0500 	mov.w	r5, #0
 800534a:	4622      	mov	r2, r4
 800534c:	462b      	mov	r3, r5
 800534e:	1891      	adds	r1, r2, r2
 8005350:	6339      	str	r1, [r7, #48]	; 0x30
 8005352:	415b      	adcs	r3, r3
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
 8005356:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800535a:	1912      	adds	r2, r2, r4
 800535c:	eb45 0303 	adc.w	r3, r5, r3
 8005360:	f04f 0000 	mov.w	r0, #0
 8005364:	f04f 0100 	mov.w	r1, #0
 8005368:	00d9      	lsls	r1, r3, #3
 800536a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800536e:	00d0      	lsls	r0, r2, #3
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	1911      	adds	r1, r2, r4
 8005376:	65b9      	str	r1, [r7, #88]	; 0x58
 8005378:	416b      	adcs	r3, r5
 800537a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800537c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	461a      	mov	r2, r3
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	1891      	adds	r1, r2, r2
 8005388:	62b9      	str	r1, [r7, #40]	; 0x28
 800538a:	415b      	adcs	r3, r3
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800538e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005392:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005396:	f7fb fb39 	bl	8000a0c <__aeabi_uldivmod>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4b8c      	ldr	r3, [pc, #560]	; (80055d0 <UART_SetConfig+0x38c>)
 80053a0:	fba3 1302 	umull	r1, r3, r3, r2
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	2164      	movs	r1, #100	; 0x64
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	3332      	adds	r3, #50	; 0x32
 80053b2:	4a87      	ldr	r2, [pc, #540]	; (80055d0 <UART_SetConfig+0x38c>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053c0:	441e      	add	r6, r3
 80053c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c4:	4618      	mov	r0, r3
 80053c6:	f04f 0100 	mov.w	r1, #0
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	1894      	adds	r4, r2, r2
 80053d0:	623c      	str	r4, [r7, #32]
 80053d2:	415b      	adcs	r3, r3
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
 80053d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053da:	1812      	adds	r2, r2, r0
 80053dc:	eb41 0303 	adc.w	r3, r1, r3
 80053e0:	f04f 0400 	mov.w	r4, #0
 80053e4:	f04f 0500 	mov.w	r5, #0
 80053e8:	00dd      	lsls	r5, r3, #3
 80053ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053ee:	00d4      	lsls	r4, r2, #3
 80053f0:	4622      	mov	r2, r4
 80053f2:	462b      	mov	r3, r5
 80053f4:	1814      	adds	r4, r2, r0
 80053f6:	653c      	str	r4, [r7, #80]	; 0x50
 80053f8:	414b      	adcs	r3, r1
 80053fa:	657b      	str	r3, [r7, #84]	; 0x54
 80053fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	461a      	mov	r2, r3
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	1891      	adds	r1, r2, r2
 8005408:	61b9      	str	r1, [r7, #24]
 800540a:	415b      	adcs	r3, r3
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005412:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005416:	f7fb faf9 	bl	8000a0c <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4b6c      	ldr	r3, [pc, #432]	; (80055d0 <UART_SetConfig+0x38c>)
 8005420:	fba3 1302 	umull	r1, r3, r3, r2
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	2164      	movs	r1, #100	; 0x64
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	3332      	adds	r3, #50	; 0x32
 8005432:	4a67      	ldr	r2, [pc, #412]	; (80055d0 <UART_SetConfig+0x38c>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	f003 0207 	and.w	r2, r3, #7
 800543e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4432      	add	r2, r6
 8005444:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005446:	e0b9      	b.n	80055bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800544a:	461c      	mov	r4, r3
 800544c:	f04f 0500 	mov.w	r5, #0
 8005450:	4622      	mov	r2, r4
 8005452:	462b      	mov	r3, r5
 8005454:	1891      	adds	r1, r2, r2
 8005456:	6139      	str	r1, [r7, #16]
 8005458:	415b      	adcs	r3, r3
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005460:	1912      	adds	r2, r2, r4
 8005462:	eb45 0303 	adc.w	r3, r5, r3
 8005466:	f04f 0000 	mov.w	r0, #0
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	00d9      	lsls	r1, r3, #3
 8005470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005474:	00d0      	lsls	r0, r2, #3
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	eb12 0804 	adds.w	r8, r2, r4
 800547e:	eb43 0905 	adc.w	r9, r3, r5
 8005482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4618      	mov	r0, r3
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	008b      	lsls	r3, r1, #2
 8005496:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800549a:	0082      	lsls	r2, r0, #2
 800549c:	4640      	mov	r0, r8
 800549e:	4649      	mov	r1, r9
 80054a0:	f7fb fab4 	bl	8000a0c <__aeabi_uldivmod>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4b49      	ldr	r3, [pc, #292]	; (80055d0 <UART_SetConfig+0x38c>)
 80054aa:	fba3 2302 	umull	r2, r3, r3, r2
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	011e      	lsls	r6, r3, #4
 80054b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b4:	4618      	mov	r0, r3
 80054b6:	f04f 0100 	mov.w	r1, #0
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	1894      	adds	r4, r2, r2
 80054c0:	60bc      	str	r4, [r7, #8]
 80054c2:	415b      	adcs	r3, r3
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ca:	1812      	adds	r2, r2, r0
 80054cc:	eb41 0303 	adc.w	r3, r1, r3
 80054d0:	f04f 0400 	mov.w	r4, #0
 80054d4:	f04f 0500 	mov.w	r5, #0
 80054d8:	00dd      	lsls	r5, r3, #3
 80054da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054de:	00d4      	lsls	r4, r2, #3
 80054e0:	4622      	mov	r2, r4
 80054e2:	462b      	mov	r3, r5
 80054e4:	1814      	adds	r4, r2, r0
 80054e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80054e8:	414b      	adcs	r3, r1
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f04f 0100 	mov.w	r1, #0
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	008b      	lsls	r3, r1, #2
 8005500:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005504:	0082      	lsls	r2, r0, #2
 8005506:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800550a:	f7fb fa7f 	bl	8000a0c <__aeabi_uldivmod>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <UART_SetConfig+0x38c>)
 8005514:	fba3 1302 	umull	r1, r3, r3, r2
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	2164      	movs	r1, #100	; 0x64
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	3332      	adds	r3, #50	; 0x32
 8005526:	4a2a      	ldr	r2, [pc, #168]	; (80055d0 <UART_SetConfig+0x38c>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005532:	441e      	add	r6, r3
 8005534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005536:	4618      	mov	r0, r3
 8005538:	f04f 0100 	mov.w	r1, #0
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	1894      	adds	r4, r2, r2
 8005542:	603c      	str	r4, [r7, #0]
 8005544:	415b      	adcs	r3, r3
 8005546:	607b      	str	r3, [r7, #4]
 8005548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554c:	1812      	adds	r2, r2, r0
 800554e:	eb41 0303 	adc.w	r3, r1, r3
 8005552:	f04f 0400 	mov.w	r4, #0
 8005556:	f04f 0500 	mov.w	r5, #0
 800555a:	00dd      	lsls	r5, r3, #3
 800555c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005560:	00d4      	lsls	r4, r2, #3
 8005562:	4622      	mov	r2, r4
 8005564:	462b      	mov	r3, r5
 8005566:	eb12 0a00 	adds.w	sl, r2, r0
 800556a:	eb43 0b01 	adc.w	fp, r3, r1
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4618      	mov	r0, r3
 8005574:	f04f 0100 	mov.w	r1, #0
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	008b      	lsls	r3, r1, #2
 8005582:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005586:	0082      	lsls	r2, r0, #2
 8005588:	4650      	mov	r0, sl
 800558a:	4659      	mov	r1, fp
 800558c:	f7fb fa3e 	bl	8000a0c <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <UART_SetConfig+0x38c>)
 8005596:	fba3 1302 	umull	r1, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2164      	movs	r1, #100	; 0x64
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	3332      	adds	r3, #50	; 0x32
 80055a8:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <UART_SetConfig+0x38c>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4432      	add	r2, r6
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	bf00      	nop
 80055be:	377c      	adds	r7, #124	; 0x7c
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c6:	bf00      	nop
 80055c8:	40011000 	.word	0x40011000
 80055cc:	40011400 	.word	0x40011400
 80055d0:	51eb851f 	.word	0x51eb851f

080055d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055e6:	2b84      	cmp	r3, #132	; 0x84
 80055e8:	d005      	beq.n	80055f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	3303      	adds	r3, #3
 80055f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800560a:	f3ef 8305 	mrs	r3, IPSR
 800560e:	607b      	str	r3, [r7, #4]
  return(result);
 8005610:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005612:	2b00      	cmp	r3, #0
 8005614:	bf14      	ite	ne
 8005616:	2301      	movne	r3, #1
 8005618:	2300      	moveq	r3, #0
 800561a:	b2db      	uxtb	r3, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800562c:	f001 fa8e 	bl	8006b4c <vTaskStartScheduler>
  
  return osOK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	bd80      	pop	{r7, pc}

08005636 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800563a:	f7ff ffe3 	bl	8005604 <inHandlerMode>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005644:	f001 fb9c 	bl	8006d80 <xTaskGetTickCountFromISR>
 8005648:	4603      	mov	r3, r0
 800564a:	e002      	b.n	8005652 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800564c:	f001 fb88 	bl	8006d60 <xTaskGetTickCount>
 8005650:	4603      	mov	r3, r0
  }
}
 8005652:	4618      	mov	r0, r3
 8005654:	bd80      	pop	{r7, pc}

08005656 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005658:	b089      	sub	sp, #36	; 0x24
 800565a:	af04      	add	r7, sp, #16
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d020      	beq.n	80056aa <osThreadCreate+0x54>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01c      	beq.n	80056aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685c      	ldr	r4, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681d      	ldr	r5, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691e      	ldr	r6, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff ffa6 	bl	80055d4 <makeFreeRtosPriority>
 8005688:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005692:	9202      	str	r2, [sp, #8]
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	9100      	str	r1, [sp, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	4632      	mov	r2, r6
 800569c:	4629      	mov	r1, r5
 800569e:	4620      	mov	r0, r4
 80056a0:	f000 ff20 	bl	80064e4 <xTaskCreateStatic>
 80056a4:	4603      	mov	r3, r0
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	e01c      	b.n	80056e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685c      	ldr	r4, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056b6:	b29e      	uxth	r6, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff ff88 	bl	80055d4 <makeFreeRtosPriority>
 80056c4:	4602      	mov	r2, r0
 80056c6:	f107 030c 	add.w	r3, r7, #12
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	9200      	str	r2, [sp, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	4632      	mov	r2, r6
 80056d2:	4629      	mov	r1, r5
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 ff62 	bl	800659e <xTaskCreate>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d001      	beq.n	80056e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e000      	b.n	80056e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056e4:	68fb      	ldr	r3, [r7, #12]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056ee <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af02      	add	r7, sp, #8
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00f      	beq.n	8005720 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10a      	bne.n	800571c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2203      	movs	r2, #3
 800570c:	9200      	str	r2, [sp, #0]
 800570e:	2200      	movs	r2, #0
 8005710:	2100      	movs	r1, #0
 8005712:	2001      	movs	r0, #1
 8005714:	f000 f9d4 	bl	8005ac0 <xQueueGenericCreateStatic>
 8005718:	4603      	mov	r3, r0
 800571a:	e016      	b.n	800574a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800571c:	2300      	movs	r3, #0
 800571e:	e014      	b.n	800574a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d110      	bne.n	8005748 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005726:	2203      	movs	r2, #3
 8005728:	2100      	movs	r1, #0
 800572a:	2001      	movs	r0, #1
 800572c:	f000 fa40 	bl	8005bb0 <xQueueGenericCreate>
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <osSemaphoreCreate+0x56>
 8005738:	2300      	movs	r3, #0
 800573a:	2200      	movs	r2, #0
 800573c:	2100      	movs	r1, #0
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fa90 	bl	8005c64 <xQueueGenericSend>
      return sema;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	e000      	b.n	800574a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005748:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	e03a      	b.n	80057e2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d103      	bne.n	8005780 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005778:	f04f 33ff 	mov.w	r3, #4294967295
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e009      	b.n	8005794 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <osSemaphoreWait+0x40>
      ticks = 1;
 8005790:	2301      	movs	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005794:	f7ff ff36 	bl	8005604 <inHandlerMode>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d017      	beq.n	80057ce <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800579e:	f107 0308 	add.w	r3, r7, #8
 80057a2:	461a      	mov	r2, r3
 80057a4:	2100      	movs	r1, #0
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fcf4 	bl	8006194 <xQueueReceiveFromISR>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d001      	beq.n	80057b6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80057b2:	23ff      	movs	r3, #255	; 0xff
 80057b4:	e015      	b.n	80057e2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d011      	beq.n	80057e0 <osSemaphoreWait+0x8c>
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <osSemaphoreWait+0x98>)
 80057be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	e008      	b.n	80057e0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fbd3 	bl	8005f7c <xQueueSemaphoreTake>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d001      	beq.n	80057e0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80057dc:	23ff      	movs	r3, #255	; 0xff
 80057de:	e000      	b.n	80057e2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005800:	f7ff ff00 	bl	8005604 <inHandlerMode>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d016      	beq.n	8005838 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800580a:	f107 0308 	add.w	r3, r7, #8
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fb25 	bl	8005e60 <xQueueGiveFromISR>
 8005816:	4603      	mov	r3, r0
 8005818:	2b01      	cmp	r3, #1
 800581a:	d001      	beq.n	8005820 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800581c:	23ff      	movs	r3, #255	; 0xff
 800581e:	e017      	b.n	8005850 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d013      	beq.n	800584e <osSemaphoreRelease+0x5e>
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <osSemaphoreRelease+0x68>)
 8005828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	e00a      	b.n	800584e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005838:	2300      	movs	r3, #0
 800583a:	2200      	movs	r2, #0
 800583c:	2100      	movs	r1, #0
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa10 	bl	8005c64 <xQueueGenericSend>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d001      	beq.n	800584e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800584a:	23ff      	movs	r3, #255	; 0xff
 800584c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800584e:	68fb      	ldr	r3, [r7, #12]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <osDelayUntil+0x18>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	e000      	b.n	8005876 <osDelayUntil+0x1a>
 8005874:	2301      	movs	r3, #1
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 ffc7 	bl	800680c <vTaskDelayUntil>
  
  return osOK;
 800587e:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f103 0208 	add.w	r2, r3, #8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f04f 32ff 	mov.w	r2, #4294967295
 80058a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f103 0208 	add.w	r2, r3, #8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f103 0208 	add.w	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	601a      	str	r2, [r3, #0]
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d103      	bne.n	800594a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e00c      	b.n	8005964 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3308      	adds	r3, #8
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e002      	b.n	8005958 <vListInsert+0x2e>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	d2f6      	bcs.n	8005952 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6892      	ldr	r2, [r2, #8]
 80059b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6852      	ldr	r2, [r2, #4]
 80059bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d103      	bne.n	80059d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	1e5a      	subs	r2, r3, #1
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a1a:	f002 f803 	bl	8007a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a2a:	fb01 f303 	mul.w	r3, r1, r3
 8005a2e:	441a      	add	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	68f9      	ldr	r1, [r7, #12]
 8005a4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a50:	fb01 f303 	mul.w	r3, r1, r3
 8005a54:	441a      	add	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	22ff      	movs	r2, #255	; 0xff
 8005a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d114      	bne.n	8005a9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01a      	beq.n	8005aae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3310      	adds	r3, #16
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 fac9 	bl	8007014 <xTaskRemoveFromEventList>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d012      	beq.n	8005aae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <xQueueGenericReset+0xcc>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	e009      	b.n	8005aae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3310      	adds	r3, #16
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fef2 	bl	8005888 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff feed 	bl	8005888 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005aae:	f001 ffe9 	bl	8007a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ab2:	2301      	movs	r3, #1
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	e000ed04 	.word	0xe000ed04

08005ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08e      	sub	sp, #56	; 0x38
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <xQueueGenericCreateStatic+0x52>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <xQueueGenericCreateStatic+0x56>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <xQueueGenericCreateStatic+0x58>
 8005b16:	2300      	movs	r3, #0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	623b      	str	r3, [r7, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <xQueueGenericCreateStatic+0x7e>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <xQueueGenericCreateStatic+0x82>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <xQueueGenericCreateStatic+0x84>
 8005b42:	2300      	movs	r3, #0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	61fb      	str	r3, [r7, #28]
}
 8005b5a:	bf00      	nop
 8005b5c:	e7fe      	b.n	8005b5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b5e:	2348      	movs	r3, #72	; 0x48
 8005b60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b48      	cmp	r3, #72	; 0x48
 8005b66:	d00a      	beq.n	8005b7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	61bb      	str	r3, [r7, #24]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f83f 	bl	8005c24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3730      	adds	r7, #48	; 0x30
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xQueueGenericCreate+0x2a>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	613b      	str	r3, [r7, #16]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	3348      	adds	r3, #72	; 0x48
 8005be8:	4618      	mov	r0, r3
 8005bea:	f002 f83d 	bl	8007c68 <pvPortMalloc>
 8005bee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	3348      	adds	r3, #72	; 0x48
 8005bfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c08:	79fa      	ldrb	r2, [r7, #7]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f805 	bl	8005c24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3720      	adds	r7, #32
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e002      	b.n	8005c46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c52:	2101      	movs	r1, #1
 8005c54:	69b8      	ldr	r0, [r7, #24]
 8005c56:	f7ff fecb 	bl	80059f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08e      	sub	sp, #56	; 0x38
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c72:	2300      	movs	r3, #0
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <xQueueGenericSend+0x32>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d103      	bne.n	8005ca4 <xQueueGenericSend+0x40>
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <xQueueGenericSend+0x44>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <xQueueGenericSend+0x46>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <xQueueGenericSend+0x60>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d103      	bne.n	8005cd2 <xQueueGenericSend+0x6e>
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <xQueueGenericSend+0x72>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <xQueueGenericSend+0x74>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10a      	bne.n	8005cf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	623b      	str	r3, [r7, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf2:	f001 fb4b 	bl	800738c <xTaskGetSchedulerState>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <xQueueGenericSend+0x9e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <xQueueGenericSend+0xa2>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <xQueueGenericSend+0xa4>
 8005d06:	2300      	movs	r3, #0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <xQueueGenericSend+0xbe>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	61fb      	str	r3, [r7, #28]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d22:	f001 fe7f 	bl	8007a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d302      	bcc.n	8005d38 <xQueueGenericSend+0xd4>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d129      	bne.n	8005d8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d3e:	f000 fac1 	bl	80062c4 <prvCopyDataToQueue>
 8005d42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d010      	beq.n	8005d6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	3324      	adds	r3, #36	; 0x24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 f95f 	bl	8007014 <xTaskRemoveFromEventList>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d013      	beq.n	8005d84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d5c:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <xQueueGenericSend+0x1f8>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	e00a      	b.n	8005d84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d74:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <xQueueGenericSend+0x1f8>)
 8005d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d84:	f001 fe7e 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e063      	b.n	8005e54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d103      	bne.n	8005d9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d92:	f001 fe77 	bl	8007a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e05c      	b.n	8005e54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d106      	bne.n	8005dae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005da0:	f107 0314 	add.w	r3, r7, #20
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 f997 	bl	80070d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dae:	f001 fe69 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005db2:	f000 ff2b 	bl	8006c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005db6:	f001 fe35 	bl	8007a24 <vPortEnterCritical>
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc0:	b25b      	sxtb	r3, r3
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc6:	d103      	bne.n	8005dd0 <xQueueGenericSend+0x16c>
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dd6:	b25b      	sxtb	r3, r3
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d103      	bne.n	8005de6 <xQueueGenericSend+0x182>
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de6:	f001 fe4d 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dea:	1d3a      	adds	r2, r7, #4
 8005dec:	f107 0314 	add.w	r3, r7, #20
 8005df0:	4611      	mov	r1, r2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f001 f986 	bl	8007104 <xTaskCheckForTimeOut>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d124      	bne.n	8005e48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e00:	f000 fb58 	bl	80064b4 <prvIsQueueFull>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d018      	beq.n	8005e3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	3310      	adds	r3, #16
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	4611      	mov	r1, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 f8da 	bl	8006fcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e1a:	f000 fae3 	bl	80063e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e1e:	f000 ff03 	bl	8006c28 <xTaskResumeAll>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f47f af7c 	bne.w	8005d22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e2a:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <xQueueGenericSend+0x1f8>)
 8005e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	e772      	b.n	8005d22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e3e:	f000 fad1 	bl	80063e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e42:	f000 fef1 	bl	8006c28 <xTaskResumeAll>
 8005e46:	e76c      	b.n	8005d22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e4a:	f000 facb 	bl	80063e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e4e:	f000 feeb 	bl	8006c28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3738      	adds	r7, #56	; 0x38
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08e      	sub	sp, #56	; 0x38
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	623b      	str	r3, [r7, #32]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	61fb      	str	r3, [r7, #28]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <xQueueGiveFromISR+0x58>
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <xQueueGiveFromISR+0x5c>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <xQueueGiveFromISR+0x5e>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	61bb      	str	r3, [r7, #24]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ed8:	f001 fe86 	bl	8007be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005edc:	f3ef 8211 	mrs	r2, BASEPRI
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	617a      	str	r2, [r7, #20]
 8005ef2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ef4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d22b      	bcs.n	8005f60 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d112      	bne.n	8005f4a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d016      	beq.n	8005f5a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	3324      	adds	r3, #36	; 0x24
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 f86f 	bl	8007014 <xTaskRemoveFromEventList>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00e      	beq.n	8005f5a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00b      	beq.n	8005f5a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2201      	movs	r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e007      	b.n	8005f5a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f4e:	3301      	adds	r3, #1
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	b25a      	sxtb	r2, r3
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5e:	e001      	b.n	8005f64 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3738      	adds	r7, #56	; 0x38
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08e      	sub	sp, #56	; 0x38
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	623b      	str	r3, [r7, #32]
}
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	61fb      	str	r3, [r7, #28]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fcc:	f001 f9de 	bl	800738c <xTaskGetSchedulerState>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <xQueueSemaphoreTake+0x60>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <xQueueSemaphoreTake+0x64>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <xQueueSemaphoreTake+0x66>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	61bb      	str	r3, [r7, #24]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ffc:	f001 fd12 	bl	8007a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	2b00      	cmp	r3, #0
 800600a:	d024      	beq.n	8006056 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	1e5a      	subs	r2, r3, #1
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800601c:	f001 fb5e 	bl	80076dc <pvTaskIncrementMutexHeldCount>
 8006020:	4602      	mov	r2, r0
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00f      	beq.n	800604e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	3310      	adds	r3, #16
 8006032:	4618      	mov	r0, r3
 8006034:	f000 ffee 	bl	8007014 <xTaskRemoveFromEventList>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800603e:	4b54      	ldr	r3, [pc, #336]	; (8006190 <xQueueSemaphoreTake+0x214>)
 8006040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800604e:	f001 fd19 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 8006052:	2301      	movs	r3, #1
 8006054:	e097      	b.n	8006186 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d111      	bne.n	8006080 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	617b      	str	r3, [r7, #20]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006078:	f001 fd04 	bl	8007a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800607c:	2300      	movs	r3, #0
 800607e:	e082      	b.n	8006186 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006086:	f107 030c 	add.w	r3, r7, #12
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f824 	bl	80070d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006094:	f001 fcf6 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006098:	f000 fdb8 	bl	8006c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800609c:	f001 fcc2 	bl	8007a24 <vPortEnterCritical>
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060a6:	b25b      	sxtb	r3, r3
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d103      	bne.n	80060b6 <xQueueSemaphoreTake+0x13a>
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d103      	bne.n	80060cc <xQueueSemaphoreTake+0x150>
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060cc:	f001 fcda 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060d0:	463a      	mov	r2, r7
 80060d2:	f107 030c 	add.w	r3, r7, #12
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 f813 	bl	8007104 <xTaskCheckForTimeOut>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d132      	bne.n	800614a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060e6:	f000 f9cf 	bl	8006488 <prvIsQueueEmpty>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d026      	beq.n	800613e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d109      	bne.n	800610c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80060f8:	f001 fc94 	bl	8007a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	4618      	mov	r0, r3
 8006102:	f001 f961 	bl	80073c8 <xTaskPriorityInherit>
 8006106:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006108:	f001 fcbc 	bl	8007a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	3324      	adds	r3, #36	; 0x24
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f000 ff59 	bl	8006fcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800611a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800611c:	f000 f962 	bl	80063e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006120:	f000 fd82 	bl	8006c28 <xTaskResumeAll>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	f47f af68 	bne.w	8005ffc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800612c:	4b18      	ldr	r3, [pc, #96]	; (8006190 <xQueueSemaphoreTake+0x214>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	e75e      	b.n	8005ffc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800613e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006140:	f000 f950 	bl	80063e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006144:	f000 fd70 	bl	8006c28 <xTaskResumeAll>
 8006148:	e758      	b.n	8005ffc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800614a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800614c:	f000 f94a 	bl	80063e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006150:	f000 fd6a 	bl	8006c28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006154:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006156:	f000 f997 	bl	8006488 <prvIsQueueEmpty>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	f43f af4d 	beq.w	8005ffc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00d      	beq.n	8006184 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006168:	f001 fc5c 	bl	8007a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800616c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800616e:	f000 f891 	bl	8006294 <prvGetDisinheritPriorityAfterTimeout>
 8006172:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800617a:	4618      	mov	r0, r3
 800617c:	f001 fa20 	bl	80075c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006180:	f001 fc80 	bl	8007a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006184:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006186:	4618      	mov	r0, r3
 8006188:	3738      	adds	r7, #56	; 0x38
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08e      	sub	sp, #56	; 0x38
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	623b      	str	r3, [r7, #32]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <xQueueReceiveFromISR+0x3a>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <xQueueReceiveFromISR+0x3e>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <xQueueReceiveFromISR+0x40>
 80061d2:	2300      	movs	r3, #0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	61fb      	str	r3, [r7, #28]
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061ee:	f001 fcfb 	bl	8007be8 <vPortValidateInterruptPriority>
	__asm volatile
 80061f2:	f3ef 8211 	mrs	r2, BASEPRI
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	61ba      	str	r2, [r7, #24]
 8006208:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800620a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	2b00      	cmp	r3, #0
 8006218:	d02f      	beq.n	800627a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006228:	f000 f8b6 	bl	8006398 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	1e5a      	subs	r2, r3, #1
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006234:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623c:	d112      	bne.n	8006264 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d016      	beq.n	8006274 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	3310      	adds	r3, #16
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fee2 	bl	8007014 <xTaskRemoveFromEventList>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00e      	beq.n	8006274 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	e007      	b.n	8006274 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006268:	3301      	adds	r3, #1
 800626a:	b2db      	uxtb	r3, r3
 800626c:	b25a      	sxtb	r2, r3
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006274:	2301      	movs	r3, #1
 8006276:	637b      	str	r3, [r7, #52]	; 0x34
 8006278:	e001      	b.n	800627e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800627a:	2300      	movs	r3, #0
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f383 8811 	msr	BASEPRI, r3
}
 8006288:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800628c:	4618      	mov	r0, r3
 800628e:	3738      	adds	r7, #56	; 0x38
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d006      	beq.n	80062b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1c3 0307 	rsb	r3, r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	e001      	b.n	80062b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062b6:	68fb      	ldr	r3, [r7, #12]
	}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10d      	bne.n	80062fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d14d      	bne.n	8006386 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 f8e0 	bl	80074b4 <xTaskPriorityDisinherit>
 80062f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	609a      	str	r2, [r3, #8]
 80062fc:	e043      	b.n	8006386 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d119      	bne.n	8006338 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6858      	ldr	r0, [r3, #4]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	461a      	mov	r2, r3
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	f001 feb8 	bl	8008084 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	441a      	add	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	429a      	cmp	r2, r3
 800632c:	d32b      	bcc.n	8006386 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	e026      	b.n	8006386 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68d8      	ldr	r0, [r3, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	461a      	mov	r2, r3
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	f001 fe9e 	bl	8008084 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	425b      	negs	r3, r3
 8006352:	441a      	add	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d207      	bcs.n	8006374 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	425b      	negs	r3, r3
 800636e:	441a      	add	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d105      	bne.n	8006386 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	3b01      	subs	r3, #1
 8006384:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800638e:	697b      	ldr	r3, [r7, #20]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d018      	beq.n	80063dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	441a      	add	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d303      	bcc.n	80063cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68d9      	ldr	r1, [r3, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	461a      	mov	r2, r3
 80063d6:	6838      	ldr	r0, [r7, #0]
 80063d8:	f001 fe54 	bl	8008084 <memcpy>
	}
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063ec:	f001 fb1a 	bl	8007a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063f8:	e011      	b.n	800641e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d012      	beq.n	8006428 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3324      	adds	r3, #36	; 0x24
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fe04 	bl	8007014 <xTaskRemoveFromEventList>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006412:	f000 fed9 	bl	80071c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	3b01      	subs	r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800641e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006422:	2b00      	cmp	r3, #0
 8006424:	dce9      	bgt.n	80063fa <prvUnlockQueue+0x16>
 8006426:	e000      	b.n	800642a <prvUnlockQueue+0x46>
					break;
 8006428:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	22ff      	movs	r2, #255	; 0xff
 800642e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006432:	f001 fb27 	bl	8007a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006436:	f001 faf5 	bl	8007a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006440:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006442:	e011      	b.n	8006468 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d012      	beq.n	8006472 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3310      	adds	r3, #16
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fddf 	bl	8007014 <xTaskRemoveFromEventList>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800645c:	f000 feb4 	bl	80071c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	3b01      	subs	r3, #1
 8006464:	b2db      	uxtb	r3, r3
 8006466:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800646c:	2b00      	cmp	r3, #0
 800646e:	dce9      	bgt.n	8006444 <prvUnlockQueue+0x60>
 8006470:	e000      	b.n	8006474 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006472:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	22ff      	movs	r2, #255	; 0xff
 8006478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800647c:	f001 fb02 	bl	8007a84 <vPortExitCritical>
}
 8006480:	bf00      	nop
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006490:	f001 fac8 	bl	8007a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800649c:	2301      	movs	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e001      	b.n	80064a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064a6:	f001 faed 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 80064aa:	68fb      	ldr	r3, [r7, #12]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064bc:	f001 fab2 	bl	8007a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d102      	bne.n	80064d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064cc:	2301      	movs	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e001      	b.n	80064d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064d6:	f001 fad5 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 80064da:	68fb      	ldr	r3, [r7, #12]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08e      	sub	sp, #56	; 0x38
 80064e8:	af04      	add	r7, sp, #16
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xTaskCreateStatic+0x2a>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	623b      	str	r3, [r7, #32]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <xTaskCreateStatic+0x46>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	61fb      	str	r3, [r7, #28]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800652a:	2354      	movs	r3, #84	; 0x54
 800652c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b54      	cmp	r3, #84	; 0x54
 8006532:	d00a      	beq.n	800654a <xTaskCreateStatic+0x66>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	61bb      	str	r3, [r7, #24]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800654a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01e      	beq.n	8006590 <xTaskCreateStatic+0xac>
 8006552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01b      	beq.n	8006590 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006560:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	2202      	movs	r2, #2
 8006566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800656a:	2300      	movs	r3, #0
 800656c:	9303      	str	r3, [sp, #12]
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	9302      	str	r3, [sp, #8]
 8006572:	f107 0314 	add.w	r3, r7, #20
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f850 	bl	8006628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800658a:	f000 f8d5 	bl	8006738 <prvAddNewTaskToReadyList>
 800658e:	e001      	b.n	8006594 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006594:	697b      	ldr	r3, [r7, #20]
	}
 8006596:	4618      	mov	r0, r3
 8006598:	3728      	adds	r7, #40	; 0x28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b08c      	sub	sp, #48	; 0x30
 80065a2:	af04      	add	r7, sp, #16
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 fb58 	bl	8007c68 <pvPortMalloc>
 80065b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00e      	beq.n	80065de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065c0:	2054      	movs	r0, #84	; 0x54
 80065c2:	f001 fb51 	bl	8007c68 <pvPortMalloc>
 80065c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
 80065d4:	e005      	b.n	80065e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065d6:	6978      	ldr	r0, [r7, #20]
 80065d8:	f001 fc12 	bl	8007e00 <vPortFree>
 80065dc:	e001      	b.n	80065e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d017      	beq.n	8006618 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065f0:	88fa      	ldrh	r2, [r7, #6]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9303      	str	r3, [sp, #12]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f80e 	bl	8006628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800660c:	69f8      	ldr	r0, [r7, #28]
 800660e:	f000 f893 	bl	8006738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006612:	2301      	movs	r3, #1
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	e002      	b.n	800661e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006618:	f04f 33ff 	mov.w	r3, #4294967295
 800661c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800661e:	69bb      	ldr	r3, [r7, #24]
	}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006640:	3b01      	subs	r3, #1
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f023 0307 	bic.w	r3, r3, #7
 800664e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <prvInitialiseNewTask+0x48>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	617b      	str	r3, [r7, #20]
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01f      	beq.n	80066b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	e012      	b.n	80066a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	7819      	ldrb	r1, [r3, #0]
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	3334      	adds	r3, #52	; 0x34
 800668c:	460a      	mov	r2, r1
 800668e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d006      	beq.n	80066aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	3301      	adds	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2b0f      	cmp	r3, #15
 80066a6:	d9e9      	bls.n	800667c <prvInitialiseNewTask+0x54>
 80066a8:	e000      	b.n	80066ac <prvInitialiseNewTask+0x84>
			{
				break;
 80066aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b4:	e003      	b.n	80066be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	2b06      	cmp	r3, #6
 80066c2:	d901      	bls.n	80066c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066c4:	2306      	movs	r3, #6
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	2200      	movs	r2, #0
 80066d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	3304      	adds	r3, #4
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff f8f2 	bl	80058c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	3318      	adds	r3, #24
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff f8ed 	bl	80058c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	f1c3 0207 	rsb	r2, r3, #7
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006702:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	2200      	movs	r2, #0
 8006708:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	68f9      	ldr	r1, [r7, #12]
 8006716:	69b8      	ldr	r0, [r7, #24]
 8006718:	f001 f85a 	bl	80077d0 <pxPortInitialiseStack>
 800671c:	4602      	mov	r2, r0
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800672e:	bf00      	nop
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006740:	f001 f970 	bl	8007a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006744:	4b2a      	ldr	r3, [pc, #168]	; (80067f0 <prvAddNewTaskToReadyList+0xb8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	4a29      	ldr	r2, [pc, #164]	; (80067f0 <prvAddNewTaskToReadyList+0xb8>)
 800674c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800674e:	4b29      	ldr	r3, [pc, #164]	; (80067f4 <prvAddNewTaskToReadyList+0xbc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006756:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <prvAddNewTaskToReadyList+0xbc>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800675c:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <prvAddNewTaskToReadyList+0xb8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d110      	bne.n	8006786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006764:	f000 fd54 	bl	8007210 <prvInitialiseTaskLists>
 8006768:	e00d      	b.n	8006786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800676a:	4b23      	ldr	r3, [pc, #140]	; (80067f8 <prvAddNewTaskToReadyList+0xc0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006772:	4b20      	ldr	r3, [pc, #128]	; (80067f4 <prvAddNewTaskToReadyList+0xbc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	429a      	cmp	r2, r3
 800677e:	d802      	bhi.n	8006786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006780:	4a1c      	ldr	r2, [pc, #112]	; (80067f4 <prvAddNewTaskToReadyList+0xbc>)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006786:	4b1d      	ldr	r3, [pc, #116]	; (80067fc <prvAddNewTaskToReadyList+0xc4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <prvAddNewTaskToReadyList+0xc4>)
 800678e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	2201      	movs	r2, #1
 8006796:	409a      	lsls	r2, r3
 8006798:	4b19      	ldr	r3, [pc, #100]	; (8006800 <prvAddNewTaskToReadyList+0xc8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4313      	orrs	r3, r2
 800679e:	4a18      	ldr	r2, [pc, #96]	; (8006800 <prvAddNewTaskToReadyList+0xc8>)
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4a15      	ldr	r2, [pc, #84]	; (8006804 <prvAddNewTaskToReadyList+0xcc>)
 80067b0:	441a      	add	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f7ff f892 	bl	80058e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067be:	f001 f961 	bl	8007a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <prvAddNewTaskToReadyList+0xc0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00e      	beq.n	80067e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067ca:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <prvAddNewTaskToReadyList+0xbc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d207      	bcs.n	80067e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <prvAddNewTaskToReadyList+0xd0>)
 80067da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	200003b0 	.word	0x200003b0
 80067f4:	200002b0 	.word	0x200002b0
 80067f8:	200003bc 	.word	0x200003bc
 80067fc:	200003cc 	.word	0x200003cc
 8006800:	200003b8 	.word	0x200003b8
 8006804:	200002b4 	.word	0x200002b4
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <vTaskDelayUntil+0x2a>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	617b      	str	r3, [r7, #20]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <vTaskDelayUntil+0x46>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	613b      	str	r3, [r7, #16]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006852:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <vTaskDelayUntil+0xf0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <vTaskDelayUntil+0x64>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	60fb      	str	r3, [r7, #12]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006870:	f000 f9cc 	bl	8006c0c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006874:	4b22      	ldr	r3, [pc, #136]	; (8006900 <vTaskDelayUntil+0xf4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4413      	add	r3, r2
 8006882:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6a3a      	ldr	r2, [r7, #32]
 800688a:	429a      	cmp	r2, r3
 800688c:	d20b      	bcs.n	80068a6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	429a      	cmp	r2, r3
 8006896:	d211      	bcs.n	80068bc <vTaskDelayUntil+0xb0>
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	429a      	cmp	r2, r3
 800689e:	d90d      	bls.n	80068bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
 80068a4:	e00a      	b.n	80068bc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d303      	bcc.n	80068b8 <vTaskDelayUntil+0xac>
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d901      	bls.n	80068bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d006      	beq.n	80068d6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2100      	movs	r1, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 ff17 	bl	8007704 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80068d6:	f000 f9a7 	bl	8006c28 <xTaskResumeAll>
 80068da:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d107      	bne.n	80068f2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <vTaskDelayUntil+0xf8>)
 80068e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068f2:	bf00      	nop
 80068f4:	3728      	adds	r7, #40	; 0x28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	200003d8 	.word	0x200003d8
 8006900:	200003b4 	.word	0x200003b4
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006910:	f001 f888 	bl	8007a24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <vTaskSuspend+0x18>
 800691a:	4b3c      	ldr	r3, [pc, #240]	; (8006a0c <vTaskSuspend+0x104>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	e000      	b.n	8006922 <vTaskSuspend+0x1a>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3304      	adds	r3, #4
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff f837 	bl	800599c <uxListRemove>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d115      	bne.n	8006960 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006938:	4935      	ldr	r1, [pc, #212]	; (8006a10 <vTaskSuspend+0x108>)
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <vTaskSuspend+0x58>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	2201      	movs	r2, #1
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	43da      	mvns	r2, r3
 8006956:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <vTaskSuspend+0x10c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4013      	ands	r3, r2
 800695c:	4a2d      	ldr	r2, [pc, #180]	; (8006a14 <vTaskSuspend+0x10c>)
 800695e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d004      	beq.n	8006972 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3318      	adds	r3, #24
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff f815 	bl	800599c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3304      	adds	r3, #4
 8006976:	4619      	mov	r1, r3
 8006978:	4827      	ldr	r0, [pc, #156]	; (8006a18 <vTaskSuspend+0x110>)
 800697a:	f7fe ffb2 	bl	80058e2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	d103      	bne.n	8006992 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006992:	f001 f877 	bl	8007a84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006996:	4b21      	ldr	r3, [pc, #132]	; (8006a1c <vTaskSuspend+0x114>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800699e:	f001 f841 	bl	8007a24 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80069a2:	f000 fcd3 	bl	800734c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80069a6:	f001 f86d 	bl	8007a84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80069aa:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <vTaskSuspend+0x104>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d127      	bne.n	8006a04 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80069b4:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <vTaskSuspend+0x114>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d017      	beq.n	80069ec <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80069bc:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <vTaskSuspend+0x118>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <vTaskSuspend+0xd2>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60bb      	str	r3, [r7, #8]
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80069da:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <vTaskSuspend+0x11c>)
 80069dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069ea:	e00b      	b.n	8006a04 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <vTaskSuspend+0x110>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <vTaskSuspend+0x120>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d103      	bne.n	8006a00 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80069f8:	4b04      	ldr	r3, [pc, #16]	; (8006a0c <vTaskSuspend+0x104>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
	}
 80069fe:	e001      	b.n	8006a04 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8006a00:	f000 fa88 	bl	8006f14 <vTaskSwitchContext>
	}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	200002b0 	.word	0x200002b0
 8006a10:	200002b4 	.word	0x200002b4
 8006a14:	200003b8 	.word	0x200003b8
 8006a18:	2000039c 	.word	0x2000039c
 8006a1c:	200003bc 	.word	0x200003bc
 8006a20:	200003d8 	.word	0x200003d8
 8006a24:	e000ed04 	.word	0xe000ed04
 8006a28:	200003b0 	.word	0x200003b0

08006a2c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	60fb      	str	r3, [r7, #12]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	4a0a      	ldr	r2, [pc, #40]	; (8006a88 <prvTaskIsTaskSuspended+0x5c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d10a      	bne.n	8006a78 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <prvTaskIsTaskSuspended+0x60>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d005      	beq.n	8006a78 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a78:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	2000039c 	.word	0x2000039c
 8006a8c:	20000370 	.word	0x20000370

08006a90 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <vTaskResume+0x28>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	60bb      	str	r3, [r7, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006ab8:	4b20      	ldr	r3, [pc, #128]	; (8006b3c <vTaskResume+0xac>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d037      	beq.n	8006b32 <vTaskResume+0xa2>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d034      	beq.n	8006b32 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8006ac8:	f000 ffac 	bl	8007a24 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff ffad 	bl	8006a2c <prvTaskIsTaskSuspended>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d02a      	beq.n	8006b2e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe ff5d 	bl	800599c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	409a      	lsls	r2, r3
 8006aea:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <vTaskResume+0xb0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <vTaskResume+0xb0>)
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af8:	4613      	mov	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4a10      	ldr	r2, [pc, #64]	; (8006b44 <vTaskResume+0xb4>)
 8006b02:	441a      	add	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3304      	adds	r3, #4
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	f7fe fee9 	bl	80058e2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <vTaskResume+0xac>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d307      	bcc.n	8006b2e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <vTaskResume+0xb8>)
 8006b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006b2e:	f000 ffa9 	bl	8007a84 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200002b0 	.word	0x200002b0
 8006b40:	200003b8 	.word	0x200003b8
 8006b44:	200002b4 	.word	0x200002b4
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	; 0x28
 8006b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b5a:	463a      	mov	r2, r7
 8006b5c:	1d39      	adds	r1, r7, #4
 8006b5e:	f107 0308 	add.w	r3, r7, #8
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fa f8ce 	bl	8000d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	9202      	str	r2, [sp, #8]
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	2300      	movs	r3, #0
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	2300      	movs	r3, #0
 8006b78:	460a      	mov	r2, r1
 8006b7a:	491e      	ldr	r1, [pc, #120]	; (8006bf4 <vTaskStartScheduler+0xa8>)
 8006b7c:	481e      	ldr	r0, [pc, #120]	; (8006bf8 <vTaskStartScheduler+0xac>)
 8006b7e:	f7ff fcb1 	bl	80064e4 <xTaskCreateStatic>
 8006b82:	4603      	mov	r3, r0
 8006b84:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <vTaskStartScheduler+0xb0>)
 8006b86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b88:	4b1c      	ldr	r3, [pc, #112]	; (8006bfc <vTaskStartScheduler+0xb0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	e001      	b.n	8006b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d116      	bne.n	8006bce <vTaskStartScheduler+0x82>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	613b      	str	r3, [r7, #16]
}
 8006bb2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bb4:	4b12      	ldr	r3, [pc, #72]	; (8006c00 <vTaskStartScheduler+0xb4>)
 8006bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bbc:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <vTaskStartScheduler+0xb8>)
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bc2:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <vTaskStartScheduler+0xbc>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bc8:	f000 fe8a 	bl	80078e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bcc:	e00e      	b.n	8006bec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd4:	d10a      	bne.n	8006bec <vTaskStartScheduler+0xa0>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	60fb      	str	r3, [r7, #12]
}
 8006be8:	bf00      	nop
 8006bea:	e7fe      	b.n	8006bea <vTaskStartScheduler+0x9e>
}
 8006bec:	bf00      	nop
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	0800816c 	.word	0x0800816c
 8006bf8:	080071e1 	.word	0x080071e1
 8006bfc:	200003d4 	.word	0x200003d4
 8006c00:	200003d0 	.word	0x200003d0
 8006c04:	200003bc 	.word	0x200003bc
 8006c08:	200003b4 	.word	0x200003b4

08006c0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c10:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <vTaskSuspendAll+0x18>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	4a03      	ldr	r2, [pc, #12]	; (8006c24 <vTaskSuspendAll+0x18>)
 8006c18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c1a:	bf00      	nop
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	200003d8 	.word	0x200003d8

08006c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c36:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <xTaskResumeAll+0x114>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <xTaskResumeAll+0x2c>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	603b      	str	r3, [r7, #0]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c54:	f000 fee6 	bl	8007a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c58:	4b38      	ldr	r3, [pc, #224]	; (8006d3c <xTaskResumeAll+0x114>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	4a37      	ldr	r2, [pc, #220]	; (8006d3c <xTaskResumeAll+0x114>)
 8006c60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c62:	4b36      	ldr	r3, [pc, #216]	; (8006d3c <xTaskResumeAll+0x114>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d161      	bne.n	8006d2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c6a:	4b35      	ldr	r3, [pc, #212]	; (8006d40 <xTaskResumeAll+0x118>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d05d      	beq.n	8006d2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c72:	e02e      	b.n	8006cd2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c74:	4b33      	ldr	r3, [pc, #204]	; (8006d44 <xTaskResumeAll+0x11c>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3318      	adds	r3, #24
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fe8b 	bl	800599c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fe86 	bl	800599c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	2201      	movs	r2, #1
 8006c96:	409a      	lsls	r2, r3
 8006c98:	4b2b      	ldr	r3, [pc, #172]	; (8006d48 <xTaskResumeAll+0x120>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	4a2a      	ldr	r2, [pc, #168]	; (8006d48 <xTaskResumeAll+0x120>)
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4a27      	ldr	r2, [pc, #156]	; (8006d4c <xTaskResumeAll+0x124>)
 8006cb0:	441a      	add	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f7fe fe12 	bl	80058e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc2:	4b23      	ldr	r3, [pc, #140]	; (8006d50 <xTaskResumeAll+0x128>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d302      	bcc.n	8006cd2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ccc:	4b21      	ldr	r3, [pc, #132]	; (8006d54 <xTaskResumeAll+0x12c>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cd2:	4b1c      	ldr	r3, [pc, #112]	; (8006d44 <xTaskResumeAll+0x11c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1cc      	bne.n	8006c74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ce0:	f000 fb34 	bl	800734c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ce4:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <xTaskResumeAll+0x130>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d010      	beq.n	8006d12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cf0:	f000 f858 	bl	8006da4 <xTaskIncrementTick>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006cfa:	4b16      	ldr	r3, [pc, #88]	; (8006d54 <xTaskResumeAll+0x12c>)
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1f1      	bne.n	8006cf0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006d0c:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <xTaskResumeAll+0x130>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d12:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <xTaskResumeAll+0x12c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d1e:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <xTaskResumeAll+0x134>)
 8006d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d2e:	f000 fea9 	bl	8007a84 <vPortExitCritical>

	return xAlreadyYielded;
 8006d32:	68bb      	ldr	r3, [r7, #8]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	200003d8 	.word	0x200003d8
 8006d40:	200003b0 	.word	0x200003b0
 8006d44:	20000370 	.word	0x20000370
 8006d48:	200003b8 	.word	0x200003b8
 8006d4c:	200002b4 	.word	0x200002b4
 8006d50:	200002b0 	.word	0x200002b0
 8006d54:	200003c4 	.word	0x200003c4
 8006d58:	200003c0 	.word	0x200003c0
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <xTaskGetTickCount+0x1c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d6c:	687b      	ldr	r3, [r7, #4]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	200003b4 	.word	0x200003b4

08006d80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d86:	f000 ff2f 	bl	8007be8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006d8e:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <xTaskGetTickCountFromISR+0x20>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d94:	683b      	ldr	r3, [r7, #0]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	200003b4 	.word	0x200003b4

08006da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dae:	4b4e      	ldr	r3, [pc, #312]	; (8006ee8 <xTaskIncrementTick+0x144>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f040 808e 	bne.w	8006ed4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006db8:	4b4c      	ldr	r3, [pc, #304]	; (8006eec <xTaskIncrementTick+0x148>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006dc0:	4a4a      	ldr	r2, [pc, #296]	; (8006eec <xTaskIncrementTick+0x148>)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d120      	bne.n	8006e0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dcc:	4b48      	ldr	r3, [pc, #288]	; (8006ef0 <xTaskIncrementTick+0x14c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <xTaskIncrementTick+0x48>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	603b      	str	r3, [r7, #0]
}
 8006de8:	bf00      	nop
 8006dea:	e7fe      	b.n	8006dea <xTaskIncrementTick+0x46>
 8006dec:	4b40      	ldr	r3, [pc, #256]	; (8006ef0 <xTaskIncrementTick+0x14c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	4b40      	ldr	r3, [pc, #256]	; (8006ef4 <xTaskIncrementTick+0x150>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a3e      	ldr	r2, [pc, #248]	; (8006ef0 <xTaskIncrementTick+0x14c>)
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	4a3e      	ldr	r2, [pc, #248]	; (8006ef4 <xTaskIncrementTick+0x150>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	4b3d      	ldr	r3, [pc, #244]	; (8006ef8 <xTaskIncrementTick+0x154>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	4a3c      	ldr	r2, [pc, #240]	; (8006ef8 <xTaskIncrementTick+0x154>)
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	f000 fa9f 	bl	800734c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e0e:	4b3b      	ldr	r3, [pc, #236]	; (8006efc <xTaskIncrementTick+0x158>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d348      	bcc.n	8006eaa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e18:	4b35      	ldr	r3, [pc, #212]	; (8006ef0 <xTaskIncrementTick+0x14c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d104      	bne.n	8006e2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e22:	4b36      	ldr	r3, [pc, #216]	; (8006efc <xTaskIncrementTick+0x158>)
 8006e24:	f04f 32ff 	mov.w	r2, #4294967295
 8006e28:	601a      	str	r2, [r3, #0]
					break;
 8006e2a:	e03e      	b.n	8006eaa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e2c:	4b30      	ldr	r3, [pc, #192]	; (8006ef0 <xTaskIncrementTick+0x14c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d203      	bcs.n	8006e4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e44:	4a2d      	ldr	r2, [pc, #180]	; (8006efc <xTaskIncrementTick+0x158>)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e4a:	e02e      	b.n	8006eaa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe fda3 	bl	800599c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	3318      	adds	r3, #24
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fd9a 	bl	800599c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	4b23      	ldr	r3, [pc, #140]	; (8006f00 <xTaskIncrementTick+0x15c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	4a22      	ldr	r2, [pc, #136]	; (8006f00 <xTaskIncrementTick+0x15c>)
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4a1f      	ldr	r2, [pc, #124]	; (8006f04 <xTaskIncrementTick+0x160>)
 8006e88:	441a      	add	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7fe fd26 	bl	80058e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9a:	4b1b      	ldr	r3, [pc, #108]	; (8006f08 <xTaskIncrementTick+0x164>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d3b9      	bcc.n	8006e18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea8:	e7b6      	b.n	8006e18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006eaa:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <xTaskIncrementTick+0x164>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	4914      	ldr	r1, [pc, #80]	; (8006f04 <xTaskIncrementTick+0x160>)
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d901      	bls.n	8006ec6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ec6:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <xTaskIncrementTick+0x168>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d007      	beq.n	8006ede <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	e004      	b.n	8006ede <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <xTaskIncrementTick+0x16c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	4a0d      	ldr	r2, [pc, #52]	; (8006f10 <xTaskIncrementTick+0x16c>)
 8006edc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ede:	697b      	ldr	r3, [r7, #20]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	200003d8 	.word	0x200003d8
 8006eec:	200003b4 	.word	0x200003b4
 8006ef0:	20000368 	.word	0x20000368
 8006ef4:	2000036c 	.word	0x2000036c
 8006ef8:	200003c8 	.word	0x200003c8
 8006efc:	200003d0 	.word	0x200003d0
 8006f00:	200003b8 	.word	0x200003b8
 8006f04:	200002b4 	.word	0x200002b4
 8006f08:	200002b0 	.word	0x200002b0
 8006f0c:	200003c4 	.word	0x200003c4
 8006f10:	200003c0 	.word	0x200003c0

08006f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f1a:	4b27      	ldr	r3, [pc, #156]	; (8006fb8 <vTaskSwitchContext+0xa4>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f22:	4b26      	ldr	r3, [pc, #152]	; (8006fbc <vTaskSwitchContext+0xa8>)
 8006f24:	2201      	movs	r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f28:	e03f      	b.n	8006faa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006f2a:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <vTaskSwitchContext+0xa8>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f30:	4b23      	ldr	r3, [pc, #140]	; (8006fc0 <vTaskSwitchContext+0xac>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	fab3 f383 	clz	r3, r3
 8006f3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f3e:	7afb      	ldrb	r3, [r7, #11]
 8006f40:	f1c3 031f 	rsb	r3, r3, #31
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	491f      	ldr	r1, [pc, #124]	; (8006fc4 <vTaskSwitchContext+0xb0>)
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	607b      	str	r3, [r7, #4]
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <vTaskSwitchContext+0x5a>
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4a12      	ldr	r2, [pc, #72]	; (8006fc4 <vTaskSwitchContext+0xb0>)
 8006f7c:	4413      	add	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	605a      	str	r2, [r3, #4]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	3308      	adds	r3, #8
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d104      	bne.n	8006fa0 <vTaskSwitchContext+0x8c>
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	605a      	str	r2, [r3, #4]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <vTaskSwitchContext+0xb4>)
 8006fa8:	6013      	str	r3, [r2, #0]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	200003d8 	.word	0x200003d8
 8006fbc:	200003c4 	.word	0x200003c4
 8006fc0:	200003b8 	.word	0x200003b8
 8006fc4:	200002b4 	.word	0x200002b4
 8006fc8:	200002b0 	.word	0x200002b0

08006fcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60fb      	str	r3, [r7, #12]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ff2:	4b07      	ldr	r3, [pc, #28]	; (8007010 <vTaskPlaceOnEventList+0x44>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3318      	adds	r3, #24
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fe fc95 	bl	800592a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007000:	2101      	movs	r1, #1
 8007002:	6838      	ldr	r0, [r7, #0]
 8007004:	f000 fb7e 	bl	8007704 <prvAddCurrentTaskToDelayedList>
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	200002b0 	.word	0x200002b0

08007014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	60fb      	str	r3, [r7, #12]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	3318      	adds	r3, #24
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fca9 	bl	800599c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800704a:	4b1d      	ldr	r3, [pc, #116]	; (80070c0 <xTaskRemoveFromEventList+0xac>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d11c      	bne.n	800708c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3304      	adds	r3, #4
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fca0 	bl	800599c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	2201      	movs	r2, #1
 8007062:	409a      	lsls	r2, r3
 8007064:	4b17      	ldr	r3, [pc, #92]	; (80070c4 <xTaskRemoveFromEventList+0xb0>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4313      	orrs	r3, r2
 800706a:	4a16      	ldr	r2, [pc, #88]	; (80070c4 <xTaskRemoveFromEventList+0xb0>)
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <xTaskRemoveFromEventList+0xb4>)
 800707c:	441a      	add	r2, r3
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3304      	adds	r3, #4
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f7fe fc2c 	bl	80058e2 <vListInsertEnd>
 800708a:	e005      	b.n	8007098 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	3318      	adds	r3, #24
 8007090:	4619      	mov	r1, r3
 8007092:	480e      	ldr	r0, [pc, #56]	; (80070cc <xTaskRemoveFromEventList+0xb8>)
 8007094:	f7fe fc25 	bl	80058e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709c:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <xTaskRemoveFromEventList+0xbc>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d905      	bls.n	80070b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070a6:	2301      	movs	r3, #1
 80070a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070aa:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <xTaskRemoveFromEventList+0xc0>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	e001      	b.n	80070b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070b6:	697b      	ldr	r3, [r7, #20]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	200003d8 	.word	0x200003d8
 80070c4:	200003b8 	.word	0x200003b8
 80070c8:	200002b4 	.word	0x200002b4
 80070cc:	20000370 	.word	0x20000370
 80070d0:	200002b0 	.word	0x200002b0
 80070d4:	200003c4 	.word	0x200003c4

080070d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <vTaskInternalSetTimeOutState+0x24>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <vTaskInternalSetTimeOutState+0x28>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	605a      	str	r2, [r3, #4]
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	200003c8 	.word	0x200003c8
 8007100:	200003b4 	.word	0x200003b4

08007104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	613b      	str	r3, [r7, #16]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	60fb      	str	r3, [r7, #12]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007146:	f000 fc6d 	bl	8007a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800714a:	4b1d      	ldr	r3, [pc, #116]	; (80071c0 <xTaskCheckForTimeOut+0xbc>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	d102      	bne.n	800716a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007164:	2300      	movs	r3, #0
 8007166:	61fb      	str	r3, [r7, #28]
 8007168:	e023      	b.n	80071b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <xTaskCheckForTimeOut+0xc0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d007      	beq.n	8007186 <xTaskCheckForTimeOut+0x82>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	429a      	cmp	r2, r3
 800717e:	d302      	bcc.n	8007186 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007180:	2301      	movs	r3, #1
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e015      	b.n	80071b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	429a      	cmp	r2, r3
 800718e:	d20b      	bcs.n	80071a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	1ad2      	subs	r2, r2, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ff9b 	bl	80070d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	e004      	b.n	80071b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071ae:	2301      	movs	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071b2:	f000 fc67 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 80071b6:	69fb      	ldr	r3, [r7, #28]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	200003b4 	.word	0x200003b4
 80071c4:	200003c8 	.word	0x200003c8

080071c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071cc:	4b03      	ldr	r3, [pc, #12]	; (80071dc <vTaskMissedYield+0x14>)
 80071ce:	2201      	movs	r2, #1
 80071d0:	601a      	str	r2, [r3, #0]
}
 80071d2:	bf00      	nop
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	200003c4 	.word	0x200003c4

080071e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071e8:	f000 f852 	bl	8007290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <prvIdleTask+0x28>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d9f9      	bls.n	80071e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <prvIdleTask+0x2c>)
 80071f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007204:	e7f0      	b.n	80071e8 <prvIdleTask+0x8>
 8007206:	bf00      	nop
 8007208:	200002b4 	.word	0x200002b4
 800720c:	e000ed04 	.word	0xe000ed04

08007210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007216:	2300      	movs	r3, #0
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	e00c      	b.n	8007236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4a12      	ldr	r2, [pc, #72]	; (8007270 <prvInitialiseTaskLists+0x60>)
 8007228:	4413      	add	r3, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fb2c 	bl	8005888 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3301      	adds	r3, #1
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b06      	cmp	r3, #6
 800723a:	d9ef      	bls.n	800721c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800723c:	480d      	ldr	r0, [pc, #52]	; (8007274 <prvInitialiseTaskLists+0x64>)
 800723e:	f7fe fb23 	bl	8005888 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007242:	480d      	ldr	r0, [pc, #52]	; (8007278 <prvInitialiseTaskLists+0x68>)
 8007244:	f7fe fb20 	bl	8005888 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007248:	480c      	ldr	r0, [pc, #48]	; (800727c <prvInitialiseTaskLists+0x6c>)
 800724a:	f7fe fb1d 	bl	8005888 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800724e:	480c      	ldr	r0, [pc, #48]	; (8007280 <prvInitialiseTaskLists+0x70>)
 8007250:	f7fe fb1a 	bl	8005888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007254:	480b      	ldr	r0, [pc, #44]	; (8007284 <prvInitialiseTaskLists+0x74>)
 8007256:	f7fe fb17 	bl	8005888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800725a:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <prvInitialiseTaskLists+0x78>)
 800725c:	4a05      	ldr	r2, [pc, #20]	; (8007274 <prvInitialiseTaskLists+0x64>)
 800725e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007260:	4b0a      	ldr	r3, [pc, #40]	; (800728c <prvInitialiseTaskLists+0x7c>)
 8007262:	4a05      	ldr	r2, [pc, #20]	; (8007278 <prvInitialiseTaskLists+0x68>)
 8007264:	601a      	str	r2, [r3, #0]
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	200002b4 	.word	0x200002b4
 8007274:	20000340 	.word	0x20000340
 8007278:	20000354 	.word	0x20000354
 800727c:	20000370 	.word	0x20000370
 8007280:	20000384 	.word	0x20000384
 8007284:	2000039c 	.word	0x2000039c
 8007288:	20000368 	.word	0x20000368
 800728c:	2000036c 	.word	0x2000036c

08007290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007296:	e019      	b.n	80072cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007298:	f000 fbc4 	bl	8007a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729c:	4b10      	ldr	r3, [pc, #64]	; (80072e0 <prvCheckTasksWaitingTermination+0x50>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe fb77 	bl	800599c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ae:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <prvCheckTasksWaitingTermination+0x54>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	4a0b      	ldr	r2, [pc, #44]	; (80072e4 <prvCheckTasksWaitingTermination+0x54>)
 80072b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072b8:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <prvCheckTasksWaitingTermination+0x58>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	4a0a      	ldr	r2, [pc, #40]	; (80072e8 <prvCheckTasksWaitingTermination+0x58>)
 80072c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072c2:	f000 fbdf 	bl	8007a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f810 	bl	80072ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072cc:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <prvCheckTasksWaitingTermination+0x58>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e1      	bne.n	8007298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000384 	.word	0x20000384
 80072e4:	200003b0 	.word	0x200003b0
 80072e8:	20000398 	.word	0x20000398

080072ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d108      	bne.n	8007310 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fd7c 	bl	8007e00 <vPortFree>
				vPortFree( pxTCB );
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fd79 	bl	8007e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800730e:	e018      	b.n	8007342 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007316:	2b01      	cmp	r3, #1
 8007318:	d103      	bne.n	8007322 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fd70 	bl	8007e00 <vPortFree>
	}
 8007320:	e00f      	b.n	8007342 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007328:	2b02      	cmp	r3, #2
 800732a:	d00a      	beq.n	8007342 <prvDeleteTCB+0x56>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	60fb      	str	r3, [r7, #12]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <prvDeleteTCB+0x54>
	}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007352:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <prvResetNextTaskUnblockTime+0x38>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <prvResetNextTaskUnblockTime+0x3c>)
 800735e:	f04f 32ff 	mov.w	r2, #4294967295
 8007362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007364:	e008      	b.n	8007378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007366:	4b07      	ldr	r3, [pc, #28]	; (8007384 <prvResetNextTaskUnblockTime+0x38>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	4a04      	ldr	r2, [pc, #16]	; (8007388 <prvResetNextTaskUnblockTime+0x3c>)
 8007376:	6013      	str	r3, [r2, #0]
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	20000368 	.word	0x20000368
 8007388:	200003d0 	.word	0x200003d0

0800738c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007392:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <xTaskGetSchedulerState+0x34>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800739a:	2301      	movs	r3, #1
 800739c:	607b      	str	r3, [r7, #4]
 800739e:	e008      	b.n	80073b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073a0:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <xTaskGetSchedulerState+0x38>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d102      	bne.n	80073ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073a8:	2302      	movs	r3, #2
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	e001      	b.n	80073b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073b2:	687b      	ldr	r3, [r7, #4]
	}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	200003bc 	.word	0x200003bc
 80073c4:	200003d8 	.word	0x200003d8

080073c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d05e      	beq.n	800749c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e2:	4b31      	ldr	r3, [pc, #196]	; (80074a8 <xTaskPriorityInherit+0xe0>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d24e      	bcs.n	800748a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	db06      	blt.n	8007402 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f4:	4b2c      	ldr	r3, [pc, #176]	; (80074a8 <xTaskPriorityInherit+0xe0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	f1c3 0207 	rsb	r2, r3, #7
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6959      	ldr	r1, [r3, #20]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4a26      	ldr	r2, [pc, #152]	; (80074ac <xTaskPriorityInherit+0xe4>)
 8007414:	4413      	add	r3, r2
 8007416:	4299      	cmp	r1, r3
 8007418:	d12f      	bne.n	800747a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	3304      	adds	r3, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fabc 	bl	800599c <uxListRemove>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	2201      	movs	r2, #1
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	43da      	mvns	r2, r3
 8007436:	4b1e      	ldr	r3, [pc, #120]	; (80074b0 <xTaskPriorityInherit+0xe8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4013      	ands	r3, r2
 800743c:	4a1c      	ldr	r2, [pc, #112]	; (80074b0 <xTaskPriorityInherit+0xe8>)
 800743e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007440:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <xTaskPriorityInherit+0xe0>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	2201      	movs	r2, #1
 8007450:	409a      	lsls	r2, r3
 8007452:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <xTaskPriorityInherit+0xe8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4313      	orrs	r3, r2
 8007458:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <xTaskPriorityInherit+0xe8>)
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4a10      	ldr	r2, [pc, #64]	; (80074ac <xTaskPriorityInherit+0xe4>)
 800746a:	441a      	add	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f7fe fa35 	bl	80058e2 <vListInsertEnd>
 8007478:	e004      	b.n	8007484 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800747a:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <xTaskPriorityInherit+0xe0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007484:	2301      	movs	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	e008      	b.n	800749c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <xTaskPriorityInherit+0xe0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	429a      	cmp	r2, r3
 8007496:	d201      	bcs.n	800749c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007498:	2301      	movs	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800749c:	68fb      	ldr	r3, [r7, #12]
	}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200002b0 	.word	0x200002b0
 80074ac:	200002b4 	.word	0x200002b4
 80074b0:	200003b8 	.word	0x200003b8

080074b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d06e      	beq.n	80075a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074ca:	4b3a      	ldr	r3, [pc, #232]	; (80075b4 <xTaskPriorityDisinherit+0x100>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d00a      	beq.n	80074ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	60fb      	str	r3, [r7, #12]
}
 80074e6:	bf00      	nop
 80074e8:	e7fe      	b.n	80074e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60bb      	str	r3, [r7, #8]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750c:	1e5a      	subs	r2, r3, #1
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751a:	429a      	cmp	r2, r3
 800751c:	d044      	beq.n	80075a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007522:	2b00      	cmp	r3, #0
 8007524:	d140      	bne.n	80075a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3304      	adds	r3, #4
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fa36 	bl	800599c <uxListRemove>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d115      	bne.n	8007562 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753a:	491f      	ldr	r1, [pc, #124]	; (80075b8 <xTaskPriorityDisinherit+0x104>)
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10a      	bne.n	8007562 <xTaskPriorityDisinherit+0xae>
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	2201      	movs	r2, #1
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	43da      	mvns	r2, r3
 8007558:	4b18      	ldr	r3, [pc, #96]	; (80075bc <xTaskPriorityDisinherit+0x108>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4013      	ands	r3, r2
 800755e:	4a17      	ldr	r2, [pc, #92]	; (80075bc <xTaskPriorityDisinherit+0x108>)
 8007560:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	f1c3 0207 	rsb	r2, r3, #7
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	2201      	movs	r2, #1
 800757c:	409a      	lsls	r2, r3
 800757e:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <xTaskPriorityDisinherit+0x108>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4313      	orrs	r3, r2
 8007584:	4a0d      	ldr	r2, [pc, #52]	; (80075bc <xTaskPriorityDisinherit+0x108>)
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <xTaskPriorityDisinherit+0x104>)
 8007596:	441a      	add	r2, r3
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	3304      	adds	r3, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7fe f99f 	bl	80058e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075a4:	2301      	movs	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075a8:	697b      	ldr	r3, [r7, #20]
	}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	200002b0 	.word	0x200002b0
 80075b8:	200002b4 	.word	0x200002b4
 80075bc:	200003b8 	.word	0x200003b8

080075c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075ce:	2301      	movs	r3, #1
 80075d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d077      	beq.n	80076c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60fb      	str	r3, [r7, #12]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d902      	bls.n	8007606 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	e002      	b.n	800760c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	69fa      	ldr	r2, [r7, #28]
 8007612:	429a      	cmp	r2, r3
 8007614:	d058      	beq.n	80076c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	429a      	cmp	r2, r3
 800761e:	d153      	bne.n	80076c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007620:	4b2b      	ldr	r3, [pc, #172]	; (80076d0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	429a      	cmp	r2, r3
 8007628:	d10a      	bne.n	8007640 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	60bb      	str	r3, [r7, #8]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	2b00      	cmp	r3, #0
 8007652:	db04      	blt.n	800765e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f1c3 0207 	rsb	r2, r3, #7
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	6959      	ldr	r1, [r3, #20]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800766e:	4413      	add	r3, r2
 8007670:	4299      	cmp	r1, r3
 8007672:	d129      	bne.n	80076c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	3304      	adds	r3, #4
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe f98f 	bl	800599c <uxListRemove>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	2201      	movs	r2, #1
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	43da      	mvns	r2, r3
 8007690:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4013      	ands	r3, r2
 8007696:	4a10      	ldr	r2, [pc, #64]	; (80076d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007698:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	2201      	movs	r2, #1
 80076a0:	409a      	lsls	r2, r3
 80076a2:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	4a0b      	ldr	r2, [pc, #44]	; (80076d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4a06      	ldr	r2, [pc, #24]	; (80076d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80076ba:	441a      	add	r2, r3
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	3304      	adds	r3, #4
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f7fe f90d 	bl	80058e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076c8:	bf00      	nop
 80076ca:	3720      	adds	r7, #32
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	200002b0 	.word	0x200002b0
 80076d4:	200002b4 	.word	0x200002b4
 80076d8:	200003b8 	.word	0x200003b8

080076dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <pvTaskIncrementMutexHeldCount+0x24>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <pvTaskIncrementMutexHeldCount+0x24>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076ee:	3201      	adds	r2, #1
 80076f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80076f2:	4b03      	ldr	r3, [pc, #12]	; (8007700 <pvTaskIncrementMutexHeldCount+0x24>)
 80076f4:	681b      	ldr	r3, [r3, #0]
	}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	200002b0 	.word	0x200002b0

08007704 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800770e:	4b29      	ldr	r3, [pc, #164]	; (80077b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007714:	4b28      	ldr	r3, [pc, #160]	; (80077b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3304      	adds	r3, #4
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe f93e 	bl	800599c <uxListRemove>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10b      	bne.n	800773e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007726:	4b24      	ldr	r3, [pc, #144]	; (80077b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	2201      	movs	r2, #1
 800772e:	fa02 f303 	lsl.w	r3, r2, r3
 8007732:	43da      	mvns	r2, r3
 8007734:	4b21      	ldr	r3, [pc, #132]	; (80077bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4013      	ands	r3, r2
 800773a:	4a20      	ldr	r2, [pc, #128]	; (80077bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800773c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d10a      	bne.n	800775c <prvAddCurrentTaskToDelayedList+0x58>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774c:	4b1a      	ldr	r3, [pc, #104]	; (80077b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3304      	adds	r3, #4
 8007752:	4619      	mov	r1, r3
 8007754:	481a      	ldr	r0, [pc, #104]	; (80077c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007756:	f7fe f8c4 	bl	80058e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800775a:	e026      	b.n	80077aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4413      	add	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007764:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	429a      	cmp	r2, r3
 8007772:	d209      	bcs.n	8007788 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007774:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3304      	adds	r3, #4
 800777e:	4619      	mov	r1, r3
 8007780:	4610      	mov	r0, r2
 8007782:	f7fe f8d2 	bl	800592a <vListInsert>
}
 8007786:	e010      	b.n	80077aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007788:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3304      	adds	r3, #4
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f7fe f8c8 	bl	800592a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800779a:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d202      	bcs.n	80077aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077a4:	4a09      	ldr	r2, [pc, #36]	; (80077cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	6013      	str	r3, [r2, #0]
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	200003b4 	.word	0x200003b4
 80077b8:	200002b0 	.word	0x200002b0
 80077bc:	200003b8 	.word	0x200003b8
 80077c0:	2000039c 	.word	0x2000039c
 80077c4:	2000036c 	.word	0x2000036c
 80077c8:	20000368 	.word	0x20000368
 80077cc:	200003d0 	.word	0x200003d0

080077d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3b04      	subs	r3, #4
 80077e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3b04      	subs	r3, #4
 80077ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f023 0201 	bic.w	r2, r3, #1
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3b04      	subs	r3, #4
 80077fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007800:	4a0c      	ldr	r2, [pc, #48]	; (8007834 <pxPortInitialiseStack+0x64>)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3b14      	subs	r3, #20
 800780a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3b04      	subs	r3, #4
 8007816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f06f 0202 	mvn.w	r2, #2
 800781e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3b20      	subs	r3, #32
 8007824:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007826:	68fb      	ldr	r3, [r7, #12]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	08007839 	.word	0x08007839

08007838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <prvTaskExitError+0x54>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784a:	d00a      	beq.n	8007862 <prvTaskExitError+0x2a>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	60fb      	str	r3, [r7, #12]
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <prvTaskExitError+0x28>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	60bb      	str	r3, [r7, #8]
}
 8007874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007876:	bf00      	nop
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0fc      	beq.n	8007878 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800787e:	bf00      	nop
 8007880:	bf00      	nop
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	20000010 	.word	0x20000010

08007890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <pxCurrentTCBConst2>)
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	6808      	ldr	r0, [r1, #0]
 8007896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789a:	f380 8809 	msr	PSP, r0
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f04f 0000 	mov.w	r0, #0
 80078a6:	f380 8811 	msr	BASEPRI, r0
 80078aa:	4770      	bx	lr
 80078ac:	f3af 8000 	nop.w

080078b0 <pxCurrentTCBConst2>:
 80078b0:	200002b0 	.word	0x200002b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop

080078b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078b8:	4808      	ldr	r0, [pc, #32]	; (80078dc <prvPortStartFirstTask+0x24>)
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	6800      	ldr	r0, [r0, #0]
 80078be:	f380 8808 	msr	MSP, r0
 80078c2:	f04f 0000 	mov.w	r0, #0
 80078c6:	f380 8814 	msr	CONTROL, r0
 80078ca:	b662      	cpsie	i
 80078cc:	b661      	cpsie	f
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	df00      	svc	0
 80078d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078da:	bf00      	nop
 80078dc:	e000ed08 	.word	0xe000ed08

080078e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078e6:	4b46      	ldr	r3, [pc, #280]	; (8007a00 <xPortStartScheduler+0x120>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a46      	ldr	r2, [pc, #280]	; (8007a04 <xPortStartScheduler+0x124>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10a      	bne.n	8007906 <xPortStartScheduler+0x26>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	613b      	str	r3, [r7, #16]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007906:	4b3e      	ldr	r3, [pc, #248]	; (8007a00 <xPortStartScheduler+0x120>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a3f      	ldr	r2, [pc, #252]	; (8007a08 <xPortStartScheduler+0x128>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d10a      	bne.n	8007926 <xPortStartScheduler+0x46>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	60fb      	str	r3, [r7, #12]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007926:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <xPortStartScheduler+0x12c>)
 8007928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007948:	b2da      	uxtb	r2, r3
 800794a:	4b31      	ldr	r3, [pc, #196]	; (8007a10 <xPortStartScheduler+0x130>)
 800794c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800794e:	4b31      	ldr	r3, [pc, #196]	; (8007a14 <xPortStartScheduler+0x134>)
 8007950:	2207      	movs	r2, #7
 8007952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007954:	e009      	b.n	800796a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007956:	4b2f      	ldr	r3, [pc, #188]	; (8007a14 <xPortStartScheduler+0x134>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3b01      	subs	r3, #1
 800795c:	4a2d      	ldr	r2, [pc, #180]	; (8007a14 <xPortStartScheduler+0x134>)
 800795e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	b2db      	uxtb	r3, r3
 8007968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d0ef      	beq.n	8007956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007976:	4b27      	ldr	r3, [pc, #156]	; (8007a14 <xPortStartScheduler+0x134>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f1c3 0307 	rsb	r3, r3, #7
 800797e:	2b04      	cmp	r3, #4
 8007980:	d00a      	beq.n	8007998 <xPortStartScheduler+0xb8>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	60bb      	str	r3, [r7, #8]
}
 8007994:	bf00      	nop
 8007996:	e7fe      	b.n	8007996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007998:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <xPortStartScheduler+0x134>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <xPortStartScheduler+0x134>)
 80079a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <xPortStartScheduler+0x134>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079aa:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <xPortStartScheduler+0x134>)
 80079ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079b6:	4b18      	ldr	r3, [pc, #96]	; (8007a18 <xPortStartScheduler+0x138>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <xPortStartScheduler+0x138>)
 80079bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079c2:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <xPortStartScheduler+0x138>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <xPortStartScheduler+0x138>)
 80079c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079ce:	f000 f8dd 	bl	8007b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <xPortStartScheduler+0x13c>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079d8:	f000 f8fc 	bl	8007bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079dc:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <xPortStartScheduler+0x140>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0f      	ldr	r2, [pc, #60]	; (8007a20 <xPortStartScheduler+0x140>)
 80079e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079e8:	f7ff ff66 	bl	80078b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079ec:	f7ff fa92 	bl	8006f14 <vTaskSwitchContext>
	prvTaskExitError();
 80079f0:	f7ff ff22 	bl	8007838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	e000ed00 	.word	0xe000ed00
 8007a04:	410fc271 	.word	0x410fc271
 8007a08:	410fc270 	.word	0x410fc270
 8007a0c:	e000e400 	.word	0xe000e400
 8007a10:	200003dc 	.word	0x200003dc
 8007a14:	200003e0 	.word	0x200003e0
 8007a18:	e000ed20 	.word	0xe000ed20
 8007a1c:	20000010 	.word	0x20000010
 8007a20:	e000ef34 	.word	0xe000ef34

08007a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	607b      	str	r3, [r7, #4]
}
 8007a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a3e:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <vPortEnterCritical+0x58>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	4a0d      	ldr	r2, [pc, #52]	; (8007a7c <vPortEnterCritical+0x58>)
 8007a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a48:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <vPortEnterCritical+0x58>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d10f      	bne.n	8007a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <vPortEnterCritical+0x5c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	603b      	str	r3, [r7, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <vPortEnterCritical+0x4a>
	}
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	20000010 	.word	0x20000010
 8007a80:	e000ed04 	.word	0xe000ed04

08007a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a8a:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <vPortExitCritical+0x50>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <vPortExitCritical+0x24>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	607b      	str	r3, [r7, #4]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <vPortExitCritical+0x50>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <vPortExitCritical+0x50>)
 8007ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ab2:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <vPortExitCritical+0x50>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <vPortExitCritical+0x42>
 8007aba:	2300      	movs	r3, #0
 8007abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	f383 8811 	msr	BASEPRI, r3
}
 8007ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20000010 	.word	0x20000010
	...

08007ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ae0:	f3ef 8009 	mrs	r0, PSP
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <pxCurrentTCBConst>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	f01e 0f10 	tst.w	lr, #16
 8007af0:	bf08      	it	eq
 8007af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afa:	6010      	str	r0, [r2, #0]
 8007afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b04:	f380 8811 	msr	BASEPRI, r0
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f7ff fa00 	bl	8006f14 <vTaskSwitchContext>
 8007b14:	f04f 0000 	mov.w	r0, #0
 8007b18:	f380 8811 	msr	BASEPRI, r0
 8007b1c:	bc09      	pop	{r0, r3}
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	6808      	ldr	r0, [r1, #0]
 8007b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b26:	f01e 0f10 	tst.w	lr, #16
 8007b2a:	bf08      	it	eq
 8007b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b30:	f380 8809 	msr	PSP, r0
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w

08007b40 <pxCurrentTCBConst>:
 8007b40:	200002b0 	.word	0x200002b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
}
 8007b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b62:	f7ff f91f 	bl	8006da4 <xTaskIncrementTick>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <SysTick_Handler+0x40>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	2300      	movs	r3, #0
 8007b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f383 8811 	msr	BASEPRI, r3
}
 8007b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	e000ed04 	.word	0xe000ed04

08007b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <vPortSetupTimerInterrupt+0x34>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b96:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <vPortSetupTimerInterrupt+0x38>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <vPortSetupTimerInterrupt+0x3c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <vPortSetupTimerInterrupt+0x40>)
 8007ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba6:	099b      	lsrs	r3, r3, #6
 8007ba8:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <vPortSetupTimerInterrupt+0x44>)
 8007baa:	3b01      	subs	r3, #1
 8007bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bae:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <vPortSetupTimerInterrupt+0x34>)
 8007bb0:	2207      	movs	r2, #7
 8007bb2:	601a      	str	r2, [r3, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	e000e010 	.word	0xe000e010
 8007bc4:	e000e018 	.word	0xe000e018
 8007bc8:	20000004 	.word	0x20000004
 8007bcc:	10624dd3 	.word	0x10624dd3
 8007bd0:	e000e014 	.word	0xe000e014

08007bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007be4 <vPortEnableVFP+0x10>
 8007bd8:	6801      	ldr	r1, [r0, #0]
 8007bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bde:	6001      	str	r1, [r0, #0]
 8007be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007be2:	bf00      	nop
 8007be4:	e000ed88 	.word	0xe000ed88

08007be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bee:	f3ef 8305 	mrs	r3, IPSR
 8007bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	d914      	bls.n	8007c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bfa:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <vPortValidateInterruptPriority+0x70>)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c04:	4b15      	ldr	r3, [pc, #84]	; (8007c5c <vPortValidateInterruptPriority+0x74>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	7afa      	ldrb	r2, [r7, #11]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d20a      	bcs.n	8007c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c24:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <vPortValidateInterruptPriority+0x78>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <vPortValidateInterruptPriority+0x7c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d90a      	bls.n	8007c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	603b      	str	r3, [r7, #0]
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <vPortValidateInterruptPriority+0x60>
	}
 8007c4a:	bf00      	nop
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	e000e3f0 	.word	0xe000e3f0
 8007c5c:	200003dc 	.word	0x200003dc
 8007c60:	e000ed0c 	.word	0xe000ed0c
 8007c64:	200003e0 	.word	0x200003e0

08007c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c74:	f7fe ffca 	bl	8006c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c78:	4b5b      	ldr	r3, [pc, #364]	; (8007de8 <pvPortMalloc+0x180>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c80:	f000 f920 	bl	8007ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c84:	4b59      	ldr	r3, [pc, #356]	; (8007dec <pvPortMalloc+0x184>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 8093 	bne.w	8007db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01d      	beq.n	8007cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c98:	2208      	movs	r2, #8
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d014      	beq.n	8007cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f023 0307 	bic.w	r3, r3, #7
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	617b      	str	r3, [r7, #20]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d06e      	beq.n	8007db8 <pvPortMalloc+0x150>
 8007cda:	4b45      	ldr	r3, [pc, #276]	; (8007df0 <pvPortMalloc+0x188>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d869      	bhi.n	8007db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ce4:	4b43      	ldr	r3, [pc, #268]	; (8007df4 <pvPortMalloc+0x18c>)
 8007ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ce8:	4b42      	ldr	r3, [pc, #264]	; (8007df4 <pvPortMalloc+0x18c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cee:	e004      	b.n	8007cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d903      	bls.n	8007d0c <pvPortMalloc+0xa4>
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f1      	bne.n	8007cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d0c:	4b36      	ldr	r3, [pc, #216]	; (8007de8 <pvPortMalloc+0x180>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d050      	beq.n	8007db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2208      	movs	r2, #8
 8007d1c:	4413      	add	r3, r2
 8007d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	2308      	movs	r3, #8
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d91f      	bls.n	8007d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <pvPortMalloc+0xf8>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	613b      	str	r3, [r7, #16]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	1ad2      	subs	r2, r2, r3
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d72:	69b8      	ldr	r0, [r7, #24]
 8007d74:	f000 f908 	bl	8007f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d78:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <pvPortMalloc+0x188>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	4a1b      	ldr	r2, [pc, #108]	; (8007df0 <pvPortMalloc+0x188>)
 8007d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d86:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <pvPortMalloc+0x188>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4b1b      	ldr	r3, [pc, #108]	; (8007df8 <pvPortMalloc+0x190>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d203      	bcs.n	8007d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d92:	4b17      	ldr	r3, [pc, #92]	; (8007df0 <pvPortMalloc+0x188>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a18      	ldr	r2, [pc, #96]	; (8007df8 <pvPortMalloc+0x190>)
 8007d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	4b13      	ldr	r3, [pc, #76]	; (8007dec <pvPortMalloc+0x184>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <pvPortMalloc+0x194>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	4a11      	ldr	r2, [pc, #68]	; (8007dfc <pvPortMalloc+0x194>)
 8007db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007db8:	f7fe ff36 	bl	8006c28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <pvPortMalloc+0x174>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60fb      	str	r3, [r7, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <pvPortMalloc+0x172>
	return pvReturn;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3728      	adds	r7, #40	; 0x28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20003fec 	.word	0x20003fec
 8007dec:	20004000 	.word	0x20004000
 8007df0:	20003ff0 	.word	0x20003ff0
 8007df4:	20003fe4 	.word	0x20003fe4
 8007df8:	20003ff4 	.word	0x20003ff4
 8007dfc:	20003ff8 	.word	0x20003ff8

08007e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d04d      	beq.n	8007eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e12:	2308      	movs	r3, #8
 8007e14:	425b      	negs	r3, r3
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4413      	add	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <vPortFree+0xb8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <vPortFree+0x44>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	60fb      	str	r3, [r7, #12]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <vPortFree+0x62>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	60bb      	str	r3, [r7, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <vPortFree+0xb8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01e      	beq.n	8007eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d11a      	bne.n	8007eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <vPortFree+0xb8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	43db      	mvns	r3, r3
 8007e82:	401a      	ands	r2, r3
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e88:	f7fe fec0 	bl	8006c0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <vPortFree+0xbc>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4413      	add	r3, r2
 8007e96:	4a09      	ldr	r2, [pc, #36]	; (8007ebc <vPortFree+0xbc>)
 8007e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e9a:	6938      	ldr	r0, [r7, #16]
 8007e9c:	f000 f874 	bl	8007f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <vPortFree+0xc0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	4a06      	ldr	r2, [pc, #24]	; (8007ec0 <vPortFree+0xc0>)
 8007ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eaa:	f7fe febd 	bl	8006c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eae:	bf00      	nop
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20004000 	.word	0x20004000
 8007ebc:	20003ff0 	.word	0x20003ff0
 8007ec0:	20003ffc 	.word	0x20003ffc

08007ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ed0:	4b27      	ldr	r3, [pc, #156]	; (8007f70 <prvHeapInit+0xac>)
 8007ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00c      	beq.n	8007ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3307      	adds	r3, #7
 8007ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0307 	bic.w	r3, r3, #7
 8007eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	4a1f      	ldr	r2, [pc, #124]	; (8007f70 <prvHeapInit+0xac>)
 8007ef4:	4413      	add	r3, r2
 8007ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007efc:	4a1d      	ldr	r2, [pc, #116]	; (8007f74 <prvHeapInit+0xb0>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f02:	4b1c      	ldr	r3, [pc, #112]	; (8007f74 <prvHeapInit+0xb0>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f10:	2208      	movs	r2, #8
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0307 	bic.w	r3, r3, #7
 8007f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4a15      	ldr	r2, [pc, #84]	; (8007f78 <prvHeapInit+0xb4>)
 8007f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <prvHeapInit+0xb4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <prvHeapInit+0xb4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f44:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <prvHeapInit+0xb4>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <prvHeapInit+0xb8>)
 8007f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	4a09      	ldr	r2, [pc, #36]	; (8007f80 <prvHeapInit+0xbc>)
 8007f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f5c:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <prvHeapInit+0xc0>)
 8007f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f62:	601a      	str	r2, [r3, #0]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	200003e4 	.word	0x200003e4
 8007f74:	20003fe4 	.word	0x20003fe4
 8007f78:	20003fec 	.word	0x20003fec
 8007f7c:	20003ff4 	.word	0x20003ff4
 8007f80:	20003ff0 	.word	0x20003ff0
 8007f84:	20004000 	.word	0x20004000

08007f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f90:	4b28      	ldr	r3, [pc, #160]	; (8008034 <prvInsertBlockIntoFreeList+0xac>)
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	e002      	b.n	8007f9c <prvInsertBlockIntoFreeList+0x14>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d8f7      	bhi.n	8007f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d108      	bne.n	8007fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	441a      	add	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	441a      	add	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d118      	bne.n	8008010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b15      	ldr	r3, [pc, #84]	; (8008038 <prvInsertBlockIntoFreeList+0xb0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d00d      	beq.n	8008006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	441a      	add	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e008      	b.n	8008018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008006:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <prvInsertBlockIntoFreeList+0xb0>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	e003      	b.n	8008018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	429a      	cmp	r2, r3
 800801e:	d002      	beq.n	8008026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20003fe4 	.word	0x20003fe4
 8008038:	20003fec 	.word	0x20003fec

0800803c <__libc_init_array>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	4d0d      	ldr	r5, [pc, #52]	; (8008074 <__libc_init_array+0x38>)
 8008040:	4c0d      	ldr	r4, [pc, #52]	; (8008078 <__libc_init_array+0x3c>)
 8008042:	1b64      	subs	r4, r4, r5
 8008044:	10a4      	asrs	r4, r4, #2
 8008046:	2600      	movs	r6, #0
 8008048:	42a6      	cmp	r6, r4
 800804a:	d109      	bne.n	8008060 <__libc_init_array+0x24>
 800804c:	4d0b      	ldr	r5, [pc, #44]	; (800807c <__libc_init_array+0x40>)
 800804e:	4c0c      	ldr	r4, [pc, #48]	; (8008080 <__libc_init_array+0x44>)
 8008050:	f000 f82e 	bl	80080b0 <_init>
 8008054:	1b64      	subs	r4, r4, r5
 8008056:	10a4      	asrs	r4, r4, #2
 8008058:	2600      	movs	r6, #0
 800805a:	42a6      	cmp	r6, r4
 800805c:	d105      	bne.n	800806a <__libc_init_array+0x2e>
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	f855 3b04 	ldr.w	r3, [r5], #4
 8008064:	4798      	blx	r3
 8008066:	3601      	adds	r6, #1
 8008068:	e7ee      	b.n	8008048 <__libc_init_array+0xc>
 800806a:	f855 3b04 	ldr.w	r3, [r5], #4
 800806e:	4798      	blx	r3
 8008070:	3601      	adds	r6, #1
 8008072:	e7f2      	b.n	800805a <__libc_init_array+0x1e>
 8008074:	08008194 	.word	0x08008194
 8008078:	08008194 	.word	0x08008194
 800807c:	08008194 	.word	0x08008194
 8008080:	08008198 	.word	0x08008198

08008084 <memcpy>:
 8008084:	440a      	add	r2, r1
 8008086:	4291      	cmp	r1, r2
 8008088:	f100 33ff 	add.w	r3, r0, #4294967295
 800808c:	d100      	bne.n	8008090 <memcpy+0xc>
 800808e:	4770      	bx	lr
 8008090:	b510      	push	{r4, lr}
 8008092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800809a:	4291      	cmp	r1, r2
 800809c:	d1f9      	bne.n	8008092 <memcpy+0xe>
 800809e:	bd10      	pop	{r4, pc}

080080a0 <memset>:
 80080a0:	4402      	add	r2, r0
 80080a2:	4603      	mov	r3, r0
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d100      	bne.n	80080aa <memset+0xa>
 80080a8:	4770      	bx	lr
 80080aa:	f803 1b01 	strb.w	r1, [r3], #1
 80080ae:	e7f9      	b.n	80080a4 <memset+0x4>

080080b0 <_init>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	bf00      	nop
 80080b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b6:	bc08      	pop	{r3}
 80080b8:	469e      	mov	lr, r3
 80080ba:	4770      	bx	lr

080080bc <_fini>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	bf00      	nop
 80080c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c2:	bc08      	pop	{r3}
 80080c4:	469e      	mov	lr, r3
 80080c6:	4770      	bx	lr

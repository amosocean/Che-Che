
os2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009068  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009330  08009330  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009338  08009338  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a4  2000001c  0800935c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042c0  0800935c  000242c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001641f  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff4  00000000  00000000  0003646b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003a740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022037  00000000  00000000  0003b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c24  00000000  00000000  0005d93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d327f  00000000  00000000  00071563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001447e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005004  00000000  00000000  00144838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091e0 	.word	0x080091e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080091e0 	.word	0x080091e0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96e 	b.w	8000d00 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468c      	mov	ip, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8083 	bne.w	8000b52 <__udivmoddi4+0x116>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d947      	bls.n	8000ae2 <__udivmoddi4+0xa6>
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	b142      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	f1c2 0020 	rsb	r0, r2, #32
 8000a5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a60:	4091      	lsls	r1, r2
 8000a62:	4097      	lsls	r7, r2
 8000a64:	ea40 0c01 	orr.w	ip, r0, r1
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbbc f6f8 	udiv	r6, ip, r8
 8000a74:	fa1f fe87 	uxth.w	lr, r7
 8000a78:	fb08 c116 	mls	r1, r8, r6, ip
 8000a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a80:	fb06 f10e 	mul.w	r1, r6, lr
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8e:	f080 8119 	bcs.w	8000cc4 <__udivmoddi4+0x288>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8116 	bls.w	8000cc4 <__udivmoddi4+0x288>
 8000a98:	3e02      	subs	r6, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa4:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	193c      	adds	r4, r7, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8105 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	f240 8102 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000acc:	eba4 040e 	sub.w	r4, r4, lr
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	b11d      	cbz	r5, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c5 4300 	strd	r4, r3, [r5]
 8000adc:	4631      	mov	r1, r6
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b902      	cbnz	r2, 8000ae6 <__udivmoddi4+0xaa>
 8000ae4:	deff      	udf	#255	; 0xff
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d150      	bne.n	8000b90 <__udivmoddi4+0x154>
 8000aee:	1bcb      	subs	r3, r1, r7
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	fa1f f887 	uxth.w	r8, r7
 8000af8:	2601      	movs	r6, #1
 8000afa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b08:	fb08 f30c 	mul.w	r3, r8, ip
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000b10:	1879      	adds	r1, r7, r1
 8000b12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0xe2>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	f200 80e9 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b1e:	4684      	mov	ip, r0
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	b2a3      	uxth	r3, r4
 8000b24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b30:	fb08 f800 	mul.w	r8, r8, r0
 8000b34:	45a0      	cmp	r8, r4
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x10c>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x10a>
 8000b40:	45a0      	cmp	r8, r4
 8000b42:	f200 80d9 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b46:	4618      	mov	r0, r3
 8000b48:	eba4 0408 	sub.w	r4, r4, r8
 8000b4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b50:	e7bf      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x12e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <__udivmoddi4+0x282>
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b62:	4630      	mov	r0, r6
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f683 	clz	r6, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d14a      	bne.n	8000c08 <__udivmoddi4+0x1cc>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0x140>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80b8 	bhi.w	8000cec <__udivmoddi4+0x2b0>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	468c      	mov	ip, r1
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d0a8      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f603 	lsr.w	r6, r0, r3
 8000b98:	4097      	lsls	r7, r2
 8000b9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	4330      	orrs	r0, r6
 8000ba6:	0c03      	lsrs	r3, r0, #16
 8000ba8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f108 	mul.w	r1, r6, r8
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x19c>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bca:	f080 808d 	bcs.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 808a 	bls.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b281      	uxth	r1, r0
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb00 f308 	mul.w	r3, r0, r8
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x1c4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bf6:	d273      	bcs.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d971      	bls.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4439      	add	r1, r7
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c06:	e778      	b.n	8000afa <__udivmoddi4+0xbe>
 8000c08:	f1c6 0c20 	rsb	ip, r6, #32
 8000c0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c14:	431c      	orrs	r4, r3
 8000c16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c26:	431f      	orrs	r7, r3
 8000c28:	0c3b      	lsrs	r3, r7, #16
 8000c2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c2e:	fa1f f884 	uxth.w	r8, r4
 8000c32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3e:	458a      	cmp	sl, r1
 8000c40:	fa02 f206 	lsl.w	r2, r2, r6
 8000c44:	fa00 f306 	lsl.w	r3, r0, r6
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x220>
 8000c4a:	1861      	adds	r1, r4, r1
 8000c4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c50:	d248      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c52:	458a      	cmp	sl, r1
 8000c54:	d946      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4421      	add	r1, r4
 8000c5c:	eba1 010a 	sub.w	r1, r1, sl
 8000c60:	b2bf      	uxth	r7, r7
 8000c62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c6e:	fb00 f808 	mul.w	r8, r0, r8
 8000c72:	45b8      	cmp	r8, r7
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x24a>
 8000c76:	19e7      	adds	r7, r4, r7
 8000c78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7c:	d22e      	bcs.n	8000cdc <__udivmoddi4+0x2a0>
 8000c7e:	45b8      	cmp	r8, r7
 8000c80:	d92c      	bls.n	8000cdc <__udivmoddi4+0x2a0>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4427      	add	r7, r4
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	eba7 0708 	sub.w	r7, r7, r8
 8000c8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c92:	454f      	cmp	r7, r9
 8000c94:	46c6      	mov	lr, r8
 8000c96:	4649      	mov	r1, r9
 8000c98:	d31a      	bcc.n	8000cd0 <__udivmoddi4+0x294>
 8000c9a:	d017      	beq.n	8000ccc <__udivmoddi4+0x290>
 8000c9c:	b15d      	cbz	r5, 8000cb6 <__udivmoddi4+0x27a>
 8000c9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ca2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ca6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000caa:	40f2      	lsrs	r2, r6
 8000cac:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb0:	40f7      	lsrs	r7, r6
 8000cb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e70b      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e9      	b.n	8000a9c <__udivmoddi4+0x60>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6fd      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000ccc:	4543      	cmp	r3, r8
 8000cce:	d2e5      	bcs.n	8000c9c <__udivmoddi4+0x260>
 8000cd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7df      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e7d2      	b.n	8000c86 <__udivmoddi4+0x24a>
 8000ce0:	4660      	mov	r0, ip
 8000ce2:	e78d      	b.n	8000c00 <__udivmoddi4+0x1c4>
 8000ce4:	4681      	mov	r9, r0
 8000ce6:	e7b9      	b.n	8000c5c <__udivmoddi4+0x220>
 8000ce8:	4666      	mov	r6, ip
 8000cea:	e775      	b.n	8000bd8 <__udivmoddi4+0x19c>
 8000cec:	4630      	mov	r0, r6
 8000cee:	e74a      	b.n	8000b86 <__udivmoddi4+0x14a>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	4439      	add	r1, r7
 8000cf6:	e713      	b.n	8000b20 <__udivmoddi4+0xe4>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	e724      	b.n	8000b48 <__udivmoddi4+0x10c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <vApplicationGetIdleTaskMemory+0x30>)
 8000d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000038 	.word	0x20000038
 8000d34:	2000008c 	.word	0x2000008c

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	b0bc      	sub	sp, #240	; 0xf0
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f002 fb87 	bl	8003450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f909 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 fbb5 	bl	80014b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d4a:	f000 fb35 	bl	80013b8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d4e:	f000 f9c3 	bl	80010d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d52:	f000 fa39 	bl	80011c8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 fb59 	bl	800140c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d5a:	f000 fb81 	bl	8001460 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000d5e:	f000 fb01 	bl	8001364 <MX_UART5_Init>
  MX_TIM2_Init();
 8000d62:	f000 f965 	bl	8001030 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000d66:	f000 faa7 	bl	80012b8 <MX_TIM8_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CameraUARTSem */
  osSemaphoreDef(CameraUARTSem);
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  CameraUARTSemHandle = osSemaphoreCreate(osSemaphore(CameraUARTSem), 1);
 8000d76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 fcb8 	bl	80066f2 <osSemaphoreCreate>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a61      	ldr	r2, [pc, #388]	; (8000f0c <main+0x1d4>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReadySem */
  osSemaphoreDef(GyroReadySem);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  GyroReadySemHandle = osSemaphoreCreate(osSemaphore(GyroReadySem), 1);
 8000d94:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f005 fca9 	bl	80066f2 <osSemaphoreCreate>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4a5b      	ldr	r2, [pc, #364]	; (8000f10 <main+0x1d8>)
 8000da4:	6013      	str	r3, [r2, #0]

  /* definition and creation of CriticalDistanceSem */
  osSemaphoreDef(CriticalDistanceSem);
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  CriticalDistanceSemHandle = osSemaphoreCreate(osSemaphore(CriticalDistanceSem), 1);
 8000db2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000db6:	2101      	movs	r1, #1
 8000db8:	4618      	mov	r0, r3
 8000dba:	f005 fc9a 	bl	80066f2 <osSemaphoreCreate>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a54      	ldr	r2, [pc, #336]	; (8000f14 <main+0x1dc>)
 8000dc2:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageSem */
  osSemaphoreDef(MileageSem);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  MileageSemHandle = osSemaphoreCreate(osSemaphore(MileageSem), 1);
 8000dd0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 fc8b 	bl	80066f2 <osSemaphoreCreate>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a4e      	ldr	r2, [pc, #312]	; (8000f18 <main+0x1e0>)
 8000de0:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageNegSem */
  osSemaphoreDef(MileageNegSem);
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  MileageNegSemHandle = osSemaphoreCreate(osSemaphore(MileageNegSem), 1);
 8000dee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000df2:	2101      	movs	r1, #1
 8000df4:	4618      	mov	r0, r3
 8000df6:	f005 fc7c 	bl	80066f2 <osSemaphoreCreate>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a47      	ldr	r2, [pc, #284]	; (8000f1c <main+0x1e4>)
 8000dfe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Stream */
  osThreadDef(Stream, StreamTask, osPriorityNormal, 0, 128);
 8000e00:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <main+0x1e8>)
 8000e02:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000e06:	461d      	mov	r5, r3
 8000e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StreamHandle = osThreadCreate(osThread(Stream), NULL);
 8000e14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f005 fc1d 	bl	800665a <osThreadCreate>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <main+0x1ec>)
 8000e24:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReceive */
  osThreadDef(GyroReceive, GyroReceiveTask, osPriorityNormal, 0, 128);
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <main+0x1f0>)
 8000e28:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000e2c:	461d      	mov	r5, r3
 8000e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GyroReceiveHandle = osThreadCreate(osThread(GyroReceive), NULL);
 8000e3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f005 fc0a 	bl	800665a <osThreadCreate>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <main+0x1f4>)
 8000e4a:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistanceCheck */
  osThreadDef(DistanceCheck, DistanceCheckTask, osPriorityNormal, 0, 128);
 8000e4c:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <main+0x1f8>)
 8000e4e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000e52:	461d      	mov	r5, r3
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DistanceCheckHandle = osThreadCreate(osThread(DistanceCheck), NULL);
 8000e60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f005 fbf7 	bl	800665a <osThreadCreate>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a31      	ldr	r2, [pc, #196]	; (8000f34 <main+0x1fc>)
 8000e70:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mileage */
  osThreadDef(Mileage, MileageTask, osPriorityNormal, 0, 128);
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <main+0x200>)
 8000e74:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000e78:	461d      	mov	r5, r3
 8000e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MileageHandle = osThreadCreate(osThread(Mileage), NULL);
 8000e86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 fbe4 	bl	800665a <osThreadCreate>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a29      	ldr	r2, [pc, #164]	; (8000f3c <main+0x204>)
 8000e96:	6013      	str	r3, [r2, #0]

  /* definition and creation of GoStraight */
  osThreadDef(GoStraight, GoStraightTask, osPriorityNormal, 0, 128);
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <main+0x208>)
 8000e9a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GoStraightHandle = osThreadCreate(osThread(GoStraight), NULL);
 8000eac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 fbd1 	bl	800665a <osThreadCreate>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <main+0x20c>)
 8000ebc:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineSearch */
  osThreadDef(LineSearch, LineSearchTask, osPriorityNormal, 0, 128);
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <main+0x210>)
 8000ec0:	f107 0420 	add.w	r4, r7, #32
 8000ec4:	461d      	mov	r5, r3
 8000ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineSearchHandle = osThreadCreate(osThread(LineSearch), NULL);
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f005 fbbe 	bl	800665a <osThreadCreate>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <main+0x214>)
 8000ee2:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineSearch2 */
  osThreadDef(LineSearch2, LineSearch2Task, osPriorityNormal, 0, 128);
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <main+0x218>)
 8000ee6:	1d3c      	adds	r4, r7, #4
 8000ee8:	461d      	mov	r5, r3
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineSearch2Handle = osThreadCreate(osThread(LineSearch2), NULL);
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f005 fbad 	bl	800665a <osThreadCreate>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <main+0x21c>)
 8000f04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f06:	f005 fb91 	bl	800662c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <main+0x1d2>
 8000f0c:	200040ec 	.word	0x200040ec
 8000f10:	200041dc 	.word	0x200041dc
 8000f14:	2000400c 	.word	0x2000400c
 8000f18:	200041d4 	.word	0x200041d4
 8000f1c:	200041e0 	.word	0x200041e0
 8000f20:	08009248 	.word	0x08009248
 8000f24:	200041d0 	.word	0x200041d0
 8000f28:	08009264 	.word	0x08009264
 8000f2c:	20004270 	.word	0x20004270
 8000f30:	08009280 	.word	0x08009280
 8000f34:	200040f0 	.word	0x200040f0
 8000f38:	0800929c 	.word	0x0800929c
 8000f3c:	20004010 	.word	0x20004010
 8000f40:	080092b8 	.word	0x080092b8
 8000f44:	200040f4 	.word	0x200040f4
 8000f48:	080092d4 	.word	0x080092d4
 8000f4c:	200040e8 	.word	0x200040e8
 8000f50:	080092f0 	.word	0x080092f0
 8000f54:	20004188 	.word	0x20004188

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f008 f932 	bl	80091d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <SystemClock_Config+0xd0>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a28      	ldr	r2, [pc, #160]	; (8001028 <SystemClock_Config+0xd0>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <SystemClock_Config+0xd0>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <SystemClock_Config+0xd4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a22      	ldr	r2, [pc, #136]	; (800102c <SystemClock_Config+0xd4>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <SystemClock_Config+0xd4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fcc:	23a8      	movs	r3, #168	; 0xa8
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fdbd 	bl	8003b5c <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe8:	f001 fef2 	bl	8002dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2105      	movs	r1, #5
 800100a:	4618      	mov	r0, r3
 800100c:	f003 f81e 	bl	800404c <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001016:	f001 fedb 	bl	8002dd0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800101a:	f003 f8fd 	bl	8004218 <HAL_RCC_EnableCSS>
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	; 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f008 f8c6 	bl	80091d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_TIM2_Init+0xa4>)
 800104e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_TIM2_Init+0xa4>)
 8001056:	2203      	movs	r2, #3
 8001058:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_TIM2_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM2_Init+0xa4>)
 8001062:	f241 3287 	movw	r2, #4999	; 0x1387
 8001066:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM2_Init+0xa4>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_TIM2_Init+0xa4>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001074:	2303      	movs	r3, #3
 8001076:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800108c:	2301      	movs	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_TIM2_Init+0xa4>)
 80010a0:	f003 fc0a 	bl	80048b8 <HAL_TIM_Encoder_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010aa:	f001 fe91 	bl	8002dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_TIM2_Init+0xa4>)
 80010bc:	f004 faf2 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010c6:	f001 fe83 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3730      	adds	r7, #48	; 0x30
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200041e4 	.word	0x200041e4

080010d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08e      	sub	sp, #56	; 0x38
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]
 8001106:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MX_TIM3_Init+0xe8>)
 800110a:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <MX_TIM3_Init+0xec>)
 800110c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1001-1;
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <MX_TIM3_Init+0xe8>)
 8001110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001114:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <MX_TIM3_Init+0xe8>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_TIM3_Init+0xe8>)
 800111e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MX_TIM3_Init+0xe8>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <MX_TIM3_Init+0xe8>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001130:	4823      	ldr	r0, [pc, #140]	; (80011c0 <MX_TIM3_Init+0xe8>)
 8001132:	f003 f9e0 	bl	80044f6 <HAL_TIM_Base_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800113c:	f001 fe48 	bl	8002dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114a:	4619      	mov	r1, r3
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_TIM3_Init+0xe8>)
 800114e:	f003 fead 	bl	8004eac <HAL_TIM_ConfigClockSource>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001158:	f001 fe3a 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800115c:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_TIM3_Init+0xe8>)
 800115e:	f003 fa89 	bl	8004674 <HAL_TIM_PWM_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001168:	f001 fe32 	bl	8002dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4619      	mov	r1, r3
 800117a:	4811      	ldr	r0, [pc, #68]	; (80011c0 <MX_TIM3_Init+0xe8>)
 800117c:	f004 fa92 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001186:	f001 fe23 	bl	8002dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118a:	2360      	movs	r3, #96	; 0x60
 800118c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM3_Init+0xe8>)
 80011a2:	f003 fdc5 	bl	8004d30 <HAL_TIM_PWM_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011ac:	f001 fe10 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM3_Init+0xe8>)
 80011b2:	f001 fefb 	bl	8002fac <HAL_TIM_MspPostInit>

}
 80011b6:	bf00      	nop
 80011b8:	3738      	adds	r7, #56	; 0x38
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200040f8 	.word	0x200040f8
 80011c4:	40000400 	.word	0x40000400

080011c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <MX_TIM4_Init+0xe8>)
 80011fa:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <MX_TIM4_Init+0xec>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 901-1;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <MX_TIM4_Init+0xe8>)
 8001200:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001204:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <MX_TIM4_Init+0xe8>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <MX_TIM4_Init+0xe8>)
 800120e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001212:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <MX_TIM4_Init+0xe8>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <MX_TIM4_Init+0xe8>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <MX_TIM4_Init+0xe8>)
 8001222:	f003 f968 	bl	80044f6 <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800122c:	f001 fdd0 	bl	8002dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	4619      	mov	r1, r3
 800123c:	481c      	ldr	r0, [pc, #112]	; (80012b0 <MX_TIM4_Init+0xe8>)
 800123e:	f003 fe35 	bl	8004eac <HAL_TIM_ConfigClockSource>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001248:	f001 fdc2 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800124c:	4818      	ldr	r0, [pc, #96]	; (80012b0 <MX_TIM4_Init+0xe8>)
 800124e:	f003 fa11 	bl	8004674 <HAL_TIM_PWM_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001258:	f001 fdba 	bl	8002dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4619      	mov	r1, r3
 800126a:	4811      	ldr	r0, [pc, #68]	; (80012b0 <MX_TIM4_Init+0xe8>)
 800126c:	f004 fa1a 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001276:	f001 fdab 	bl	8002dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127a:	2360      	movs	r3, #96	; 0x60
 800127c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM4_Init+0xe8>)
 8001292:	f003 fd4d 	bl	8004d30 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800129c:	f001 fd98 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM4_Init+0xe8>)
 80012a2:	f001 fe83 	bl	8002fac <HAL_TIM_MspPostInit>

}
 80012a6:	bf00      	nop
 80012a8:	3738      	adds	r7, #56	; 0x38
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000405c 	.word	0x2000405c
 80012b4:	40000800 	.word	0x40000800

080012b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	2224      	movs	r2, #36	; 0x24
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f007 ff82 	bl	80091d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_TIM8_Init+0xa4>)
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <MX_TIM8_Init+0xa8>)
 80012d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_TIM8_Init+0xa4>)
 80012dc:	2203      	movs	r2, #3
 80012de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_TIM8_Init+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 150;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM8_Init+0xa4>)
 80012e8:	2296      	movs	r2, #150	; 0x96
 80012ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_TIM8_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_TIM8_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_TIM8_Init+0xa4>)
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012fe:	2303      	movs	r3, #3
 8001300:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001306:	2301      	movs	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001316:	2301      	movs	r3, #1
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_TIM8_Init+0xa4>)
 800132a:	f003 fac5 	bl	80048b8 <HAL_TIM_Encoder_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 8001334:	f001 fd4c 	bl	8002dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_TIM8_Init+0xa4>)
 8001346:	f004 f9ad 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8001350:	f001 fd3e 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20004014 	.word	0x20004014
 8001360:	40010400 	.word	0x40010400

08001364 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_UART5_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_UART5_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_UART5_Init+0x4c>)
 8001370:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001374:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_UART5_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_UART5_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_UART5_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_UART5_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_UART5_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_UART5_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_UART5_Init+0x4c>)
 800139c:	f004 fa12 	bl	80057c4 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80013a6:	f001 fd13 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20004144 	.word	0x20004144
 80013b4:	40005000 	.word	0x40005000

080013b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <MX_USART1_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART1_UART_Init+0x4c>)
 80013f0:	f004 f9e8 	bl	80057c4 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f001 fce9 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000418c 	.word	0x2000418c
 8001408:	40011000 	.word	0x40011000

0800140c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <MX_USART2_UART_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001444:	f004 f9be 	bl	80057c4 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144e:	f001 fcbf 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000422c 	.word	0x2000422c
 800145c:	40004400 	.word	0x40004400

08001460 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART3_UART_Init+0x4c>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <MX_USART3_UART_Init+0x50>)
 8001468:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_USART3_UART_Init+0x4c>)
 800146c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001470:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART3_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_USART3_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART3_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_USART3_UART_Init+0x4c>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART3_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_USART3_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_USART3_UART_Init+0x4c>)
 8001498:	f004 f994 	bl	80057c4 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014a2:	f001 fc95 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200040a4 	.word	0x200040a4
 80014b0:	40004800 	.word	0x40004800

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <MX_GPIO_Init+0x144>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a49      	ldr	r2, [pc, #292]	; (80015f8 <MX_GPIO_Init+0x144>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <MX_GPIO_Init+0x144>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <MX_GPIO_Init+0x144>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a42      	ldr	r2, [pc, #264]	; (80015f8 <MX_GPIO_Init+0x144>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <MX_GPIO_Init+0x144>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <MX_GPIO_Init+0x144>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a3b      	ldr	r2, [pc, #236]	; (80015f8 <MX_GPIO_Init+0x144>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <MX_GPIO_Init+0x144>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <MX_GPIO_Init+0x144>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a34      	ldr	r2, [pc, #208]	; (80015f8 <MX_GPIO_Init+0x144>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <MX_GPIO_Init+0x144>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <MX_GPIO_Init+0x144>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <MX_GPIO_Init+0x144>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <MX_GPIO_Init+0x144>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_GPIO_Init+0x144>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <MX_GPIO_Init+0x144>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_GPIO_Init+0x144>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LEDBlue_Pin|LEDGreen_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001578:	4820      	ldr	r0, [pc, #128]	; (80015fc <MX_GPIO_Init+0x148>)
 800157a:	f002 fabb 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rightPWMGND_GPIO_Port, rightPWMGND_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001584:	481e      	ldr	r0, [pc, #120]	; (8001600 <MX_GPIO_Init+0x14c>)
 8001586:	f002 fab5 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(leftPWMGND_GPIO_Port, leftPWMGND_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	481c      	ldr	r0, [pc, #112]	; (8001604 <MX_GPIO_Init+0x150>)
 8001592:	f002 faaf 	bl	8003af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDBlue_Pin LEDGreen_Pin */
  GPIO_InitStruct.Pin = LEDBlue_Pin|LEDGreen_Pin;
 8001596:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4813      	ldr	r0, [pc, #76]	; (80015fc <MX_GPIO_Init+0x148>)
 80015b0:	f002 f904 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : rightPWMGND_Pin */
  GPIO_InitStruct.Pin = rightPWMGND_Pin;
 80015b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015be:	2302      	movs	r3, #2
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(rightPWMGND_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_GPIO_Init+0x14c>)
 80015ce:	f002 f8f5 	bl	80037bc <HAL_GPIO_Init>

  /*Configure GPIO pin : leftPWMGND_Pin */
  GPIO_InitStruct.Pin = leftPWMGND_Pin;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015dc:	2302      	movs	r3, #2
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftPWMGND_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_GPIO_Init+0x150>)
 80015ec:	f002 f8e6 	bl	80037bc <HAL_GPIO_Init>

}
 80015f0:	bf00      	nop
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40021400 	.word	0x40021400
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40020000 	.word	0x40020000

08001608 <Car_Initial>:

/* USER CODE BEGIN 4 */
void Car_Initial(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 800160c:	f007 faa2 	bl	8008b54 <vPortEnterCritical>
	state=Initial;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <Car_Initial+0x44>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
	temp_state = Unknow;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <Car_Initial+0x48>)
 8001618:	220f      	movs	r2, #15
 800161a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);//�??????????????????????????????????????????????????????????????????????启左侧PWM
 800161c:	2100      	movs	r1, #0
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <Car_Initial+0x4c>)
 8001620:	f003 f882 	bl	8004728 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);//�??????????????????????????????????????????????????????????????????????启右侧PWM
 8001624:	2100      	movs	r1, #0
 8001626:	480c      	ldr	r0, [pc, #48]	; (8001658 <Car_Initial+0x50>)
 8001628:	f003 f87e 	bl	8004728 <HAL_TIM_PWM_Start>
	taskEXIT_CRITICAL();
 800162c:	f007 fac2 	bl	8008bb4 <vPortExitCritical>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001630:	213c      	movs	r1, #60	; 0x3c
 8001632:	480a      	ldr	r0, [pc, #40]	; (800165c <Car_Initial+0x54>)
 8001634:	f003 f9e6 	bl	8004a04 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,500);
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <Car_Initial+0x54>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <Car_Initial+0x54>)
 8001644:	f002 ffa6 	bl	8004594 <HAL_TIM_Base_Start_IT>
	//vTaskSuspend(UART_RTHandle);//Suspend UART R and T
	//vTaskSuspend(PIDCameraHandle);//Suspend PID module
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20004140 	.word	0x20004140
 8001650:	200041d8 	.word	0x200041d8
 8001654:	200040f8 	.word	0x200040f8
 8001658:	2000405c 	.word	0x2000405c
 800165c:	200041e4 	.word	0x200041e4

08001660 <Car_Stop>:

void Car_Stop(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 8001664:	f007 fa76 	bl	8008b54 <vPortEnterCritical>
	PWM_SET_LEFT(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f000 fd19 	bl	80020a0 <PWM_SET_LEFT>
	PWM_SET_RIGHT(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f000 fd4e 	bl	8002110 <PWM_SET_RIGHT>
	taskEXIT_CRITICAL();
 8001674:	f007 fa9e 	bl	8008bb4 <vPortExitCritical>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <delay>:

void delay(uint32_t time_ms)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	uint32_t PreviousWakeTime=osKernelSysTick();
 8001684:	f004 ffd9 	bl	800663a <osKernelSysTick>
 8001688:	4603      	mov	r3, r0
 800168a:	60fb      	str	r3, [r7, #12]
	osDelayUntil(&PreviousWakeTime, time_ms);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	f005 f8e4 	bl	8006860 <osDelayUntil>
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <Angle_Diff>:

float Angle_Diff(float target, float input)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016aa:	edc7 0a00 	vstr	s1, [r7]
	float Error;
	if(target >= 180)
 80016ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001760 <Angle_Diff+0xc0>
 80016b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	db08      	blt.n	80016d2 <Angle_Diff+0x32>
		target=-360+target;
 80016c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001764 <Angle_Diff+0xc4>
 80016c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80016d0:	e010      	b.n	80016f4 <Angle_Diff+0x54>
	else if(target <=-180)
 80016d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001768 <Angle_Diff+0xc8>
 80016da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	d807      	bhi.n	80016f4 <Angle_Diff+0x54>
		target=360+target;
 80016e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001764 <Angle_Diff+0xc4>
 80016ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f0:	edc7 7a01 	vstr	s15, [r7, #4]
	Error = target - input;
 80016f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80016f8:	edd7 7a00 	vldr	s15, [r7]
 80016fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001700:	edc7 7a03 	vstr	s15, [r7, #12]
		if(Error >= 180)
 8001704:	edd7 7a03 	vldr	s15, [r7, #12]
 8001708:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001760 <Angle_Diff+0xc0>
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	db08      	blt.n	8001728 <Angle_Diff+0x88>
			Error=Error-360;
 8001716:	edd7 7a03 	vldr	s15, [r7, #12]
 800171a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001764 <Angle_Diff+0xc4>
 800171e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001722:	edc7 7a03 	vstr	s15, [r7, #12]
 8001726:	e010      	b.n	800174a <Angle_Diff+0xaa>
		else if(Error <= -180)
 8001728:	edd7 7a03 	vldr	s15, [r7, #12]
 800172c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001768 <Angle_Diff+0xc8>
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	d807      	bhi.n	800174a <Angle_Diff+0xaa>
			Error=Error+360;
 800173a:	edd7 7a03 	vldr	s15, [r7, #12]
 800173e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001764 <Angle_Diff+0xc4>
 8001742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001746:	edc7 7a03 	vstr	s15, [r7, #12]
	return Error;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	ee07 3a90 	vmov	s15, r3
}
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	43340000 	.word	0x43340000
 8001764:	43b40000 	.word	0x43b40000
 8001768:	c3340000 	.word	0xc3340000

0800176c <PID_Turning>:
// 		}
// 	 }
//}

int PID_Turning(float increment_angle,float Accept_Error)//If we want to turn right, parameter is negative
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b090      	sub	sp, #64	; 0x40
 8001770:	af00      	add	r7, sp, #0
 8001772:	ed87 0a01 	vstr	s0, [r7, #4]
 8001776:	edc7 0a00 	vstr	s1, [r7]
			float PID_target=0;
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
			float PID_Error_Last=0;
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
			float initial_yaw=0;
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
			float PID_Output=0,PID_Input=0;;
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
			float Error = 0, Error_Total=0;
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			float KP=7, KI=0.05, KD=0;
 80017a4:	4b9a      	ldr	r3, [pc, #616]	; (8001a10 <PID_Turning+0x2a4>)
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	4b9a      	ldr	r3, [pc, #616]	; (8001a14 <PID_Turning+0x2a8>)
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
			int t=0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
			uint8_t Flag=0; //Indicate that if verifying process begin.
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Car_Stop();
 80017bc:	f7ff ff50 	bl	8001660 <Car_Stop>
			//delay(1500);
			for(int i=0;i<20;i++)			//Get average initial direction
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	e015      	b.n	80017f2 <PID_Turning+0x86>
			{
//				if(gyro_ready_flag)
//				{
					//gyro_ready_flag=0;
					osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 80017c6:	4b94      	ldr	r3, [pc, #592]	; (8001a18 <PID_Turning+0x2ac>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f04f 31ff 	mov.w	r1, #4294967295
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 ffc2 	bl	8006758 <osSemaphoreWait>
					//ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(portMAX_DELAY));
					initial_yaw+=angle.z;
 80017d4:	4b91      	ldr	r3, [pc, #580]	; (8001a1c <PID_Turning+0x2b0>)
 80017d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80017da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80017de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
					delay(40);
 80017e6:	2028      	movs	r0, #40	; 0x28
 80017e8:	f7ff ff48 	bl	800167c <delay>
			for(int i=0;i<20;i++)			//Get average initial direction
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	3301      	adds	r3, #1
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	2b13      	cmp	r3, #19
 80017f6:	dde6      	ble.n	80017c6 <PID_Turning+0x5a>
//				}
//				else
//					continue;
			}
			initial_yaw=initial_yaw/20;
 80017f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80017fc:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001804:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			PID_target=initial_yaw + increment_angle;
 8001808:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800180c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001814:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			if(PID_target > 180)
 8001818:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800181c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001a20 <PID_Turning+0x2b4>
 8001820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	dd07      	ble.n	800183a <PID_Turning+0xce>
				PID_target=-360+PID_target;
 800182a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800182e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001a24 <PID_Turning+0x2b8>
 8001832:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001836:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			if(PID_target <-180)
 800183a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800183e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001a28 <PID_Turning+0x2bc>
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	d507      	bpl.n	800185c <PID_Turning+0xf0>
				PID_target=360+PID_target;
 800184c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001850:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001a24 <PID_Turning+0x2b8>
 8001854:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001858:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
//			  			  return 1;
//			  		  }
//			  	  if(gyro_ready_flag==0)
//			  		  continue;
//			  	  gyro_ready_flag=0;
			  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 800185c:	4b6e      	ldr	r3, [pc, #440]	; (8001a18 <PID_Turning+0x2ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	4618      	mov	r0, r3
 8001866:	f004 ff77 	bl	8006758 <osSemaphoreWait>
			  	 //ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(portMAX_DELAY));

			  	 PID_Input = angle.z;
 800186a:	4b6c      	ldr	r3, [pc, #432]	; (8001a1c <PID_Turning+0x2b0>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61fb      	str	r3, [r7, #28]
			  	 Error=Angle_Diff(PID_target, PID_Input);
 8001870:	edd7 0a07 	vldr	s1, [r7, #28]
 8001874:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001878:	f7ff ff12 	bl	80016a0 <Angle_Diff>
 800187c:	ed87 0a06 	vstr	s0, [r7, #24]
			  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 8001880:	edd7 7a00 	vldr	s15, [r7]
 8001884:	eef1 7a67 	vneg.f32	s15, s15
 8001888:	ed97 7a06 	vldr	s14, [r7, #24]
 800188c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	dd17      	ble.n	80018c6 <PID_Turning+0x15a>
 8001896:	ed97 7a06 	vldr	s14, [r7, #24]
 800189a:	edd7 7a00 	vldr	s15, [r7]
 800189e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	d50e      	bpl.n	80018c6 <PID_Turning+0x15a>
 80018a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <PID_Turning+0x15a>
			  	 {
			  		 t++;
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b2:	3301      	adds	r3, #1
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
			  		if(t>2)
 80018b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	dd04      	ble.n	80018c6 <PID_Turning+0x15a>
			  		{
			  			Flag = 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  			t=0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
			  		}
			  	 }
			  	 if(Flag)
 80018c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d026      	beq.n	800191c <PID_Turning+0x1b0>
			  	 {
			  		if(t>Angle_stable_cycles)
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	dd06      	ble.n	80018e2 <PID_Turning+0x176>
			  		{
			  			Flag=0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  			t=0;
 80018da:	2300      	movs	r3, #0
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
			  			return 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	e092      	b.n	8001a08 <PID_Turning+0x29c>
			  		}
			  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 80018e2:	edd7 7a00 	vldr	s15, [r7]
 80018e6:	eef1 7a67 	vneg.f32	s15, s15
 80018ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80018ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	dd0c      	ble.n	8001912 <PID_Turning+0x1a6>
 80018f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	d503      	bpl.n	8001912 <PID_Turning+0x1a6>
			  		{
			  			t++;
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	3301      	adds	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001910:	e004      	b.n	800191c <PID_Turning+0x1b0>
			  		}
			  		else
			  		{
			  			Flag=0;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  			t=0;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
			  		}
			  	 }
			  	 Error_Total=Error_Total+KI*Error;
 800191c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001920:	edd7 7a06 	vldr	s15, [r7, #24]
 8001924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001928:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			     PID_Output = KP * Error  +
 8001934:	ed97 7a05 	vldr	s14, [r7, #20]
 8001938:	edd7 7a06 	vldr	s15, [r7, #24]
 800193c:	ee27 7a27 	vmul.f32	s14, s14, s15
			 				  KD * (Error - PID_Error_Last ) +
 8001940:	edd7 6a06 	vldr	s13, [r7, #24]
 8001944:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001948:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800194c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
			     PID_Output = KP * Error  +
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800195c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001960:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
							  Error_Total;
			     PID_Error_Last = Error;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
			     if(PID_Output < 0)
 8001968:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800196c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d513      	bpl.n	800199e <PID_Turning+0x232>
			     {
			    	 PID_Output-=PWM_Lowest;
 8001976:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800197a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001a2c <PID_Turning+0x2c0>
 800197e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001982:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			    	 if(-PID_Output > PWM_Higest)
 8001986:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800198a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001a30 <PID_Turning+0x2c4>
 800198e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	d520      	bpl.n	80019da <PID_Turning+0x26e>
			    	 	PID_Output=-PWM_Higest;
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <PID_Turning+0x2c8>)
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
 800199c:	e01d      	b.n	80019da <PID_Turning+0x26e>
			     }

			     else if(PID_Output > 0)
 800199e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dd13      	ble.n	80019d4 <PID_Turning+0x268>
			     {
			    	 PID_Output+=PWM_Lowest;
 80019ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001a2c <PID_Turning+0x2c0>
 80019b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			    	 if(-PID_Output > PWM_Higest)
 80019bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019c0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001a30 <PID_Turning+0x2c4>
 80019c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	d505      	bpl.n	80019da <PID_Turning+0x26e>
			    	 	PID_Output=-PWM_Higest;
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <PID_Turning+0x2c8>)
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
 80019d2:	e002      	b.n	80019da <PID_Turning+0x26e>
			     }
			     else
			    	PID_Output=0;
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
//			     {
//			    	 if(-PID_Output > PWM_Higest)
//			    		 PID_Output=-PWM_Higest;
//			    	 if(-PID_Output < PWM_Lowest)
//			    	 	 PID_Output=-PWM_Lowest;
			    	 taskENTER_CRITICAL();
 80019da:	f007 f8bb 	bl	8008b54 <vPortEnterCritical>
			    	 PWM_SET_RIGHT ((int32_t) PID_Output);
 80019de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e6:	ee17 0a90 	vmov	r0, s15
 80019ea:	f000 fb91 	bl	8002110 <PWM_SET_RIGHT>
			    	 PWM_SET_LEFT((int32_t)(-PID_Output));
 80019ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019f2:	eef1 7a67 	vneg.f32	s15, s15
 80019f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019fa:	ee17 0a90 	vmov	r0, s15
 80019fe:	f000 fb4f 	bl	80020a0 <PWM_SET_LEFT>
			    	 taskEXIT_CRITICAL();
 8001a02:	f007 f8d7 	bl	8008bb4 <vPortExitCritical>
			  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001a06:	e729      	b.n	800185c <PID_Turning+0xf0>
			     }
			     delay(2);
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3740      	adds	r7, #64	; 0x40
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40e00000 	.word	0x40e00000
 8001a14:	3d4ccccd 	.word	0x3d4ccccd
 8001a18:	200041dc 	.word	0x200041dc
 8001a1c:	20000290 	.word	0x20000290
 8001a20:	43340000 	.word	0x43340000
 8001a24:	43b40000 	.word	0x43b40000
 8001a28:	c3340000 	.word	0xc3340000
 8001a2c:	43fa0000 	.word	0x43fa0000
 8001a30:	c4bb8000 	.word	0xc4bb8000
 8001a34:	c4bb8000 	.word	0xc4bb8000

08001a38 <PID_Straight>:

void PID_Straight(float speed)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b092      	sub	sp, #72	; 0x48
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	ed87 0a01 	vstr	s0, [r7, #4]
					float PID_target=0;
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
					float PID_Error_Last=0;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	647b      	str	r3, [r7, #68]	; 0x44
					float initial_yaw=0;
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
					float PID_Output=0,PID_Input=0;;
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
					float Error = 0, Error_Total=0,Error_Total_Total=0;
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
					float KP=10, KI=3, KD=5, KI2=0.013;
 8001a72:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <PID_Straight+0x1f0>)
 8001a74:	623b      	str	r3, [r7, #32]
 8001a76:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <PID_Straight+0x1f4>)
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <PID_Straight+0x1f8>)
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <PID_Straight+0x1fc>)
 8001a80:	617b      	str	r3, [r7, #20]
					int32_t pwm_right=0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
					int32_t pwm_left=0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
					//uint8_t Flag=0; //Indicate that if verifying process begin.
					Car_Stop();
 8001a8a:	f7ff fde9 	bl	8001660 <Car_Stop>
					if (PID_Straight_Reset_Flag)
 8001a8e:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <PID_Straight+0x200>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80bf 	bne.w	8001c16 <PID_Straight+0x1de>
						return;
					osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <PID_Straight+0x204>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fe59 	bl	8006758 <osSemaphoreWait>
					for(int i=0;i<20;i++)			//Get average initial direction
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aaa:	e015      	b.n	8001ad8 <PID_Straight+0xa0>
					{
							osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <PID_Straight+0x204>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fe4f 	bl	8006758 <osSemaphoreWait>
							initial_yaw+=angle.z;
 8001aba:	4b61      	ldr	r3, [pc, #388]	; (8001c40 <PID_Straight+0x208>)
 8001abc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ac0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
							delay(10);
 8001acc:	200a      	movs	r0, #10
 8001ace:	f7ff fdd5 	bl	800167c <delay>
					for(int i=0;i<20;i++)			//Get average initial direction
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	2b13      	cmp	r3, #19
 8001adc:	dde6      	ble.n	8001aac <PID_Straight+0x74>
					}
					initial_yaw=initial_yaw/20;
 8001ade:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ae2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
					PID_target=initial_yaw;
 8001aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
				  for(;;)
				  {
					  	 if (PID_Straight_Reset_Flag)
 8001af2:	4b51      	ldr	r3, [pc, #324]	; (8001c38 <PID_Straight+0x200>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 808f 	bne.w	8001c1a <PID_Straight+0x1e2>
					  		 return;
		  	  	  	  	 //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green
					  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <PID_Straight+0x204>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 fe27 	bl	8006758 <osSemaphoreWait>
					  	 PID_Input = angle.z;
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <PID_Straight+0x208>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
					  	 Error=Angle_Diff(PID_target, PID_Input);
 8001b10:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001b14:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001b18:	f7ff fdc2 	bl	80016a0 <Angle_Diff>
 8001b1c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					  	 Error_Total=Error_Total+KI*Error;
 8001b20:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					     Error_Total_Total= Error_Total_Total+KI2*Error_Total;
 8001b38:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b44:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					     PID_Output = KP * Error  +
 8001b50:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b58:	ee27 7a27 	vmul.f32	s14, s14, s15
					 				  KD * (Error - PID_Error_Last ) +
 8001b5c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001b60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b68:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
					     PID_Output = KP * Error  +
 8001b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b74:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
									  Error_Total;
					     PID_Error_Last = Error;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	647b      	str	r3, [r7, #68]	; 0x44

					     pwm_right=	speed+	(int32_t) 	PID_Output;
 8001b84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9c:	ee17 3a90 	vmov	r3, s15
 8001ba0:	613b      	str	r3, [r7, #16]
					     pwm_left=	speed-	(int32_t)  	PID_Output;
 8001ba2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bae:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bba:	ee17 3a90 	vmov	r3, s15
 8001bbe:	60fb      	str	r3, [r7, #12]
					     pwm_right = pwm_right<PWM_Lowest ? PWM_Lowest : pwm_right;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bc6:	bfb8      	it	lt
 8001bc8:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
 8001bcc:	613b      	str	r3, [r7, #16]
					     pwm_right = pwm_right>PWM_Higest ? PWM_Higest : pwm_right;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bfa8      	it	ge
 8001bd8:	4613      	movge	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
					     pwm_left = pwm_left<PWM_Lowest ? PWM_Lowest : pwm_left;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001be2:	bfb8      	it	lt
 8001be4:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
 8001be8:	60fb      	str	r3, [r7, #12]
					     pwm_left = pwm_left>PWM_Higest ? PWM_Higest : pwm_left;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	bfa8      	it	ge
 8001bf4:	4613      	movge	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
					     if (PID_Straight_Reset_Flag)
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <PID_Straight+0x200>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10e      	bne.n	8001c1e <PID_Straight+0x1e6>
					     	return;
					     taskENTER_CRITICAL();
 8001c00:	f006 ffa8 	bl	8008b54 <vPortEnterCritical>
					     PWM_SET_RIGHT (pwm_right);
 8001c04:	6938      	ldr	r0, [r7, #16]
 8001c06:	f000 fa83 	bl	8002110 <PWM_SET_RIGHT>
					     PWM_SET_LEFT(pwm_left);
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fa48 	bl	80020a0 <PWM_SET_LEFT>
					     taskEXIT_CRITICAL();
 8001c10:	f006 ffd0 	bl	8008bb4 <vPortExitCritical>
					  	 if (PID_Straight_Reset_Flag)
 8001c14:	e76d      	b.n	8001af2 <PID_Straight+0xba>
						return;
 8001c16:	bf00      	nop
 8001c18:	e002      	b.n	8001c20 <PID_Straight+0x1e8>
					  		 return;
 8001c1a:	bf00      	nop
 8001c1c:	e000      	b.n	8001c20 <PID_Straight+0x1e8>
					     	return;
 8001c1e:	bf00      	nop
					     }
}
 8001c20:	3748      	adds	r7, #72	; 0x48
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	41200000 	.word	0x41200000
 8001c2c:	40400000 	.word	0x40400000
 8001c30:	40a00000 	.word	0x40a00000
 8001c34:	3c54fdf4 	.word	0x3c54fdf4
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	200041dc 	.word	0x200041dc
 8001c40:	20000290 	.word	0x20000290

08001c44 <PID_Line_Follow>:

float PID_Line_Follow(float Accept_Error)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08e      	sub	sp, #56	; 0x38
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	ed87 0a01 	vstr	s0, [r7, #4]
#define MAX_TIME 250
			volatile uint16_t PID_Target=0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	837b      	strh	r3, [r7, #26]
		    volatile float Kp = 3, Ki = 0, Kd =0;     // PID系数
 8001c52:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <PID_Line_Follow+0x1d0>)
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
			float PID_Error_Last=0;
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
			float PID_Output=0;                    // PWM输出占空
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
			float Error = 0, Error_Total=0,First_Error=0;
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
			int32_t PID_Input=0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001c84:	2202      	movs	r2, #2
 8001c86:	4964      	ldr	r1, [pc, #400]	; (8001e18 <PID_Line_Follow+0x1d4>)
 8001c88:	4864      	ldr	r0, [pc, #400]	; (8001e1c <PID_Line_Follow+0x1d8>)
 8001c8a:	f003 ff1c 	bl	8005ac6 <HAL_UART_Receive_IT>
			//delay(100);
			osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8001c8e:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <PID_Line_Follow+0x1dc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f04f 31ff 	mov.w	r1, #4294967295
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fd5e 	bl	8006758 <osSemaphoreWait>
						  	 for(int i = 0;i<3;i++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca0:	e011      	b.n	8001cc6 <PID_Line_Follow+0x82>
						  	 {
						  		 //osSemaphoreRelease(GyroReadySemHandle);
						  		osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <PID_Line_Follow+0x1dc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fd54 	bl	8006758 <osSemaphoreWait>
						  		 PID_Input = (Camera_Data & (0x07FF))-1000;
 8001cb0:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <PID_Line_Follow+0x1e0>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
						  	 for(int i = 0;i<3;i++)
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	ddea      	ble.n	8001ca2 <PID_Line_Follow+0x5e>
						  		 //osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
						  	 }
						  	 PID_Input/=3;
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <PID_Line_Follow+0x1e4>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	17db      	asrs	r3, r3, #31
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
			First_Error= PID_Target - PID_Input;
 8001cda:	8b7b      	ldrh	r3, [r7, #26]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cec:	edc7 7a07 	vstr	s15, [r7, #28]
			Error=PID_Target - PID_Input;
 8001cf0:	8b7b      	ldrh	r3, [r7, #26]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

			  	 Error = PID_Target - PID_Input;		  // 偏差 = 目标 - 实际
 8001d06:	8b7b      	ldrh	r3, [r7, #26]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			  	 Error_Total=Error_Total+Ki*Error;
 8001d1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d28:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d30:	edc7 7a08 	vstr	s15, [r7, #32]
			  	 PID_Output = Kp * Error  +
 8001d34:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
			  				  Kd * (Error - PID_Error_Last ) +
 8001d40:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  	 PID_Output = Kp * Error  +
 8001d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d58:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			  				  Error_Total;
			  	 PID_Error_Last = Error;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
			     if(PID_Output > MAX_TIME) 			PID_Output =	MAX_TIME;	    // 限幅
 8001d68:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d6c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e2c <PID_Line_Follow+0x1e8>
 8001d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	dd02      	ble.n	8001d80 <PID_Line_Follow+0x13c>
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <PID_Line_Follow+0x1ec>)
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	e00a      	b.n	8001d96 <PID_Line_Follow+0x152>
			     else if(PID_Output <-(MAX_TIME)) 	PID_Output = 	-MAX_TIME;
 8001d80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d84:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e34 <PID_Line_Follow+0x1f0>
 8001d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	d501      	bpl.n	8001d96 <PID_Line_Follow+0x152>
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <PID_Line_Follow+0x1f4>)
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34

			     if(PID_Output>0)
 8001d96:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	dd0c      	ble.n	8001dbe <PID_Line_Follow+0x17a>
			     {
			    	 taskENTER_CRITICAL();
 8001da4:	f006 fed6 	bl	8008b54 <vPortEnterCritical>
			    	 PWM_SET_RIGHT (PWM_Lowest+700);
 8001da8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001dac:	f000 f9b0 	bl	8002110 <PWM_SET_RIGHT>
			    	 PWM_SET_LEFT  (PWM_Lowest-700);
 8001db0:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8001db4:	f000 f974 	bl	80020a0 <PWM_SET_LEFT>
			    	 taskEXIT_CRITICAL();
 8001db8:	f006 fefc 	bl	8008bb4 <vPortExitCritical>
 8001dbc:	e00a      	b.n	8001dd4 <PID_Line_Follow+0x190>
			     }
			     else
			     {
			    	 taskENTER_CRITICAL();
 8001dbe:	f006 fec9 	bl	8008b54 <vPortEnterCritical>
			    	 PWM_SET_RIGHT (-PWM_Lowest-700);
 8001dc2:	481e      	ldr	r0, [pc, #120]	; (8001e3c <PID_Line_Follow+0x1f8>)
 8001dc4:	f000 f9a4 	bl	8002110 <PWM_SET_RIGHT>
			    	 PWM_SET_LEFT  (PWM_Lowest+700);
 8001dc8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001dcc:	f000 f968 	bl	80020a0 <PWM_SET_LEFT>
			    	 taskEXIT_CRITICAL();
 8001dd0:	f006 fef0 	bl	8008bb4 <vPortExitCritical>
			     }
			     PID_Output=PID_Output>0?PID_Output:-PID_Output;
 8001dd4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	dd02      	ble.n	8001de8 <PID_Line_Follow+0x1a4>
 8001de2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001de6:	e003      	b.n	8001df0 <PID_Line_Follow+0x1ac>
 8001de8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dec:	eef1 7a67 	vneg.f32	s15, s15
 8001df0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			     delay((uint32_t) PID_Output);
 8001df4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dfc:	ee17 0a90 	vmov	r0, s15
 8001e00:	f7ff fc3c 	bl	800167c <delay>
			     return First_Error;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	ee07 3a90 	vmov	s15, r3
}
 8001e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0e:	3738      	adds	r7, #56	; 0x38
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40400000 	.word	0x40400000
 8001e18:	2000028c 	.word	0x2000028c
 8001e1c:	2000422c 	.word	0x2000422c
 8001e20:	200040ec 	.word	0x200040ec
 8001e24:	2000028e 	.word	0x2000028e
 8001e28:	55555556 	.word	0x55555556
 8001e2c:	437a0000 	.word	0x437a0000
 8001e30:	437a0000 	.word	0x437a0000
 8001e34:	c37a0000 	.word	0xc37a0000
 8001e38:	c37a0000 	.word	0xc37a0000
 8001e3c:	fffffb50 	.word	0xfffffb50

08001e40 <Ultrasonic_Feedback>:

Distance Ultrasonic_Feedback(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
	uint8_t info=0xA0;
 8001e46:	23a0      	movs	r3, #160	; 0xa0
 8001e48:	74fb      	strb	r3, [r7, #19]
	uint8_t Rx_Buf[3]={0,0,0};
 8001e4a:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <Ultrasonic_Feedback+0xbc>)
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	4611      	mov	r1, r2
 8001e54:	8019      	strh	r1, [r3, #0]
 8001e56:	3302      	adds	r3, #2
 8001e58:	0c12      	lsrs	r2, r2, #16
 8001e5a:	701a      	strb	r2, [r3, #0]
	uint32_t Data=0x00000000;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
	Distance distance={0.0,0.0};
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
	taskENTER_CRITICAL();
 8001e6c:	f006 fe72 	bl	8008b54 <vPortEnterCritical>
	HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,10);
 8001e70:	f107 0113 	add.w	r1, r7, #19
 8001e74:	230a      	movs	r3, #10
 8001e76:	2201      	movs	r2, #1
 8001e78:	4821      	ldr	r0, [pc, #132]	; (8001f00 <Ultrasonic_Feedback+0xc0>)
 8001e7a:	f003 fcf0 	bl	800585e <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 8001e7e:	f006 fe99 	bl	8008bb4 <vPortExitCritical>
	delay(200);
 8001e82:	20c8      	movs	r0, #200	; 0xc8
 8001e84:	f7ff fbfa 	bl	800167c <delay>
	taskENTER_CRITICAL();
 8001e88:	f006 fe64 	bl	8008b54 <vPortEnterCritical>
	HAL_UART_Receive(&huart5,(uint8_t*) &Rx_Buf,3,1);
 8001e8c:	f107 0110 	add.w	r1, r7, #16
 8001e90:	2301      	movs	r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	481a      	ldr	r0, [pc, #104]	; (8001f00 <Ultrasonic_Feedback+0xc0>)
 8001e96:	f003 fd74 	bl	8005982 <HAL_UART_Receive>
	taskEXIT_CRITICAL();
 8001e9a:	f006 fe8b 	bl	8008bb4 <vPortExitCritical>
	Data=Data | (((uint32_t) (Rx_Buf[0]))<<16);
 8001e9e:	7c3b      	ldrb	r3, [r7, #16]
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]
	Data=Data | (((uint32_t) (Rx_Buf[1]))<<8);
 8001ea8:	7c7b      	ldrb	r3, [r7, #17]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61fb      	str	r3, [r7, #28]
	Data=Data |((uint32_t) (Rx_Buf[2]));
 8001eb2:	7cbb      	ldrb	r3, [r7, #18]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61fb      	str	r3, [r7, #28]
	//HAL_UART_Transmit(&huart1, (uint8_t *) &Data, 4, 0xFFFF);
	distance.front=Data/1000;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <Ultrasonic_Feedback+0xc4>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	099b      	lsrs	r3, r3, #6
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	edc7 7a02 	vstr	s15, [r7, #8]
	return distance;
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	f107 0208 	add.w	r2, r7, #8
 8001eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ede:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	ee07 2a10 	vmov	s14, r2
 8001eea:	ee07 3a90 	vmov	s15, r3
}
 8001eee:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef2:	eef0 0a67 	vmov.f32	s1, s15
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	0800930c 	.word	0x0800930c
 8001f00:	20004144 	.word	0x20004144
 8001f04:	10624dd3 	.word	0x10624dd3

08001f08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  	if (huart->Instance==USART2){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_UART_RxCpltCallback+0x88>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d135      	bne.n	8001f86 <HAL_UART_RxCpltCallback+0x7e>
  		Camera_Data=0x0000;
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_UART_RxCpltCallback+0x8c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	801a      	strh	r2, [r3, #0]
  		osSemaphoreWait(CameraUARTSemHandle, 0);
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_UART_RxCpltCallback+0x90>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 fc16 	bl	8006758 <osSemaphoreWait>
  		Camera_Data=Camera_Data | (((uint16_t) (Rx_Buf[0]))<<8);
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_UART_RxCpltCallback+0x94>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_UART_RxCpltCallback+0x8c>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <HAL_UART_RxCpltCallback+0x8c>)
 8001f46:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data|((uint16_t) (Rx_Buf[1]));
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_UART_RxCpltCallback+0x94>)
 8001f4a:	785b      	ldrb	r3, [r3, #1]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_UART_RxCpltCallback+0x8c>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_UART_RxCpltCallback+0x8c>)
 8001f5c:	801a      	strh	r2, [r3, #0]
  		osSemaphoreRelease(CameraUARTSemHandle);
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_UART_RxCpltCallback+0x90>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 fc46 	bl	80067f4 <osSemaphoreRelease>
  		//Data=Data & (0x07F0);
  		//HAL_UART_Transmit(&huart1, (uint8_t*) &Data,2,10);
  		//HAL_UART_AbortReceive_IT(&huart1);
  		Rx_Buf[0]=0;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_UART_RxCpltCallback+0x94>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
  		Rx_Buf[1]=0;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_UART_RxCpltCallback+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	705a      	strb	r2, [r3, #1]
  		//camera_ready_flag=1;
  		//HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
  		if(camera_recieve_IT_flag)
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_UART_RxCpltCallback+0x98>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_UART_RxCpltCallback+0x7e>
  		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4907      	ldr	r1, [pc, #28]	; (8001f9c <HAL_UART_RxCpltCallback+0x94>)
 8001f80:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8001f82:	f003 fda0 	bl	8005ac6 <HAL_UART_Receive_IT>
//  			Rx_Buf_Sonic[1]=0;
//  			Rx_Buf_Sonic[2]=0;
//  			HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Sonic,3);
//  			HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
//  		}
  }
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40004400 	.word	0x40004400
 8001f94:	2000028e 	.word	0x2000028e
 8001f98:	200040ec 	.word	0x200040ec
 8001f9c:	2000028c 	.word	0x2000028c
 8001fa0:	200002ac 	.word	0x200002ac
 8001fa4:	2000422c 	.word	0x2000422c

08001fa8 <State_Transition>:

uint8_t State_Transition(State* current_state)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	State next_state = Unknow;
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	73fb      	strb	r3, [r7, #15]
	switch(state)
 8001fb4:	4b37      	ldr	r3, [pc, #220]	; (8002094 <State_Transition+0xec>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d856      	bhi.n	800206c <State_Transition+0xc4>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <State_Transition+0x1c>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08001ff9 	.word	0x08001ff9
 8001fc8:	08001fff 	.word	0x08001fff
 8001fcc:	08002013 	.word	0x08002013
 8001fd0:	0800201f 	.word	0x0800201f
 8001fd4:	08002025 	.word	0x08002025
 8001fd8:	0800206d 	.word	0x0800206d
 8001fdc:	08002037 	.word	0x08002037
 8001fe0:	0800204b 	.word	0x0800204b
 8001fe4:	08002051 	.word	0x08002051
 8001fe8:	08002019 	.word	0x08002019
 8001fec:	0800202b 	.word	0x0800202b
 8001ff0:	08002031 	.word	0x08002031
 8001ff4:	08002057 	.word	0x08002057
	{
		case Initial:
					next_state = Line_Search;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	73fb      	strb	r3, [r7, #15]
					break;
 8001ffc:	e039      	b.n	8002072 <State_Transition+0xca>
		case Line_Search:
					if(distance_flag==0)
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <State_Transition+0xf0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <State_Transition+0x64>
						next_state = Line_Search;
 8002006:	2302      	movs	r3, #2
 8002008:	73fb      	strb	r3, [r7, #15]
					else
						next_state= TurnRight;
					break;
 800200a:	e032      	b.n	8002072 <State_Transition+0xca>
						next_state= TurnRight;
 800200c:	2304      	movs	r3, #4
 800200e:	73fb      	strb	r3, [r7, #15]
					break;
 8002010:	e02f      	b.n	8002072 <State_Transition+0xca>
		case Line_Search2:
						next_state= TurnRight;
 8002012:	2304      	movs	r3, #4
 8002014:	73fb      	strb	r3, [r7, #15]
					break;
 8002016:	e02c      	b.n	8002072 <State_Transition+0xca>
		case Go_Line_Follow:
						next_state = Line_Search;
 8002018:	2302      	movs	r3, #2
 800201a:	73fb      	strb	r3, [r7, #15]
				  	break;
 800201c:	e029      	b.n	8002072 <State_Transition+0xca>
		case TurnRight:
					next_state = Go_Mile_1;
 800201e:	2308      	movs	r3, #8
 8002020:	73fb      	strb	r3, [r7, #15]
					break;
 8002022:	e026      	b.n	8002072 <State_Transition+0xca>
		case TurnRight2:
				 	next_state = Line_Search2;
 8002024:	2303      	movs	r3, #3
 8002026:	73fb      	strb	r3, [r7, #15]
					break;
 8002028:	e023      	b.n	8002072 <State_Transition+0xca>
		case Go_to_Bridge:
					next_state= Cross_bridge;
 800202a:	230c      	movs	r3, #12
 800202c:	73fb      	strb	r3, [r7, #15]
					break;
 800202e:	e020      	b.n	8002072 <State_Transition+0xca>
		case Cross_bridge:
					next_state= Go_Mile_2_Until_Barrier;
 8002030:	2309      	movs	r3, #9
 8002032:	73fb      	strb	r3, [r7, #15]
					break;
 8002034:	e01d      	b.n	8002072 <State_Transition+0xca>
		case GoStraight_Until_Barrier:
					//osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
					if(distance_flag==0)
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <State_Transition+0xf0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <State_Transition+0x9c>
						next_state = GoStraight_Until_Barrier;
 800203e:	2307      	movs	r3, #7
 8002040:	73fb      	strb	r3, [r7, #15]
					else
						next_state = TurnRight;

					break;
 8002042:	e016      	b.n	8002072 <State_Transition+0xca>
						next_state = TurnRight;
 8002044:	2304      	movs	r3, #4
 8002046:	73fb      	strb	r3, [r7, #15]
					break;
 8002048:	e013      	b.n	8002072 <State_Transition+0xca>
//					else
//						{
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
					next_state=Go_to_Bridge;
 800204a:	230b      	movs	r3, #11
 800204c:	73fb      	strb	r3, [r7, #15]
					break;
 800204e:	e010      	b.n	8002072 <State_Transition+0xca>
		case Go_Mile_2_Until_Barrier:
					next_state=TurnRight2;
 8002050:	2305      	movs	r3, #5
 8002052:	73fb      	strb	r3, [r7, #15]
					break;
 8002054:	e00d      	b.n	8002072 <State_Transition+0xca>
		case Mile_Adjust:
					switch (temp_state)
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <State_Transition+0xf4>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b08      	cmp	r3, #8
 800205c:	d102      	bne.n	8002064 <State_Transition+0xbc>
					{
					case Go_Mile_1:
						next_state = Line_Search;
 800205e:	2302      	movs	r3, #2
 8002060:	73fb      	strb	r3, [r7, #15]
						break;
 8002062:	e002      	b.n	800206a <State_Transition+0xc2>
					default:
						next_state = Initial;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
						break;
 8002068:	bf00      	nop
					}
					//temp_state = Mile_Adjust;
					break;
 800206a:	e002      	b.n	8002072 <State_Transition+0xca>
		default:
					next_state = Initial;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
					break;
 8002070:	bf00      	nop
	}
	if (next_state == *current_state)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	429a      	cmp	r2, r3
 800207a:	d101      	bne.n	8002080 <State_Transition+0xd8>
		return 1;
 800207c:	2301      	movs	r3, #1
 800207e:	e003      	b.n	8002088 <State_Transition+0xe0>
	else
	{

		*current_state=next_state;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	701a      	strb	r2, [r3, #0]
		return 0;
 8002086:	2300      	movs	r3, #0
	}
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	20004140 	.word	0x20004140
 8002098:	200002a4 	.word	0x200002a4
 800209c:	200041d8 	.word	0x200041d8

080020a0 <PWM_SET_LEFT>:

void PWM_SET_LEFT(int32_t duty)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da11      	bge.n	80020d2 <PWM_SET_LEFT+0x32>
		{
		if (duty <= -2000)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80020b4:	dc02      	bgt.n	80020bc <PWM_SET_LEFT+0x1c>
			duty = 1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	e003      	b.n	80020c4 <PWM_SET_LEFT+0x24>
		else
			duty = 2000 + duty;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80020c2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ca:	480f      	ldr	r0, [pc, #60]	; (8002108 <PWM_SET_LEFT+0x68>)
 80020cc:	f001 fd12 	bl	8003af4 <HAL_GPIO_WritePin>
 80020d0:	e00a      	b.n	80020e8 <PWM_SET_LEFT+0x48>
		}
	else
		{
			if (duty == 0)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <PWM_SET_LEFT+0x3c>
				duty = 1;
 80020d8:	2301      	movs	r3, #1
 80020da:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020e2:	4809      	ldr	r0, [pc, #36]	; (8002108 <PWM_SET_LEFT+0x68>)
 80020e4:	f001 fd06 	bl	8003af4 <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020ee:	dd02      	ble.n	80020f6 <PWM_SET_LEFT+0x56>
		duty = 2000;
 80020f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020f4:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,duty);
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <PWM_SET_LEFT+0x6c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40020000 	.word	0x40020000
 800210c:	200040f8 	.word	0x200040f8

08002110 <PWM_SET_RIGHT>:

void PWM_SET_RIGHT(int32_t duty)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	da11      	bge.n	8002142 <PWM_SET_RIGHT+0x32>
		{
		if (duty <= -2000)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002124:	dc02      	bgt.n	800212c <PWM_SET_RIGHT+0x1c>
			duty = 1;
 8002126:	2301      	movs	r3, #1
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	e003      	b.n	8002134 <PWM_SET_RIGHT+0x24>
		else
			duty = 2000 + duty;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002132:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002134:	2201      	movs	r2, #1
 8002136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800213a:	480f      	ldr	r0, [pc, #60]	; (8002178 <PWM_SET_RIGHT+0x68>)
 800213c:	f001 fcda 	bl	8003af4 <HAL_GPIO_WritePin>
 8002140:	e00a      	b.n	8002158 <PWM_SET_RIGHT+0x48>
		}
	else
		{
			if (duty == 0)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <PWM_SET_RIGHT+0x3c>
				duty = 1;
 8002148:	2301      	movs	r3, #1
 800214a:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002152:	4809      	ldr	r0, [pc, #36]	; (8002178 <PWM_SET_RIGHT+0x68>)
 8002154:	f001 fcce 	bl	8003af4 <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800215e:	dd02      	ble.n	8002166 <PWM_SET_RIGHT+0x56>
		duty = 2000;
 8002160:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002164:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,duty);
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <PWM_SET_RIGHT+0x6c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40020c00 	.word	0x40020c00
 800217c:	2000405c 	.word	0x2000405c

08002180 <StreamTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StreamTask */
void StreamTask(void const * argument)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t Same_State_Flag=0;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
	uint32_t pulse_incremnet=0;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
	Car_Initial();
 8002190:	f7ff fa3a 	bl	8001608 <Car_Initial>
	delay(3000);
 8002194:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002198:	f7ff fa70 	bl	800167c <delay>
  /* Infinite loop */
  for(;;)
  {

	  delay(50);
 800219c:	2032      	movs	r0, #50	; 0x32
 800219e:	f7ff fa6d 	bl	800167c <delay>
	  //delay(10);
	  //PreviousWakeTime = osKernelSysTick()
	  //osDelayUntil(&PreviousWakeTime = osKernelSysTick(), 500);
	  //HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);

	  Same_State_Flag = State_Transition(&state);
 80021a2:	48ba      	ldr	r0, [pc, #744]	; (800248c <StreamTask+0x30c>)
 80021a4:	f7ff ff00 	bl	8001fa8 <State_Transition>
 80021a8:	4603      	mov	r3, r0
 80021aa:	73fb      	strb	r3, [r7, #15]
	  if(Same_State_Flag)
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 824e 	bne.w	8002650 <StreamTask+0x4d0>
		  continue;
	  switch(state)
 80021b4:	4bb5      	ldr	r3, [pc, #724]	; (800248c <StreamTask+0x30c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	2b0d      	cmp	r3, #13
 80021bc:	f200 8245 	bhi.w	800264a <StreamTask+0x4ca>
 80021c0:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <StreamTask+0x48>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	08002201 	.word	0x08002201
 80021cc:	0800221b 	.word	0x0800221b
 80021d0:	08002283 	.word	0x08002283
 80021d4:	08002399 	.word	0x08002399
 80021d8:	080023ef 	.word	0x080023ef
 80021dc:	0800264b 	.word	0x0800264b
 80021e0:	08002445 	.word	0x08002445
 80021e4:	080024e1 	.word	0x080024e1
 80021e8:	0800257d 	.word	0x0800257d
 80021ec:	08002655 	.word	0x08002655
 80021f0:	080022d3 	.word	0x080022d3
 80021f4:	080022fd 	.word	0x080022fd
 80021f8:	080025f9 	.word	0x080025f9
 80021fc:	08002645 	.word	0x08002645
	  {
	  case Initial:
		  	  	  	  	  state= Idle;
 8002200:	4ba2      	ldr	r3, [pc, #648]	; (800248c <StreamTask+0x30c>)
 8002202:	220e      	movs	r2, #14
 8002204:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8002206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800220a:	f7ff fa37 	bl	800167c <delay>
		  	  	  	      state= Initial;
 800220e:	4b9f      	ldr	r3, [pc, #636]	; (800248c <StreamTask+0x30c>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  Car_Initial();
 8002214:	f7ff f9f8 	bl	8001608 <Car_Initial>
		  	  	  	  	  break;
 8002218:	e21d      	b.n	8002656 <StreamTask+0x4d6>
	  case Line_Search:
		  		  	  	  delay(500);
 800221a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800221e:	f7ff fa2d 	bl	800167c <delay>
		  		  	  	  critical_distance.front=350;
 8002222:	4b9b      	ldr	r3, [pc, #620]	; (8002490 <StreamTask+0x310>)
 8002224:	4a9b      	ldr	r2, [pc, #620]	; (8002494 <StreamTask+0x314>)
 8002226:	601a      	str	r2, [r3, #0]
		  		  	  	  camera_recieve_IT_flag=1;
 8002228:	4b9b      	ldr	r3, [pc, #620]	; (8002498 <StreamTask+0x318>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]
		  		  	  	  HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 800222e:	2202      	movs	r2, #2
 8002230:	499a      	ldr	r1, [pc, #616]	; (800249c <StreamTask+0x31c>)
 8002232:	489b      	ldr	r0, [pc, #620]	; (80024a0 <StreamTask+0x320>)
 8002234:	f003 fc47 	bl	8005ac6 <HAL_UART_Receive_IT>
		  		  	  	  vTaskResume(LineSearchHandle);
 8002238:	4b9a      	ldr	r3, [pc, #616]	; (80024a4 <StreamTask+0x324>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f005 fcb9 	bl	8007bb4 <vTaskResume>
		  		  	  	  vTaskResume(DistanceCheckHandle);
 8002242:	4b99      	ldr	r3, [pc, #612]	; (80024a8 <StreamTask+0x328>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f005 fcb4 	bl	8007bb4 <vTaskResume>
		  		  	  	  osSemaphoreWait(CriticalDistanceSemHandle, 0);
 800224c:	4b97      	ldr	r3, [pc, #604]	; (80024ac <StreamTask+0x32c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f004 fa80 	bl	8006758 <osSemaphoreWait>
		  		  	  	  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 8002258:	4b94      	ldr	r3, [pc, #592]	; (80024ac <StreamTask+0x32c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	4618      	mov	r0, r3
 8002262:	f004 fa79 	bl	8006758 <osSemaphoreWait>
		  		  	  	  vTaskDelete(LineSearchHandle);
 8002266:	4b8f      	ldr	r3, [pc, #572]	; (80024a4 <StreamTask+0x324>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f005 fad0 	bl	8007810 <vTaskDelete>
		  	  	  	  	  camera_recieve_IT_flag=0;
 8002270:	4b89      	ldr	r3, [pc, #548]	; (8002498 <StreamTask+0x318>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8002276:	4b8c      	ldr	r3, [pc, #560]	; (80024a8 <StreamTask+0x328>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fbd6 	bl	8007a2c <vTaskSuspend>
		  	  	  	  	  break;
 8002280:	e1e9      	b.n	8002656 <StreamTask+0x4d6>
	  case Line_Search2:
		  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8002282:	4b89      	ldr	r3, [pc, #548]	; (80024a8 <StreamTask+0x328>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f005 fbd0 	bl	8007a2c <vTaskSuspend>
		  	  	  	  	  vTaskSuspend(GyroReceiveHandle);
 800228c:	4b88      	ldr	r3, [pc, #544]	; (80024b0 <StreamTask+0x330>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f005 fbcb 	bl	8007a2c <vTaskSuspend>
		  	  	  	  	  vTaskSuspend(GoStraightHandle);
 8002296:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <StreamTask+0x334>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f005 fbc6 	bl	8007a2c <vTaskSuspend>
		  		  	  	  delay(500);
 80022a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022a4:	f7ff f9ea 	bl	800167c <delay>
		  		  	  	  critical_distance.front=350;
 80022a8:	4b79      	ldr	r3, [pc, #484]	; (8002490 <StreamTask+0x310>)
 80022aa:	4a7a      	ldr	r2, [pc, #488]	; (8002494 <StreamTask+0x314>)
 80022ac:	601a      	str	r2, [r3, #0]
		  		  	  	  camera_recieve_IT_flag=1;
 80022ae:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <StreamTask+0x318>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
		  		  	  	  HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 80022b4:	2202      	movs	r2, #2
 80022b6:	4979      	ldr	r1, [pc, #484]	; (800249c <StreamTask+0x31c>)
 80022b8:	4879      	ldr	r0, [pc, #484]	; (80024a0 <StreamTask+0x320>)
 80022ba:	f003 fc04 	bl	8005ac6 <HAL_UART_Receive_IT>
		  		  	  	  vTaskResume(LineSearch2Handle);
 80022be:	4b7e      	ldr	r3, [pc, #504]	; (80024b8 <StreamTask+0x338>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 fc76 	bl	8007bb4 <vTaskResume>
		  		  	  	  delay(50000);
 80022c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022cc:	f7ff f9d6 	bl	800167c <delay>
		  	  	  	  	  break;
 80022d0:	e1c1      	b.n	8002656 <StreamTask+0x4d6>
	  case Go_Line_Follow:
		  	  	  	  	  break;
	  case Go_to_Bridge:
		  	  	  	  	  delay(1000);
 80022d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022d6:	f7ff f9d1 	bl	800167c <delay>
						  taskENTER_CRITICAL();
 80022da:	f006 fc3b 	bl	8008b54 <vPortEnterCritical>
						  PWM_SET_RIGHT (PWM_Lowest+100);
 80022de:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022e2:	f7ff ff15 	bl	8002110 <PWM_SET_RIGHT>
						  PWM_SET_LEFT(PWM_Lowest+100);
 80022e6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022ea:	f7ff fed9 	bl	80020a0 <PWM_SET_LEFT>
						  taskEXIT_CRITICAL();
 80022ee:	f006 fc61 	bl	8008bb4 <vPortExitCritical>
						  delay(5000);
 80022f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80022f6:	f7ff f9c1 	bl	800167c <delay>
		  	  	  	  	  break;
 80022fa:	e1ac      	b.n	8002656 <StreamTask+0x4d6>
	  case Cross_bridge:
		  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 80022fc:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <StreamTask+0x328>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f005 fb93 	bl	8007a2c <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  //pulse_incremnet=2400;//室外
						  //pulse_incremnet=600; //小正方形
		  	  	  	  	  pulse_incremnet=5400;//上下桥
 8002306:	f241 5318 	movw	r3, #5400	; 0x1518
 800230a:	60bb      	str	r3, [r7, #8]
						  critical_pulses=0;
 800230c:	4b6b      	ldr	r3, [pc, #428]	; (80024bc <StreamTask+0x33c>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8002312:	4b6b      	ldr	r3, [pc, #428]	; (80024c0 <StreamTask+0x340>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f005 fc4c 	bl	8007bb4 <vTaskResume>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 800231c:	4b69      	ldr	r3, [pc, #420]	; (80024c4 <StreamTask+0x344>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	4618      	mov	r0, r3
 8002326:	f004 fa17 	bl	8006758 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 800232a:	4b67      	ldr	r3, [pc, #412]	; (80024c8 <StreamTask+0x348>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4413      	add	r3, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4b61      	ldr	r3, [pc, #388]	; (80024bc <StreamTask+0x33c>)
 8002338:	601a      	str	r2, [r3, #0]
						  gyro_reset_flag=0;
 800233a:	4b64      	ldr	r3, [pc, #400]	; (80024cc <StreamTask+0x34c>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002340:	4b5b      	ldr	r3, [pc, #364]	; (80024b0 <StreamTask+0x330>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f005 fc35 	bl	8007bb4 <vTaskResume>
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 800234a:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <StreamTask+0x350>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid+500;
 8002350:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <StreamTask+0x354>)
 8002352:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002356:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8002358:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <StreamTask+0x334>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f005 fc29 	bl	8007bb4 <vTaskResume>
		  	  	  	  	  delay(200);
 8002362:	20c8      	movs	r0, #200	; 0xc8
 8002364:	f7ff f98a 	bl	800167c <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <StreamTask+0x350>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 800236e:	4b55      	ldr	r3, [pc, #340]	; (80024c4 <StreamTask+0x344>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f04f 31ff 	mov.w	r1, #4294967295
 8002376:	4618      	mov	r0, r3
 8002378:	f004 f9ee 	bl	8006758 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 800237c:	4b54      	ldr	r3, [pc, #336]	; (80024d0 <StreamTask+0x350>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8002382:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <StreamTask+0x334>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f005 fb50 	bl	8007a2c <vTaskSuspend>
		  	  	  		  Car_Stop();
 800238c:	f7ff f968 	bl	8001660 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8002390:	4b4e      	ldr	r3, [pc, #312]	; (80024cc <StreamTask+0x34c>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8002396:	e15e      	b.n	8002656 <StreamTask+0x4d6>
	  case TurnRight:
		  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <StreamTask+0x328>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f005 fb45 	bl	8007a2c <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80023a2:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <StreamTask+0x334>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f005 fb40 	bl	8007a2c <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80023ac:	4b44      	ldr	r3, [pc, #272]	; (80024c0 <StreamTask+0x340>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f005 fb3b 	bl	8007a2c <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80023b6:	f7ff f953 	bl	8001660 <Car_Stop>
	  	  	  	  	  	  delay(50);
 80023ba:	2032      	movs	r0, #50	; 0x32
 80023bc:	f7ff f95e 	bl	800167c <delay>
	  	  	  	  	  	  distance_flag=0;
 80023c0:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <StreamTask+0x358>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <StreamTask+0x34c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80023cc:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <StreamTask+0x330>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f005 fbef 	bl	8007bb4 <vTaskResume>
		  	  	  	  	  PID_Turning(-90,5);
 80023d6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80023da:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80024dc <StreamTask+0x35c>
 80023de:	f7ff f9c5 	bl	800176c <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <StreamTask+0x34c>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80023e8:	f7ff f93a 	bl	8001660 <Car_Stop>
		  		  	  	  break;
 80023ec:	e133      	b.n	8002656 <StreamTask+0x4d6>
	  case TurnRight2:
		  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 80023ee:	4b2e      	ldr	r3, [pc, #184]	; (80024a8 <StreamTask+0x328>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f005 fb1a 	bl	8007a2c <vTaskSuspend>
		  	  	  	  	  vTaskSuspend(GoStraightHandle);
 80023f8:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <StreamTask+0x334>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f005 fb15 	bl	8007a2c <vTaskSuspend>
		  	  	  	  	  vTaskSuspend(MileageHandle);
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <StreamTask+0x340>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f005 fb10 	bl	8007a2c <vTaskSuspend>
						  Car_Stop();
 800240c:	f7ff f928 	bl	8001660 <Car_Stop>
						  delay(50);
 8002410:	2032      	movs	r0, #50	; 0x32
 8002412:	f7ff f933 	bl	800167c <delay>
						  distance_flag=0;
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <StreamTask+0x358>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
						  gyro_reset_flag=0;
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <StreamTask+0x34c>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <StreamTask+0x330>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f005 fbc4 	bl	8007bb4 <vTaskResume>
						  PID_Turning(-90,5);
 800242c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002430:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80024dc <StreamTask+0x35c>
 8002434:	f7ff f99a 	bl	800176c <PID_Turning>
						  gyro_reset_flag=1;
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <StreamTask+0x34c>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]
						  Car_Stop();
 800243e:	f7ff f90f 	bl	8001660 <Car_Stop>
						  break;
 8002442:	e108      	b.n	8002656 <StreamTask+0x4d6>
	  case GoStraight_Until_Barrier:
		  	  	  	  	  //state= Idle;
		  	  	  	  	  vTaskSuspend(GyroReceiveHandle);
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <StreamTask+0x330>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f005 faef 	bl	8007a2c <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <StreamTask+0x318>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8002454:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002458:	f7ff f910 	bl	800167c <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  critical_distance.front=350;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <StreamTask+0x310>)
 800245e:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <StreamTask+0x314>)
 8002460:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <StreamTask+0x328>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f005 fba4 	bl	8007bb4 <vTaskResume>
		  	  	  	  	  PWM_SET_LEFT(PWM_Mid);
 800246c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002470:	f7ff fe16 	bl	80020a0 <PWM_SET_LEFT>
		  	  	  	  	  PWM_SET_RIGHT(PWM_Mid);
 8002474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002478:	f7ff fe4a 	bl	8002110 <PWM_SET_RIGHT>
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <StreamTask+0x32c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	4618      	mov	r0, r3
 8002486:	f004 f967 	bl	8006758 <osSemaphoreWait>
		  	  	  	  	  break;
 800248a:	e0e4      	b.n	8002656 <StreamTask+0x4d6>
 800248c:	20004140 	.word	0x20004140
 8002490:	2000029c 	.word	0x2000029c
 8002494:	43af0000 	.word	0x43af0000
 8002498:	200002ac 	.word	0x200002ac
 800249c:	2000028c 	.word	0x2000028c
 80024a0:	2000422c 	.word	0x2000422c
 80024a4:	200040e8 	.word	0x200040e8
 80024a8:	200040f0 	.word	0x200040f0
 80024ac:	2000400c 	.word	0x2000400c
 80024b0:	20004270 	.word	0x20004270
 80024b4:	200040f4 	.word	0x200040f4
 80024b8:	20004188 	.word	0x20004188
 80024bc:	200002b4 	.word	0x200002b4
 80024c0:	20004010 	.word	0x20004010
 80024c4:	200041d4 	.word	0x200041d4
 80024c8:	200002b0 	.word	0x200002b0
 80024cc:	200002a8 	.word	0x200002a8
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000000 	.word	0x20000000
 80024d8:	200002a4 	.word	0x200002a4
 80024dc:	c2b40000 	.word	0xc2b40000
	  case Go_Mile_1:
		  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 80024e0:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <StreamTask+0x4d8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f005 faa1 	bl	8007a2c <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=2400;//室外
 80024ea:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80024ee:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  critical_pulses=0;
 80024f0:	4b5a      	ldr	r3, [pc, #360]	; (800265c <StreamTask+0x4dc>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 80024f6:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <StreamTask+0x4e0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f005 fb5a 	bl	8007bb4 <vTaskResume>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002500:	4b58      	ldr	r3, [pc, #352]	; (8002664 <StreamTask+0x4e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	4618      	mov	r0, r3
 800250a:	f004 f925 	bl	8006758 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 800250e:	4b56      	ldr	r3, [pc, #344]	; (8002668 <StreamTask+0x4e8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4413      	add	r3, r2
 8002518:	461a      	mov	r2, r3
 800251a:	4b50      	ldr	r3, [pc, #320]	; (800265c <StreamTask+0x4dc>)
 800251c:	601a      	str	r2, [r3, #0]
						  gyro_reset_flag=0;
 800251e:	4b53      	ldr	r3, [pc, #332]	; (800266c <StreamTask+0x4ec>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002524:	4b52      	ldr	r3, [pc, #328]	; (8002670 <StreamTask+0x4f0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f005 fb43 	bl	8007bb4 <vTaskResume>
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 800252e:	4b51      	ldr	r3, [pc, #324]	; (8002674 <StreamTask+0x4f4>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <StreamTask+0x4f8>)
 8002536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800253a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 800253c:	4b4f      	ldr	r3, [pc, #316]	; (800267c <StreamTask+0x4fc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f005 fb37 	bl	8007bb4 <vTaskResume>
		  	  	  	  	  delay(200);
 8002546:	20c8      	movs	r0, #200	; 0xc8
 8002548:	f7ff f898 	bl	800167c <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 800254c:	4b49      	ldr	r3, [pc, #292]	; (8002674 <StreamTask+0x4f4>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002552:	4b44      	ldr	r3, [pc, #272]	; (8002664 <StreamTask+0x4e4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f04f 31ff 	mov.w	r1, #4294967295
 800255a:	4618      	mov	r0, r3
 800255c:	f004 f8fc 	bl	8006758 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8002560:	4b44      	ldr	r3, [pc, #272]	; (8002674 <StreamTask+0x4f4>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8002566:	4b45      	ldr	r3, [pc, #276]	; (800267c <StreamTask+0x4fc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f005 fa5e 	bl	8007a2c <vTaskSuspend>
		  	  	  		  Car_Stop();
 8002570:	f7ff f876 	bl	8001660 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8002574:	4b3d      	ldr	r3, [pc, #244]	; (800266c <StreamTask+0x4ec>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 800257a:	e06c      	b.n	8002656 <StreamTask+0x4d6>
	  case Go_Mile_2_Until_Barrier:
		  	  	  	  	  critical_distance.front=250;
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <StreamTask+0x500>)
 800257e:	4a41      	ldr	r2, [pc, #260]	; (8002684 <StreamTask+0x504>)
 8002580:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8002582:	4b35      	ldr	r3, [pc, #212]	; (8002658 <StreamTask+0x4d8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f005 fb14 	bl	8007bb4 <vTaskResume>
						  gyro_reset_flag=0;
 800258c:	4b37      	ldr	r3, [pc, #220]	; (800266c <StreamTask+0x4ec>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002592:	4b37      	ldr	r3, [pc, #220]	; (8002670 <StreamTask+0x4f0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f005 fb0c 	bl	8007bb4 <vTaskResume>
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 800259c:	4b35      	ldr	r3, [pc, #212]	; (8002674 <StreamTask+0x4f4>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 80025a2:	4b35      	ldr	r3, [pc, #212]	; (8002678 <StreamTask+0x4f8>)
 80025a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025a8:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 80025aa:	4b34      	ldr	r3, [pc, #208]	; (800267c <StreamTask+0x4fc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f005 fb00 	bl	8007bb4 <vTaskResume>
		  	  	  	  	  delay(1000);
 80025b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b8:	f7ff f860 	bl	800167c <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <StreamTask+0x4f4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, 0);
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <StreamTask+0x508>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 f8c5 	bl	8006758 <osSemaphoreWait>
		  	  	  		  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 80025ce:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <StreamTask+0x508>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f04f 31ff 	mov.w	r1, #4294967295
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 f8be 	bl	8006758 <osSemaphoreWait>
		  	  	  		  //osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
		  	  	  	      PID_Straight_Reset_Flag=1;
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <StreamTask+0x4f4>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <StreamTask+0x4fc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f005 fa20 	bl	8007a2c <vTaskSuspend>
		  	  	  		  Car_Stop();
 80025ec:	f7ff f838 	bl	8001660 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <StreamTask+0x4ec>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80025f6:	e02e      	b.n	8002656 <StreamTask+0x4d6>
	  case Mile_Adjust:
		  	  	  	  	  vTaskResume(MileageHandle);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <StreamTask+0x4e0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f005 fad9 	bl	8007bb4 <vTaskResume>
		  	  	  	  	  PWM_SET_LEFT(-PWM_Lowest-80);
 8002602:	4822      	ldr	r0, [pc, #136]	; (800268c <StreamTask+0x50c>)
 8002604:	f7ff fd4c 	bl	80020a0 <PWM_SET_LEFT>
		  	  	  		  PWM_SET_RIGHT(-PWM_Lowest-80);
 8002608:	4820      	ldr	r0, [pc, #128]	; (800268c <StreamTask+0x50c>)
 800260a:	f7ff fd81 	bl	8002110 <PWM_SET_RIGHT>
		  	  	  		  osSemaphoreRelease(MileageNegSemHandle);
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <StreamTask+0x510>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f004 f8ee 	bl	80067f4 <osSemaphoreRelease>
		  	  	  		  osSemaphoreWait(MileageNegSemHandle, osWaitForever);
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <StreamTask+0x510>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	4618      	mov	r0, r3
 8002622:	f004 f899 	bl	8006758 <osSemaphoreWait>
		  	  	  		  osSemaphoreWait(MileageNegSemHandle, osWaitForever);
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <StreamTask+0x510>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f04f 31ff 	mov.w	r1, #4294967295
 800262e:	4618      	mov	r0, r3
 8002630:	f004 f892 	bl	8006758 <osSemaphoreWait>
		  	  	  		  Car_Stop();
 8002634:	f7ff f814 	bl	8001660 <Car_Stop>
		  	  	  		  vTaskSuspend(MileageHandle);
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <StreamTask+0x4e0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f005 f9f5 	bl	8007a2c <vTaskSuspend>
		  	  	  	  	  break;
 8002642:	e008      	b.n	8002656 <StreamTask+0x4d6>
	  case Idle:
		  	  	  	  	  Car_Stop();
 8002644:	f7ff f80c 	bl	8001660 <Car_Stop>
		  	  	  	  	  break;
 8002648:	e005      	b.n	8002656 <StreamTask+0x4d6>
	  default :
		  	  	  	  	  Car_Initial();
 800264a:	f7fe ffdd 	bl	8001608 <Car_Initial>
		  	  	  	  	  break;
 800264e:	e002      	b.n	8002656 <StreamTask+0x4d6>
		  continue;
 8002650:	bf00      	nop
 8002652:	e5a3      	b.n	800219c <StreamTask+0x1c>
		  	  	  	  	  break;
 8002654:	bf00      	nop
	  delay(50);
 8002656:	e5a1      	b.n	800219c <StreamTask+0x1c>
 8002658:	200040f0 	.word	0x200040f0
 800265c:	200002b4 	.word	0x200002b4
 8002660:	20004010 	.word	0x20004010
 8002664:	200041d4 	.word	0x200041d4
 8002668:	200002b0 	.word	0x200002b0
 800266c:	200002a8 	.word	0x200002a8
 8002670:	20004270 	.word	0x20004270
 8002674:	20000008 	.word	0x20000008
 8002678:	20000000 	.word	0x20000000
 800267c:	200040f4 	.word	0x200040f4
 8002680:	2000029c 	.word	0x2000029c
 8002684:	437a0000 	.word	0x437a0000
 8002688:	2000400c 	.word	0x2000400c
 800268c:	fffffdbc 	.word	0xfffffdbc
 8002690:	200041e0 	.word	0x200041e0

08002694 <GyroReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroReceiveTask */
void GyroReceiveTask(void const * argument)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	; 0x38
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroReceiveTask */
	vTaskSuspend(GyroReceiveHandle);
 800269c:	4ba8      	ldr	r3, [pc, #672]	; (8002940 <GyroReceiveTask+0x2ac>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f005 f9c3 	bl	8007a2c <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {

	  delay(100);
 80026a6:	2064      	movs	r0, #100	; 0x64
 80026a8:	f7fe ffe8 	bl	800167c <delay>
	  uint8_t AxH=0, AxL=0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  int16_t Ax=0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	853b      	strh	r3, [r7, #40]	; 0x28

	  uint8_t AyH=0,AyL=0;
 80026bc:	2300      	movs	r3, #0
 80026be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  int16_t Ay=0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	84bb      	strh	r3, [r7, #36]	; 0x24

	  uint8_t YawH=0,YawL=0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  int16_t Yaw=0;
 80026d8:	2300      	movs	r3, #0
 80026da:	843b      	strh	r3, [r7, #32]

	  uint8_t sum=0;
 80026dc:	2300      	movs	r3, #0
 80026de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int i=0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
	  int h=0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint8_t GyroData[21]={0};
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	741a      	strb	r2, [r3, #16]
	  taskENTER_CRITICAL();
 80026fe:	f006 fa29 	bl	8008b54 <vPortEnterCritical>
	  HAL_UART_Receive(&huart3, (uint8_t *) &GyroData, sizeof(GyroData), 50);
 8002702:	f107 0108 	add.w	r1, r7, #8
 8002706:	2332      	movs	r3, #50	; 0x32
 8002708:	2215      	movs	r2, #21
 800270a:	488e      	ldr	r0, [pc, #568]	; (8002944 <GyroReceiveTask+0x2b0>)
 800270c:	f003 f939 	bl	8005982 <HAL_UART_Receive>
	  taskEXIT_CRITICAL();
 8002710:	f006 fa50 	bl	8008bb4 <vPortExitCritical>
	  while(h<14)
 8002714:	e009      	b.n	800272a <GyroReceiveTask+0x96>
	  {
		  if(GyroData[h]==0x55)
 8002716:	f107 0208 	add.w	r2, r7, #8
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	4413      	add	r3, r2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b55      	cmp	r3, #85	; 0x55
 8002722:	d006      	beq.n	8002732 <GyroReceiveTask+0x9e>
			  break;
		  h++;
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	3301      	adds	r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while(h<14)
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	2b0d      	cmp	r3, #13
 800272e:	ddf2      	ble.n	8002716 <GyroReceiveTask+0x82>
 8002730:	e000      	b.n	8002734 <GyroReceiveTask+0xa0>
			  break;
 8002732:	bf00      	nop
	  }
	  if(GyroData[h]!=0x55)
 8002734:	f107 0208 	add.w	r2, r7, #8
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b55      	cmp	r3, #85	; 0x55
 8002740:	f040 80f8 	bne.w	8002934 <GyroReceiveTask+0x2a0>
		  continue;
	  if(GyroData[h+1]!=0x53)
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	3301      	adds	r3, #1
 8002748:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800274c:	4413      	add	r3, r2
 800274e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002752:	2b53      	cmp	r3, #83	; 0x53
 8002754:	f040 80f0 	bne.w	8002938 <GyroReceiveTask+0x2a4>
		  continue;
	  i=0;
 8002758:	2300      	movs	r3, #0
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
	  sum=0;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  while(i<10)
 8002762:	e00f      	b.n	8002784 <GyroReceiveTask+0xf0>
	  {
		  sum=sum+GyroData[h+i];
 8002764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	4413      	add	r3, r2
 800276a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800276e:	4413      	add	r3, r2
 8002770:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8002774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002778:	4413      	add	r3, r2
 800277a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  i++;
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	3301      	adds	r3, #1
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
	  while(i<10)
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	2b09      	cmp	r3, #9
 8002788:	ddec      	ble.n	8002764 <GyroReceiveTask+0xd0>
	  }
	  	  if (sum!=GyroData[h+10])
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	330a      	adds	r3, #10
 800278e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002792:	4413      	add	r3, r2
 8002794:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002798:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800279c:	429a      	cmp	r2, r3
 800279e:	f040 80cd 	bne.w	800293c <GyroReceiveTask+0x2a8>
	  		  continue;
	  AxL=GyroData[h+2];
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	3302      	adds	r3, #2
 80027a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027aa:	4413      	add	r3, r2
 80027ac:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80027b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  AxH=GyroData[h+3];
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	3303      	adds	r3, #3
 80027b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027bc:	4413      	add	r3, r2
 80027be:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80027c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  AyL=GyroData[h+4];
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	3304      	adds	r3, #4
 80027ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027ce:	4413      	add	r3, r2
 80027d0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80027d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  AyH=GyroData[h+5];
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	3305      	adds	r3, #5
 80027dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027e0:	4413      	add	r3, r2
 80027e2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80027e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  YawL=GyroData[h+6];
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	3306      	adds	r3, #6
 80027ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027f2:	4413      	add	r3, r2
 80027f4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80027f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  YawH=GyroData[h+7];
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	3307      	adds	r3, #7
 8002800:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002804:	4413      	add	r3, r2
 8002806:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800280a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  Ax=((((int16_t) AxH)<<8) | AxL);
 800280e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b21a      	sxth	r2, r3
 8002816:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800281a:	b21b      	sxth	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	853b      	strh	r3, [r7, #40]	; 0x28
	  Ay=((((int16_t) AyH)<<8) | AyL);
 8002820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	b21a      	sxth	r2, r3
 8002828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800282c:	b21b      	sxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	84bb      	strh	r3, [r7, #36]	; 0x24
	  Yaw=((((int16_t) YawH)<<8) | YawL);
 8002832:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b21a      	sxth	r2, r3
 800283a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800283e:	b21b      	sxth	r3, r3
 8002840:	4313      	orrs	r3, r2
 8002842:	843b      	strh	r3, [r7, #32]
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 8002844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002848:	483f      	ldr	r0, [pc, #252]	; (8002948 <GyroReceiveTask+0x2b4>)
 800284a:	f001 f96c 	bl	8003b26 <HAL_GPIO_TogglePin>
	  //taskENTER_CRITICAL();
	  //HAL_UART_Transmit(&huart1, (uint8_t *) &Yaw, sizeof(Yaw), 0xFFFF);
	  //taskEXIT_CRITICAL();
	  if(gyro_reset_flag)
 800284e:	4b3f      	ldr	r3, [pc, #252]	; (800294c <GyroReceiveTask+0x2b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <GyroReceiveTask+0x1ce>
	  {
		  vTaskSuspend(GyroReceiveHandle);
 8002856:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <GyroReceiveTask+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f005 f8e6 	bl	8007a2c <vTaskSuspend>
		  continue;
 8002860:	e06d      	b.n	800293e <GyroReceiveTask+0x2aa>
	  }

	  angle.x=(((float)Ax) / 32768.0 * 180.0);
 8002862:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286e:	ee17 0a90 	vmov	r0, s15
 8002872:	f7fd fe11 	bl	8000498 <__aeabi_f2d>
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	4b35      	ldr	r3, [pc, #212]	; (8002950 <GyroReceiveTask+0x2bc>)
 800287c:	f7fd ff8e 	bl	800079c <__aeabi_ddiv>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <GyroReceiveTask+0x2c0>)
 800288e:	f7fd fe5b 	bl	8000548 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe f867 	bl	800096c <__aeabi_d2f>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a2d      	ldr	r2, [pc, #180]	; (8002958 <GyroReceiveTask+0x2c4>)
 80028a2:	6013      	str	r3, [r2, #0]
	  angle.y=(((float)Ay) / 32768.0 * 180.0);
 80028a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b0:	ee17 0a90 	vmov	r0, s15
 80028b4:	f7fd fdf0 	bl	8000498 <__aeabi_f2d>
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	4b24      	ldr	r3, [pc, #144]	; (8002950 <GyroReceiveTask+0x2bc>)
 80028be:	f7fd ff6d 	bl	800079c <__aeabi_ddiv>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	4b21      	ldr	r3, [pc, #132]	; (8002954 <GyroReceiveTask+0x2c0>)
 80028d0:	f7fd fe3a 	bl	8000548 <__aeabi_dmul>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f846 	bl	800096c <__aeabi_d2f>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <GyroReceiveTask+0x2c4>)
 80028e4:	6053      	str	r3, [r2, #4]
	  angle.z=(((float)Yaw) / 32768.0 * 180.0);
 80028e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f2:	ee17 0a90 	vmov	r0, s15
 80028f6:	f7fd fdcf 	bl	8000498 <__aeabi_f2d>
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <GyroReceiveTask+0x2bc>)
 8002900:	f7fd ff4c 	bl	800079c <__aeabi_ddiv>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <GyroReceiveTask+0x2c0>)
 8002912:	f7fd fe19 	bl	8000548 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	f7fe f825 	bl	800096c <__aeabi_d2f>
 8002922:	4603      	mov	r3, r0
 8002924:	4a0c      	ldr	r2, [pc, #48]	; (8002958 <GyroReceiveTask+0x2c4>)
 8002926:	6093      	str	r3, [r2, #8]
	  osSemaphoreRelease(GyroReadySemHandle);
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <GyroReceiveTask+0x2c8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f003 ff61 	bl	80067f4 <osSemaphoreRelease>
 8002932:	e6b8      	b.n	80026a6 <GyroReceiveTask+0x12>
		  continue;
 8002934:	bf00      	nop
 8002936:	e6b6      	b.n	80026a6 <GyroReceiveTask+0x12>
		  continue;
 8002938:	bf00      	nop
 800293a:	e6b4      	b.n	80026a6 <GyroReceiveTask+0x12>
	  		  continue;
 800293c:	bf00      	nop
  {
 800293e:	e6b2      	b.n	80026a6 <GyroReceiveTask+0x12>
 8002940:	20004270 	.word	0x20004270
 8002944:	200040a4 	.word	0x200040a4
 8002948:	40021400 	.word	0x40021400
 800294c:	200002a8 	.word	0x200002a8
 8002950:	40e00000 	.word	0x40e00000
 8002954:	40668000 	.word	0x40668000
 8002958:	20000290 	.word	0x20000290
 800295c:	200041dc 	.word	0x200041dc

08002960 <DistanceCheckTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DistanceCheckTask */
void DistanceCheckTask(void const * argument)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DistanceCheckTask */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8002968:	2200      	movs	r2, #0
 800296a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800296e:	4829      	ldr	r0, [pc, #164]	; (8002a14 <DistanceCheckTask+0xb4>)
 8002970:	f001 f8c0 	bl	8003af4 <HAL_GPIO_WritePin>
	vTaskSuspend(DistanceCheckHandle);
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <DistanceCheckTask+0xb8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f005 f857 	bl	8007a2c <vTaskSuspend>
	delay(1000);
 800297e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002982:	f7fe fe7b 	bl	800167c <delay>
  /* Infinite loop */
  for(;;)
  {
	  Distance distance={0.0,0.0};
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
	  Distance temp=Ultrasonic_Feedback();
 8002992:	f7ff fa55 	bl	8001e40 <Ultrasonic_Feedback>
 8002996:	eeb0 7a40 	vmov.f32	s14, s0
 800299a:	eef0 7a60 	vmov.f32	s15, s1
 800299e:	ed87 7a03 	vstr	s14, [r7, #12]
 80029a2:	edc7 7a04 	vstr	s15, [r7, #16]
	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  for(int i=0;i<1;i++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e00a      	b.n	80029c2 <DistanceCheckTask+0x62>
	  {
		  distance.front+=temp.front;
 80029ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80029b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b8:	edc7 7a05 	vstr	s15, [r7, #20]
	  for(int i=0;i<1;i++)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	3301      	adds	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	ddf1      	ble.n	80029ac <DistanceCheckTask+0x4c>
	  }
	  distance.front/=1;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	617b      	str	r3, [r7, #20]
	  if(distance.front < critical_distance.front)
 80029cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <DistanceCheckTask+0xbc>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029de:	d50e      	bpl.n	80029fe <DistanceCheckTask+0x9e>
	  {
		  distance_flag=1;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <DistanceCheckTask+0xc0>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
		  osSemaphoreRelease(CriticalDistanceSemHandle);
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <DistanceCheckTask+0xc4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 ff02 	bl	80067f4 <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 80029f0:	2201      	movs	r2, #1
 80029f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f6:	4807      	ldr	r0, [pc, #28]	; (8002a14 <DistanceCheckTask+0xb4>)
 80029f8:	f001 f87c 	bl	8003af4 <HAL_GPIO_WritePin>
 80029fc:	e7c3      	b.n	8002986 <DistanceCheckTask+0x26>
	  }
	  else
	  {
		  distance_flag=0;
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <DistanceCheckTask+0xc0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8002a04:	2200      	movs	r2, #0
 8002a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a0a:	4802      	ldr	r0, [pc, #8]	; (8002a14 <DistanceCheckTask+0xb4>)
 8002a0c:	f001 f872 	bl	8003af4 <HAL_GPIO_WritePin>
  {
 8002a10:	e7b9      	b.n	8002986 <DistanceCheckTask+0x26>
 8002a12:	bf00      	nop
 8002a14:	40021400 	.word	0x40021400
 8002a18:	200040f0 	.word	0x200040f0
 8002a1c:	2000029c 	.word	0x2000029c
 8002a20:	200002a4 	.word	0x200002a4
 8002a24:	2000400c 	.word	0x2000400c

08002a28 <MileageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MileageTask */
void MileageTask(void const * argument)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MileageTask */
	//uint8_t mileage_counter;
	vTaskSuspend(MileageHandle);
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <MileageTask+0x60>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fff9 	bl	8007a2c <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  taskENTER_CRITICAL();
 8002a3a:	f006 f88b 	bl	8008b54 <vPortEnterCritical>
	  //mileage_counter=__HAL_TIM_GET_COUNTER(&htim2);
	  //number_of_pulses=1000*(mileage_IT_number-1)+mileage_counter;
	  number_of_pulses=5000*mileage_IT_number+__HAL_TIM_GET_COUNTER(&htim2);
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <MileageTask+0x64>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <MileageTask+0x68>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	4413      	add	r3, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <MileageTask+0x6c>)
 8002a58:	601a      	str	r2, [r3, #0]
	  taskEXIT_CRITICAL();
 8002a5a:	f006 f8ab 	bl	8008bb4 <vPortExitCritical>
	  //HAL_UART_Transmit(&huart1, &number_of_pulses, sizeof(number_of_pulses), 1000);
	  if (number_of_pulses>critical_pulses)
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <MileageTask+0x6c>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <MileageTask+0x70>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	dd05      	ble.n	8002a76 <MileageTask+0x4e>
		  osSemaphoreRelease(MileageSemHandle);
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MileageTask+0x74>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fec0 	bl	80067f4 <osSemaphoreRelease>
 8002a74:	e004      	b.n	8002a80 <MileageTask+0x58>
	  else
		  osSemaphoreRelease(MileageNegSemHandle);
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <MileageTask+0x78>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 feba 	bl	80067f4 <osSemaphoreRelease>
	  delay(50);
 8002a80:	2032      	movs	r0, #50	; 0x32
 8002a82:	f7fe fdfb 	bl	800167c <delay>
	  taskENTER_CRITICAL();
 8002a86:	e7d8      	b.n	8002a3a <MileageTask+0x12>
 8002a88:	20004010 	.word	0x20004010
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	200041e4 	.word	0x200041e4
 8002a94:	200002b0 	.word	0x200002b0
 8002a98:	200002b4 	.word	0x200002b4
 8002a9c:	200041d4 	.word	0x200041d4
 8002aa0:	200041e0 	.word	0x200041e0

08002aa4 <GoStraightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GoStraightTask */
void GoStraightTask(void const * argument)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GoStraightTask */
	vTaskSuspend(GoStraightHandle);
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <GoStraightTask+0x3c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f004 ffbb 	bl	8007a2c <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	if (PID_Straight_Reset_Flag)
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <GoStraightTask+0x40>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10d      	bne.n	8002ada <GoStraightTask+0x36>
		continue;
	PID_Straight((float)go_straight_speed);
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <GoStraightTask+0x44>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aca:	eeb0 0a67 	vmov.f32	s0, s15
 8002ace:	f7fe ffb3 	bl	8001a38 <PID_Straight>
    delay(100);
 8002ad2:	2064      	movs	r0, #100	; 0x64
 8002ad4:	f7fe fdd2 	bl	800167c <delay>
 8002ad8:	e7ed      	b.n	8002ab6 <GoStraightTask+0x12>
		continue;
 8002ada:	bf00      	nop
	if (PID_Straight_Reset_Flag)
 8002adc:	e7eb      	b.n	8002ab6 <GoStraightTask+0x12>
 8002ade:	bf00      	nop
 8002ae0:	200040f4 	.word	0x200040f4
 8002ae4:	20000008 	.word	0x20000008
 8002ae8:	20000000 	.word	0x20000000

08002aec <LineSearchTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LineSearchTask */
void LineSearchTask(void const * argument)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LineSearchTask */
	int32_t pulse_increment=1200;
 8002af4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002af8:	61fb      	str	r3, [r7, #28]
	float Error=0;
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
	float Error_total=0;
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
	float pulse_increment_float=0;
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
	float Kp=9;//,Ki=0,Kd=0;
 8002b0c:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <LineSearchTask+0x124>)
 8002b0e:	60fb      	str	r3, [r7, #12]
	vTaskSuspend(LineSearchHandle);
 8002b10:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <LineSearchTask+0x128>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f004 ff89 	bl	8007a2c <vTaskSuspend>
	vTaskResume(MileageHandle);
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <LineSearchTask+0x12c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f005 f848 	bl	8007bb4 <vTaskResume>
	HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8002b24:	2202      	movs	r2, #2
 8002b26:	493d      	ldr	r1, [pc, #244]	; (8002c1c <LineSearchTask+0x130>)
 8002b28:	483d      	ldr	r0, [pc, #244]	; (8002c20 <LineSearchTask+0x134>)
 8002b2a:	f002 ffcc 	bl	8005ac6 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	  						  critical_pulses=0;
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <LineSearchTask+0x138>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
	  						  vTaskResume(MileageHandle);
 8002b34:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <LineSearchTask+0x12c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f005 f83b 	bl	8007bb4 <vTaskResume>
	  						  critical_pulses=pulse_increment+number_of_pulses;
 8002b3e:	4b3a      	ldr	r3, [pc, #232]	; (8002c28 <LineSearchTask+0x13c>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a37      	ldr	r2, [pc, #220]	; (8002c24 <LineSearchTask+0x138>)
 8002b48:	6013      	str	r3, [r2, #0]
	  						  osSemaphoreRelease(MileageSemHandle);
 8002b4a:	4b38      	ldr	r3, [pc, #224]	; (8002c2c <LineSearchTask+0x140>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 fe50 	bl	80067f4 <osSemaphoreRelease>
	  						  osSemaphoreWait(MileageSemHandle, 0);
 8002b54:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <LineSearchTask+0x140>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fdfc 	bl	8006758 <osSemaphoreWait>
	  						  taskENTER_CRITICAL();
 8002b60:	f005 fff8 	bl	8008b54 <vPortEnterCritical>
	  					      PWM_SET_LEFT(PWM_Mid);
 8002b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b68:	f7ff fa9a 	bl	80020a0 <PWM_SET_LEFT>
	  						  PWM_SET_RIGHT(PWM_Mid);
 8002b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b70:	f7ff face 	bl	8002110 <PWM_SET_RIGHT>
	  						  taskEXIT_CRITICAL();
 8002b74:	f006 f81e 	bl	8008bb4 <vPortExitCritical>
	  		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002b78:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <LineSearchTask+0x140>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 fde9 	bl	8006758 <osSemaphoreWait>
	  		  	  	  		  Car_Stop();
 8002b86:	f7fe fd6b 	bl	8001660 <Car_Stop>
	  		  	  	  		  vTaskSuspend(MileageHandle);
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <LineSearchTask+0x12c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 ff4c 	bl	8007a2c <vTaskSuspend>
	  		  	  	  		  Error=PID_Line_Follow(10);
 8002b94:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002b98:	f7ff f854 	bl	8001c44 <PID_Line_Follow>
 8002b9c:	ed87 0a05 	vstr	s0, [r7, #20]
	  		  	  	  		  Error_total+=Error;
 8002ba0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ba4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bac:	edc7 7a06 	vstr	s15, [r7, #24]

	  		  	  	  		  pulse_increment_float=300-((int32_t) (Kp*(Error>0?Error:-Error)));
 8002bb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	dd02      	ble.n	8002bc4 <LineSearchTask+0xd8>
 8002bbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bc2:	e003      	b.n	8002bcc <LineSearchTask+0xe0>
 8002bc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bc8:	eef1 7a67 	vneg.f32	s15, s15
 8002bcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd8:	ee17 3a90 	vmov	r3, s15
 8002bdc:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be8:	edc7 7a04 	vstr	s15, [r7, #16]
	  		  	  	  		  pulse_increment= pulse_increment_float>0?(int)pulse_increment_float:50;
 8002bec:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	dd06      	ble.n	8002c08 <LineSearchTask+0x11c>
 8002bfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c02:	ee17 3a90 	vmov	r3, s15
 8002c06:	e000      	b.n	8002c0a <LineSearchTask+0x11e>
 8002c08:	2332      	movs	r3, #50	; 0x32
 8002c0a:	61fb      	str	r3, [r7, #28]
	  						  critical_pulses=0;
 8002c0c:	e78f      	b.n	8002b2e <LineSearchTask+0x42>
 8002c0e:	bf00      	nop
 8002c10:	41100000 	.word	0x41100000
 8002c14:	200040e8 	.word	0x200040e8
 8002c18:	20004010 	.word	0x20004010
 8002c1c:	2000028c 	.word	0x2000028c
 8002c20:	2000422c 	.word	0x2000422c
 8002c24:	200002b4 	.word	0x200002b4
 8002c28:	200002b0 	.word	0x200002b0
 8002c2c:	200041d4 	.word	0x200041d4

08002c30 <LineSearch2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LineSearch2Task */
void LineSearch2Task(void const * argument)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LineSearch2Task */
		float Error=0;
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
		float Error_total=0;
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
		float pulse_increment_float=0;
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
		float Kp=9;//,Ki=0,Kd=0;
 8002c4a:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <LineSearch2Task+0x124>)
 8002c4c:	60fb      	str	r3, [r7, #12]
		vTaskSuspend(LineSearch2Handle);
 8002c4e:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <LineSearch2Task+0x128>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 feea 	bl	8007a2c <vTaskSuspend>
		int32_t pulse_increment=300;
 8002c58:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002c5c:	61bb      	str	r3, [r7, #24]
		vTaskResume(MileageHandle);
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <LineSearch2Task+0x12c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 ffa6 	bl	8007bb4 <vTaskResume>
		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8002c68:	2202      	movs	r2, #2
 8002c6a:	493d      	ldr	r1, [pc, #244]	; (8002d60 <LineSearch2Task+0x130>)
 8002c6c:	483d      	ldr	r0, [pc, #244]	; (8002d64 <LineSearch2Task+0x134>)
 8002c6e:	f002 ff2a 	bl	8005ac6 <HAL_UART_Receive_IT>
	  /* Infinite loop */
	  for(;;)
	  {
		  						  critical_pulses=0;
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <LineSearch2Task+0x138>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
		  						  vTaskResume(MileageHandle);
 8002c78:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <LineSearch2Task+0x12c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 ff99 	bl	8007bb4 <vTaskResume>
		  						  critical_pulses=pulse_increment+number_of_pulses;
 8002c82:	4b3a      	ldr	r3, [pc, #232]	; (8002d6c <LineSearch2Task+0x13c>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4413      	add	r3, r2
 8002c8a:	4a37      	ldr	r2, [pc, #220]	; (8002d68 <LineSearch2Task+0x138>)
 8002c8c:	6013      	str	r3, [r2, #0]
		  						  osSemaphoreRelease(MileageSemHandle);
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <LineSearch2Task+0x140>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f003 fdae 	bl	80067f4 <osSemaphoreRelease>
		  						  osSemaphoreWait(MileageSemHandle, 0);
 8002c98:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <LineSearch2Task+0x140>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 fd5a 	bl	8006758 <osSemaphoreWait>
		  						  taskENTER_CRITICAL();
 8002ca4:	f005 ff56 	bl	8008b54 <vPortEnterCritical>
		  					      PWM_SET_LEFT(PWM_Mid);
 8002ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cac:	f7ff f9f8 	bl	80020a0 <PWM_SET_LEFT>
		  						  PWM_SET_RIGHT(PWM_Mid);
 8002cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cb4:	f7ff fa2c 	bl	8002110 <PWM_SET_RIGHT>
		  						  taskEXIT_CRITICAL();
 8002cb8:	f005 ff7c 	bl	8008bb4 <vPortExitCritical>
		  		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <LineSearch2Task+0x140>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f003 fd47 	bl	8006758 <osSemaphoreWait>
		  		  	  	  		  Car_Stop();
 8002cca:	f7fe fcc9 	bl	8001660 <Car_Stop>
		  		  	  	  		  vTaskSuspend(MileageHandle);
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <LineSearch2Task+0x12c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 feaa 	bl	8007a2c <vTaskSuspend>
		  		  	  	  		  Error=PID_Line_Follow(10);
 8002cd8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002cdc:	f7fe ffb2 	bl	8001c44 <PID_Line_Follow>
 8002ce0:	ed87 0a05 	vstr	s0, [r7, #20]
		  		  	  	  		  Error_total+=Error;
 8002ce4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ce8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf0:	edc7 7a07 	vstr	s15, [r7, #28]

		  		  	  	  		  pulse_increment_float=300-((int32_t) (Kp*(Error>0?Error:-Error)));
 8002cf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d00:	dd02      	ble.n	8002d08 <LineSearch2Task+0xd8>
 8002d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d06:	e003      	b.n	8002d10 <LineSearch2Task+0xe0>
 8002d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d0c:	eef1 7a67 	vneg.f32	s15, s15
 8002d10:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d1c:	ee17 3a90 	vmov	r3, s15
 8002d20:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2c:	edc7 7a04 	vstr	s15, [r7, #16]
		  		  	  	  		  pulse_increment= pulse_increment_float>0?(int)pulse_increment_float:50;
 8002d30:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3c:	dd06      	ble.n	8002d4c <LineSearch2Task+0x11c>
 8002d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d46:	ee17 3a90 	vmov	r3, s15
 8002d4a:	e000      	b.n	8002d4e <LineSearch2Task+0x11e>
 8002d4c:	2332      	movs	r3, #50	; 0x32
 8002d4e:	61bb      	str	r3, [r7, #24]
		  						  critical_pulses=0;
 8002d50:	e78f      	b.n	8002c72 <LineSearch2Task+0x42>
 8002d52:	bf00      	nop
 8002d54:	41100000 	.word	0x41100000
 8002d58:	20004188 	.word	0x20004188
 8002d5c:	20004010 	.word	0x20004010
 8002d60:	2000028c 	.word	0x2000028c
 8002d64:	2000422c 	.word	0x2000422c
 8002d68:	200002b4 	.word	0x200002b4
 8002d6c:	200002b0 	.word	0x200002b0
 8002d70:	200041d4 	.word	0x200041d4

08002d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d102      	bne.n	8002d8c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002d86:	f000 fb85 	bl	8003494 <HAL_IncTick>
	   else
	    	mileage_IT_number++;
	   //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
  	}
  /* USER CODE END Callback 1 */
}
 8002d8a:	e016      	b.n	8002dba <HAL_TIM_PeriodElapsedCallback+0x46>
  else if(htim->Instance==TIM2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d94:	d111      	bne.n	8002dba <HAL_TIM_PeriodElapsedCallback+0x46>
	   if(__HAL_TIM_GET_COUNTER(&htim2)>3000)
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d905      	bls.n	8002db0 <HAL_TIM_PeriodElapsedCallback+0x3c>
	    	mileage_IT_number--;
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002dac:	6013      	str	r3, [r2, #0]
}
 8002dae:	e004      	b.n	8002dba <HAL_TIM_PeriodElapsedCallback+0x46>
	    	mileage_IT_number++;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002db8:	6013      	str	r3, [r2, #0]
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	200041e4 	.word	0x200041e4
 8002dcc:	20000004 	.word	0x20000004

08002dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd4:	b672      	cpsid	i
}
 8002dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <Error_Handler+0x8>
	...

08002ddc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_MspInit+0x54>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <HAL_MspInit+0x54>)
 8002dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_MspInit+0x54>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_MspInit+0x54>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_MspInit+0x54>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_MspInit+0x54>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	210f      	movs	r1, #15
 8002e1e:	f06f 0001 	mvn.w	r0, #1
 8002e22:	f000 fc0f 	bl	8003644 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800

08002e34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08c      	sub	sp, #48	; 0x30
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d134      	bne.n	8002ec0 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002e8e:	2322      	movs	r3, #34	; 0x22
 8002e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	f107 031c 	add.w	r3, r7, #28
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4821      	ldr	r0, [pc, #132]	; (8002f30 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002eaa:	f000 fc87 	bl	80037bc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2105      	movs	r1, #5
 8002eb2:	201c      	movs	r0, #28
 8002eb4:	f000 fbc6 	bl	8003644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002eb8:	201c      	movs	r0, #28
 8002eba:	f000 fbdf 	bl	800367c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ebe:	e030      	b.n	8002f22 <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM8)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <HAL_TIM_Encoder_MspInit+0x100>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12b      	bne.n	8002f22 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a0f      	ldr	r2, [pc, #60]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f02:	23c0      	movs	r3, #192	; 0xc0
 8002f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002f12:	2303      	movs	r3, #3
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f16:	f107 031c 	add.w	r3, r7, #28
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4806      	ldr	r0, [pc, #24]	; (8002f38 <HAL_TIM_Encoder_MspInit+0x104>)
 8002f1e:	f000 fc4d 	bl	80037bc <HAL_GPIO_Init>
}
 8002f22:	bf00      	nop
 8002f24:	3730      	adds	r7, #48	; 0x30
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40010400 	.word	0x40010400
 8002f38:	40020800 	.word	0x40020800

08002f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_TIM_Base_MspInit+0x64>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10e      	bne.n	8002f6c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_TIM_Base_MspInit+0x68>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <HAL_TIM_Base_MspInit+0x68>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_TIM_Base_MspInit+0x68>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f6a:	e012      	b.n	8002f92 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <HAL_TIM_Base_MspInit+0x6c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10d      	bne.n	8002f92 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_TIM_Base_MspInit+0x68>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_TIM_Base_MspInit+0x68>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <HAL_TIM_Base_MspInit+0x68>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40000800 	.word	0x40000800

08002fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb4:	f107 0314 	add.w	r3, r7, #20
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a24      	ldr	r2, [pc, #144]	; (800305c <HAL_TIM_MspPostInit+0xb0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d11e      	bne.n	800300c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_TIM_MspPostInit+0xb4>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a22      	ldr	r2, [pc, #136]	; (8003060 <HAL_TIM_MspPostInit+0xb4>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_TIM_MspPostInit+0xb4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = leftPWM_Pin;
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftPWM_GPIO_Port, &GPIO_InitStruct);
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	4619      	mov	r1, r3
 8003004:	4817      	ldr	r0, [pc, #92]	; (8003064 <HAL_TIM_MspPostInit+0xb8>)
 8003006:	f000 fbd9 	bl	80037bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800300a:	e023      	b.n	8003054 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <HAL_TIM_MspPostInit+0xbc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d11e      	bne.n	8003054 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_TIM_MspPostInit+0xb4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_TIM_MspPostInit+0xb4>)
 8003020:	f043 0308 	orr.w	r3, r3, #8
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_TIM_MspPostInit+0xb4>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightPWM_Pin;
 8003032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003044:	2302      	movs	r3, #2
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightPWM_GPIO_Port, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	4807      	ldr	r0, [pc, #28]	; (800306c <HAL_TIM_MspPostInit+0xc0>)
 8003050:	f000 fbb4 	bl	80037bc <HAL_GPIO_Init>
}
 8003054:	bf00      	nop
 8003056:	3728      	adds	r7, #40	; 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40000400 	.word	0x40000400
 8003060:	40023800 	.word	0x40023800
 8003064:	40020000 	.word	0x40020000
 8003068:	40000800 	.word	0x40000800
 800306c:	40020c00 	.word	0x40020c00

08003070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b090      	sub	sp, #64	; 0x40
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a7c      	ldr	r2, [pc, #496]	; (8003280 <HAL_UART_MspInit+0x210>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d14b      	bne.n	800312a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
 8003096:	4b7b      	ldr	r3, [pc, #492]	; (8003284 <HAL_UART_MspInit+0x214>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a7a      	ldr	r2, [pc, #488]	; (8003284 <HAL_UART_MspInit+0x214>)
 800309c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b78      	ldr	r3, [pc, #480]	; (8003284 <HAL_UART_MspInit+0x214>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
 80030b2:	4b74      	ldr	r3, [pc, #464]	; (8003284 <HAL_UART_MspInit+0x214>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a73      	ldr	r2, [pc, #460]	; (8003284 <HAL_UART_MspInit+0x214>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b71      	ldr	r3, [pc, #452]	; (8003284 <HAL_UART_MspInit+0x214>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
 80030ce:	4b6d      	ldr	r3, [pc, #436]	; (8003284 <HAL_UART_MspInit+0x214>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a6c      	ldr	r2, [pc, #432]	; (8003284 <HAL_UART_MspInit+0x214>)
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <HAL_UART_MspInit+0x214>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	623b      	str	r3, [r7, #32]
 80030e4:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030f0:	2301      	movs	r3, #1
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	2303      	movs	r3, #3
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030f8:	2308      	movs	r3, #8
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003100:	4619      	mov	r1, r3
 8003102:	4861      	ldr	r0, [pc, #388]	; (8003288 <HAL_UART_MspInit+0x218>)
 8003104:	f000 fb5a 	bl	80037bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003108:	2304      	movs	r3, #4
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003110:	2301      	movs	r3, #1
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003118:	2308      	movs	r3, #8
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800311c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003120:	4619      	mov	r1, r3
 8003122:	485a      	ldr	r0, [pc, #360]	; (800328c <HAL_UART_MspInit+0x21c>)
 8003124:	f000 fb4a 	bl	80037bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003128:	e0a6      	b.n	8003278 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_UART_MspInit+0x220>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d135      	bne.n	80031a0 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	4b52      	ldr	r3, [pc, #328]	; (8003284 <HAL_UART_MspInit+0x214>)
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	4a51      	ldr	r2, [pc, #324]	; (8003284 <HAL_UART_MspInit+0x214>)
 800313e:	f043 0310 	orr.w	r3, r3, #16
 8003142:	6453      	str	r3, [r2, #68]	; 0x44
 8003144:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <HAL_UART_MspInit+0x214>)
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <HAL_UART_MspInit+0x214>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	4a4a      	ldr	r2, [pc, #296]	; (8003284 <HAL_UART_MspInit+0x214>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6313      	str	r3, [r2, #48]	; 0x30
 8003160:	4b48      	ldr	r3, [pc, #288]	; (8003284 <HAL_UART_MspInit+0x214>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800316c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317a:	2303      	movs	r3, #3
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800317e:	2307      	movs	r3, #7
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003186:	4619      	mov	r1, r3
 8003188:	4842      	ldr	r0, [pc, #264]	; (8003294 <HAL_UART_MspInit+0x224>)
 800318a:	f000 fb17 	bl	80037bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2105      	movs	r1, #5
 8003192:	2025      	movs	r0, #37	; 0x25
 8003194:	f000 fa56 	bl	8003644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003198:	2025      	movs	r0, #37	; 0x25
 800319a:	f000 fa6f 	bl	800367c <HAL_NVIC_EnableIRQ>
}
 800319e:	e06b      	b.n	8003278 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3c      	ldr	r2, [pc, #240]	; (8003298 <HAL_UART_MspInit+0x228>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d134      	bne.n	8003214 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	4b35      	ldr	r3, [pc, #212]	; (8003284 <HAL_UART_MspInit+0x214>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a34      	ldr	r2, [pc, #208]	; (8003284 <HAL_UART_MspInit+0x214>)
 80031b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <HAL_UART_MspInit+0x214>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_UART_MspInit+0x214>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_UART_MspInit+0x214>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_UART_MspInit+0x214>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031e2:	230c      	movs	r3, #12
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ee:	2303      	movs	r3, #3
 80031f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031f2:	2307      	movs	r3, #7
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031fa:	4619      	mov	r1, r3
 80031fc:	4825      	ldr	r0, [pc, #148]	; (8003294 <HAL_UART_MspInit+0x224>)
 80031fe:	f000 fadd 	bl	80037bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2105      	movs	r1, #5
 8003206:	2026      	movs	r0, #38	; 0x26
 8003208:	f000 fa1c 	bl	8003644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800320c:	2026      	movs	r0, #38	; 0x26
 800320e:	f000 fa35 	bl	800367c <HAL_NVIC_EnableIRQ>
}
 8003212:	e031      	b.n	8003278 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a20      	ldr	r2, [pc, #128]	; (800329c <HAL_UART_MspInit+0x22c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d12c      	bne.n	8003278 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_UART_MspInit+0x214>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4a17      	ldr	r2, [pc, #92]	; (8003284 <HAL_UART_MspInit+0x214>)
 8003228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800322c:	6413      	str	r3, [r2, #64]	; 0x40
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_UART_MspInit+0x214>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_UART_MspInit+0x214>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <HAL_UART_MspInit+0x214>)
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_UART_MspInit+0x214>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003256:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003268:	2307      	movs	r3, #7
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003270:	4619      	mov	r1, r3
 8003272:	480b      	ldr	r0, [pc, #44]	; (80032a0 <HAL_UART_MspInit+0x230>)
 8003274:	f000 faa2 	bl	80037bc <HAL_GPIO_Init>
}
 8003278:	bf00      	nop
 800327a:	3740      	adds	r7, #64	; 0x40
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40005000 	.word	0x40005000
 8003284:	40023800 	.word	0x40023800
 8003288:	40020800 	.word	0x40020800
 800328c:	40020c00 	.word	0x40020c00
 8003290:	40011000 	.word	0x40011000
 8003294:	40020000 	.word	0x40020000
 8003298:	40004400 	.word	0x40004400
 800329c:	40004800 	.word	0x40004800
 80032a0:	40020400 	.word	0x40020400

080032a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08c      	sub	sp, #48	; 0x30
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80032b4:	2200      	movs	r2, #0
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	2019      	movs	r0, #25
 80032ba:	f000 f9c3 	bl	8003644 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032be:	2019      	movs	r0, #25
 80032c0:	f000 f9dc 	bl	800367c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <HAL_InitTick+0xa4>)
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <HAL_InitTick+0xa4>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6453      	str	r3, [r2, #68]	; 0x44
 80032d4:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <HAL_InitTick+0xa4>)
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032e0:	f107 0210 	add.w	r2, r7, #16
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 f8b6 	bl	800445c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80032f0:	f001 f8a0 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 80032f4:	4603      	mov	r3, r0
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	4a13      	ldr	r2, [pc, #76]	; (800334c <HAL_InitTick+0xa8>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0c9b      	lsrs	r3, r3, #18
 8003304:	3b01      	subs	r3, #1
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_InitTick+0xac>)
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_InitTick+0xb0>)
 800330c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_InitTick+0xac>)
 8003310:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003314:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003316:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <HAL_InitTick+0xac>)
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_InitTick+0xac>)
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_InitTick+0xac>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003328:	4809      	ldr	r0, [pc, #36]	; (8003350 <HAL_InitTick+0xac>)
 800332a:	f001 f8e4 	bl	80044f6 <HAL_TIM_Base_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003334:	4806      	ldr	r0, [pc, #24]	; (8003350 <HAL_InitTick+0xac>)
 8003336:	f001 f92d 	bl	8004594 <HAL_TIM_Base_Start_IT>
 800333a:	4603      	mov	r3, r0
 800333c:	e000      	b.n	8003340 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
}
 8003340:	4618      	mov	r0, r3
 8003342:	3730      	adds	r7, #48	; 0x30
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40023800 	.word	0x40023800
 800334c:	431bde83 	.word	0x431bde83
 8003350:	20004274 	.word	0x20004274
 8003354:	40010000 	.word	0x40010000

08003358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800335c:	f001 f8b0 	bl	80044c0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <NMI_Handler+0x8>

08003362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <HardFault_Handler+0x4>

08003368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800336c:	e7fe      	b.n	800336c <MemManage_Handler+0x4>

0800336e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003372:	e7fe      	b.n	8003372 <BusFault_Handler+0x4>

08003374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <UsageFault_Handler+0x4>

0800337a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800338e:	f001 fbc7 	bl	8004b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20004274 	.word	0x20004274

0800339c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <TIM2_IRQHandler+0x10>)
 80033a2:	f001 fbbd 	bl	8004b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200041e4 	.word	0x200041e4

080033b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <USART1_IRQHandler+0x10>)
 80033b6:	f002 fbb7 	bl	8005b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000418c 	.word	0x2000418c

080033c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <USART2_IRQHandler+0x10>)
 80033ca:	f002 fbad 	bl	8005b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2000422c 	.word	0x2000422c

080033d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <SystemInit+0x20>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <SystemInit+0x20>)
 80033e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003400:	480d      	ldr	r0, [pc, #52]	; (8003438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003402:	490e      	ldr	r1, [pc, #56]	; (800343c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003404:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003408:	e002      	b.n	8003410 <LoopCopyDataInit>

0800340a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800340a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800340c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340e:	3304      	adds	r3, #4

08003410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003414:	d3f9      	bcc.n	800340a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003416:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003418:	4c0b      	ldr	r4, [pc, #44]	; (8003448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800341a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800341c:	e001      	b.n	8003422 <LoopFillZerobss>

0800341e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003420:	3204      	adds	r2, #4

08003422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003424:	d3fb      	bcc.n	800341e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003426:	f7ff ffd7 	bl	80033d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800342a:	f005 fe9f 	bl	800916c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800342e:	f7fd fc83 	bl	8000d38 <main>
  bx  lr    
 8003432:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800343c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003440:	08009340 	.word	0x08009340
  ldr r2, =_sbss
 8003444:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8003448:	200042c0 	.word	0x200042c0

0800344c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800344c:	e7fe      	b.n	800344c <ADC_IRQHandler>
	...

08003450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_Init+0x40>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0d      	ldr	r2, [pc, #52]	; (8003490 <HAL_Init+0x40>)
 800345a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800345e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_Init+0x40>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_Init+0x40>)
 8003466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800346a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_Init+0x40>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a07      	ldr	r2, [pc, #28]	; (8003490 <HAL_Init+0x40>)
 8003472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003478:	2003      	movs	r0, #3
 800347a:	f000 f8d8 	bl	800362e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800347e:	2000      	movs	r0, #0
 8003480:	f7ff ff10 	bl	80032a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003484:	f7ff fcaa 	bl	8002ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023c00 	.word	0x40023c00

08003494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_IncTick+0x20>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_IncTick+0x24>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_IncTick+0x24>)
 80034a6:	6013      	str	r3, [r2, #0]
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000014 	.word	0x20000014
 80034b8:	200042bc 	.word	0x200042bc

080034bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return uwTick;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_GetTick+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	200042bc 	.word	0x200042bc

080034d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003506:	4a04      	ldr	r2, [pc, #16]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	60d3      	str	r3, [r2, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <__NVIC_GetPriorityGrouping+0x18>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 0307 	and.w	r3, r3, #7
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	2b00      	cmp	r3, #0
 8003548:	db0b      	blt.n	8003562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	4907      	ldr	r1, [pc, #28]	; (8003570 <__NVIC_EnableIRQ+0x38>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2001      	movs	r0, #1
 800355a:	fa00 f202 	lsl.w	r2, r0, r2
 800355e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000e100 	.word	0xe000e100

08003574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	6039      	str	r1, [r7, #0]
 800357e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003584:	2b00      	cmp	r3, #0
 8003586:	db0a      	blt.n	800359e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	490c      	ldr	r1, [pc, #48]	; (80035c0 <__NVIC_SetPriority+0x4c>)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	0112      	lsls	r2, r2, #4
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	440b      	add	r3, r1
 8003598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800359c:	e00a      	b.n	80035b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	4908      	ldr	r1, [pc, #32]	; (80035c4 <__NVIC_SetPriority+0x50>)
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	3b04      	subs	r3, #4
 80035ac:	0112      	lsls	r2, r2, #4
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	440b      	add	r3, r1
 80035b2:	761a      	strb	r2, [r3, #24]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000e100 	.word	0xe000e100
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f1c3 0307 	rsb	r3, r3, #7
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	bf28      	it	cs
 80035e6:	2304      	movcs	r3, #4
 80035e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d902      	bls.n	80035f8 <NVIC_EncodePriority+0x30>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3b03      	subs	r3, #3
 80035f6:	e000      	b.n	80035fa <NVIC_EncodePriority+0x32>
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	401a      	ands	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003610:	f04f 31ff 	mov.w	r1, #4294967295
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	43d9      	mvns	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	4313      	orrs	r3, r2
         );
}
 8003622:	4618      	mov	r0, r3
 8003624:	3724      	adds	r7, #36	; 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ff4c 	bl	80034d4 <__NVIC_SetPriorityGrouping>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003656:	f7ff ff61 	bl	800351c <__NVIC_GetPriorityGrouping>
 800365a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	6978      	ldr	r0, [r7, #20]
 8003662:	f7ff ffb1 	bl	80035c8 <NVIC_EncodePriority>
 8003666:	4602      	mov	r2, r0
 8003668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff80 	bl	8003574 <__NVIC_SetPriority>
}
 8003674:	bf00      	nop
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ff54 	bl	8003538 <__NVIC_EnableIRQ>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036a6:	f7ff ff09 	bl	80034bc <HAL_GetTick>
 80036aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d008      	beq.n	80036ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2280      	movs	r2, #128	; 0x80
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e052      	b.n	8003770 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0216 	bic.w	r2, r2, #22
 80036d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <HAL_DMA_Abort+0x62>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0208 	bic.w	r2, r2, #8
 8003708:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371a:	e013      	b.n	8003744 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371c:	f7ff fece 	bl	80034bc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b05      	cmp	r3, #5
 8003728:	d90c      	bls.n	8003744 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2203      	movs	r2, #3
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e015      	b.n	8003770 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e4      	bne.n	800371c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	223f      	movs	r2, #63	; 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d004      	beq.n	8003796 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e00c      	b.n	80037b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2205      	movs	r2, #5
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	e16b      	b.n	8003ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037d8:	2201      	movs	r2, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	f040 815a 	bne.w	8003aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d005      	beq.n	800380e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380a:	2b02      	cmp	r3, #2
 800380c:	d130      	bne.n	8003870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	2203      	movs	r2, #3
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003844:	2201      	movs	r2, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 0201 	and.w	r2, r3, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b03      	cmp	r3, #3
 800387a:	d017      	beq.n	80038ac <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d123      	bne.n	8003900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	08da      	lsrs	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3208      	adds	r2, #8
 80038c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	220f      	movs	r2, #15
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	08da      	lsrs	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3208      	adds	r2, #8
 80038fa:	69b9      	ldr	r1, [r7, #24]
 80038fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0203 	and.w	r2, r3, #3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80b4 	beq.w	8003aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b60      	ldr	r3, [pc, #384]	; (8003ac8 <HAL_GPIO_Init+0x30c>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	4a5f      	ldr	r2, [pc, #380]	; (8003ac8 <HAL_GPIO_Init+0x30c>)
 800394c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003950:	6453      	str	r3, [r2, #68]	; 0x44
 8003952:	4b5d      	ldr	r3, [pc, #372]	; (8003ac8 <HAL_GPIO_Init+0x30c>)
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800395e:	4a5b      	ldr	r2, [pc, #364]	; (8003acc <HAL_GPIO_Init+0x310>)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	3302      	adds	r3, #2
 8003966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	220f      	movs	r2, #15
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a52      	ldr	r2, [pc, #328]	; (8003ad0 <HAL_GPIO_Init+0x314>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02b      	beq.n	80039e2 <HAL_GPIO_Init+0x226>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a51      	ldr	r2, [pc, #324]	; (8003ad4 <HAL_GPIO_Init+0x318>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d025      	beq.n	80039de <HAL_GPIO_Init+0x222>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a50      	ldr	r2, [pc, #320]	; (8003ad8 <HAL_GPIO_Init+0x31c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01f      	beq.n	80039da <HAL_GPIO_Init+0x21e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4f      	ldr	r2, [pc, #316]	; (8003adc <HAL_GPIO_Init+0x320>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d019      	beq.n	80039d6 <HAL_GPIO_Init+0x21a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4e      	ldr	r2, [pc, #312]	; (8003ae0 <HAL_GPIO_Init+0x324>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_GPIO_Init+0x216>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4d      	ldr	r2, [pc, #308]	; (8003ae4 <HAL_GPIO_Init+0x328>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00d      	beq.n	80039ce <HAL_GPIO_Init+0x212>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4c      	ldr	r2, [pc, #304]	; (8003ae8 <HAL_GPIO_Init+0x32c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_GPIO_Init+0x20e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4b      	ldr	r2, [pc, #300]	; (8003aec <HAL_GPIO_Init+0x330>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_GPIO_Init+0x20a>
 80039c2:	2307      	movs	r3, #7
 80039c4:	e00e      	b.n	80039e4 <HAL_GPIO_Init+0x228>
 80039c6:	2308      	movs	r3, #8
 80039c8:	e00c      	b.n	80039e4 <HAL_GPIO_Init+0x228>
 80039ca:	2306      	movs	r3, #6
 80039cc:	e00a      	b.n	80039e4 <HAL_GPIO_Init+0x228>
 80039ce:	2305      	movs	r3, #5
 80039d0:	e008      	b.n	80039e4 <HAL_GPIO_Init+0x228>
 80039d2:	2304      	movs	r3, #4
 80039d4:	e006      	b.n	80039e4 <HAL_GPIO_Init+0x228>
 80039d6:	2303      	movs	r3, #3
 80039d8:	e004      	b.n	80039e4 <HAL_GPIO_Init+0x228>
 80039da:	2302      	movs	r3, #2
 80039dc:	e002      	b.n	80039e4 <HAL_GPIO_Init+0x228>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_GPIO_Init+0x228>
 80039e2:	2300      	movs	r3, #0
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	f002 0203 	and.w	r2, r2, #3
 80039ea:	0092      	lsls	r2, r2, #2
 80039ec:	4093      	lsls	r3, r2
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f4:	4935      	ldr	r1, [pc, #212]	; (8003acc <HAL_GPIO_Init+0x310>)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	3302      	adds	r3, #2
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a02:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <HAL_GPIO_Init+0x334>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a26:	4a32      	ldr	r2, [pc, #200]	; (8003af0 <HAL_GPIO_Init+0x334>)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a2c:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <HAL_GPIO_Init+0x334>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a50:	4a27      	ldr	r2, [pc, #156]	; (8003af0 <HAL_GPIO_Init+0x334>)
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a56:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <HAL_GPIO_Init+0x334>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_GPIO_Init+0x334>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_GPIO_Init+0x334>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa4:	4a12      	ldr	r2, [pc, #72]	; (8003af0 <HAL_GPIO_Init+0x334>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	f67f ae90 	bls.w	80037d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3724      	adds	r7, #36	; 0x24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40013800 	.word	0x40013800
 8003ad0:	40020000 	.word	0x40020000
 8003ad4:	40020400 	.word	0x40020400
 8003ad8:	40020800 	.word	0x40020800
 8003adc:	40020c00 	.word	0x40020c00
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40021400 	.word	0x40021400
 8003ae8:	40021800 	.word	0x40021800
 8003aec:	40021c00 	.word	0x40021c00
 8003af0:	40013c00 	.word	0x40013c00

08003af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
 8003b00:	4613      	mov	r3, r2
 8003b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b04:	787b      	ldrb	r3, [r7, #1]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b10:	e003      	b.n	8003b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	041a      	lsls	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	619a      	str	r2, [r3, #24]
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b38:	887a      	ldrh	r2, [r7, #2]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	041a      	lsls	r2, r3, #16
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	400b      	ands	r3, r1
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e264      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d075      	beq.n	8003c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7a:	4ba3      	ldr	r3, [pc, #652]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d00c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b86:	4ba0      	ldr	r3, [pc, #640]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d112      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b92:	4b9d      	ldr	r3, [pc, #628]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	4b99      	ldr	r3, [pc, #612]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d05b      	beq.n	8003c64 <HAL_RCC_OscConfig+0x108>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d157      	bne.n	8003c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e23f      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d106      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x74>
 8003bc2:	4b91      	ldr	r3, [pc, #580]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a90      	ldr	r2, [pc, #576]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e01d      	b.n	8003c0c <HAL_RCC_OscConfig+0xb0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x98>
 8003bda:	4b8b      	ldr	r3, [pc, #556]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a8a      	ldr	r2, [pc, #552]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b88      	ldr	r3, [pc, #544]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a87      	ldr	r2, [pc, #540]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0xb0>
 8003bf4:	4b84      	ldr	r3, [pc, #528]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a83      	ldr	r2, [pc, #524]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7ff fc52 	bl	80034bc <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7ff fc4e 	bl	80034bc <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e204      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b76      	ldr	r3, [pc, #472]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0xc0>
 8003c3a:	e014      	b.n	8003c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7ff fc3e 	bl	80034bc <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c44:	f7ff fc3a 	bl	80034bc <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1f0      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	4b6c      	ldr	r3, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0xe8>
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d063      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c72:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c7e:	4b62      	ldr	r3, [pc, #392]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d11c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8a:	4b5f      	ldr	r3, [pc, #380]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d116      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	4b5c      	ldr	r3, [pc, #368]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_RCC_OscConfig+0x152>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e1c4      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cae:	4b56      	ldr	r3, [pc, #344]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4952      	ldr	r1, [pc, #328]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	e03a      	b.n	8003d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ccc:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <HAL_RCC_OscConfig+0x2b0>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7ff fbf3 	bl	80034bc <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cda:	f7ff fbef 	bl	80034bc <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e1a5      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf8:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4940      	ldr	r1, [pc, #256]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
 8003d0c:	e015      	b.n	8003d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <HAL_RCC_OscConfig+0x2b0>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7ff fbd2 	bl	80034bc <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1c:	f7ff fbce 	bl	80034bc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e184      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d030      	beq.n	8003da8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4e:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <HAL_RCC_OscConfig+0x2b4>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7ff fbb2 	bl	80034bc <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7ff fbae 	bl	80034bc <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e164      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x200>
 8003d7a:	e015      	b.n	8003da8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCC_OscConfig+0x2b4>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d82:	f7ff fb9b 	bl	80034bc <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7ff fb97 	bl	80034bc <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e14d      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a0 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dba:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10f      	bne.n	8003de6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_OscConfig+0x2b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d121      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCC_OscConfig+0x2b8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <HAL_RCC_OscConfig+0x2b8>)
 8003df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfe:	f7ff fb5d 	bl	80034bc <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e04:	e011      	b.n	8003e2a <HAL_RCC_OscConfig+0x2ce>
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	42470000 	.word	0x42470000
 8003e10:	42470e80 	.word	0x42470e80
 8003e14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e18:	f7ff fb50 	bl	80034bc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e106      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b85      	ldr	r3, [pc, #532]	; (8004040 <HAL_RCC_OscConfig+0x4e4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
 8003e3e:	4b81      	ldr	r3, [pc, #516]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a80      	ldr	r2, [pc, #512]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4a:	e01c      	b.n	8003e86 <HAL_RCC_OscConfig+0x32a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_OscConfig+0x312>
 8003e54:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a7a      	ldr	r2, [pc, #488]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e5a:	f043 0304 	orr.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	4b78      	ldr	r3, [pc, #480]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a77      	ldr	r2, [pc, #476]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6c:	e00b      	b.n	8003e86 <HAL_RCC_OscConfig+0x32a>
 8003e6e:	4b75      	ldr	r3, [pc, #468]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a74      	ldr	r2, [pc, #464]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	4b72      	ldr	r3, [pc, #456]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a71      	ldr	r2, [pc, #452]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d015      	beq.n	8003eba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7ff fb15 	bl	80034bc <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7ff fb11 	bl	80034bc <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e0c5      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ee      	beq.n	8003e96 <HAL_RCC_OscConfig+0x33a>
 8003eb8:	e014      	b.n	8003ee4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eba:	f7ff faff 	bl	80034bc <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7ff fafb 	bl	80034bc <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e0af      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed8:	4b5a      	ldr	r3, [pc, #360]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1ee      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d105      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eea:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	4a55      	ldr	r2, [pc, #340]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 809b 	beq.w	8004036 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f00:	4b50      	ldr	r3, [pc, #320]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d05c      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d141      	bne.n	8003f98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f14:	4b4c      	ldr	r3, [pc, #304]	; (8004048 <HAL_RCC_OscConfig+0x4ec>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7ff facf 	bl	80034bc <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f22:	f7ff facb 	bl	80034bc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e081      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f34:	4b43      	ldr	r3, [pc, #268]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	019b      	lsls	r3, r3, #6
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	061b      	lsls	r3, r3, #24
 8003f64:	4937      	ldr	r1, [pc, #220]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f6a:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_OscConfig+0x4ec>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7ff faa4 	bl	80034bc <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f78:	f7ff faa0 	bl	80034bc <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e056      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x41c>
 8003f96:	e04e      	b.n	8004036 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_OscConfig+0x4ec>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7ff fa8d 	bl	80034bc <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7ff fa89 	bl	80034bc <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e03f      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x44a>
 8003fc4:	e037      	b.n	8004036 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e032      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <HAL_RCC_OscConfig+0x4e8>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d028      	beq.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d121      	bne.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d11a      	bne.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004008:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800400a:	4293      	cmp	r3, r2
 800400c:	d111      	bne.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d107      	bne.n	8004032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40007000 	.word	0x40007000
 8004044:	40023800 	.word	0x40023800
 8004048:	42470060 	.word	0x42470060

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0cc      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004060:	4b68      	ldr	r3, [pc, #416]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d90c      	bls.n	8004088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b65      	ldr	r3, [pc, #404]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b63      	ldr	r3, [pc, #396]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0b8      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d020      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a0:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a58      	ldr	r2, [pc, #352]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b8:	4b53      	ldr	r3, [pc, #332]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a52      	ldr	r2, [pc, #328]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	494d      	ldr	r1, [pc, #308]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d044      	beq.n	800416c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d119      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e07f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d003      	beq.n	800410a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004106:	2b03      	cmp	r3, #3
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e06f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e067      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412a:	4b37      	ldr	r3, [pc, #220]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 0203 	bic.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4934      	ldr	r1, [pc, #208]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800413c:	f7ff f9be 	bl	80034bc <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	e00a      	b.n	800415a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7ff f9ba 	bl	80034bc <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e04f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 020c 	and.w	r2, r3, #12
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	429a      	cmp	r2, r3
 800416a:	d1eb      	bne.n	8004144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800416c:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d20c      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e032      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4916      	ldr	r1, [pc, #88]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	490e      	ldr	r1, [pc, #56]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041d2:	f000 f82d 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	490a      	ldr	r1, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	5ccb      	ldrb	r3, [r1, r3]
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	4a09      	ldr	r2, [pc, #36]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f856 	bl	80032a4 <HAL_InitTick>

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023c00 	.word	0x40023c00
 8004208:	40023800 	.word	0x40023800
 800420c:	08009318 	.word	0x08009318
 8004210:	2000000c 	.word	0x2000000c
 8004214:	20000010 	.word	0x20000010

08004218 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_RCC_EnableCSS+0x14>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]
}
 8004222:	bf00      	nop
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	4247004c 	.word	0x4247004c

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	2300      	movs	r3, #0
 8004242:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004248:	4b67      	ldr	r3, [pc, #412]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d00d      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x40>
 8004254:	2b08      	cmp	r3, #8
 8004256:	f200 80bd 	bhi.w	80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x34>
 800425e:	2b04      	cmp	r3, #4
 8004260:	d003      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x3a>
 8004262:	e0b7      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b61      	ldr	r3, [pc, #388]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004266:	60bb      	str	r3, [r7, #8]
       break;
 8004268:	e0b7      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426a:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800426c:	60bb      	str	r3, [r7, #8]
      break;
 800426e:	e0b4      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004270:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004278:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427a:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d04d      	beq.n	8004322 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004286:	4b58      	ldr	r3, [pc, #352]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	461a      	mov	r2, r3
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	ea02 0800 	and.w	r8, r2, r0
 800429e:	ea03 0901 	and.w	r9, r3, r1
 80042a2:	4640      	mov	r0, r8
 80042a4:	4649      	mov	r1, r9
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	014b      	lsls	r3, r1, #5
 80042b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042b4:	0142      	lsls	r2, r0, #5
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	ebb0 0008 	subs.w	r0, r0, r8
 80042be:	eb61 0109 	sbc.w	r1, r1, r9
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	018b      	lsls	r3, r1, #6
 80042cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042d0:	0182      	lsls	r2, r0, #6
 80042d2:	1a12      	subs	r2, r2, r0
 80042d4:	eb63 0301 	sbc.w	r3, r3, r1
 80042d8:	f04f 0000 	mov.w	r0, #0
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	00d9      	lsls	r1, r3, #3
 80042e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e6:	00d0      	lsls	r0, r2, #3
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	eb12 0208 	adds.w	r2, r2, r8
 80042f0:	eb43 0309 	adc.w	r3, r3, r9
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	0259      	lsls	r1, r3, #9
 80042fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004302:	0250      	lsls	r0, r2, #9
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	f7fc fb7a 	bl	8000a0c <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4613      	mov	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e04a      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	461a      	mov	r2, r3
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	ea02 0400 	and.w	r4, r2, r0
 800433a:	ea03 0501 	and.w	r5, r3, r1
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	014b      	lsls	r3, r1, #5
 800434c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004350:	0142      	lsls	r2, r0, #5
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	1b00      	subs	r0, r0, r4
 8004358:	eb61 0105 	sbc.w	r1, r1, r5
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	018b      	lsls	r3, r1, #6
 8004366:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800436a:	0182      	lsls	r2, r0, #6
 800436c:	1a12      	subs	r2, r2, r0
 800436e:	eb63 0301 	sbc.w	r3, r3, r1
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	00d9      	lsls	r1, r3, #3
 800437c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004380:	00d0      	lsls	r0, r2, #3
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	1912      	adds	r2, r2, r4
 8004388:	eb45 0303 	adc.w	r3, r5, r3
 800438c:	f04f 0000 	mov.w	r0, #0
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	0299      	lsls	r1, r3, #10
 8004396:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800439a:	0290      	lsls	r0, r2, #10
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	f7fc fb2e 	bl	8000a0c <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4613      	mov	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043d6:	60bb      	str	r3, [r7, #8]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	68bb      	ldr	r3, [r7, #8]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	007a1200 	.word	0x007a1200

080043f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RCC_GetHCLKFreq+0x14>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	2000000c 	.word	0x2000000c

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004410:	f7ff fff0 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	0a9b      	lsrs	r3, r3, #10
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4903      	ldr	r1, [pc, #12]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40023800 	.word	0x40023800
 8004430:	08009328 	.word	0x08009328

08004434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004438:	f7ff ffdc 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0b5b      	lsrs	r3, r3, #13
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	08009328 	.word	0x08009328

0800445c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	220f      	movs	r2, #15
 800446a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_GetClockConfig+0x5c>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0203 	and.w	r2, r3, #3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <HAL_RCC_GetClockConfig+0x5c>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	08db      	lsrs	r3, r3, #3
 8004496:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <HAL_RCC_GetClockConfig+0x60>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0207 	and.w	r2, r3, #7
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	601a      	str	r2, [r3, #0]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40023c00 	.word	0x40023c00

080044c0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d104      	bne.n	80044da <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80044d0:	f000 f80a 	bl	80044e8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80044d4:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80044d6:	2280      	movs	r2, #128	; 0x80
 80044d8:	701a      	strb	r2, [r3, #0]
  }
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	4002380e 	.word	0x4002380e

080044e8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e041      	b.n	800458c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7fe fd0d 	bl	8002f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f000 fda5 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d001      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e04e      	b.n	800464a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a23      	ldr	r2, [pc, #140]	; (8004658 <HAL_TIM_Base_Start_IT+0xc4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d022      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d6:	d01d      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1f      	ldr	r2, [pc, #124]	; (800465c <HAL_TIM_Base_Start_IT+0xc8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d018      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <HAL_TIM_Base_Start_IT+0xcc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d013      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1c      	ldr	r2, [pc, #112]	; (8004664 <HAL_TIM_Base_Start_IT+0xd0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00e      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <HAL_TIM_Base_Start_IT+0xd4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <HAL_TIM_Base_Start_IT+0xd8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d004      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIM_Base_Start_IT+0xdc>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d111      	bne.n	8004638 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b06      	cmp	r3, #6
 8004624:	d010      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0201 	orr.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004636:	e007      	b.n	8004648 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40010400 	.word	0x40010400
 800466c:	40014000 	.word	0x40014000
 8004670:	40001800 	.word	0x40001800

08004674 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e041      	b.n	800470a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f839 	bl	8004712 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f000 fce6 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_TIM_PWM_Start+0x24>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e022      	b.n	8004792 <HAL_TIM_PWM_Start+0x6a>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b04      	cmp	r3, #4
 8004750:	d109      	bne.n	8004766 <HAL_TIM_PWM_Start+0x3e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e015      	b.n	8004792 <HAL_TIM_PWM_Start+0x6a>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d109      	bne.n	8004780 <HAL_TIM_PWM_Start+0x58>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e008      	b.n	8004792 <HAL_TIM_PWM_Start+0x6a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07c      	b.n	8004894 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <HAL_TIM_PWM_Start+0x82>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a8:	e013      	b.n	80047d2 <HAL_TIM_PWM_Start+0xaa>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_PWM_Start+0x92>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b8:	e00b      	b.n	80047d2 <HAL_TIM_PWM_Start+0xaa>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d104      	bne.n	80047ca <HAL_TIM_PWM_Start+0xa2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c8:	e003      	b.n	80047d2 <HAL_TIM_PWM_Start+0xaa>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2201      	movs	r2, #1
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 ff3c 	bl	8005658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2d      	ldr	r2, [pc, #180]	; (800489c <HAL_TIM_PWM_Start+0x174>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_TIM_PWM_Start+0xcc>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2c      	ldr	r2, [pc, #176]	; (80048a0 <HAL_TIM_PWM_Start+0x178>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_TIM_PWM_Start+0xd0>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <HAL_TIM_PWM_Start+0xd2>
 80047f8:	2300      	movs	r3, #0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a22      	ldr	r2, [pc, #136]	; (800489c <HAL_TIM_PWM_Start+0x174>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <HAL_TIM_PWM_Start+0x136>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004820:	d01d      	beq.n	800485e <HAL_TIM_PWM_Start+0x136>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_TIM_PWM_Start+0x17c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <HAL_TIM_PWM_Start+0x136>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <HAL_TIM_PWM_Start+0x180>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_TIM_PWM_Start+0x136>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <HAL_TIM_PWM_Start+0x184>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_TIM_PWM_Start+0x136>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <HAL_TIM_PWM_Start+0x178>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_TIM_PWM_Start+0x136>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <HAL_TIM_PWM_Start+0x188>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_TIM_PWM_Start+0x136>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <HAL_TIM_PWM_Start+0x18c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d111      	bne.n	8004882 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b06      	cmp	r3, #6
 800486e:	d010      	beq.n	8004892 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	e007      	b.n	8004892 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40010000 	.word	0x40010000
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40001800 	.word	0x40001800

080048b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e097      	b.n	80049fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fe faa7 	bl	8002e34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f000 fbb9 	bl	8005084 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	4313      	orrs	r3, r2
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004958:	f023 030c 	bic.w	r3, r3, #12
 800495c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	4313      	orrs	r3, r2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	011a      	lsls	r2, r3, #4
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	031b      	lsls	r3, r3, #12
 8004988:	4313      	orrs	r3, r2
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800499e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	4313      	orrs	r3, r2
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d110      	bne.n	8004a56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d102      	bne.n	8004a40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a3a:	7b7b      	ldrb	r3, [r7, #13]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d001      	beq.n	8004a44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e069      	b.n	8004b18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a54:	e031      	b.n	8004aba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d110      	bne.n	8004a7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d102      	bne.n	8004a68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a62:	7b3b      	ldrb	r3, [r7, #12]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d001      	beq.n	8004a6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e055      	b.n	8004b18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a7c:	e01d      	b.n	8004aba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d108      	bne.n	8004a96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a84:	7bbb      	ldrb	r3, [r7, #14]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d105      	bne.n	8004a96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a8a:	7b7b      	ldrb	r3, [r7, #13]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d102      	bne.n	8004a96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a90:	7b3b      	ldrb	r3, [r7, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d001      	beq.n	8004a9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e03e      	b.n	8004b18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_TIM_Encoder_Start+0xc4>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d008      	beq.n	8004ad8 <HAL_TIM_Encoder_Start+0xd4>
 8004ac6:	e00f      	b.n	8004ae8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fdc1 	bl	8005658 <TIM_CCxChannelCmd>
      break;
 8004ad6:	e016      	b.n	8004b06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2201      	movs	r2, #1
 8004ade:	2104      	movs	r1, #4
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fdb9 	bl	8005658 <TIM_CCxChannelCmd>
      break;
 8004ae6:	e00e      	b.n	8004b06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2201      	movs	r2, #1
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fdb1 	bl	8005658 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2201      	movs	r2, #1
 8004afc:	2104      	movs	r1, #4
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fdaa 	bl	8005658 <TIM_CCxChannelCmd>
      break;
 8004b04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0202 	mvn.w	r2, #2
 8004b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa70 	bl	8005048 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fa62 	bl	8005034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fa73 	bl	800505c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0204 	mvn.w	r2, #4
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa46 	bl	8005048 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa38 	bl	8005034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fa49 	bl	800505c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0208 	mvn.w	r2, #8
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa1c 	bl	8005048 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa0e 	bl	8005034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fa1f 	bl	800505c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0210 	mvn.w	r2, #16
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f9f2 	bl	8005048 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f9e4 	bl	8005034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f9f5 	bl	800505c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d107      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0201 	mvn.w	r2, #1
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fe f868 	bl	8002d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fd70 	bl	80057b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d10e      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d107      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f9ba 	bl	8005070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0220 	mvn.w	r2, #32
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fd3a 	bl	800579c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e0ac      	b.n	8004ea4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b0c      	cmp	r3, #12
 8004d56:	f200 809f 	bhi.w	8004e98 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004e99 	.word	0x08004e99
 8004d68:	08004e99 	.word	0x08004e99
 8004d6c:	08004e99 	.word	0x08004e99
 8004d70:	08004dd5 	.word	0x08004dd5
 8004d74:	08004e99 	.word	0x08004e99
 8004d78:	08004e99 	.word	0x08004e99
 8004d7c:	08004e99 	.word	0x08004e99
 8004d80:	08004e17 	.word	0x08004e17
 8004d84:	08004e99 	.word	0x08004e99
 8004d88:	08004e99 	.word	0x08004e99
 8004d8c:	08004e99 	.word	0x08004e99
 8004d90:	08004e57 	.word	0x08004e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fa12 	bl	80051c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0208 	orr.w	r2, r2, #8
 8004dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0204 	bic.w	r2, r2, #4
 8004dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6999      	ldr	r1, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	619a      	str	r2, [r3, #24]
      break;
 8004dd2:	e062      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fa62 	bl	80052a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	021a      	lsls	r2, r3, #8
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]
      break;
 8004e14:	e041      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fab7 	bl	8005390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0208 	orr.w	r2, r2, #8
 8004e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0204 	bic.w	r2, r2, #4
 8004e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69d9      	ldr	r1, [r3, #28]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	61da      	str	r2, [r3, #28]
      break;
 8004e54:	e021      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fb0b 	bl	8005478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	021a      	lsls	r2, r3, #8
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	61da      	str	r2, [r3, #28]
      break;
 8004e96:	e000      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIM_ConfigClockSource+0x18>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e0b3      	b.n	800502c <HAL_TIM_ConfigClockSource+0x180>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efc:	d03e      	beq.n	8004f7c <HAL_TIM_ConfigClockSource+0xd0>
 8004efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f02:	f200 8087 	bhi.w	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0a:	f000 8085 	beq.w	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f12:	d87f      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f14:	2b70      	cmp	r3, #112	; 0x70
 8004f16:	d01a      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xa2>
 8004f18:	2b70      	cmp	r3, #112	; 0x70
 8004f1a:	d87b      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f1c:	2b60      	cmp	r3, #96	; 0x60
 8004f1e:	d050      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x116>
 8004f20:	2b60      	cmp	r3, #96	; 0x60
 8004f22:	d877      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f24:	2b50      	cmp	r3, #80	; 0x50
 8004f26:	d03c      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0xf6>
 8004f28:	2b50      	cmp	r3, #80	; 0x50
 8004f2a:	d873      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d058      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x136>
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d86f      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f34:	2b30      	cmp	r3, #48	; 0x30
 8004f36:	d064      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x156>
 8004f38:	2b30      	cmp	r3, #48	; 0x30
 8004f3a:	d86b      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d060      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x156>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d867      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d05c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x156>
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d05a      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f4c:	e062      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f000 fb5b 	bl	8005618 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	609a      	str	r2, [r3, #8]
      break;
 8004f7a:	e04e      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6899      	ldr	r1, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f000 fb44 	bl	8005618 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9e:	609a      	str	r2, [r3, #8]
      break;
 8004fa0:	e03b      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 fab8 	bl	8005524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2150      	movs	r1, #80	; 0x50
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fb11 	bl	80055e2 <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e02b      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f000 fad7 	bl	8005582 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2160      	movs	r1, #96	; 0x60
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fb01 	bl	80055e2 <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e01b      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f000 fa98 	bl	8005524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2140      	movs	r1, #64	; 0x40
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 faf1 	bl	80055e2 <TIM_ITRx_SetConfig>
      break;
 8005000:	e00b      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f000 fae8 	bl	80055e2 <TIM_ITRx_SetConfig>
        break;
 8005012:	e002      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005014:	bf00      	nop
 8005016:	e000      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005018:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a40      	ldr	r2, [pc, #256]	; (8005198 <TIM_Base_SetConfig+0x114>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d00f      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a3d      	ldr	r2, [pc, #244]	; (800519c <TIM_Base_SetConfig+0x118>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3c      	ldr	r2, [pc, #240]	; (80051a0 <TIM_Base_SetConfig+0x11c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3b      	ldr	r2, [pc, #236]	; (80051a4 <TIM_Base_SetConfig+0x120>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3a      	ldr	r2, [pc, #232]	; (80051a8 <TIM_Base_SetConfig+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d108      	bne.n	80050d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2f      	ldr	r2, [pc, #188]	; (8005198 <TIM_Base_SetConfig+0x114>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d02b      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e4:	d027      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2c      	ldr	r2, [pc, #176]	; (800519c <TIM_Base_SetConfig+0x118>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d023      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <TIM_Base_SetConfig+0x11c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01f      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <TIM_Base_SetConfig+0x120>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d01b      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <TIM_Base_SetConfig+0x124>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d017      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a28      	ldr	r2, [pc, #160]	; (80051ac <TIM_Base_SetConfig+0x128>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a27      	ldr	r2, [pc, #156]	; (80051b0 <TIM_Base_SetConfig+0x12c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a26      	ldr	r2, [pc, #152]	; (80051b4 <TIM_Base_SetConfig+0x130>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <TIM_Base_SetConfig+0x134>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a24      	ldr	r2, [pc, #144]	; (80051bc <TIM_Base_SetConfig+0x138>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a23      	ldr	r2, [pc, #140]	; (80051c0 <TIM_Base_SetConfig+0x13c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d108      	bne.n	8005148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <TIM_Base_SetConfig+0x114>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0xf8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <TIM_Base_SetConfig+0x124>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d103      	bne.n	8005184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	615a      	str	r2, [r3, #20]
}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40010400 	.word	0x40010400
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40014400 	.word	0x40014400
 80051b4:	40014800 	.word	0x40014800
 80051b8:	40001800 	.word	0x40001800
 80051bc:	40001c00 	.word	0x40001c00
 80051c0:	40002000 	.word	0x40002000

080051c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f023 0201 	bic.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f023 0302 	bic.w	r3, r3, #2
 800520c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a20      	ldr	r2, [pc, #128]	; (800529c <TIM_OC1_SetConfig+0xd8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <TIM_OC1_SetConfig+0x64>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <TIM_OC1_SetConfig+0xdc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d10c      	bne.n	8005242 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0308 	bic.w	r3, r3, #8
 800522e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f023 0304 	bic.w	r3, r3, #4
 8005240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <TIM_OC1_SetConfig+0xd8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_OC1_SetConfig+0x8e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <TIM_OC1_SetConfig+0xdc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d111      	bne.n	8005276 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	621a      	str	r2, [r3, #32]
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40010000 	.word	0x40010000
 80052a0:	40010400 	.word	0x40010400

080052a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0210 	bic.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0320 	bic.w	r3, r3, #32
 80052ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a22      	ldr	r2, [pc, #136]	; (8005388 <TIM_OC2_SetConfig+0xe4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_OC2_SetConfig+0x68>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a21      	ldr	r2, [pc, #132]	; (800538c <TIM_OC2_SetConfig+0xe8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d10d      	bne.n	8005328 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005326:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a17      	ldr	r2, [pc, #92]	; (8005388 <TIM_OC2_SetConfig+0xe4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_OC2_SetConfig+0x94>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a16      	ldr	r2, [pc, #88]	; (800538c <TIM_OC2_SetConfig+0xe8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d113      	bne.n	8005360 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800533e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40010000 	.word	0x40010000
 800538c:	40010400 	.word	0x40010400

08005390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a21      	ldr	r2, [pc, #132]	; (8005470 <TIM_OC3_SetConfig+0xe0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_OC3_SetConfig+0x66>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a20      	ldr	r2, [pc, #128]	; (8005474 <TIM_OC3_SetConfig+0xe4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10d      	bne.n	8005412 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a16      	ldr	r2, [pc, #88]	; (8005470 <TIM_OC3_SetConfig+0xe0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d003      	beq.n	8005422 <TIM_OC3_SetConfig+0x92>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <TIM_OC3_SetConfig+0xe4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d113      	bne.n	800544a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	40010000 	.word	0x40010000
 8005474:	40010400 	.word	0x40010400

08005478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	031b      	lsls	r3, r3, #12
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a12      	ldr	r2, [pc, #72]	; (800551c <TIM_OC4_SetConfig+0xa4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d003      	beq.n	80054e0 <TIM_OC4_SetConfig+0x68>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a11      	ldr	r2, [pc, #68]	; (8005520 <TIM_OC4_SetConfig+0xa8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d109      	bne.n	80054f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	019b      	lsls	r3, r3, #6
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40010000 	.word	0x40010000
 8005520:	40010400 	.word	0x40010400

08005524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f023 0201 	bic.w	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800554e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 030a 	bic.w	r3, r3, #10
 8005560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005582:	b480      	push	{r7}
 8005584:	b087      	sub	sp, #28
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f023 0210 	bic.w	r2, r3, #16
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	031b      	lsls	r3, r3, #12
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	f043 0307 	orr.w	r3, r3, #7
 8005604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	609a      	str	r2, [r3, #8]
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	021a      	lsls	r2, r3, #8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	431a      	orrs	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4313      	orrs	r3, r2
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	609a      	str	r2, [r3, #8]
}
 800564c:	bf00      	nop
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2201      	movs	r2, #1
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a1a      	ldr	r2, [r3, #32]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	43db      	mvns	r3, r3
 800567a:	401a      	ands	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1a      	ldr	r2, [r3, #32]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	fa01 f303 	lsl.w	r3, r1, r3
 8005690:	431a      	orrs	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e05a      	b.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a21      	ldr	r2, [pc, #132]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d01d      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1a      	ldr	r2, [pc, #104]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a17      	ldr	r2, [pc, #92]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a15      	ldr	r2, [pc, #84]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10c      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800574c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40010000 	.word	0x40010000
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40010400 	.word	0x40010400
 8005794:	40014000 	.word	0x40014000
 8005798:	40001800 	.word	0x40001800

0800579c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e03f      	b.n	8005856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fd fc40 	bl	8003070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	; 0x24
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fd1d 	bl	8006248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800581c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800582c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800583c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b08a      	sub	sp, #40	; 0x28
 8005862:	af02      	add	r7, sp, #8
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b20      	cmp	r3, #32
 800587c:	d17c      	bne.n	8005978 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_UART_Transmit+0x2c>
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e075      	b.n	800597a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_UART_Transmit+0x3e>
 8005898:	2302      	movs	r3, #2
 800589a:	e06e      	b.n	800597a <HAL_UART_Transmit+0x11c>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2221      	movs	r2, #33	; 0x21
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058b2:	f7fd fe03 	bl	80034bc <HAL_GetTick>
 80058b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058cc:	d108      	bne.n	80058e0 <HAL_UART_Transmit+0x82>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	e003      	b.n	80058e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058f0:	e02a      	b.n	8005948 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fadf 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e036      	b.n	800597a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	3302      	adds	r3, #2
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	e007      	b.n	800593a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	781a      	ldrb	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3301      	adds	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800593e:	b29b      	uxth	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1cf      	bne.n	80058f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	2140      	movs	r1, #64	; 0x40
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 faaf 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e006      	b.n	800597a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b08a      	sub	sp, #40	; 0x28
 8005986:	af02      	add	r7, sp, #8
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b20      	cmp	r3, #32
 80059a0:	f040 808c 	bne.w	8005abc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UART_Receive+0x2e>
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e084      	b.n	8005abe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Receive+0x40>
 80059be:	2302      	movs	r3, #2
 80059c0:	e07d      	b.n	8005abe <HAL_UART_Receive+0x13c>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2222      	movs	r2, #34	; 0x22
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059de:	f7fd fd6d 	bl	80034bc <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f8:	d108      	bne.n	8005a0c <HAL_UART_Receive+0x8a>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e003      	b.n	8005a14 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005a1c:	e043      	b.n	8005aa6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2120      	movs	r1, #32
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fa49 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e042      	b.n	8005abe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10c      	bne.n	8005a58 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	3302      	adds	r3, #2
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e01f      	b.n	8005a98 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a60:	d007      	beq.n	8005a72 <HAL_UART_Receive+0xf0>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <HAL_UART_Receive+0xfe>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e008      	b.n	8005a92 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	3301      	adds	r3, #1
 8005a96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1b6      	bne.n	8005a1e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e000      	b.n	8005abe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005abc:	2302      	movs	r3, #2
  }
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d11d      	bne.n	8005b1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_UART_Receive_IT+0x26>
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e016      	b.n	8005b1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Receive_IT+0x38>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e00f      	b.n	8005b1e <HAL_UART_Receive_IT+0x58>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fa1e 	bl	8005f54 <UART_Start_Receive_IT>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	e000      	b.n	8005b1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b1c:	2302      	movs	r3, #2
  }
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10d      	bne.n	8005b7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_UART_IRQHandler+0x52>
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fad1 	bl	800611a <UART_Receive_IT>
      return;
 8005b78:	e17c      	b.n	8005e74 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80b1 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x1bc>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d105      	bne.n	8005b98 <HAL_UART_IRQHandler+0x70>
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80a6 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x90>
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	f043 0201 	orr.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_UART_IRQHandler+0xb0>
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	f043 0202 	orr.w	r2, r3, #2
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_UART_IRQHandler+0xd0>
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	f043 0204 	orr.w	r2, r3, #4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00f      	beq.n	8005c22 <HAL_UART_IRQHandler+0xfa>
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_UART_IRQHandler+0xee>
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f043 0208 	orr.w	r2, r3, #8
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 811f 	beq.w	8005e6a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_UART_IRQHandler+0x11e>
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fa6a 	bl	800611a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	bf0c      	ite	eq
 8005c54:	2301      	moveq	r3, #1
 8005c56:	2300      	movne	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <HAL_UART_IRQHandler+0x146>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d031      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9aa 	bl	8005fc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d123      	bne.n	8005cca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d013      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	4a77      	ldr	r2, [pc, #476]	; (8005e7c <HAL_UART_IRQHandler+0x354>)
 8005ca0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fd fd66 	bl	8003778 <HAL_DMA_Abort_IT>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d016      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	e00e      	b.n	8005ce0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8e6 	bl	8005e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	e00a      	b.n	8005ce0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f8e2 	bl	8005e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd0:	e006      	b.n	8005ce0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f8de 	bl	8005e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cde:	e0c4      	b.n	8005e6a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	bf00      	nop
    return;
 8005ce2:	e0c2      	b.n	8005e6a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	f040 80a2 	bne.w	8005e32 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 809c 	beq.w	8005e32 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8096 	beq.w	8005e32 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b40      	cmp	r3, #64	; 0x40
 8005d28:	d14f      	bne.n	8005dca <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005d34:	8a3b      	ldrh	r3, [r7, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8099 	beq.w	8005e6e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d40:	8a3a      	ldrh	r2, [r7, #16]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	f080 8093 	bcs.w	8005e6e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8a3a      	ldrh	r2, [r7, #16]
 8005d4c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d58:	d02b      	beq.n	8005db2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d68:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d88:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0210 	bic.w	r2, r2, #16
 8005da6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fd fc73 	bl	8003698 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f870 	bl	8005ea8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dc8:	e051      	b.n	8005e6e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d047      	beq.n	8005e72 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005de2:	8a7b      	ldrh	r3, [r7, #18]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d044      	beq.n	8005e72 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005df6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0210 	bic.w	r2, r2, #16
 8005e24:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e26:	8a7b      	ldrh	r3, [r7, #18]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f83c 	bl	8005ea8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e30:	e01f      	b.n	8005e72 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_UART_IRQHandler+0x326>
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8ff 	bl	800604a <UART_Transmit_IT>
    return;
 8005e4c:	e012      	b.n	8005e74 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00d      	beq.n	8005e74 <HAL_UART_IRQHandler+0x34c>
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f941 	bl	80060ea <UART_EndTransmit_IT>
    return;
 8005e68:	e004      	b.n	8005e74 <HAL_UART_IRQHandler+0x34c>
    return;
 8005e6a:	bf00      	nop
 8005e6c:	e002      	b.n	8005e74 <HAL_UART_IRQHandler+0x34c>
      return;
 8005e6e:	bf00      	nop
 8005e70:	e000      	b.n	8005e74 <HAL_UART_IRQHandler+0x34c>
      return;
 8005e72:	bf00      	nop
  }
}
 8005e74:	3728      	adds	r7, #40	; 0x28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	08006023 	.word	0x08006023

08005e80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed0:	e02c      	b.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d028      	beq.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d007      	beq.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ee0:	f7fd faec 	bl	80034bc <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d21d      	bcs.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005efe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e00f      	b.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4013      	ands	r3, r2
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2301      	moveq	r3, #1
 8005f3e:	2300      	movne	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d0c3      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	88fa      	ldrh	r2, [r7, #6]
 8005f72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2222      	movs	r2, #34	; 0x22
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f98:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0220 	orr.w	r2, r2, #32
 8005fb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fde:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d107      	bne.n	8006008 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0210 	bic.w	r2, r2, #16
 8006006:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff ff29 	bl	8005e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b21      	cmp	r3, #33	; 0x21
 800605c:	d13e      	bne.n	80060dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006066:	d114      	bne.n	8006092 <UART_Transmit_IT+0x48>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d110      	bne.n	8006092 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006084:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	1c9a      	adds	r2, r3, #2
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	621a      	str	r2, [r3, #32]
 8006090:	e008      	b.n	80060a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	1c59      	adds	r1, r3, #1
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6211      	str	r1, [r2, #32]
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4619      	mov	r1, r3
 80060b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10f      	bne.n	80060d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	e000      	b.n	80060de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060dc:	2302      	movs	r3, #2
  }
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff feb8 	bl	8005e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b22      	cmp	r3, #34	; 0x22
 800612c:	f040 8087 	bne.w	800623e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006138:	d117      	bne.n	800616a <UART_Receive_IT+0x50>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d113      	bne.n	800616a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006158:	b29a      	uxth	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	1c9a      	adds	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	629a      	str	r2, [r3, #40]	; 0x28
 8006168:	e026      	b.n	80061b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617c:	d007      	beq.n	800618e <UART_Receive_IT+0x74>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <UART_Receive_IT+0x82>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	b2da      	uxtb	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e008      	b.n	80061ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4619      	mov	r1, r3
 80061c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d136      	bne.n	800623a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0220 	bic.w	r2, r2, #32
 80061da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695a      	ldr	r2, [r3, #20]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0201 	bic.w	r2, r2, #1
 80061fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	2b01      	cmp	r3, #1
 800620a:	d10e      	bne.n	800622a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0210 	bic.w	r2, r2, #16
 800621a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff fe40 	bl	8005ea8 <HAL_UARTEx_RxEventCallback>
 8006228:	e002      	b.n	8006230 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fb fe6c 	bl	8001f08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	e002      	b.n	8006240 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e000      	b.n	8006240 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800623e:	2302      	movs	r3, #2
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	b09f      	sub	sp, #124	; 0x7c
 800624e:	af00      	add	r7, sp, #0
 8006250:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800625c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625e:	68d9      	ldr	r1, [r3, #12]
 8006260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	ea40 0301 	orr.w	r3, r0, r1
 8006268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	431a      	orrs	r2, r3
 8006274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	431a      	orrs	r2, r3
 800627a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	4313      	orrs	r3, r2
 8006280:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800628c:	f021 010c 	bic.w	r1, r1, #12
 8006290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006296:	430b      	orrs	r3, r1
 8006298:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800629a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a6:	6999      	ldr	r1, [r3, #24]
 80062a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	ea40 0301 	orr.w	r3, r0, r1
 80062b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	4bc5      	ldr	r3, [pc, #788]	; (80065cc <UART_SetConfig+0x384>)
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d004      	beq.n	80062c6 <UART_SetConfig+0x7e>
 80062bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4bc3      	ldr	r3, [pc, #780]	; (80065d0 <UART_SetConfig+0x388>)
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d103      	bne.n	80062ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062c6:	f7fe f8b5 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 80062ca:	6778      	str	r0, [r7, #116]	; 0x74
 80062cc:	e002      	b.n	80062d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062ce:	f7fe f89d 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 80062d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062dc:	f040 80b6 	bne.w	800644c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e2:	461c      	mov	r4, r3
 80062e4:	f04f 0500 	mov.w	r5, #0
 80062e8:	4622      	mov	r2, r4
 80062ea:	462b      	mov	r3, r5
 80062ec:	1891      	adds	r1, r2, r2
 80062ee:	6439      	str	r1, [r7, #64]	; 0x40
 80062f0:	415b      	adcs	r3, r3
 80062f2:	647b      	str	r3, [r7, #68]	; 0x44
 80062f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062f8:	1912      	adds	r2, r2, r4
 80062fa:	eb45 0303 	adc.w	r3, r5, r3
 80062fe:	f04f 0000 	mov.w	r0, #0
 8006302:	f04f 0100 	mov.w	r1, #0
 8006306:	00d9      	lsls	r1, r3, #3
 8006308:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800630c:	00d0      	lsls	r0, r2, #3
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	1911      	adds	r1, r2, r4
 8006314:	6639      	str	r1, [r7, #96]	; 0x60
 8006316:	416b      	adcs	r3, r5
 8006318:	667b      	str	r3, [r7, #100]	; 0x64
 800631a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	461a      	mov	r2, r3
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	1891      	adds	r1, r2, r2
 8006326:	63b9      	str	r1, [r7, #56]	; 0x38
 8006328:	415b      	adcs	r3, r3
 800632a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800632c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006330:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006334:	f7fa fb6a 	bl	8000a0c <__aeabi_uldivmod>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4ba5      	ldr	r3, [pc, #660]	; (80065d4 <UART_SetConfig+0x38c>)
 800633e:	fba3 2302 	umull	r2, r3, r3, r2
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	011e      	lsls	r6, r3, #4
 8006346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006348:	461c      	mov	r4, r3
 800634a:	f04f 0500 	mov.w	r5, #0
 800634e:	4622      	mov	r2, r4
 8006350:	462b      	mov	r3, r5
 8006352:	1891      	adds	r1, r2, r2
 8006354:	6339      	str	r1, [r7, #48]	; 0x30
 8006356:	415b      	adcs	r3, r3
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
 800635a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800635e:	1912      	adds	r2, r2, r4
 8006360:	eb45 0303 	adc.w	r3, r5, r3
 8006364:	f04f 0000 	mov.w	r0, #0
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	00d9      	lsls	r1, r3, #3
 800636e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006372:	00d0      	lsls	r0, r2, #3
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	1911      	adds	r1, r2, r4
 800637a:	65b9      	str	r1, [r7, #88]	; 0x58
 800637c:	416b      	adcs	r3, r5
 800637e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	461a      	mov	r2, r3
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	1891      	adds	r1, r2, r2
 800638c:	62b9      	str	r1, [r7, #40]	; 0x28
 800638e:	415b      	adcs	r3, r3
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006396:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800639a:	f7fa fb37 	bl	8000a0c <__aeabi_uldivmod>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4b8c      	ldr	r3, [pc, #560]	; (80065d4 <UART_SetConfig+0x38c>)
 80063a4:	fba3 1302 	umull	r1, r3, r3, r2
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	2164      	movs	r1, #100	; 0x64
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	3332      	adds	r3, #50	; 0x32
 80063b6:	4a87      	ldr	r2, [pc, #540]	; (80065d4 <UART_SetConfig+0x38c>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063c4:	441e      	add	r6, r3
 80063c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c8:	4618      	mov	r0, r3
 80063ca:	f04f 0100 	mov.w	r1, #0
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	1894      	adds	r4, r2, r2
 80063d4:	623c      	str	r4, [r7, #32]
 80063d6:	415b      	adcs	r3, r3
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
 80063da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063de:	1812      	adds	r2, r2, r0
 80063e0:	eb41 0303 	adc.w	r3, r1, r3
 80063e4:	f04f 0400 	mov.w	r4, #0
 80063e8:	f04f 0500 	mov.w	r5, #0
 80063ec:	00dd      	lsls	r5, r3, #3
 80063ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063f2:	00d4      	lsls	r4, r2, #3
 80063f4:	4622      	mov	r2, r4
 80063f6:	462b      	mov	r3, r5
 80063f8:	1814      	adds	r4, r2, r0
 80063fa:	653c      	str	r4, [r7, #80]	; 0x50
 80063fc:	414b      	adcs	r3, r1
 80063fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	461a      	mov	r2, r3
 8006406:	f04f 0300 	mov.w	r3, #0
 800640a:	1891      	adds	r1, r2, r2
 800640c:	61b9      	str	r1, [r7, #24]
 800640e:	415b      	adcs	r3, r3
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006416:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800641a:	f7fa faf7 	bl	8000a0c <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4b6c      	ldr	r3, [pc, #432]	; (80065d4 <UART_SetConfig+0x38c>)
 8006424:	fba3 1302 	umull	r1, r3, r3, r2
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	2164      	movs	r1, #100	; 0x64
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	3332      	adds	r3, #50	; 0x32
 8006436:	4a67      	ldr	r2, [pc, #412]	; (80065d4 <UART_SetConfig+0x38c>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f003 0207 	and.w	r2, r3, #7
 8006442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4432      	add	r2, r6
 8006448:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800644a:	e0b9      	b.n	80065c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800644c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800644e:	461c      	mov	r4, r3
 8006450:	f04f 0500 	mov.w	r5, #0
 8006454:	4622      	mov	r2, r4
 8006456:	462b      	mov	r3, r5
 8006458:	1891      	adds	r1, r2, r2
 800645a:	6139      	str	r1, [r7, #16]
 800645c:	415b      	adcs	r3, r3
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006464:	1912      	adds	r2, r2, r4
 8006466:	eb45 0303 	adc.w	r3, r5, r3
 800646a:	f04f 0000 	mov.w	r0, #0
 800646e:	f04f 0100 	mov.w	r1, #0
 8006472:	00d9      	lsls	r1, r3, #3
 8006474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006478:	00d0      	lsls	r0, r2, #3
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	eb12 0804 	adds.w	r8, r2, r4
 8006482:	eb43 0905 	adc.w	r9, r3, r5
 8006486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	4618      	mov	r0, r3
 800648c:	f04f 0100 	mov.w	r1, #0
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	008b      	lsls	r3, r1, #2
 800649a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800649e:	0082      	lsls	r2, r0, #2
 80064a0:	4640      	mov	r0, r8
 80064a2:	4649      	mov	r1, r9
 80064a4:	f7fa fab2 	bl	8000a0c <__aeabi_uldivmod>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4b49      	ldr	r3, [pc, #292]	; (80065d4 <UART_SetConfig+0x38c>)
 80064ae:	fba3 2302 	umull	r2, r3, r3, r2
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	011e      	lsls	r6, r3, #4
 80064b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b8:	4618      	mov	r0, r3
 80064ba:	f04f 0100 	mov.w	r1, #0
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	1894      	adds	r4, r2, r2
 80064c4:	60bc      	str	r4, [r7, #8]
 80064c6:	415b      	adcs	r3, r3
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064ce:	1812      	adds	r2, r2, r0
 80064d0:	eb41 0303 	adc.w	r3, r1, r3
 80064d4:	f04f 0400 	mov.w	r4, #0
 80064d8:	f04f 0500 	mov.w	r5, #0
 80064dc:	00dd      	lsls	r5, r3, #3
 80064de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064e2:	00d4      	lsls	r4, r2, #3
 80064e4:	4622      	mov	r2, r4
 80064e6:	462b      	mov	r3, r5
 80064e8:	1814      	adds	r4, r2, r0
 80064ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80064ec:	414b      	adcs	r3, r1
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f04f 0100 	mov.w	r1, #0
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	f04f 0300 	mov.w	r3, #0
 8006502:	008b      	lsls	r3, r1, #2
 8006504:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006508:	0082      	lsls	r2, r0, #2
 800650a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800650e:	f7fa fa7d 	bl	8000a0c <__aeabi_uldivmod>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4b2f      	ldr	r3, [pc, #188]	; (80065d4 <UART_SetConfig+0x38c>)
 8006518:	fba3 1302 	umull	r1, r3, r3, r2
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	2164      	movs	r1, #100	; 0x64
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	3332      	adds	r3, #50	; 0x32
 800652a:	4a2a      	ldr	r2, [pc, #168]	; (80065d4 <UART_SetConfig+0x38c>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006536:	441e      	add	r6, r3
 8006538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800653a:	4618      	mov	r0, r3
 800653c:	f04f 0100 	mov.w	r1, #0
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	1894      	adds	r4, r2, r2
 8006546:	603c      	str	r4, [r7, #0]
 8006548:	415b      	adcs	r3, r3
 800654a:	607b      	str	r3, [r7, #4]
 800654c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006550:	1812      	adds	r2, r2, r0
 8006552:	eb41 0303 	adc.w	r3, r1, r3
 8006556:	f04f 0400 	mov.w	r4, #0
 800655a:	f04f 0500 	mov.w	r5, #0
 800655e:	00dd      	lsls	r5, r3, #3
 8006560:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006564:	00d4      	lsls	r4, r2, #3
 8006566:	4622      	mov	r2, r4
 8006568:	462b      	mov	r3, r5
 800656a:	eb12 0a00 	adds.w	sl, r2, r0
 800656e:	eb43 0b01 	adc.w	fp, r3, r1
 8006572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4618      	mov	r0, r3
 8006578:	f04f 0100 	mov.w	r1, #0
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	008b      	lsls	r3, r1, #2
 8006586:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800658a:	0082      	lsls	r2, r0, #2
 800658c:	4650      	mov	r0, sl
 800658e:	4659      	mov	r1, fp
 8006590:	f7fa fa3c 	bl	8000a0c <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <UART_SetConfig+0x38c>)
 800659a:	fba3 1302 	umull	r1, r3, r3, r2
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	2164      	movs	r1, #100	; 0x64
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	3332      	adds	r3, #50	; 0x32
 80065ac:	4a09      	ldr	r2, [pc, #36]	; (80065d4 <UART_SetConfig+0x38c>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	f003 020f 	and.w	r2, r3, #15
 80065b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4432      	add	r2, r6
 80065be:	609a      	str	r2, [r3, #8]
}
 80065c0:	bf00      	nop
 80065c2:	377c      	adds	r7, #124	; 0x7c
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ca:	bf00      	nop
 80065cc:	40011000 	.word	0x40011000
 80065d0:	40011400 	.word	0x40011400
 80065d4:	51eb851f 	.word	0x51eb851f

080065d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80065e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065ea:	2b84      	cmp	r3, #132	; 0x84
 80065ec:	d005      	beq.n	80065fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80065ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	3303      	adds	r3, #3
 80065f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80065fa:	68fb      	ldr	r3, [r7, #12]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	607b      	str	r3, [r7, #4]
  return(result);
 8006614:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf14      	ite	ne
 800661a:	2301      	movne	r3, #1
 800661c:	2300      	moveq	r3, #0
 800661e:	b2db      	uxtb	r3, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006630:	f001 fb1e 	bl	8007c70 <vTaskStartScheduler>
  
  return osOK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	bd80      	pop	{r7, pc}

0800663a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800663e:	f7ff ffe3 	bl	8006608 <inHandlerMode>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006648:	f001 fc2c 	bl	8007ea4 <xTaskGetTickCountFromISR>
 800664c:	4603      	mov	r3, r0
 800664e:	e002      	b.n	8006656 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006650:	f001 fc18 	bl	8007e84 <xTaskGetTickCount>
 8006654:	4603      	mov	r3, r0
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	bd80      	pop	{r7, pc}

0800665a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800665a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665c:	b089      	sub	sp, #36	; 0x24
 800665e:	af04      	add	r7, sp, #16
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d020      	beq.n	80066ae <osThreadCreate+0x54>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01c      	beq.n	80066ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685c      	ldr	r4, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681d      	ldr	r5, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691e      	ldr	r6, [r3, #16]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff ffa6 	bl	80065d8 <makeFreeRtosPriority>
 800668c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006696:	9202      	str	r2, [sp, #8]
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	9100      	str	r1, [sp, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	4632      	mov	r2, r6
 80066a0:	4629      	mov	r1, r5
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 ff20 	bl	80074e8 <xTaskCreateStatic>
 80066a8:	4603      	mov	r3, r0
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e01c      	b.n	80066e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685c      	ldr	r4, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ba:	b29e      	uxth	r6, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff ff88 	bl	80065d8 <makeFreeRtosPriority>
 80066c8:	4602      	mov	r2, r0
 80066ca:	f107 030c 	add.w	r3, r7, #12
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	9200      	str	r2, [sp, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	4632      	mov	r2, r6
 80066d6:	4629      	mov	r1, r5
 80066d8:	4620      	mov	r0, r4
 80066da:	f000 ff62 	bl	80075a2 <xTaskCreate>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d001      	beq.n	80066e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e000      	b.n	80066ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80066e8:	68fb      	ldr	r3, [r7, #12]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066f2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af02      	add	r7, sp, #8
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00f      	beq.n	8006724 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d10a      	bne.n	8006720 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2203      	movs	r2, #3
 8006710:	9200      	str	r2, [sp, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	2100      	movs	r1, #0
 8006716:	2001      	movs	r0, #1
 8006718:	f000 f9d4 	bl	8006ac4 <xQueueGenericCreateStatic>
 800671c:	4603      	mov	r3, r0
 800671e:	e016      	b.n	800674e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	e014      	b.n	800674e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d110      	bne.n	800674c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800672a:	2203      	movs	r2, #3
 800672c:	2100      	movs	r1, #0
 800672e:	2001      	movs	r0, #1
 8006730:	f000 fa40 	bl	8006bb4 <xQueueGenericCreate>
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <osSemaphoreCreate+0x56>
 800673c:	2300      	movs	r3, #0
 800673e:	2200      	movs	r2, #0
 8006740:	2100      	movs	r1, #0
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fa90 	bl	8006c68 <xQueueGenericSend>
      return sema;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	e000      	b.n	800674e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800674c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006762:	2300      	movs	r3, #0
 8006764:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800676c:	2380      	movs	r3, #128	; 0x80
 800676e:	e03a      	b.n	80067e6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d103      	bne.n	8006784 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800677c:	f04f 33ff 	mov.w	r3, #4294967295
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	e009      	b.n	8006798 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d006      	beq.n	8006798 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <osSemaphoreWait+0x40>
      ticks = 1;
 8006794:	2301      	movs	r3, #1
 8006796:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006798:	f7ff ff36 	bl	8006608 <inHandlerMode>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80067a2:	f107 0308 	add.w	r3, r7, #8
 80067a6:	461a      	mov	r2, r3
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fcf4 	bl	8007198 <xQueueReceiveFromISR>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d001      	beq.n	80067ba <osSemaphoreWait+0x62>
      return osErrorOS;
 80067b6:	23ff      	movs	r3, #255	; 0xff
 80067b8:	e015      	b.n	80067e6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d011      	beq.n	80067e4 <osSemaphoreWait+0x8c>
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <osSemaphoreWait+0x98>)
 80067c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	e008      	b.n	80067e4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fbd3 	bl	8006f80 <xQueueSemaphoreTake>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d001      	beq.n	80067e4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80067e0:	23ff      	movs	r3, #255	; 0xff
 80067e2:	e000      	b.n	80067e6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006800:	2300      	movs	r3, #0
 8006802:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006804:	f7ff ff00 	bl	8006608 <inHandlerMode>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d016      	beq.n	800683c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800680e:	f107 0308 	add.w	r3, r7, #8
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb25 	bl	8006e64 <xQueueGiveFromISR>
 800681a:	4603      	mov	r3, r0
 800681c:	2b01      	cmp	r3, #1
 800681e:	d001      	beq.n	8006824 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006820:	23ff      	movs	r3, #255	; 0xff
 8006822:	e017      	b.n	8006854 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d013      	beq.n	8006852 <osSemaphoreRelease+0x5e>
 800682a:	4b0c      	ldr	r3, [pc, #48]	; (800685c <osSemaphoreRelease+0x68>)
 800682c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	e00a      	b.n	8006852 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800683c:	2300      	movs	r3, #0
 800683e:	2200      	movs	r2, #0
 8006840:	2100      	movs	r1, #0
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa10 	bl	8006c68 <xQueueGenericSend>
 8006848:	4603      	mov	r3, r0
 800684a:	2b01      	cmp	r3, #1
 800684c:	d001      	beq.n	8006852 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800684e:	23ff      	movs	r3, #255	; 0xff
 8006850:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006852:	68fb      	ldr	r3, [r7, #12]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <osDelayUntil+0x18>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	e000      	b.n	800687a <osDelayUntil+0x1a>
 8006878:	2301      	movs	r3, #1
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 f857 	bl	8007930 <vTaskDelayUntil>
  
  return osOK;
 8006882:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f103 0208 	add.w	r2, r3, #8
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f103 0208 	add.w	r2, r3, #8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f103 0208 	add.w	r2, r3, #8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	601a      	str	r2, [r3, #0]
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006944:	d103      	bne.n	800694e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	e00c      	b.n	8006968 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3308      	adds	r3, #8
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e002      	b.n	800695c <vListInsert+0x2e>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	429a      	cmp	r2, r3
 8006966:	d2f6      	bcs.n	8006956 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6892      	ldr	r2, [r2, #8]
 80069b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6852      	ldr	r2, [r2, #4]
 80069c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d103      	bne.n	80069d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	1e5a      	subs	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a1a:	bf00      	nop
 8006a1c:	e7fe      	b.n	8006a1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a1e:	f002 f899 	bl	8008b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	441a      	add	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	68f9      	ldr	r1, [r7, #12]
 8006a52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	441a      	add	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	22ff      	movs	r2, #255	; 0xff
 8006a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	22ff      	movs	r2, #255	; 0xff
 8006a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d114      	bne.n	8006a9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01a      	beq.n	8006ab2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3310      	adds	r3, #16
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 fb59 	bl	8008138 <xTaskRemoveFromEventList>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d012      	beq.n	8006ab2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <xQueueGenericReset+0xcc>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	e009      	b.n	8006ab2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3310      	adds	r3, #16
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff fef2 	bl	800688c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff feed 	bl	800688c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ab2:	f002 f87f 	bl	8008bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ab6:	2301      	movs	r3, #1
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08e      	sub	sp, #56	; 0x38
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <xQueueGenericCreateStatic+0x52>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <xQueueGenericCreateStatic+0x56>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <xQueueGenericCreateStatic+0x58>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	623b      	str	r3, [r7, #32]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d102      	bne.n	8006b42 <xQueueGenericCreateStatic+0x7e>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <xQueueGenericCreateStatic+0x82>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <xQueueGenericCreateStatic+0x84>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	61fb      	str	r3, [r7, #28]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b62:	2348      	movs	r3, #72	; 0x48
 8006b64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2b48      	cmp	r3, #72	; 0x48
 8006b6a:	d00a      	beq.n	8006b82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	61bb      	str	r3, [r7, #24]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00d      	beq.n	8006baa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f83f 	bl	8006c28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3730      	adds	r7, #48	; 0x30
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xQueueGenericCreate+0x2a>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	613b      	str	r3, [r7, #16]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3348      	adds	r3, #72	; 0x48
 8006bec:	4618      	mov	r0, r3
 8006bee:	f002 f8d3 	bl	8008d98 <pvPortMalloc>
 8006bf2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d011      	beq.n	8006c1e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	3348      	adds	r3, #72	; 0x48
 8006c02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c0c:	79fa      	ldrb	r2, [r7, #7]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4613      	mov	r3, r2
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f805 	bl	8006c28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d103      	bne.n	8006c44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	e002      	b.n	8006c4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c56:	2101      	movs	r1, #1
 8006c58:	69b8      	ldr	r0, [r7, #24]
 8006c5a:	f7ff fecb 	bl	80069f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c5e:	bf00      	nop
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08e      	sub	sp, #56	; 0x38
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c76:	2300      	movs	r3, #0
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueGenericSend+0x32>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d103      	bne.n	8006ca8 <xQueueGenericSend+0x40>
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <xQueueGenericSend+0x44>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <xQueueGenericSend+0x46>
 8006cac:	2300      	movs	r3, #0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <xQueueGenericSend+0x60>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d103      	bne.n	8006cd6 <xQueueGenericSend+0x6e>
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <xQueueGenericSend+0x72>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <xQueueGenericSend+0x74>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	623b      	str	r3, [r7, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf6:	f001 fbdb 	bl	80084b0 <xTaskGetSchedulerState>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <xQueueGenericSend+0x9e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <xQueueGenericSend+0xa2>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <xQueueGenericSend+0xa4>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xQueueGenericSend+0xbe>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	61fb      	str	r3, [r7, #28]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d26:	f001 ff15 	bl	8008b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <xQueueGenericSend+0xd4>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d129      	bne.n	8006d90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d42:	f000 fac1 	bl	80072c8 <prvCopyDataToQueue>
 8006d46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	3324      	adds	r3, #36	; 0x24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 f9ef 	bl	8008138 <xTaskRemoveFromEventList>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d013      	beq.n	8006d88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d60:	4b3f      	ldr	r3, [pc, #252]	; (8006e60 <xQueueGenericSend+0x1f8>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	e00a      	b.n	8006d88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d78:	4b39      	ldr	r3, [pc, #228]	; (8006e60 <xQueueGenericSend+0x1f8>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d88:	f001 ff14 	bl	8008bb4 <vPortExitCritical>
				return pdPASS;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e063      	b.n	8006e58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d96:	f001 ff0d 	bl	8008bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e05c      	b.n	8006e58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 fa27 	bl	80081fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dae:	2301      	movs	r3, #1
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db2:	f001 feff 	bl	8008bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006db6:	f000 ffbb 	bl	8007d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dba:	f001 fecb 	bl	8008b54 <vPortEnterCritical>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dc4:	b25b      	sxtb	r3, r3
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dca:	d103      	bne.n	8006dd4 <xQueueGenericSend+0x16c>
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dda:	b25b      	sxtb	r3, r3
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d103      	bne.n	8006dea <xQueueGenericSend+0x182>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dea:	f001 fee3 	bl	8008bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dee:	1d3a      	adds	r2, r7, #4
 8006df0:	f107 0314 	add.w	r3, r7, #20
 8006df4:	4611      	mov	r1, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 fa16 	bl	8008228 <xTaskCheckForTimeOut>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d124      	bne.n	8006e4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e04:	f000 fb58 	bl	80074b8 <prvIsQueueFull>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d018      	beq.n	8006e40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	3310      	adds	r3, #16
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 f96a 	bl	80080f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e1e:	f000 fae3 	bl	80073e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e22:	f000 ff93 	bl	8007d4c <xTaskResumeAll>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f47f af7c 	bne.w	8006d26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <xQueueGenericSend+0x1f8>)
 8006e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	e772      	b.n	8006d26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e42:	f000 fad1 	bl	80073e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e46:	f000 ff81 	bl	8007d4c <xTaskResumeAll>
 8006e4a:	e76c      	b.n	8006d26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e4e:	f000 facb 	bl	80073e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e52:	f000 ff7b 	bl	8007d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3738      	adds	r7, #56	; 0x38
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08e      	sub	sp, #56	; 0x38
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	623b      	str	r3, [r7, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <xQueueGiveFromISR+0x48>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	61fb      	str	r3, [r7, #28]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <xQueueGiveFromISR+0x58>
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <xQueueGiveFromISR+0x5c>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <xQueueGiveFromISR+0x5e>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <xQueueGiveFromISR+0x78>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	61bb      	str	r3, [r7, #24]
}
 8006ed8:	bf00      	nop
 8006eda:	e7fe      	b.n	8006eda <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006edc:	f001 ff1c 	bl	8008d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ee0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	617a      	str	r2, [r7, #20]
 8006ef6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ef8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d22b      	bcs.n	8006f64 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d112      	bne.n	8006f4e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d016      	beq.n	8006f5e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f8ff 	bl	8008138 <xTaskRemoveFromEventList>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00e      	beq.n	8006f5e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e007      	b.n	8006f5e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f52:	3301      	adds	r3, #1
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	b25a      	sxtb	r2, r3
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
 8006f62:	e001      	b.n	8006f68 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	637b      	str	r3, [r7, #52]	; 0x34
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3738      	adds	r7, #56	; 0x38
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08e      	sub	sp, #56	; 0x38
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	623b      	str	r3, [r7, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	61fb      	str	r3, [r7, #28]
}
 8006fcc:	bf00      	nop
 8006fce:	e7fe      	b.n	8006fce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fd0:	f001 fa6e 	bl	80084b0 <xTaskGetSchedulerState>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <xQueueSemaphoreTake+0x60>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <xQueueSemaphoreTake+0x64>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <xQueueSemaphoreTake+0x66>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	61bb      	str	r3, [r7, #24]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007000:	f001 fda8 	bl	8008b54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	2b00      	cmp	r3, #0
 800700e:	d024      	beq.n	800705a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	1e5a      	subs	r2, r3, #1
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007020:	f001 fbee 	bl	8008800 <pvTaskIncrementMutexHeldCount>
 8007024:	4602      	mov	r2, r0
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00f      	beq.n	8007052 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	3310      	adds	r3, #16
 8007036:	4618      	mov	r0, r3
 8007038:	f001 f87e 	bl	8008138 <xTaskRemoveFromEventList>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007042:	4b54      	ldr	r3, [pc, #336]	; (8007194 <xQueueSemaphoreTake+0x214>)
 8007044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007052:	f001 fdaf 	bl	8008bb4 <vPortExitCritical>
				return pdPASS;
 8007056:	2301      	movs	r3, #1
 8007058:	e097      	b.n	800718a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d111      	bne.n	8007084 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	617b      	str	r3, [r7, #20]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800707c:	f001 fd9a 	bl	8008bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007080:	2300      	movs	r3, #0
 8007082:	e082      	b.n	800718a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800708a:	f107 030c 	add.w	r3, r7, #12
 800708e:	4618      	mov	r0, r3
 8007090:	f001 f8b4 	bl	80081fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007098:	f001 fd8c 	bl	8008bb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800709c:	f000 fe48 	bl	8007d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070a0:	f001 fd58 	bl	8008b54 <vPortEnterCritical>
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070aa:	b25b      	sxtb	r3, r3
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d103      	bne.n	80070ba <xQueueSemaphoreTake+0x13a>
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c0:	b25b      	sxtb	r3, r3
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d103      	bne.n	80070d0 <xQueueSemaphoreTake+0x150>
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d0:	f001 fd70 	bl	8008bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070d4:	463a      	mov	r2, r7
 80070d6:	f107 030c 	add.w	r3, r7, #12
 80070da:	4611      	mov	r1, r2
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 f8a3 	bl	8008228 <xTaskCheckForTimeOut>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d132      	bne.n	800714e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ea:	f000 f9cf 	bl	800748c <prvIsQueueEmpty>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d026      	beq.n	8007142 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d109      	bne.n	8007110 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80070fc:	f001 fd2a 	bl	8008b54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	4618      	mov	r0, r3
 8007106:	f001 f9f1 	bl	80084ec <xTaskPriorityInherit>
 800710a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800710c:	f001 fd52 	bl	8008bb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	3324      	adds	r3, #36	; 0x24
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f000 ffe9 	bl	80080f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800711e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007120:	f000 f962 	bl	80073e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007124:	f000 fe12 	bl	8007d4c <xTaskResumeAll>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	f47f af68 	bne.w	8007000 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007130:	4b18      	ldr	r3, [pc, #96]	; (8007194 <xQueueSemaphoreTake+0x214>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	e75e      	b.n	8007000 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007144:	f000 f950 	bl	80073e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007148:	f000 fe00 	bl	8007d4c <xTaskResumeAll>
 800714c:	e758      	b.n	8007000 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800714e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007150:	f000 f94a 	bl	80073e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007154:	f000 fdfa 	bl	8007d4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800715a:	f000 f997 	bl	800748c <prvIsQueueEmpty>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	f43f af4d 	beq.w	8007000 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00d      	beq.n	8007188 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800716c:	f001 fcf2 	bl	8008b54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007172:	f000 f891 	bl	8007298 <prvGetDisinheritPriorityAfterTimeout>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800717e:	4618      	mov	r0, r3
 8007180:	f001 fab0 	bl	80086e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007184:	f001 fd16 	bl	8008bb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800718a:	4618      	mov	r0, r3
 800718c:	3738      	adds	r7, #56	; 0x38
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08e      	sub	sp, #56	; 0x38
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	623b      	str	r3, [r7, #32]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d103      	bne.n	80071d2 <xQueueReceiveFromISR+0x3a>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <xQueueReceiveFromISR+0x3e>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <xQueueReceiveFromISR+0x40>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61fb      	str	r3, [r7, #28]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071f2:	f001 fd91 	bl	8008d18 <vPortValidateInterruptPriority>
	__asm volatile
 80071f6:	f3ef 8211 	mrs	r2, BASEPRI
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	61ba      	str	r2, [r7, #24]
 800720c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800720e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	2b00      	cmp	r3, #0
 800721c:	d02f      	beq.n	800727e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800722c:	f000 f8b6 	bl	800739c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	1e5a      	subs	r2, r3, #1
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007240:	d112      	bne.n	8007268 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	3310      	adds	r3, #16
 800724e:	4618      	mov	r0, r3
 8007250:	f000 ff72 	bl	8008138 <xTaskRemoveFromEventList>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00e      	beq.n	8007278 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e007      	b.n	8007278 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800726c:	3301      	adds	r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	b25a      	sxtb	r2, r3
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007278:	2301      	movs	r3, #1
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
 800727c:	e001      	b.n	8007282 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800727e:	2300      	movs	r3, #0
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f383 8811 	msr	BASEPRI, r3
}
 800728c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007290:	4618      	mov	r0, r3
 8007292:	3738      	adds	r7, #56	; 0x38
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d006      	beq.n	80072b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f1c3 0307 	rsb	r3, r3, #7
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	e001      	b.n	80072ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80072ba:	68fb      	ldr	r3, [r7, #12]
	}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10d      	bne.n	8007302 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d14d      	bne.n	800738a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f001 f970 	bl	80085d8 <xTaskPriorityDisinherit>
 80072f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	609a      	str	r2, [r3, #8]
 8007300:	e043      	b.n	800738a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d119      	bne.n	800733c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6858      	ldr	r0, [r3, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	461a      	mov	r2, r3
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	f001 ff4e 	bl	80091b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	441a      	add	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	429a      	cmp	r2, r3
 8007330:	d32b      	bcc.n	800738a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	605a      	str	r2, [r3, #4]
 800733a:	e026      	b.n	800738a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68d8      	ldr	r0, [r3, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	461a      	mov	r2, r3
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	f001 ff34 	bl	80091b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	425b      	negs	r3, r3
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d207      	bcs.n	8007378 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	425b      	negs	r3, r3
 8007372:	441a      	add	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d105      	bne.n	800738a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	3b01      	subs	r3, #1
 8007388:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007392:	697b      	ldr	r3, [r7, #20]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d018      	beq.n	80073e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	441a      	add	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68da      	ldr	r2, [r3, #12]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d303      	bcc.n	80073d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68d9      	ldr	r1, [r3, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	461a      	mov	r2, r3
 80073da:	6838      	ldr	r0, [r7, #0]
 80073dc:	f001 feea 	bl	80091b4 <memcpy>
	}
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073f0:	f001 fbb0 	bl	8008b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073fc:	e011      	b.n	8007422 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	2b00      	cmp	r3, #0
 8007404:	d012      	beq.n	800742c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3324      	adds	r3, #36	; 0x24
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fe94 	bl	8008138 <xTaskRemoveFromEventList>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007416:	f000 ff69 	bl	80082ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	3b01      	subs	r3, #1
 800741e:	b2db      	uxtb	r3, r3
 8007420:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	dce9      	bgt.n	80073fe <prvUnlockQueue+0x16>
 800742a:	e000      	b.n	800742e <prvUnlockQueue+0x46>
					break;
 800742c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	22ff      	movs	r2, #255	; 0xff
 8007432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007436:	f001 fbbd 	bl	8008bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800743a:	f001 fb8b 	bl	8008b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007444:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007446:	e011      	b.n	800746c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d012      	beq.n	8007476 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3310      	adds	r3, #16
 8007454:	4618      	mov	r0, r3
 8007456:	f000 fe6f 	bl	8008138 <xTaskRemoveFromEventList>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007460:	f000 ff44 	bl	80082ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	3b01      	subs	r3, #1
 8007468:	b2db      	uxtb	r3, r3
 800746a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800746c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007470:	2b00      	cmp	r3, #0
 8007472:	dce9      	bgt.n	8007448 <prvUnlockQueue+0x60>
 8007474:	e000      	b.n	8007478 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007476:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	22ff      	movs	r2, #255	; 0xff
 800747c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007480:	f001 fb98 	bl	8008bb4 <vPortExitCritical>
}
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007494:	f001 fb5e 	bl	8008b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	2b00      	cmp	r3, #0
 800749e:	d102      	bne.n	80074a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074a0:	2301      	movs	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e001      	b.n	80074aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074aa:	f001 fb83 	bl	8008bb4 <vPortExitCritical>

	return xReturn;
 80074ae:	68fb      	ldr	r3, [r7, #12]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074c0:	f001 fb48 	bl	8008b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d102      	bne.n	80074d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e001      	b.n	80074da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074da:	f001 fb6b 	bl	8008bb4 <vPortExitCritical>

	return xReturn;
 80074de:	68fb      	ldr	r3, [r7, #12]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08e      	sub	sp, #56	; 0x38
 80074ec:	af04      	add	r7, sp, #16
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <xTaskCreateStatic+0x2a>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	623b      	str	r3, [r7, #32]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <xTaskCreateStatic+0x46>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	61fb      	str	r3, [r7, #28]
}
 800752a:	bf00      	nop
 800752c:	e7fe      	b.n	800752c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800752e:	2354      	movs	r3, #84	; 0x54
 8007530:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b54      	cmp	r3, #84	; 0x54
 8007536:	d00a      	beq.n	800754e <xTaskCreateStatic+0x66>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	61bb      	str	r3, [r7, #24]
}
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800754e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	2b00      	cmp	r3, #0
 8007554:	d01e      	beq.n	8007594 <xTaskCreateStatic+0xac>
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01b      	beq.n	8007594 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007564:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	2202      	movs	r2, #2
 800756a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800756e:	2300      	movs	r3, #0
 8007570:	9303      	str	r3, [sp, #12]
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	9302      	str	r3, [sp, #8]
 8007576:	f107 0314 	add.w	r3, r7, #20
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f850 	bl	800762c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800758c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800758e:	f000 f8d5 	bl	800773c <prvAddNewTaskToReadyList>
 8007592:	e001      	b.n	8007598 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007598:	697b      	ldr	r3, [r7, #20]
	}
 800759a:	4618      	mov	r0, r3
 800759c:	3728      	adds	r7, #40	; 0x28
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b08c      	sub	sp, #48	; 0x30
 80075a6:	af04      	add	r7, sp, #16
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	603b      	str	r3, [r7, #0]
 80075ae:	4613      	mov	r3, r2
 80075b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 fbee 	bl	8008d98 <pvPortMalloc>
 80075bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00e      	beq.n	80075e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075c4:	2054      	movs	r0, #84	; 0x54
 80075c6:	f001 fbe7 	bl	8008d98 <pvPortMalloc>
 80075ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
 80075d8:	e005      	b.n	80075e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075da:	6978      	ldr	r0, [r7, #20]
 80075dc:	f001 fca8 	bl	8008f30 <vPortFree>
 80075e0:	e001      	b.n	80075e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d017      	beq.n	800761c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075f4:	88fa      	ldrh	r2, [r7, #6]
 80075f6:	2300      	movs	r3, #0
 80075f8:	9303      	str	r3, [sp, #12]
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	9302      	str	r3, [sp, #8]
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f80e 	bl	800762c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007610:	69f8      	ldr	r0, [r7, #28]
 8007612:	f000 f893 	bl	800773c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007616:	2301      	movs	r3, #1
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	e002      	b.n	8007622 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800761c:	f04f 33ff 	mov.w	r3, #4294967295
 8007620:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007622:	69bb      	ldr	r3, [r7, #24]
	}
 8007624:	4618      	mov	r0, r3
 8007626:	3720      	adds	r7, #32
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007644:	3b01      	subs	r3, #1
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	f023 0307 	bic.w	r3, r3, #7
 8007652:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <prvInitialiseNewTask+0x48>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	617b      	str	r3, [r7, #20]
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d01f      	beq.n	80076ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800767a:	2300      	movs	r3, #0
 800767c:	61fb      	str	r3, [r7, #28]
 800767e:	e012      	b.n	80076a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	7819      	ldrb	r1, [r3, #0]
 8007688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	4413      	add	r3, r2
 800768e:	3334      	adds	r3, #52	; 0x34
 8007690:	460a      	mov	r2, r1
 8007692:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d006      	beq.n	80076ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	3301      	adds	r3, #1
 80076a4:	61fb      	str	r3, [r7, #28]
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	2b0f      	cmp	r3, #15
 80076aa:	d9e9      	bls.n	8007680 <prvInitialiseNewTask+0x54>
 80076ac:	e000      	b.n	80076b0 <prvInitialiseNewTask+0x84>
			{
				break;
 80076ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076b8:	e003      	b.n	80076c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	2b06      	cmp	r3, #6
 80076c6:	d901      	bls.n	80076cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076c8:	2306      	movs	r3, #6
 80076ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	2200      	movs	r2, #0
 80076dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	3304      	adds	r3, #4
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff f8f2 	bl	80068cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	3318      	adds	r3, #24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff f8ed 	bl	80068cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	f1c3 0207 	rsb	r2, r3, #7
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007706:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	2200      	movs	r2, #0
 800770c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	68f9      	ldr	r1, [r7, #12]
 800771a:	69b8      	ldr	r0, [r7, #24]
 800771c:	f001 f8ea 	bl	80088f4 <pxPortInitialiseStack>
 8007720:	4602      	mov	r2, r0
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007732:	bf00      	nop
 8007734:	3720      	adds	r7, #32
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007744:	f001 fa06 	bl	8008b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007748:	4b2a      	ldr	r3, [pc, #168]	; (80077f4 <prvAddNewTaskToReadyList+0xb8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3301      	adds	r3, #1
 800774e:	4a29      	ldr	r2, [pc, #164]	; (80077f4 <prvAddNewTaskToReadyList+0xb8>)
 8007750:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007752:	4b29      	ldr	r3, [pc, #164]	; (80077f8 <prvAddNewTaskToReadyList+0xbc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d109      	bne.n	800776e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800775a:	4a27      	ldr	r2, [pc, #156]	; (80077f8 <prvAddNewTaskToReadyList+0xbc>)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007760:	4b24      	ldr	r3, [pc, #144]	; (80077f4 <prvAddNewTaskToReadyList+0xb8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d110      	bne.n	800778a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007768:	f000 fde4 	bl	8008334 <prvInitialiseTaskLists>
 800776c:	e00d      	b.n	800778a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800776e:	4b23      	ldr	r3, [pc, #140]	; (80077fc <prvAddNewTaskToReadyList+0xc0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007776:	4b20      	ldr	r3, [pc, #128]	; (80077f8 <prvAddNewTaskToReadyList+0xbc>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	429a      	cmp	r2, r3
 8007782:	d802      	bhi.n	800778a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007784:	4a1c      	ldr	r2, [pc, #112]	; (80077f8 <prvAddNewTaskToReadyList+0xbc>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800778a:	4b1d      	ldr	r3, [pc, #116]	; (8007800 <prvAddNewTaskToReadyList+0xc4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3301      	adds	r3, #1
 8007790:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <prvAddNewTaskToReadyList+0xc4>)
 8007792:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	2201      	movs	r2, #1
 800779a:	409a      	lsls	r2, r3
 800779c:	4b19      	ldr	r3, [pc, #100]	; (8007804 <prvAddNewTaskToReadyList+0xc8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	4a18      	ldr	r2, [pc, #96]	; (8007804 <prvAddNewTaskToReadyList+0xc8>)
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4a15      	ldr	r2, [pc, #84]	; (8007808 <prvAddNewTaskToReadyList+0xcc>)
 80077b4:	441a      	add	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4619      	mov	r1, r3
 80077bc:	4610      	mov	r0, r2
 80077be:	f7ff f892 	bl	80068e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077c2:	f001 f9f7 	bl	8008bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077c6:	4b0d      	ldr	r3, [pc, #52]	; (80077fc <prvAddNewTaskToReadyList+0xc0>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00e      	beq.n	80077ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077ce:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <prvAddNewTaskToReadyList+0xbc>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	429a      	cmp	r2, r3
 80077da:	d207      	bcs.n	80077ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077dc:	4b0b      	ldr	r3, [pc, #44]	; (800780c <prvAddNewTaskToReadyList+0xd0>)
 80077de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ec:	bf00      	nop
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	200003b8 	.word	0x200003b8
 80077f8:	200002b8 	.word	0x200002b8
 80077fc:	200003c4 	.word	0x200003c4
 8007800:	200003d4 	.word	0x200003d4
 8007804:	200003c0 	.word	0x200003c0
 8007808:	200002bc 	.word	0x200002bc
 800780c:	e000ed04 	.word	0xe000ed04

08007810 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007818:	f001 f99c 	bl	8008b54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <vTaskDelete+0x18>
 8007822:	4b39      	ldr	r3, [pc, #228]	; (8007908 <vTaskDelete+0xf8>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	e000      	b.n	800782a <vTaskDelete+0x1a>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3304      	adds	r3, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff f8b5 	bl	80069a0 <uxListRemove>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d115      	bne.n	8007868 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007840:	4932      	ldr	r1, [pc, #200]	; (800790c <vTaskDelete+0xfc>)
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <vTaskDelete+0x58>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	2201      	movs	r2, #1
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	43da      	mvns	r2, r3
 800785e:	4b2c      	ldr	r3, [pc, #176]	; (8007910 <vTaskDelete+0x100>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4013      	ands	r3, r2
 8007864:	4a2a      	ldr	r2, [pc, #168]	; (8007910 <vTaskDelete+0x100>)
 8007866:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3318      	adds	r3, #24
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff f893 	bl	80069a0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800787a:	4b26      	ldr	r3, [pc, #152]	; (8007914 <vTaskDelete+0x104>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3301      	adds	r3, #1
 8007880:	4a24      	ldr	r2, [pc, #144]	; (8007914 <vTaskDelete+0x104>)
 8007882:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007884:	4b20      	ldr	r3, [pc, #128]	; (8007908 <vTaskDelete+0xf8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	429a      	cmp	r2, r3
 800788c:	d10b      	bne.n	80078a6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3304      	adds	r3, #4
 8007892:	4619      	mov	r1, r3
 8007894:	4820      	ldr	r0, [pc, #128]	; (8007918 <vTaskDelete+0x108>)
 8007896:	f7ff f826 	bl	80068e6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800789a:	4b20      	ldr	r3, [pc, #128]	; (800791c <vTaskDelete+0x10c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3301      	adds	r3, #1
 80078a0:	4a1e      	ldr	r2, [pc, #120]	; (800791c <vTaskDelete+0x10c>)
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	e009      	b.n	80078ba <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80078a6:	4b1e      	ldr	r3, [pc, #120]	; (8007920 <vTaskDelete+0x110>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	4a1c      	ldr	r2, [pc, #112]	; (8007920 <vTaskDelete+0x110>)
 80078ae:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fdad 	bl	8008410 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80078b6:	f000 fddb 	bl	8008470 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80078ba:	f001 f97b 	bl	8008bb4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80078be:	4b19      	ldr	r3, [pc, #100]	; (8007924 <vTaskDelete+0x114>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01b      	beq.n	80078fe <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80078c6:	4b10      	ldr	r3, [pc, #64]	; (8007908 <vTaskDelete+0xf8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d116      	bne.n	80078fe <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80078d0:	4b15      	ldr	r3, [pc, #84]	; (8007928 <vTaskDelete+0x118>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <vTaskDelete+0xde>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	60bb      	str	r3, [r7, #8]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <vTaskDelete+0x11c>)
 80078f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	200002b8 	.word	0x200002b8
 800790c:	200002bc 	.word	0x200002bc
 8007910:	200003c0 	.word	0x200003c0
 8007914:	200003d4 	.word	0x200003d4
 8007918:	2000038c 	.word	0x2000038c
 800791c:	200003a0 	.word	0x200003a0
 8007920:	200003b8 	.word	0x200003b8
 8007924:	200003c4 	.word	0x200003c4
 8007928:	200003e0 	.word	0x200003e0
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08a      	sub	sp, #40	; 0x28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800793a:	2300      	movs	r3, #0
 800793c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <vTaskDelayUntil+0x2a>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	617b      	str	r3, [r7, #20]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <vTaskDelayUntil+0x46>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	613b      	str	r3, [r7, #16]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007976:	4b2a      	ldr	r3, [pc, #168]	; (8007a20 <vTaskDelayUntil+0xf0>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <vTaskDelayUntil+0x64>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	60fb      	str	r3, [r7, #12]
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007994:	f000 f9cc 	bl	8007d30 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007998:	4b22      	ldr	r3, [pc, #136]	; (8007a24 <vTaskDelayUntil+0xf4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	4413      	add	r3, r2
 80079a6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6a3a      	ldr	r2, [r7, #32]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d20b      	bcs.n	80079ca <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d211      	bcs.n	80079e0 <vTaskDelayUntil+0xb0>
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d90d      	bls.n	80079e0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
 80079c8:	e00a      	b.n	80079e0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d303      	bcc.n	80079dc <vTaskDelayUntil+0xac>
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d901      	bls.n	80079e0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d006      	beq.n	80079fa <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2100      	movs	r1, #0
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 ff17 	bl	8008828 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80079fa:	f000 f9a7 	bl	8007d4c <xTaskResumeAll>
 80079fe:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d107      	bne.n	8007a16 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007a06:	4b08      	ldr	r3, [pc, #32]	; (8007a28 <vTaskDelayUntil+0xf8>)
 8007a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a16:	bf00      	nop
 8007a18:	3728      	adds	r7, #40	; 0x28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	200003e0 	.word	0x200003e0
 8007a24:	200003bc 	.word	0x200003bc
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007a34:	f001 f88e 	bl	8008b54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d102      	bne.n	8007a44 <vTaskSuspend+0x18>
 8007a3e:	4b3c      	ldr	r3, [pc, #240]	; (8007b30 <vTaskSuspend+0x104>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	e000      	b.n	8007a46 <vTaskSuspend+0x1a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe ffa7 	bl	80069a0 <uxListRemove>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d115      	bne.n	8007a84 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5c:	4935      	ldr	r1, [pc, #212]	; (8007b34 <vTaskSuspend+0x108>)
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <vTaskSuspend+0x58>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	2201      	movs	r2, #1
 8007a74:	fa02 f303 	lsl.w	r3, r2, r3
 8007a78:	43da      	mvns	r2, r3
 8007a7a:	4b2f      	ldr	r3, [pc, #188]	; (8007b38 <vTaskSuspend+0x10c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	4a2d      	ldr	r2, [pc, #180]	; (8007b38 <vTaskSuspend+0x10c>)
 8007a82:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3318      	adds	r3, #24
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe ff85 	bl	80069a0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4827      	ldr	r0, [pc, #156]	; (8007b3c <vTaskSuspend+0x110>)
 8007a9e:	f7fe ff22 	bl	80068e6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d103      	bne.n	8007ab6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007ab6:	f001 f87d 	bl	8008bb4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007aba:	4b21      	ldr	r3, [pc, #132]	; (8007b40 <vTaskSuspend+0x114>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007ac2:	f001 f847 	bl	8008b54 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007ac6:	f000 fcd3 	bl	8008470 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007aca:	f001 f873 	bl	8008bb4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007ace:	4b18      	ldr	r3, [pc, #96]	; (8007b30 <vTaskSuspend+0x104>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d127      	bne.n	8007b28 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007ad8:	4b19      	ldr	r3, [pc, #100]	; (8007b40 <vTaskSuspend+0x114>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d017      	beq.n	8007b10 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007ae0:	4b18      	ldr	r3, [pc, #96]	; (8007b44 <vTaskSuspend+0x118>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <vTaskSuspend+0xd2>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	60bb      	str	r3, [r7, #8]
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007afe:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <vTaskSuspend+0x11c>)
 8007b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b0e:	e00b      	b.n	8007b28 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <vTaskSuspend+0x110>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <vTaskSuspend+0x120>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d103      	bne.n	8007b24 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <vTaskSuspend+0x104>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
	}
 8007b22:	e001      	b.n	8007b28 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007b24:	f000 fa88 	bl	8008038 <vTaskSwitchContext>
	}
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	200002b8 	.word	0x200002b8
 8007b34:	200002bc 	.word	0x200002bc
 8007b38:	200003c0 	.word	0x200003c0
 8007b3c:	200003a4 	.word	0x200003a4
 8007b40:	200003c4 	.word	0x200003c4
 8007b44:	200003e0 	.word	0x200003e0
 8007b48:	e000ed04 	.word	0xe000ed04
 8007b4c:	200003b8 	.word	0x200003b8

08007b50 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	60fb      	str	r3, [r7, #12]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <prvTaskIsTaskSuspended+0x5c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d10a      	bne.n	8007b9c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <prvTaskIsTaskSuspended+0x60>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d005      	beq.n	8007b9c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b9c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	200003a4 	.word	0x200003a4
 8007bb0:	20000378 	.word	0x20000378

08007bb4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <vTaskResume+0x28>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	60bb      	str	r3, [r7, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	e7fe      	b.n	8007bda <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007bdc:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <vTaskResume+0xac>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d037      	beq.n	8007c56 <vTaskResume+0xa2>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d034      	beq.n	8007c56 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007bec:	f000 ffb2 	bl	8008b54 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff ffad 	bl	8007b50 <prvTaskIsTaskSuspended>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d02a      	beq.n	8007c52 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe fecd 	bl	80069a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	409a      	lsls	r2, r3
 8007c0e:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <vTaskResume+0xb0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <vTaskResume+0xb0>)
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4a10      	ldr	r2, [pc, #64]	; (8007c68 <vTaskResume+0xb4>)
 8007c26:	441a      	add	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	f7fe fe59 	bl	80068e6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c38:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <vTaskResume+0xac>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d307      	bcc.n	8007c52 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007c42:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <vTaskResume+0xb8>)
 8007c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007c52:	f000 ffaf 	bl	8008bb4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200002b8 	.word	0x200002b8
 8007c64:	200003c0 	.word	0x200003c0
 8007c68:	200002bc 	.word	0x200002bc
 8007c6c:	e000ed04 	.word	0xe000ed04

08007c70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	; 0x28
 8007c74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c7e:	463a      	mov	r2, r7
 8007c80:	1d39      	adds	r1, r7, #4
 8007c82:	f107 0308 	add.w	r3, r7, #8
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7f9 f83c 	bl	8000d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	9202      	str	r2, [sp, #8]
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	2300      	movs	r3, #0
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	460a      	mov	r2, r1
 8007c9e:	491e      	ldr	r1, [pc, #120]	; (8007d18 <vTaskStartScheduler+0xa8>)
 8007ca0:	481e      	ldr	r0, [pc, #120]	; (8007d1c <vTaskStartScheduler+0xac>)
 8007ca2:	f7ff fc21 	bl	80074e8 <xTaskCreateStatic>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <vTaskStartScheduler+0xb0>)
 8007caa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cac:	4b1c      	ldr	r3, [pc, #112]	; (8007d20 <vTaskStartScheduler+0xb0>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	e001      	b.n	8007cbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d116      	bne.n	8007cf2 <vTaskStartScheduler+0x82>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	613b      	str	r3, [r7, #16]
}
 8007cd6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cd8:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <vTaskStartScheduler+0xb4>)
 8007cda:	f04f 32ff 	mov.w	r2, #4294967295
 8007cde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ce0:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <vTaskStartScheduler+0xb8>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ce6:	4b11      	ldr	r3, [pc, #68]	; (8007d2c <vTaskStartScheduler+0xbc>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cec:	f000 fe90 	bl	8008a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cf0:	e00e      	b.n	8007d10 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf8:	d10a      	bne.n	8007d10 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	60fb      	str	r3, [r7, #12]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <vTaskStartScheduler+0x9e>
}
 8007d10:	bf00      	nop
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	08009310 	.word	0x08009310
 8007d1c:	08008305 	.word	0x08008305
 8007d20:	200003dc 	.word	0x200003dc
 8007d24:	200003d8 	.word	0x200003d8
 8007d28:	200003c4 	.word	0x200003c4
 8007d2c:	200003bc 	.word	0x200003bc

08007d30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d34:	4b04      	ldr	r3, [pc, #16]	; (8007d48 <vTaskSuspendAll+0x18>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	4a03      	ldr	r2, [pc, #12]	; (8007d48 <vTaskSuspendAll+0x18>)
 8007d3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d3e:	bf00      	nop
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	200003e0 	.word	0x200003e0

08007d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d5a:	4b41      	ldr	r3, [pc, #260]	; (8007e60 <xTaskResumeAll+0x114>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	603b      	str	r3, [r7, #0]
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d78:	f000 feec 	bl	8008b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d7c:	4b38      	ldr	r3, [pc, #224]	; (8007e60 <xTaskResumeAll+0x114>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	4a37      	ldr	r2, [pc, #220]	; (8007e60 <xTaskResumeAll+0x114>)
 8007d84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d86:	4b36      	ldr	r3, [pc, #216]	; (8007e60 <xTaskResumeAll+0x114>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d161      	bne.n	8007e52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d8e:	4b35      	ldr	r3, [pc, #212]	; (8007e64 <xTaskResumeAll+0x118>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d05d      	beq.n	8007e52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d96:	e02e      	b.n	8007df6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d98:	4b33      	ldr	r3, [pc, #204]	; (8007e68 <xTaskResumeAll+0x11c>)
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3318      	adds	r3, #24
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fe fdfb 	bl	80069a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe fdf6 	bl	80069a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	2201      	movs	r2, #1
 8007dba:	409a      	lsls	r2, r3
 8007dbc:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <xTaskResumeAll+0x120>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	4a2a      	ldr	r2, [pc, #168]	; (8007e6c <xTaskResumeAll+0x120>)
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4a27      	ldr	r2, [pc, #156]	; (8007e70 <xTaskResumeAll+0x124>)
 8007dd4:	441a      	add	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7fe fd82 	bl	80068e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de6:	4b23      	ldr	r3, [pc, #140]	; (8007e74 <xTaskResumeAll+0x128>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d302      	bcc.n	8007df6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007df0:	4b21      	ldr	r3, [pc, #132]	; (8007e78 <xTaskResumeAll+0x12c>)
 8007df2:	2201      	movs	r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007df6:	4b1c      	ldr	r3, [pc, #112]	; (8007e68 <xTaskResumeAll+0x11c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1cc      	bne.n	8007d98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e04:	f000 fb34 	bl	8008470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e08:	4b1c      	ldr	r3, [pc, #112]	; (8007e7c <xTaskResumeAll+0x130>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d010      	beq.n	8007e36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e14:	f000 f858 	bl	8007ec8 <xTaskIncrementTick>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007e1e:	4b16      	ldr	r3, [pc, #88]	; (8007e78 <xTaskResumeAll+0x12c>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f1      	bne.n	8007e14 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007e30:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <xTaskResumeAll+0x130>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e36:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <xTaskResumeAll+0x12c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d009      	beq.n	8007e52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e42:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <xTaskResumeAll+0x134>)
 8007e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e52:	f000 feaf 	bl	8008bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8007e56:	68bb      	ldr	r3, [r7, #8]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	200003e0 	.word	0x200003e0
 8007e64:	200003b8 	.word	0x200003b8
 8007e68:	20000378 	.word	0x20000378
 8007e6c:	200003c0 	.word	0x200003c0
 8007e70:	200002bc 	.word	0x200002bc
 8007e74:	200002b8 	.word	0x200002b8
 8007e78:	200003cc 	.word	0x200003cc
 8007e7c:	200003c8 	.word	0x200003c8
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e8a:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <xTaskGetTickCount+0x1c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e90:	687b      	ldr	r3, [r7, #4]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	200003bc 	.word	0x200003bc

08007ea4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eaa:	f000 ff35 	bl	8008d18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007eae:	2300      	movs	r3, #0
 8007eb0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007eb2:	4b04      	ldr	r3, [pc, #16]	; (8007ec4 <xTaskGetTickCountFromISR+0x20>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eb8:	683b      	ldr	r3, [r7, #0]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200003bc 	.word	0x200003bc

08007ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed2:	4b4e      	ldr	r3, [pc, #312]	; (800800c <xTaskIncrementTick+0x144>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f040 808e 	bne.w	8007ff8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007edc:	4b4c      	ldr	r3, [pc, #304]	; (8008010 <xTaskIncrementTick+0x148>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ee4:	4a4a      	ldr	r2, [pc, #296]	; (8008010 <xTaskIncrementTick+0x148>)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d120      	bne.n	8007f32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ef0:	4b48      	ldr	r3, [pc, #288]	; (8008014 <xTaskIncrementTick+0x14c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <xTaskIncrementTick+0x48>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	603b      	str	r3, [r7, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	e7fe      	b.n	8007f0e <xTaskIncrementTick+0x46>
 8007f10:	4b40      	ldr	r3, [pc, #256]	; (8008014 <xTaskIncrementTick+0x14c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	4b40      	ldr	r3, [pc, #256]	; (8008018 <xTaskIncrementTick+0x150>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a3e      	ldr	r2, [pc, #248]	; (8008014 <xTaskIncrementTick+0x14c>)
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	4a3e      	ldr	r2, [pc, #248]	; (8008018 <xTaskIncrementTick+0x150>)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	4b3d      	ldr	r3, [pc, #244]	; (800801c <xTaskIncrementTick+0x154>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	4a3c      	ldr	r2, [pc, #240]	; (800801c <xTaskIncrementTick+0x154>)
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	f000 fa9f 	bl	8008470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f32:	4b3b      	ldr	r3, [pc, #236]	; (8008020 <xTaskIncrementTick+0x158>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d348      	bcc.n	8007fce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f3c:	4b35      	ldr	r3, [pc, #212]	; (8008014 <xTaskIncrementTick+0x14c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d104      	bne.n	8007f50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f46:	4b36      	ldr	r3, [pc, #216]	; (8008020 <xTaskIncrementTick+0x158>)
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	601a      	str	r2, [r3, #0]
					break;
 8007f4e:	e03e      	b.n	8007fce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f50:	4b30      	ldr	r3, [pc, #192]	; (8008014 <xTaskIncrementTick+0x14c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d203      	bcs.n	8007f70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f68:	4a2d      	ldr	r2, [pc, #180]	; (8008020 <xTaskIncrementTick+0x158>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f6e:	e02e      	b.n	8007fce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe fd13 	bl	80069a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d004      	beq.n	8007f8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	3318      	adds	r3, #24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe fd0a 	bl	80069a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	2201      	movs	r2, #1
 8007f92:	409a      	lsls	r2, r3
 8007f94:	4b23      	ldr	r3, [pc, #140]	; (8008024 <xTaskIncrementTick+0x15c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	4a22      	ldr	r2, [pc, #136]	; (8008024 <xTaskIncrementTick+0x15c>)
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4a1f      	ldr	r2, [pc, #124]	; (8008028 <xTaskIncrementTick+0x160>)
 8007fac:	441a      	add	r2, r3
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	f7fe fc96 	bl	80068e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbe:	4b1b      	ldr	r3, [pc, #108]	; (800802c <xTaskIncrementTick+0x164>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d3b9      	bcc.n	8007f3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fcc:	e7b6      	b.n	8007f3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fce:	4b17      	ldr	r3, [pc, #92]	; (800802c <xTaskIncrementTick+0x164>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd4:	4914      	ldr	r1, [pc, #80]	; (8008028 <xTaskIncrementTick+0x160>)
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d901      	bls.n	8007fea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007fea:	4b11      	ldr	r3, [pc, #68]	; (8008030 <xTaskIncrementTick+0x168>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	617b      	str	r3, [r7, #20]
 8007ff6:	e004      	b.n	8008002 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ff8:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <xTaskIncrementTick+0x16c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	4a0d      	ldr	r2, [pc, #52]	; (8008034 <xTaskIncrementTick+0x16c>)
 8008000:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008002:	697b      	ldr	r3, [r7, #20]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	200003e0 	.word	0x200003e0
 8008010:	200003bc 	.word	0x200003bc
 8008014:	20000370 	.word	0x20000370
 8008018:	20000374 	.word	0x20000374
 800801c:	200003d0 	.word	0x200003d0
 8008020:	200003d8 	.word	0x200003d8
 8008024:	200003c0 	.word	0x200003c0
 8008028:	200002bc 	.word	0x200002bc
 800802c:	200002b8 	.word	0x200002b8
 8008030:	200003cc 	.word	0x200003cc
 8008034:	200003c8 	.word	0x200003c8

08008038 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800803e:	4b27      	ldr	r3, [pc, #156]	; (80080dc <vTaskSwitchContext+0xa4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008046:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <vTaskSwitchContext+0xa8>)
 8008048:	2201      	movs	r2, #1
 800804a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800804c:	e03f      	b.n	80080ce <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800804e:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <vTaskSwitchContext+0xa8>)
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008054:	4b23      	ldr	r3, [pc, #140]	; (80080e4 <vTaskSwitchContext+0xac>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	fab3 f383 	clz	r3, r3
 8008060:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008062:	7afb      	ldrb	r3, [r7, #11]
 8008064:	f1c3 031f 	rsb	r3, r3, #31
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	491f      	ldr	r1, [pc, #124]	; (80080e8 <vTaskSwitchContext+0xb0>)
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	440b      	add	r3, r1
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <vTaskSwitchContext+0x5c>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	607b      	str	r3, [r7, #4]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <vTaskSwitchContext+0x5a>
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4a12      	ldr	r2, [pc, #72]	; (80080e8 <vTaskSwitchContext+0xb0>)
 80080a0:	4413      	add	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	605a      	str	r2, [r3, #4]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3308      	adds	r3, #8
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d104      	bne.n	80080c4 <vTaskSwitchContext+0x8c>
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	605a      	str	r2, [r3, #4]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	4a08      	ldr	r2, [pc, #32]	; (80080ec <vTaskSwitchContext+0xb4>)
 80080cc:	6013      	str	r3, [r2, #0]
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	200003e0 	.word	0x200003e0
 80080e0:	200003cc 	.word	0x200003cc
 80080e4:	200003c0 	.word	0x200003c0
 80080e8:	200002bc 	.word	0x200002bc
 80080ec:	200002b8 	.word	0x200002b8

080080f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	60fb      	str	r3, [r7, #12]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008116:	4b07      	ldr	r3, [pc, #28]	; (8008134 <vTaskPlaceOnEventList+0x44>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3318      	adds	r3, #24
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fe fc05 	bl	800692e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008124:	2101      	movs	r1, #1
 8008126:	6838      	ldr	r0, [r7, #0]
 8008128:	f000 fb7e 	bl	8008828 <prvAddCurrentTaskToDelayedList>
}
 800812c:	bf00      	nop
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	200002b8 	.word	0x200002b8

08008138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	60fb      	str	r3, [r7, #12]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3318      	adds	r3, #24
 8008168:	4618      	mov	r0, r3
 800816a:	f7fe fc19 	bl	80069a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800816e:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <xTaskRemoveFromEventList+0xac>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d11c      	bne.n	80081b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	3304      	adds	r3, #4
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe fc10 	bl	80069a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	2201      	movs	r2, #1
 8008186:	409a      	lsls	r2, r3
 8008188:	4b17      	ldr	r3, [pc, #92]	; (80081e8 <xTaskRemoveFromEventList+0xb0>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4313      	orrs	r3, r2
 800818e:	4a16      	ldr	r2, [pc, #88]	; (80081e8 <xTaskRemoveFromEventList+0xb0>)
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4a13      	ldr	r2, [pc, #76]	; (80081ec <xTaskRemoveFromEventList+0xb4>)
 80081a0:	441a      	add	r2, r3
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	3304      	adds	r3, #4
 80081a6:	4619      	mov	r1, r3
 80081a8:	4610      	mov	r0, r2
 80081aa:	f7fe fb9c 	bl	80068e6 <vListInsertEnd>
 80081ae:	e005      	b.n	80081bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	3318      	adds	r3, #24
 80081b4:	4619      	mov	r1, r3
 80081b6:	480e      	ldr	r0, [pc, #56]	; (80081f0 <xTaskRemoveFromEventList+0xb8>)
 80081b8:	f7fe fb95 	bl	80068e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c0:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <xTaskRemoveFromEventList+0xbc>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d905      	bls.n	80081d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081ca:	2301      	movs	r3, #1
 80081cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081ce:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <xTaskRemoveFromEventList+0xc0>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	e001      	b.n	80081da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081da:	697b      	ldr	r3, [r7, #20]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	200003e0 	.word	0x200003e0
 80081e8:	200003c0 	.word	0x200003c0
 80081ec:	200002bc 	.word	0x200002bc
 80081f0:	20000378 	.word	0x20000378
 80081f4:	200002b8 	.word	0x200002b8
 80081f8:	200003cc 	.word	0x200003cc

080081fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008204:	4b06      	ldr	r3, [pc, #24]	; (8008220 <vTaskInternalSetTimeOutState+0x24>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800820c:	4b05      	ldr	r3, [pc, #20]	; (8008224 <vTaskInternalSetTimeOutState+0x28>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	605a      	str	r2, [r3, #4]
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	200003d0 	.word	0x200003d0
 8008224:	200003bc 	.word	0x200003bc

08008228 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10a      	bne.n	800824e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	613b      	str	r3, [r7, #16]
}
 800824a:	bf00      	nop
 800824c:	e7fe      	b.n	800824c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10a      	bne.n	800826a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	60fb      	str	r3, [r7, #12]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800826a:	f000 fc73 	bl	8008b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800826e:	4b1d      	ldr	r3, [pc, #116]	; (80082e4 <xTaskCheckForTimeOut+0xbc>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d102      	bne.n	800828e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008288:	2300      	movs	r3, #0
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	e023      	b.n	80082d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <xTaskCheckForTimeOut+0xc0>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d007      	beq.n	80082aa <xTaskCheckForTimeOut+0x82>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d302      	bcc.n	80082aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082a4:	2301      	movs	r3, #1
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	e015      	b.n	80082d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d20b      	bcs.n	80082cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	1ad2      	subs	r2, r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7ff ff9b 	bl	80081fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082c6:	2300      	movs	r3, #0
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	e004      	b.n	80082d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2200      	movs	r2, #0
 80082d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082d2:	2301      	movs	r3, #1
 80082d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082d6:	f000 fc6d 	bl	8008bb4 <vPortExitCritical>

	return xReturn;
 80082da:	69fb      	ldr	r3, [r7, #28]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3720      	adds	r7, #32
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	200003bc 	.word	0x200003bc
 80082e8:	200003d0 	.word	0x200003d0

080082ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082f0:	4b03      	ldr	r3, [pc, #12]	; (8008300 <vTaskMissedYield+0x14>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	601a      	str	r2, [r3, #0]
}
 80082f6:	bf00      	nop
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	200003cc 	.word	0x200003cc

08008304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800830c:	f000 f852 	bl	80083b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008310:	4b06      	ldr	r3, [pc, #24]	; (800832c <prvIdleTask+0x28>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d9f9      	bls.n	800830c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <prvIdleTask+0x2c>)
 800831a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008328:	e7f0      	b.n	800830c <prvIdleTask+0x8>
 800832a:	bf00      	nop
 800832c:	200002bc 	.word	0x200002bc
 8008330:	e000ed04 	.word	0xe000ed04

08008334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800833a:	2300      	movs	r3, #0
 800833c:	607b      	str	r3, [r7, #4]
 800833e:	e00c      	b.n	800835a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4a12      	ldr	r2, [pc, #72]	; (8008394 <prvInitialiseTaskLists+0x60>)
 800834c:	4413      	add	r3, r2
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fa9c 	bl	800688c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3301      	adds	r3, #1
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b06      	cmp	r3, #6
 800835e:	d9ef      	bls.n	8008340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008360:	480d      	ldr	r0, [pc, #52]	; (8008398 <prvInitialiseTaskLists+0x64>)
 8008362:	f7fe fa93 	bl	800688c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008366:	480d      	ldr	r0, [pc, #52]	; (800839c <prvInitialiseTaskLists+0x68>)
 8008368:	f7fe fa90 	bl	800688c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800836c:	480c      	ldr	r0, [pc, #48]	; (80083a0 <prvInitialiseTaskLists+0x6c>)
 800836e:	f7fe fa8d 	bl	800688c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008372:	480c      	ldr	r0, [pc, #48]	; (80083a4 <prvInitialiseTaskLists+0x70>)
 8008374:	f7fe fa8a 	bl	800688c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008378:	480b      	ldr	r0, [pc, #44]	; (80083a8 <prvInitialiseTaskLists+0x74>)
 800837a:	f7fe fa87 	bl	800688c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800837e:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <prvInitialiseTaskLists+0x78>)
 8008380:	4a05      	ldr	r2, [pc, #20]	; (8008398 <prvInitialiseTaskLists+0x64>)
 8008382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008384:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <prvInitialiseTaskLists+0x7c>)
 8008386:	4a05      	ldr	r2, [pc, #20]	; (800839c <prvInitialiseTaskLists+0x68>)
 8008388:	601a      	str	r2, [r3, #0]
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	200002bc 	.word	0x200002bc
 8008398:	20000348 	.word	0x20000348
 800839c:	2000035c 	.word	0x2000035c
 80083a0:	20000378 	.word	0x20000378
 80083a4:	2000038c 	.word	0x2000038c
 80083a8:	200003a4 	.word	0x200003a4
 80083ac:	20000370 	.word	0x20000370
 80083b0:	20000374 	.word	0x20000374

080083b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083ba:	e019      	b.n	80083f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083bc:	f000 fbca 	bl	8008b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c0:	4b10      	ldr	r3, [pc, #64]	; (8008404 <prvCheckTasksWaitingTermination+0x50>)
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe fae7 	bl	80069a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083d2:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <prvCheckTasksWaitingTermination+0x54>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	4a0b      	ldr	r2, [pc, #44]	; (8008408 <prvCheckTasksWaitingTermination+0x54>)
 80083da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <prvCheckTasksWaitingTermination+0x58>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	4a0a      	ldr	r2, [pc, #40]	; (800840c <prvCheckTasksWaitingTermination+0x58>)
 80083e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083e6:	f000 fbe5 	bl	8008bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f810 	bl	8008410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083f0:	4b06      	ldr	r3, [pc, #24]	; (800840c <prvCheckTasksWaitingTermination+0x58>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e1      	bne.n	80083bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	2000038c 	.word	0x2000038c
 8008408:	200003b8 	.word	0x200003b8
 800840c:	200003a0 	.word	0x200003a0

08008410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800841e:	2b00      	cmp	r3, #0
 8008420:	d108      	bne.n	8008434 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008426:	4618      	mov	r0, r3
 8008428:	f000 fd82 	bl	8008f30 <vPortFree>
				vPortFree( pxTCB );
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fd7f 	bl	8008f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008432:	e018      	b.n	8008466 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800843a:	2b01      	cmp	r3, #1
 800843c:	d103      	bne.n	8008446 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fd76 	bl	8008f30 <vPortFree>
	}
 8008444:	e00f      	b.n	8008466 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800844c:	2b02      	cmp	r3, #2
 800844e:	d00a      	beq.n	8008466 <prvDeleteTCB+0x56>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	60fb      	str	r3, [r7, #12]
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <prvDeleteTCB+0x54>
	}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <prvResetNextTaskUnblockTime+0x38>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d104      	bne.n	800848a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <prvResetNextTaskUnblockTime+0x3c>)
 8008482:	f04f 32ff 	mov.w	r2, #4294967295
 8008486:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008488:	e008      	b.n	800849c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800848a:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <prvResetNextTaskUnblockTime+0x38>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4a04      	ldr	r2, [pc, #16]	; (80084ac <prvResetNextTaskUnblockTime+0x3c>)
 800849a:	6013      	str	r3, [r2, #0]
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	20000370 	.word	0x20000370
 80084ac:	200003d8 	.word	0x200003d8

080084b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <xTaskGetSchedulerState+0x34>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084be:	2301      	movs	r3, #1
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	e008      	b.n	80084d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084c4:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <xTaskGetSchedulerState+0x38>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d102      	bne.n	80084d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084cc:	2302      	movs	r3, #2
 80084ce:	607b      	str	r3, [r7, #4]
 80084d0:	e001      	b.n	80084d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084d2:	2300      	movs	r3, #0
 80084d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084d6:	687b      	ldr	r3, [r7, #4]
	}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	200003c4 	.word	0x200003c4
 80084e8:	200003e0 	.word	0x200003e0

080084ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d05e      	beq.n	80085c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008506:	4b31      	ldr	r3, [pc, #196]	; (80085cc <xTaskPriorityInherit+0xe0>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	429a      	cmp	r2, r3
 800850e:	d24e      	bcs.n	80085ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	2b00      	cmp	r3, #0
 8008516:	db06      	blt.n	8008526 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008518:	4b2c      	ldr	r3, [pc, #176]	; (80085cc <xTaskPriorityInherit+0xe0>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	f1c3 0207 	rsb	r2, r3, #7
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6959      	ldr	r1, [r3, #20]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4a26      	ldr	r2, [pc, #152]	; (80085d0 <xTaskPriorityInherit+0xe4>)
 8008538:	4413      	add	r3, r2
 800853a:	4299      	cmp	r1, r3
 800853c:	d12f      	bne.n	800859e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	3304      	adds	r3, #4
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fa2c 	bl	80069a0 <uxListRemove>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008552:	2201      	movs	r2, #1
 8008554:	fa02 f303 	lsl.w	r3, r2, r3
 8008558:	43da      	mvns	r2, r3
 800855a:	4b1e      	ldr	r3, [pc, #120]	; (80085d4 <xTaskPriorityInherit+0xe8>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4013      	ands	r3, r2
 8008560:	4a1c      	ldr	r2, [pc, #112]	; (80085d4 <xTaskPriorityInherit+0xe8>)
 8008562:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008564:	4b19      	ldr	r3, [pc, #100]	; (80085cc <xTaskPriorityInherit+0xe0>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	2201      	movs	r2, #1
 8008574:	409a      	lsls	r2, r3
 8008576:	4b17      	ldr	r3, [pc, #92]	; (80085d4 <xTaskPriorityInherit+0xe8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4313      	orrs	r3, r2
 800857c:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <xTaskPriorityInherit+0xe8>)
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4a10      	ldr	r2, [pc, #64]	; (80085d0 <xTaskPriorityInherit+0xe4>)
 800858e:	441a      	add	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	3304      	adds	r3, #4
 8008594:	4619      	mov	r1, r3
 8008596:	4610      	mov	r0, r2
 8008598:	f7fe f9a5 	bl	80068e6 <vListInsertEnd>
 800859c:	e004      	b.n	80085a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800859e:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <xTaskPriorityInherit+0xe0>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80085a8:	2301      	movs	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e008      	b.n	80085c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085b2:	4b06      	ldr	r3, [pc, #24]	; (80085cc <xTaskPriorityInherit+0xe0>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d201      	bcs.n	80085c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085c0:	68fb      	ldr	r3, [r7, #12]
	}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	200002b8 	.word	0x200002b8
 80085d0:	200002bc 	.word	0x200002bc
 80085d4:	200003c0 	.word	0x200003c0

080085d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d06e      	beq.n	80086cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085ee:	4b3a      	ldr	r3, [pc, #232]	; (80086d8 <xTaskPriorityDisinherit+0x100>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d00a      	beq.n	800860e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	60fb      	str	r3, [r7, #12]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10a      	bne.n	800862c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	60bb      	str	r3, [r7, #8]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008630:	1e5a      	subs	r2, r3, #1
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863e:	429a      	cmp	r2, r3
 8008640:	d044      	beq.n	80086cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008646:	2b00      	cmp	r3, #0
 8008648:	d140      	bne.n	80086cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	3304      	adds	r3, #4
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe f9a6 	bl	80069a0 <uxListRemove>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d115      	bne.n	8008686 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865e:	491f      	ldr	r1, [pc, #124]	; (80086dc <xTaskPriorityDisinherit+0x104>)
 8008660:	4613      	mov	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	440b      	add	r3, r1
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <xTaskPriorityDisinherit+0xae>
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008674:	2201      	movs	r2, #1
 8008676:	fa02 f303 	lsl.w	r3, r2, r3
 800867a:	43da      	mvns	r2, r3
 800867c:	4b18      	ldr	r3, [pc, #96]	; (80086e0 <xTaskPriorityDisinherit+0x108>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4013      	ands	r3, r2
 8008682:	4a17      	ldr	r2, [pc, #92]	; (80086e0 <xTaskPriorityDisinherit+0x108>)
 8008684:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	f1c3 0207 	rsb	r2, r3, #7
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	2201      	movs	r2, #1
 80086a0:	409a      	lsls	r2, r3
 80086a2:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <xTaskPriorityDisinherit+0x108>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	4a0d      	ldr	r2, [pc, #52]	; (80086e0 <xTaskPriorityDisinherit+0x108>)
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4a08      	ldr	r2, [pc, #32]	; (80086dc <xTaskPriorityDisinherit+0x104>)
 80086ba:	441a      	add	r2, r3
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	3304      	adds	r3, #4
 80086c0:	4619      	mov	r1, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	f7fe f90f 	bl	80068e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086c8:	2301      	movs	r3, #1
 80086ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086cc:	697b      	ldr	r3, [r7, #20]
	}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	200002b8 	.word	0x200002b8
 80086dc:	200002bc 	.word	0x200002bc
 80086e0:	200003c0 	.word	0x200003c0

080086e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086f2:	2301      	movs	r3, #1
 80086f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d077      	beq.n	80087ec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	60fb      	str	r3, [r7, #12]
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d902      	bls.n	800872a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	61fb      	str	r3, [r7, #28]
 8008728:	e002      	b.n	8008730 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	429a      	cmp	r2, r3
 8008738:	d058      	beq.n	80087ec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	429a      	cmp	r2, r3
 8008742:	d153      	bne.n	80087ec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008744:	4b2b      	ldr	r3, [pc, #172]	; (80087f4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	429a      	cmp	r2, r3
 800874c:	d10a      	bne.n	8008764 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	60bb      	str	r3, [r7, #8]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	db04      	blt.n	8008782 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f1c3 0207 	rsb	r2, r3, #7
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	6959      	ldr	r1, [r3, #20]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4a19      	ldr	r2, [pc, #100]	; (80087f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008792:	4413      	add	r3, r2
 8008794:	4299      	cmp	r1, r3
 8008796:	d129      	bne.n	80087ec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	3304      	adds	r3, #4
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe f8ff 	bl	80069a0 <uxListRemove>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	2201      	movs	r2, #1
 80087ae:	fa02 f303 	lsl.w	r3, r2, r3
 80087b2:	43da      	mvns	r2, r3
 80087b4:	4b11      	ldr	r3, [pc, #68]	; (80087fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4013      	ands	r3, r2
 80087ba:	4a10      	ldr	r2, [pc, #64]	; (80087fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80087bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	2201      	movs	r2, #1
 80087c4:	409a      	lsls	r2, r3
 80087c6:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	4a0b      	ldr	r2, [pc, #44]	; (80087fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4a06      	ldr	r2, [pc, #24]	; (80087f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80087de:	441a      	add	r2, r3
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fe f87d 	bl	80068e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087ec:	bf00      	nop
 80087ee:	3720      	adds	r7, #32
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200002b8 	.word	0x200002b8
 80087f8:	200002bc 	.word	0x200002bc
 80087fc:	200003c0 	.word	0x200003c0

08008800 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008804:	4b07      	ldr	r3, [pc, #28]	; (8008824 <pvTaskIncrementMutexHeldCount+0x24>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800880c:	4b05      	ldr	r3, [pc, #20]	; (8008824 <pvTaskIncrementMutexHeldCount+0x24>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008812:	3201      	adds	r2, #1
 8008814:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008816:	4b03      	ldr	r3, [pc, #12]	; (8008824 <pvTaskIncrementMutexHeldCount+0x24>)
 8008818:	681b      	ldr	r3, [r3, #0]
	}
 800881a:	4618      	mov	r0, r3
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	200002b8 	.word	0x200002b8

08008828 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008832:	4b29      	ldr	r3, [pc, #164]	; (80088d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008838:	4b28      	ldr	r3, [pc, #160]	; (80088dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3304      	adds	r3, #4
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe f8ae 	bl	80069a0 <uxListRemove>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10b      	bne.n	8008862 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800884a:	4b24      	ldr	r3, [pc, #144]	; (80088dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	2201      	movs	r2, #1
 8008852:	fa02 f303 	lsl.w	r3, r2, r3
 8008856:	43da      	mvns	r2, r3
 8008858:	4b21      	ldr	r3, [pc, #132]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4013      	ands	r3, r2
 800885e:	4a20      	ldr	r2, [pc, #128]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008860:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008868:	d10a      	bne.n	8008880 <prvAddCurrentTaskToDelayedList+0x58>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d007      	beq.n	8008880 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008870:	4b1a      	ldr	r3, [pc, #104]	; (80088dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3304      	adds	r3, #4
 8008876:	4619      	mov	r1, r3
 8008878:	481a      	ldr	r0, [pc, #104]	; (80088e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800887a:	f7fe f834 	bl	80068e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800887e:	e026      	b.n	80088ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4413      	add	r3, r2
 8008886:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008888:	4b14      	ldr	r3, [pc, #80]	; (80088dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	429a      	cmp	r2, r3
 8008896:	d209      	bcs.n	80088ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008898:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f7fe f842 	bl	800692e <vListInsert>
}
 80088aa:	e010      	b.n	80088ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3304      	adds	r3, #4
 80088b6:	4619      	mov	r1, r3
 80088b8:	4610      	mov	r0, r2
 80088ba:	f7fe f838 	bl	800692e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088be:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d202      	bcs.n	80088ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80088c8:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6013      	str	r3, [r2, #0]
}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	200003bc 	.word	0x200003bc
 80088dc:	200002b8 	.word	0x200002b8
 80088e0:	200003c0 	.word	0x200003c0
 80088e4:	200003a4 	.word	0x200003a4
 80088e8:	20000374 	.word	0x20000374
 80088ec:	20000370 	.word	0x20000370
 80088f0:	200003d8 	.word	0x200003d8

080088f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3b04      	subs	r3, #4
 8008904:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800890c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3b04      	subs	r3, #4
 8008912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f023 0201 	bic.w	r2, r3, #1
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3b04      	subs	r3, #4
 8008922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008924:	4a0c      	ldr	r2, [pc, #48]	; (8008958 <pxPortInitialiseStack+0x64>)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3b14      	subs	r3, #20
 800892e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3b04      	subs	r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f06f 0202 	mvn.w	r2, #2
 8008942:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3b20      	subs	r3, #32
 8008948:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	0800895d 	.word	0x0800895d

0800895c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008966:	4b12      	ldr	r3, [pc, #72]	; (80089b0 <prvTaskExitError+0x54>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896e:	d00a      	beq.n	8008986 <prvTaskExitError+0x2a>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	60fb      	str	r3, [r7, #12]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <prvTaskExitError+0x28>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	60bb      	str	r3, [r7, #8]
}
 8008998:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800899a:	bf00      	nop
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0fc      	beq.n	800899c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	20000018 	.word	0x20000018
	...

080089c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <pxCurrentTCBConst2>)
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	6808      	ldr	r0, [r1, #0]
 80089c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ca:	f380 8809 	msr	PSP, r0
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f380 8811 	msr	BASEPRI, r0
 80089da:	4770      	bx	lr
 80089dc:	f3af 8000 	nop.w

080089e0 <pxCurrentTCBConst2>:
 80089e0:	200002b8 	.word	0x200002b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089e8:	4808      	ldr	r0, [pc, #32]	; (8008a0c <prvPortStartFirstTask+0x24>)
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	6800      	ldr	r0, [r0, #0]
 80089ee:	f380 8808 	msr	MSP, r0
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8814 	msr	CONTROL, r0
 80089fa:	b662      	cpsie	i
 80089fc:	b661      	cpsie	f
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	df00      	svc	0
 8008a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a0a:	bf00      	nop
 8008a0c:	e000ed08 	.word	0xe000ed08

08008a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a16:	4b46      	ldr	r3, [pc, #280]	; (8008b30 <xPortStartScheduler+0x120>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a46      	ldr	r2, [pc, #280]	; (8008b34 <xPortStartScheduler+0x124>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d10a      	bne.n	8008a36 <xPortStartScheduler+0x26>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	613b      	str	r3, [r7, #16]
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a36:	4b3e      	ldr	r3, [pc, #248]	; (8008b30 <xPortStartScheduler+0x120>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a3f      	ldr	r2, [pc, #252]	; (8008b38 <xPortStartScheduler+0x128>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10a      	bne.n	8008a56 <xPortStartScheduler+0x46>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	60fb      	str	r3, [r7, #12]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a56:	4b39      	ldr	r3, [pc, #228]	; (8008b3c <xPortStartScheduler+0x12c>)
 8008a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	22ff      	movs	r2, #255	; 0xff
 8008a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	4b31      	ldr	r3, [pc, #196]	; (8008b40 <xPortStartScheduler+0x130>)
 8008a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a7e:	4b31      	ldr	r3, [pc, #196]	; (8008b44 <xPortStartScheduler+0x134>)
 8008a80:	2207      	movs	r2, #7
 8008a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a84:	e009      	b.n	8008a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a86:	4b2f      	ldr	r3, [pc, #188]	; (8008b44 <xPortStartScheduler+0x134>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	4a2d      	ldr	r2, [pc, #180]	; (8008b44 <xPortStartScheduler+0x134>)
 8008a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa2:	2b80      	cmp	r3, #128	; 0x80
 8008aa4:	d0ef      	beq.n	8008a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aa6:	4b27      	ldr	r3, [pc, #156]	; (8008b44 <xPortStartScheduler+0x134>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f1c3 0307 	rsb	r3, r3, #7
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d00a      	beq.n	8008ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	60bb      	str	r3, [r7, #8]
}
 8008ac4:	bf00      	nop
 8008ac6:	e7fe      	b.n	8008ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ac8:	4b1e      	ldr	r3, [pc, #120]	; (8008b44 <xPortStartScheduler+0x134>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	021b      	lsls	r3, r3, #8
 8008ace:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <xPortStartScheduler+0x134>)
 8008ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ad2:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <xPortStartScheduler+0x134>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ada:	4a1a      	ldr	r2, [pc, #104]	; (8008b44 <xPortStartScheduler+0x134>)
 8008adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ae6:	4b18      	ldr	r3, [pc, #96]	; (8008b48 <xPortStartScheduler+0x138>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a17      	ldr	r2, [pc, #92]	; (8008b48 <xPortStartScheduler+0x138>)
 8008aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008af2:	4b15      	ldr	r3, [pc, #84]	; (8008b48 <xPortStartScheduler+0x138>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a14      	ldr	r2, [pc, #80]	; (8008b48 <xPortStartScheduler+0x138>)
 8008af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008afe:	f000 f8dd 	bl	8008cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b02:	4b12      	ldr	r3, [pc, #72]	; (8008b4c <xPortStartScheduler+0x13c>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b08:	f000 f8fc 	bl	8008d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b0c:	4b10      	ldr	r3, [pc, #64]	; (8008b50 <xPortStartScheduler+0x140>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a0f      	ldr	r2, [pc, #60]	; (8008b50 <xPortStartScheduler+0x140>)
 8008b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b18:	f7ff ff66 	bl	80089e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b1c:	f7ff fa8c 	bl	8008038 <vTaskSwitchContext>
	prvTaskExitError();
 8008b20:	f7ff ff1c 	bl	800895c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	e000ed00 	.word	0xe000ed00
 8008b34:	410fc271 	.word	0x410fc271
 8008b38:	410fc270 	.word	0x410fc270
 8008b3c:	e000e400 	.word	0xe000e400
 8008b40:	200003e4 	.word	0x200003e4
 8008b44:	200003e8 	.word	0x200003e8
 8008b48:	e000ed20 	.word	0xe000ed20
 8008b4c:	20000018 	.word	0x20000018
 8008b50:	e000ef34 	.word	0xe000ef34

08008b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	607b      	str	r3, [r7, #4]
}
 8008b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b6e:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <vPortEnterCritical+0x58>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3301      	adds	r3, #1
 8008b74:	4a0d      	ldr	r2, [pc, #52]	; (8008bac <vPortEnterCritical+0x58>)
 8008b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b78:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <vPortEnterCritical+0x58>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d10f      	bne.n	8008ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b80:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <vPortEnterCritical+0x5c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	603b      	str	r3, [r7, #0]
}
 8008b9c:	bf00      	nop
 8008b9e:	e7fe      	b.n	8008b9e <vPortEnterCritical+0x4a>
	}
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	20000018 	.word	0x20000018
 8008bb0:	e000ed04 	.word	0xe000ed04

08008bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bba:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <vPortExitCritical+0x50>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10a      	bne.n	8008bd8 <vPortExitCritical+0x24>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	607b      	str	r3, [r7, #4]
}
 8008bd4:	bf00      	nop
 8008bd6:	e7fe      	b.n	8008bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <vPortExitCritical+0x50>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	4a09      	ldr	r2, [pc, #36]	; (8008c04 <vPortExitCritical+0x50>)
 8008be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008be2:	4b08      	ldr	r3, [pc, #32]	; (8008c04 <vPortExitCritical+0x50>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d105      	bne.n	8008bf6 <vPortExitCritical+0x42>
 8008bea:	2300      	movs	r3, #0
 8008bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	f383 8811 	msr	BASEPRI, r3
}
 8008bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000018 	.word	0x20000018
	...

08008c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c10:	f3ef 8009 	mrs	r0, PSP
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <pxCurrentTCBConst>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	f01e 0f10 	tst.w	lr, #16
 8008c20:	bf08      	it	eq
 8008c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2a:	6010      	str	r0, [r2, #0]
 8008c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c34:	f380 8811 	msr	BASEPRI, r0
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f7ff f9fa 	bl	8008038 <vTaskSwitchContext>
 8008c44:	f04f 0000 	mov.w	r0, #0
 8008c48:	f380 8811 	msr	BASEPRI, r0
 8008c4c:	bc09      	pop	{r0, r3}
 8008c4e:	6819      	ldr	r1, [r3, #0]
 8008c50:	6808      	ldr	r0, [r1, #0]
 8008c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c56:	f01e 0f10 	tst.w	lr, #16
 8008c5a:	bf08      	it	eq
 8008c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c60:	f380 8809 	msr	PSP, r0
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	f3af 8000 	nop.w

08008c70 <pxCurrentTCBConst>:
 8008c70:	200002b8 	.word	0x200002b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
}
 8008c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c92:	f7ff f919 	bl	8007ec8 <xTaskIncrementTick>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <SysTick_Handler+0x40>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	f383 8811 	msr	BASEPRI, r3
}
 8008cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <vPortSetupTimerInterrupt+0x34>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <vPortSetupTimerInterrupt+0x38>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ccc:	4b0a      	ldr	r3, [pc, #40]	; (8008cf8 <vPortSetupTimerInterrupt+0x3c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a0a      	ldr	r2, [pc, #40]	; (8008cfc <vPortSetupTimerInterrupt+0x40>)
 8008cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd6:	099b      	lsrs	r3, r3, #6
 8008cd8:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <vPortSetupTimerInterrupt+0x44>)
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cde:	4b04      	ldr	r3, [pc, #16]	; (8008cf0 <vPortSetupTimerInterrupt+0x34>)
 8008ce0:	2207      	movs	r2, #7
 8008ce2:	601a      	str	r2, [r3, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	e000e010 	.word	0xe000e010
 8008cf4:	e000e018 	.word	0xe000e018
 8008cf8:	2000000c 	.word	0x2000000c
 8008cfc:	10624dd3 	.word	0x10624dd3
 8008d00:	e000e014 	.word	0xe000e014

08008d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d14 <vPortEnableVFP+0x10>
 8008d08:	6801      	ldr	r1, [r0, #0]
 8008d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d0e:	6001      	str	r1, [r0, #0]
 8008d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d12:	bf00      	nop
 8008d14:	e000ed88 	.word	0xe000ed88

08008d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d1e:	f3ef 8305 	mrs	r3, IPSR
 8008d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b0f      	cmp	r3, #15
 8008d28:	d914      	bls.n	8008d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d2a:	4a17      	ldr	r2, [pc, #92]	; (8008d88 <vPortValidateInterruptPriority+0x70>)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d34:	4b15      	ldr	r3, [pc, #84]	; (8008d8c <vPortValidateInterruptPriority+0x74>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	7afa      	ldrb	r2, [r7, #11]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d20a      	bcs.n	8008d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	607b      	str	r3, [r7, #4]
}
 8008d50:	bf00      	nop
 8008d52:	e7fe      	b.n	8008d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d54:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <vPortValidateInterruptPriority+0x78>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d5c:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <vPortValidateInterruptPriority+0x7c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d90a      	bls.n	8008d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	603b      	str	r3, [r7, #0]
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <vPortValidateInterruptPriority+0x60>
	}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	e000e3f0 	.word	0xe000e3f0
 8008d8c:	200003e4 	.word	0x200003e4
 8008d90:	e000ed0c 	.word	0xe000ed0c
 8008d94:	200003e8 	.word	0x200003e8

08008d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	; 0x28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008da4:	f7fe ffc4 	bl	8007d30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008da8:	4b5b      	ldr	r3, [pc, #364]	; (8008f18 <pvPortMalloc+0x180>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008db0:	f000 f920 	bl	8008ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008db4:	4b59      	ldr	r3, [pc, #356]	; (8008f1c <pvPortMalloc+0x184>)
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4013      	ands	r3, r2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f040 8093 	bne.w	8008ee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01d      	beq.n	8008e04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008dc8:	2208      	movs	r2, #8
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4413      	add	r3, r2
 8008dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f003 0307 	and.w	r3, r3, #7
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d014      	beq.n	8008e04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f023 0307 	bic.w	r3, r3, #7
 8008de0:	3308      	adds	r3, #8
 8008de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <pvPortMalloc+0x6c>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	617b      	str	r3, [r7, #20]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d06e      	beq.n	8008ee8 <pvPortMalloc+0x150>
 8008e0a:	4b45      	ldr	r3, [pc, #276]	; (8008f20 <pvPortMalloc+0x188>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d869      	bhi.n	8008ee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e14:	4b43      	ldr	r3, [pc, #268]	; (8008f24 <pvPortMalloc+0x18c>)
 8008e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e18:	4b42      	ldr	r3, [pc, #264]	; (8008f24 <pvPortMalloc+0x18c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e1e:	e004      	b.n	8008e2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d903      	bls.n	8008e3c <pvPortMalloc+0xa4>
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1f1      	bne.n	8008e20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e3c:	4b36      	ldr	r3, [pc, #216]	; (8008f18 <pvPortMalloc+0x180>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d050      	beq.n	8008ee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2208      	movs	r2, #8
 8008e4c:	4413      	add	r3, r2
 8008e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	2308      	movs	r3, #8
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d91f      	bls.n	8008ea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00a      	beq.n	8008e90 <pvPortMalloc+0xf8>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	613b      	str	r3, [r7, #16]
}
 8008e8c:	bf00      	nop
 8008e8e:	e7fe      	b.n	8008e8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ea2:	69b8      	ldr	r0, [r7, #24]
 8008ea4:	f000 f908 	bl	80090b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ea8:	4b1d      	ldr	r3, [pc, #116]	; (8008f20 <pvPortMalloc+0x188>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	4a1b      	ldr	r2, [pc, #108]	; (8008f20 <pvPortMalloc+0x188>)
 8008eb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eb6:	4b1a      	ldr	r3, [pc, #104]	; (8008f20 <pvPortMalloc+0x188>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b1b      	ldr	r3, [pc, #108]	; (8008f28 <pvPortMalloc+0x190>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d203      	bcs.n	8008eca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ec2:	4b17      	ldr	r3, [pc, #92]	; (8008f20 <pvPortMalloc+0x188>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a18      	ldr	r2, [pc, #96]	; (8008f28 <pvPortMalloc+0x190>)
 8008ec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	4b13      	ldr	r3, [pc, #76]	; (8008f1c <pvPortMalloc+0x184>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ede:	4b13      	ldr	r3, [pc, #76]	; (8008f2c <pvPortMalloc+0x194>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	4a11      	ldr	r2, [pc, #68]	; (8008f2c <pvPortMalloc+0x194>)
 8008ee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ee8:	f7fe ff30 	bl	8007d4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <pvPortMalloc+0x174>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	60fb      	str	r3, [r7, #12]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <pvPortMalloc+0x172>
	return pvReturn;
 8008f0c:	69fb      	ldr	r3, [r7, #28]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3728      	adds	r7, #40	; 0x28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20003ff4 	.word	0x20003ff4
 8008f1c:	20004008 	.word	0x20004008
 8008f20:	20003ff8 	.word	0x20003ff8
 8008f24:	20003fec 	.word	0x20003fec
 8008f28:	20003ffc 	.word	0x20003ffc
 8008f2c:	20004000 	.word	0x20004000

08008f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d04d      	beq.n	8008fde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f42:	2308      	movs	r3, #8
 8008f44:	425b      	negs	r3, r3
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	4413      	add	r3, r2
 8008f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	4b24      	ldr	r3, [pc, #144]	; (8008fe8 <vPortFree+0xb8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4013      	ands	r3, r2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <vPortFree+0x44>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	60fb      	str	r3, [r7, #12]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00a      	beq.n	8008f92 <vPortFree+0x62>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	60bb      	str	r3, [r7, #8]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	4b14      	ldr	r3, [pc, #80]	; (8008fe8 <vPortFree+0xb8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01e      	beq.n	8008fde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d11a      	bne.n	8008fde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <vPortFree+0xb8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fb8:	f7fe feba 	bl	8007d30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	4b0a      	ldr	r3, [pc, #40]	; (8008fec <vPortFree+0xbc>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	4a09      	ldr	r2, [pc, #36]	; (8008fec <vPortFree+0xbc>)
 8008fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fca:	6938      	ldr	r0, [r7, #16]
 8008fcc:	f000 f874 	bl	80090b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fd0:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <vPortFree+0xc0>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	4a06      	ldr	r2, [pc, #24]	; (8008ff0 <vPortFree+0xc0>)
 8008fd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008fda:	f7fe feb7 	bl	8007d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fde:	bf00      	nop
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20004008 	.word	0x20004008
 8008fec:	20003ff8 	.word	0x20003ff8
 8008ff0:	20004004 	.word	0x20004004

08008ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009000:	4b27      	ldr	r3, [pc, #156]	; (80090a0 <prvHeapInit+0xac>)
 8009002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00c      	beq.n	8009028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3307      	adds	r3, #7
 8009012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0307 	bic.w	r3, r3, #7
 800901a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	4a1f      	ldr	r2, [pc, #124]	; (80090a0 <prvHeapInit+0xac>)
 8009024:	4413      	add	r3, r2
 8009026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800902c:	4a1d      	ldr	r2, [pc, #116]	; (80090a4 <prvHeapInit+0xb0>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009032:	4b1c      	ldr	r3, [pc, #112]	; (80090a4 <prvHeapInit+0xb0>)
 8009034:	2200      	movs	r2, #0
 8009036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	4413      	add	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009040:	2208      	movs	r2, #8
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	1a9b      	subs	r3, r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 0307 	bic.w	r3, r3, #7
 800904e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4a15      	ldr	r2, [pc, #84]	; (80090a8 <prvHeapInit+0xb4>)
 8009054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009056:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <prvHeapInit+0xb4>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2200      	movs	r2, #0
 800905c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800905e:	4b12      	ldr	r3, [pc, #72]	; (80090a8 <prvHeapInit+0xb4>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009074:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <prvHeapInit+0xb4>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	4a0a      	ldr	r2, [pc, #40]	; (80090ac <prvHeapInit+0xb8>)
 8009082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4a09      	ldr	r2, [pc, #36]	; (80090b0 <prvHeapInit+0xbc>)
 800908a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800908c:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <prvHeapInit+0xc0>)
 800908e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009092:	601a      	str	r2, [r3, #0]
}
 8009094:	bf00      	nop
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	200003ec 	.word	0x200003ec
 80090a4:	20003fec 	.word	0x20003fec
 80090a8:	20003ff4 	.word	0x20003ff4
 80090ac:	20003ffc 	.word	0x20003ffc
 80090b0:	20003ff8 	.word	0x20003ff8
 80090b4:	20004008 	.word	0x20004008

080090b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090c0:	4b28      	ldr	r3, [pc, #160]	; (8009164 <prvInsertBlockIntoFreeList+0xac>)
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e002      	b.n	80090cc <prvInsertBlockIntoFreeList+0x14>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d8f7      	bhi.n	80090c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	4413      	add	r3, r2
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d108      	bne.n	80090fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	441a      	add	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	441a      	add	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d118      	bne.n	8009140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b15      	ldr	r3, [pc, #84]	; (8009168 <prvInsertBlockIntoFreeList+0xb0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d00d      	beq.n	8009136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	441a      	add	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	e008      	b.n	8009148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009136:	4b0c      	ldr	r3, [pc, #48]	; (8009168 <prvInsertBlockIntoFreeList+0xb0>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	e003      	b.n	8009148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	429a      	cmp	r2, r3
 800914e:	d002      	beq.n	8009156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009156:	bf00      	nop
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	20003fec 	.word	0x20003fec
 8009168:	20003ff4 	.word	0x20003ff4

0800916c <__libc_init_array>:
 800916c:	b570      	push	{r4, r5, r6, lr}
 800916e:	4d0d      	ldr	r5, [pc, #52]	; (80091a4 <__libc_init_array+0x38>)
 8009170:	4c0d      	ldr	r4, [pc, #52]	; (80091a8 <__libc_init_array+0x3c>)
 8009172:	1b64      	subs	r4, r4, r5
 8009174:	10a4      	asrs	r4, r4, #2
 8009176:	2600      	movs	r6, #0
 8009178:	42a6      	cmp	r6, r4
 800917a:	d109      	bne.n	8009190 <__libc_init_array+0x24>
 800917c:	4d0b      	ldr	r5, [pc, #44]	; (80091ac <__libc_init_array+0x40>)
 800917e:	4c0c      	ldr	r4, [pc, #48]	; (80091b0 <__libc_init_array+0x44>)
 8009180:	f000 f82e 	bl	80091e0 <_init>
 8009184:	1b64      	subs	r4, r4, r5
 8009186:	10a4      	asrs	r4, r4, #2
 8009188:	2600      	movs	r6, #0
 800918a:	42a6      	cmp	r6, r4
 800918c:	d105      	bne.n	800919a <__libc_init_array+0x2e>
 800918e:	bd70      	pop	{r4, r5, r6, pc}
 8009190:	f855 3b04 	ldr.w	r3, [r5], #4
 8009194:	4798      	blx	r3
 8009196:	3601      	adds	r6, #1
 8009198:	e7ee      	b.n	8009178 <__libc_init_array+0xc>
 800919a:	f855 3b04 	ldr.w	r3, [r5], #4
 800919e:	4798      	blx	r3
 80091a0:	3601      	adds	r6, #1
 80091a2:	e7f2      	b.n	800918a <__libc_init_array+0x1e>
 80091a4:	08009338 	.word	0x08009338
 80091a8:	08009338 	.word	0x08009338
 80091ac:	08009338 	.word	0x08009338
 80091b0:	0800933c 	.word	0x0800933c

080091b4 <memcpy>:
 80091b4:	440a      	add	r2, r1
 80091b6:	4291      	cmp	r1, r2
 80091b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091bc:	d100      	bne.n	80091c0 <memcpy+0xc>
 80091be:	4770      	bx	lr
 80091c0:	b510      	push	{r4, lr}
 80091c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ca:	4291      	cmp	r1, r2
 80091cc:	d1f9      	bne.n	80091c2 <memcpy+0xe>
 80091ce:	bd10      	pop	{r4, pc}

080091d0 <memset>:
 80091d0:	4402      	add	r2, r0
 80091d2:	4603      	mov	r3, r0
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d100      	bne.n	80091da <memset+0xa>
 80091d8:	4770      	bx	lr
 80091da:	f803 1b01 	strb.w	r1, [r3], #1
 80091de:	e7f9      	b.n	80091d4 <memset+0x4>

080091e0 <_init>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	bf00      	nop
 80091e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e6:	bc08      	pop	{r3}
 80091e8:	469e      	mov	lr, r3
 80091ea:	4770      	bx	lr

080091ec <_fini>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

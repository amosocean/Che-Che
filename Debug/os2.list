
os2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800c54c  0800c54c  0001c54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c840  0800c840  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800c840  0800c840  0001c840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c848  0800c848  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c848  0800c848  0001c848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c84c  0800c84c  0001c84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043bc  20000088  0800c8d8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004444  0800c8d8  00024444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aaa1  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003832  00000000  00000000  0003ab59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003f8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a1e  00000000  00000000  00040d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174b7  00000000  00000000  0006572e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db56d  00000000  00000000  0007cbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006228  00000000  00000000  001581a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c534 	.word	0x0800c534

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c534 	.word	0x0800c534

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96e 	b.w	8000df0 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468c      	mov	ip, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8083 	bne.w	8000c42 <__udivmoddi4+0x116>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d947      	bls.n	8000bd2 <__udivmoddi4+0xa6>
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	b142      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	f1c2 0020 	rsb	r0, r2, #32
 8000b4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b50:	4091      	lsls	r1, r2
 8000b52:	4097      	lsls	r7, r2
 8000b54:	ea40 0c01 	orr.w	ip, r0, r1
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbbc f6f8 	udiv	r6, ip, r8
 8000b64:	fa1f fe87 	uxth.w	lr, r7
 8000b68:	fb08 c116 	mls	r1, r8, r6, ip
 8000b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b70:	fb06 f10e 	mul.w	r1, r6, lr
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b7e:	f080 8119 	bcs.w	8000db4 <__udivmoddi4+0x288>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8116 	bls.w	8000db4 <__udivmoddi4+0x288>
 8000b88:	3e02      	subs	r6, #2
 8000b8a:	443b      	add	r3, r7
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3310 	mls	r3, r8, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	45a6      	cmp	lr, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8105 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000bae:	45a6      	cmp	lr, r4
 8000bb0:	f240 8102 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	443c      	add	r4, r7
 8000bb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bbc:	eba4 040e 	sub.w	r4, r4, lr
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	b11d      	cbz	r5, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	b902      	cbnz	r2, 8000bd6 <__udivmoddi4+0xaa>
 8000bd4:	deff      	udf	#255	; 0xff
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d150      	bne.n	8000c80 <__udivmoddi4+0x154>
 8000bde:	1bcb      	subs	r3, r1, r7
 8000be0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	2601      	movs	r6, #1
 8000bea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bee:	0c21      	lsrs	r1, r4, #16
 8000bf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000c00:	1879      	adds	r1, r7, r1
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0xe2>
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	f200 80e9 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1ac9      	subs	r1, r1, r3
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x10c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x10a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80d9 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e7bf      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x12e>
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	f000 80b1 	beq.w	8000dae <__udivmoddi4+0x282>
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c52:	4630      	mov	r0, r6
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f683 	clz	r6, r3
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d14a      	bne.n	8000cf8 <__udivmoddi4+0x1cc>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0x140>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80b8 	bhi.w	8000ddc <__udivmoddi4+0x2b0>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	468c      	mov	ip, r1
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d0a8      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f603 	lsr.w	r6, r0, r3
 8000c88:	4097      	lsls	r7, r2
 8000c8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c92:	40d9      	lsrs	r1, r3
 8000c94:	4330      	orrs	r0, r6
 8000c96:	0c03      	lsrs	r3, r0, #16
 8000c98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c9c:	fa1f f887 	uxth.w	r8, r7
 8000ca0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb06 f108 	mul.w	r1, r6, r8
 8000cac:	4299      	cmp	r1, r3
 8000cae:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x19c>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cba:	f080 808d 	bcs.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 808a 	bls.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b281      	uxth	r1, r0
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd8:	fb00 f308 	mul.w	r3, r0, r8
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x1c4>
 8000ce0:	1879      	adds	r1, r7, r1
 8000ce2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce6:	d273      	bcs.n	8000dd0 <__udivmoddi4+0x2a4>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d971      	bls.n	8000dd0 <__udivmoddi4+0x2a4>
 8000cec:	3802      	subs	r0, #2
 8000cee:	4439      	add	r1, r7
 8000cf0:	1acb      	subs	r3, r1, r3
 8000cf2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cf6:	e778      	b.n	8000bea <__udivmoddi4+0xbe>
 8000cf8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000d00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d04:	431c      	orrs	r4, r3
 8000d06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d16:	431f      	orrs	r7, r3
 8000d18:	0c3b      	lsrs	r3, r7, #16
 8000d1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1e:	fa1f f884 	uxth.w	r8, r4
 8000d22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d2e:	458a      	cmp	sl, r1
 8000d30:	fa02 f206 	lsl.w	r2, r2, r6
 8000d34:	fa00 f306 	lsl.w	r3, r0, r6
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x220>
 8000d3a:	1861      	adds	r1, r4, r1
 8000d3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d40:	d248      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d42:	458a      	cmp	sl, r1
 8000d44:	d946      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4421      	add	r1, r4
 8000d4c:	eba1 010a 	sub.w	r1, r1, sl
 8000d50:	b2bf      	uxth	r7, r7
 8000d52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d5e:	fb00 f808 	mul.w	r8, r0, r8
 8000d62:	45b8      	cmp	r8, r7
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x24a>
 8000d66:	19e7      	adds	r7, r4, r7
 8000d68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6c:	d22e      	bcs.n	8000dcc <__udivmoddi4+0x2a0>
 8000d6e:	45b8      	cmp	r8, r7
 8000d70:	d92c      	bls.n	8000dcc <__udivmoddi4+0x2a0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4427      	add	r7, r4
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	eba7 0708 	sub.w	r7, r7, r8
 8000d7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d82:	454f      	cmp	r7, r9
 8000d84:	46c6      	mov	lr, r8
 8000d86:	4649      	mov	r1, r9
 8000d88:	d31a      	bcc.n	8000dc0 <__udivmoddi4+0x294>
 8000d8a:	d017      	beq.n	8000dbc <__udivmoddi4+0x290>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x27a>
 8000d8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d92:	eb67 0701 	sbc.w	r7, r7, r1
 8000d96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d9a:	40f2      	lsrs	r2, r6
 8000d9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000da0:	40f7      	lsrs	r7, r6
 8000da2:	e9c5 2700 	strd	r2, r7, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e70b      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0x60>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6fd      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dbc:	4543      	cmp	r3, r8
 8000dbe:	d2e5      	bcs.n	8000d8c <__udivmoddi4+0x260>
 8000dc0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7df      	b.n	8000d8c <__udivmoddi4+0x260>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e7d2      	b.n	8000d76 <__udivmoddi4+0x24a>
 8000dd0:	4660      	mov	r0, ip
 8000dd2:	e78d      	b.n	8000cf0 <__udivmoddi4+0x1c4>
 8000dd4:	4681      	mov	r9, r0
 8000dd6:	e7b9      	b.n	8000d4c <__udivmoddi4+0x220>
 8000dd8:	4666      	mov	r6, ip
 8000dda:	e775      	b.n	8000cc8 <__udivmoddi4+0x19c>
 8000ddc:	4630      	mov	r0, r6
 8000dde:	e74a      	b.n	8000c76 <__udivmoddi4+0x14a>
 8000de0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de4:	4439      	add	r1, r7
 8000de6:	e713      	b.n	8000c10 <__udivmoddi4+0xe4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	443c      	add	r4, r7
 8000dec:	e724      	b.n	8000c38 <__udivmoddi4+0x10c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <vApplicationGetIdleTaskMemory+0x30>)
 8000e0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000a4 	.word	0x200000a4
 8000e24:	200000f8 	.word	0x200000f8

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b0c8      	sub	sp, #288	; 0x120
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f004 f96f 	bl	8005110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f95b 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f000 fccd 	bl	80017d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e3a:	f000 fc23 	bl	8001684 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000e3e:	f000 fa87 	bl	8001350 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e42:	f000 fafd 	bl	8001440 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000e46:	f000 fc47 	bl	80016d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e4a:	f000 fc6f 	bl	800172c <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000e4e:	f000 fbef 	bl	8001630 <MX_UART5_Init>
  MX_TIM2_Init();
 8000e52:	f000 fa29 	bl	80012a8 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000e56:	f000 fb6b 	bl	8001530 <MX_TIM8_Init>
  MX_UART4_Init();
 8000e5a:	f000 fbbf 	bl	80015dc <MX_UART4_Init>
  MX_RTC_Init();
 8000e5e:	f000 f9c9 	bl	80011f4 <MX_RTC_Init>
  MX_USART6_UART_Init();
 8000e62:	f000 fc8d 	bl	8001780 <MX_USART6_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CameraUARTSem */
  osSemaphoreDef(CameraUARTSem);
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  CameraUARTSemHandle = osSemaphoreCreate(osSemaphore(CameraUARTSem), 1);
 8000e72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e76:	2101      	movs	r1, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f007 fea6 	bl	8008bca <osSemaphoreCreate>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a82      	ldr	r2, [pc, #520]	; (800108c <main+0x264>)
 8000e82:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReadySem */
  osSemaphoreDef(GyroReadySem);
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  GyroReadySemHandle = osSemaphoreCreate(osSemaphore(GyroReadySem), 1);
 8000e90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e94:	2101      	movs	r1, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f007 fe97 	bl	8008bca <osSemaphoreCreate>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a7c      	ldr	r2, [pc, #496]	; (8001090 <main+0x268>)
 8000ea0:	6013      	str	r3, [r2, #0]

  /* definition and creation of CriticalDistanceSem */
  osSemaphoreDef(CriticalDistanceSem);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  CriticalDistanceSemHandle = osSemaphoreCreate(osSemaphore(CriticalDistanceSem), 1);
 8000eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f007 fe88 	bl	8008bca <osSemaphoreCreate>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a75      	ldr	r2, [pc, #468]	; (8001094 <main+0x26c>)
 8000ebe:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageSem */
  osSemaphoreDef(MileageSem);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  MileageSemHandle = osSemaphoreCreate(osSemaphore(MileageSem), 1);
 8000ecc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f007 fe79 	bl	8008bca <osSemaphoreCreate>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a6f      	ldr	r2, [pc, #444]	; (8001098 <main+0x270>)
 8000edc:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageNegSem */
  osSemaphoreDef(MileageNegSem);
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  MileageNegSemHandle = osSemaphoreCreate(osSemaphore(MileageNegSem), 1);
 8000eea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f007 fe6a 	bl	8008bca <osSemaphoreCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a68      	ldr	r2, [pc, #416]	; (800109c <main+0x274>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* definition and creation of gomile6Sem */
  osSemaphoreDef(gomile6Sem);
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gomile6SemHandle = osSemaphoreCreate(osSemaphore(gomile6Sem), 1);
 8000f08:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f007 fe5b 	bl	8008bca <osSemaphoreCreate>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a62      	ldr	r2, [pc, #392]	; (80010a0 <main+0x278>)
 8000f18:	6013      	str	r3, [r2, #0]

  /* definition and creation of UltraFrontSem */
  osSemaphoreDef(UltraFrontSem);
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  UltraFrontSemHandle = osSemaphoreCreate(osSemaphore(UltraFrontSem), 1);
 8000f26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f007 fe4c 	bl	8008bca <osSemaphoreCreate>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a5b      	ldr	r2, [pc, #364]	; (80010a4 <main+0x27c>)
 8000f36:	6013      	str	r3, [r2, #0]

  /* definition and creation of ApriltagSem */
  osSemaphoreDef(ApriltagSem);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  ApriltagSemHandle = osSemaphoreCreate(osSemaphore(ApriltagSem), 1);
 8000f44:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f007 fe3d 	bl	8008bca <osSemaphoreCreate>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a55      	ldr	r2, [pc, #340]	; (80010a8 <main+0x280>)
 8000f54:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Stream */
  osThreadDef(Stream, StreamTask, osPriorityNormal, 0, 128);
 8000f56:	4b55      	ldr	r3, [pc, #340]	; (80010ac <main+0x284>)
 8000f58:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000f5c:	461d      	mov	r5, r3
 8000f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StreamHandle = osThreadCreate(osThread(Stream), NULL);
 8000f6a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f007 fdde 	bl	8008b32 <osThreadCreate>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <main+0x288>)
 8000f7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of PIDCamera */
  osThreadDef(PIDCamera, PIDCameraTask, osPriorityNormal, 0, 128);
 8000f7c:	4b4d      	ldr	r3, [pc, #308]	; (80010b4 <main+0x28c>)
 8000f7e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PIDCameraHandle = osThreadCreate(osThread(PIDCamera), NULL);
 8000f90:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 fdcb 	bl	8008b32 <osThreadCreate>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a46      	ldr	r2, [pc, #280]	; (80010b8 <main+0x290>)
 8000fa0:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReceive */
  osThreadDef(GyroReceive, GyroReceiveTask, osPriorityNormal, 0, 128);
 8000fa2:	4b46      	ldr	r3, [pc, #280]	; (80010bc <main+0x294>)
 8000fa4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000fa8:	461d      	mov	r5, r3
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GyroReceiveHandle = osThreadCreate(osThread(GyroReceive), NULL);
 8000fb6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 fdb8 	bl	8008b32 <osThreadCreate>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a3e      	ldr	r2, [pc, #248]	; (80010c0 <main+0x298>)
 8000fc6:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistanceCheck */
  osThreadDef(DistanceCheck, DistanceCheckTask, osPriorityNormal, 0, 128);
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <main+0x29c>)
 8000fca:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000fce:	461d      	mov	r5, r3
 8000fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DistanceCheckHandle = osThreadCreate(osThread(DistanceCheck), NULL);
 8000fdc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f007 fda5 	bl	8008b32 <osThreadCreate>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a37      	ldr	r2, [pc, #220]	; (80010c8 <main+0x2a0>)
 8000fec:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mileage */
  osThreadDef(Mileage, MileageTask, osPriorityNormal, 0, 128);
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <main+0x2a4>)
 8000ff0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ffe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MileageHandle = osThreadCreate(osThread(Mileage), NULL);
 8001002:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f007 fd92 	bl	8008b32 <osThreadCreate>
 800100e:	4603      	mov	r3, r0
 8001010:	4a2f      	ldr	r2, [pc, #188]	; (80010d0 <main+0x2a8>)
 8001012:	6013      	str	r3, [r2, #0]

  /* definition and creation of GoStraight */
  osThreadDef(GoStraight, GoStraightTask, osPriorityNormal, 0, 128);
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <main+0x2ac>)
 8001016:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800101a:	461d      	mov	r5, r3
 800101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001020:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001024:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GoStraightHandle = osThreadCreate(osThread(GoStraight), NULL);
 8001028:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f007 fd7f 	bl	8008b32 <osThreadCreate>
 8001034:	4603      	mov	r3, r0
 8001036:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <main+0x2b0>)
 8001038:	6013      	str	r3, [r2, #0]

  /* definition and creation of Colorcheck */
  osThreadDef(Colorcheck, ColorcheckTask, osPriorityNormal, 0, 128);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4a27      	ldr	r2, [pc, #156]	; (80010dc <main+0x2b4>)
 8001040:	461c      	mov	r4, r3
 8001042:	4615      	mov	r5, r2
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800104c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ColorcheckHandle = osThreadCreate(osThread(Colorcheck), NULL);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f007 fd6b 	bl	8008b32 <osThreadCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <main+0x2b8>)
 8001060:	6013      	str	r3, [r2, #0]

  /* definition and creation of Wireless */
  osThreadDef(Wireless, WirelessTask, osPriorityNormal, 0, 128);
 8001062:	463b      	mov	r3, r7
 8001064:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <main+0x2bc>)
 8001066:	461c      	mov	r4, r3
 8001068:	4615      	mov	r5, r2
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001072:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WirelessHandle = osThreadCreate(osThread(Wireless), NULL);
 8001076:	463b      	mov	r3, r7
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f007 fd59 	bl	8008b32 <osThreadCreate>
 8001080:	4603      	mov	r3, r0
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <main+0x2c0>)
 8001084:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001086:	f007 fd3d 	bl	8008b04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800108a:	e7fe      	b.n	800108a <main+0x262>
 800108c:	20004198 	.word	0x20004198
 8001090:	200042ac 	.word	0x200042ac
 8001094:	200040ac 	.word	0x200040ac
 8001098:	20004280 	.word	0x20004280
 800109c:	200042b4 	.word	0x200042b4
 80010a0:	200040b0 	.word	0x200040b0
 80010a4:	2000419c 	.word	0x2000419c
 80010a8:	200042b0 	.word	0x200042b0
 80010ac:	0800c5a8 	.word	0x0800c5a8
 80010b0:	2000427c 	.word	0x2000427c
 80010b4:	0800c5c4 	.word	0x0800c5c4
 80010b8:	20004194 	.word	0x20004194
 80010bc:	0800c5e0 	.word	0x0800c5e0
 80010c0:	200043e4 	.word	0x200043e4
 80010c4:	0800c5fc 	.word	0x0800c5fc
 80010c8:	200041a0 	.word	0x200041a0
 80010cc:	0800c618 	.word	0x0800c618
 80010d0:	200040b8 	.word	0x200040b8
 80010d4:	0800c634 	.word	0x0800c634
 80010d8:	200041a4 	.word	0x200041a4
 80010dc:	0800c650 	.word	0x0800c650
 80010e0:	200042a4 	.word	0x200042a4
 80010e4:	0800c66c 	.word	0x0800c66c
 80010e8:	200043e0 	.word	0x200043e0

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b098      	sub	sp, #96	; 0x60
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00a fa46 	bl	800b58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b32      	ldr	r3, [pc, #200]	; (80011ec <SystemClock_Config+0x100>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a31      	ldr	r2, [pc, #196]	; (80011ec <SystemClock_Config+0x100>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <SystemClock_Config+0x100>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <SystemClock_Config+0x104>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <SystemClock_Config+0x104>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <SystemClock_Config+0x104>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001156:	2309      	movs	r3, #9
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001164:	2302      	movs	r3, #2
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001168:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800116e:	2304      	movs	r3, #4
 8001170:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001172:	23a8      	movs	r3, #168	; 0xa8
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001176:	2302      	movs	r3, #2
 8001178:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117a:	2304      	movs	r3, #4
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fb4a 	bl	800581c <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800118e:	f003 fb45 	bl	800481c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800119e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2105      	movs	r1, #5
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fdab 	bl	8005d0c <HAL_RCC_ClockConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011bc:	f003 fb2e 	bl	800481c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011c0:	2302      	movs	r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fff2 	bl	80061b8 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80011da:	f003 fb1f 	bl	800481c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80011de:	f004 fe7b 	bl	8005ed8 <HAL_RCC_EnableCSS>
}
 80011e2:	bf00      	nop
 80011e4:	3760      	adds	r7, #96	; 0x60
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40007000 	.word	0x40007000

080011f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <MX_RTC_Init+0xac>)
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001210:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <MX_RTC_Init+0xac>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_RTC_Init+0xac>)
 800121a:	227f      	movs	r2, #127	; 0x7f
 800121c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <MX_RTC_Init+0xac>)
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_RTC_Init+0xac>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <MX_RTC_Init+0xac>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_RTC_Init+0xac>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001236:	481a      	ldr	r0, [pc, #104]	; (80012a0 <MX_RTC_Init+0xac>)
 8001238:	f005 f8a0 	bl	800637c <HAL_RTC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001242:	f003 faeb 	bl	800481c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001246:	2300      	movs	r3, #0
 8001248:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800124a:	2300      	movs	r3, #0
 800124c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800124e:	2300      	movs	r3, #0
 8001250:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2201      	movs	r2, #1
 800125e:	4619      	mov	r1, r3
 8001260:	480f      	ldr	r0, [pc, #60]	; (80012a0 <MX_RTC_Init+0xac>)
 8001262:	f005 f91c 	bl	800649e <HAL_RTC_SetTime>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800126c:	f003 fad6 	bl	800481c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001270:	2301      	movs	r3, #1
 8001272:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001274:	2301      	movs	r3, #1
 8001276:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001278:	2301      	movs	r3, #1
 800127a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800127c:	2300      	movs	r3, #0
 800127e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	2201      	movs	r2, #1
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_RTC_Init+0xac>)
 8001288:	f005 fa24 	bl	80066d4 <HAL_RTC_SetDate>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001292:	f003 fac3 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20004284 	.word	0x20004284
 80012a4:	40002800 	.word	0x40002800

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2224      	movs	r2, #36	; 0x24
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00a f968 	bl	800b58c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_TIM2_Init+0xa4>)
 80012c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_TIM2_Init+0xa4>)
 80012ce:	2203      	movs	r2, #3
 80012d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_TIM2_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_TIM2_Init+0xa4>)
 80012da:	f241 3287 	movw	r2, #4999	; 0x1387
 80012de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_TIM2_Init+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_TIM2_Init+0xa4>)
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ec:	2303      	movs	r3, #3
 80012ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001304:	2301      	movs	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_TIM2_Init+0xa4>)
 8001318:	f005 fd44 	bl	8006da4 <HAL_TIM_Encoder_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001322:	f003 fa7b 	bl	800481c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_TIM2_Init+0xa4>)
 8001334:	f006 fc2c 	bl	8007b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800133e:	f003 fa6d 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3730      	adds	r7, #48	; 0x30
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20004340 	.word	0x20004340

08001350 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <MX_TIM3_Init+0xe8>)
 8001382:	4a2e      	ldr	r2, [pc, #184]	; (800143c <MX_TIM3_Init+0xec>)
 8001384:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 601-1;
 8001386:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <MX_TIM3_Init+0xe8>)
 8001388:	f44f 7216 	mov.w	r2, #600	; 0x258
 800138c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_TIM3_Init+0xe8>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001394:	4b28      	ldr	r3, [pc, #160]	; (8001438 <MX_TIM3_Init+0xe8>)
 8001396:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800139a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_TIM3_Init+0xe8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_TIM3_Init+0xe8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a8:	4823      	ldr	r0, [pc, #140]	; (8001438 <MX_TIM3_Init+0xe8>)
 80013aa:	f005 fb19 	bl	80069e0 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013b4:	f003 fa32 	bl	800481c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c2:	4619      	mov	r1, r3
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <MX_TIM3_Init+0xe8>)
 80013c6:	f005 ffe7 	bl	8007398 <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013d0:	f003 fa24 	bl	800481c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013d4:	4818      	ldr	r0, [pc, #96]	; (8001438 <MX_TIM3_Init+0xe8>)
 80013d6:	f005 fbc3 	bl	8006b60 <HAL_TIM_PWM_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013e0:	f003 fa1c 	bl	800481c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	4619      	mov	r1, r3
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_TIM3_Init+0xe8>)
 80013f4:	f006 fbcc 	bl	8007b90 <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013fe:	f003 fa0d 	bl	800481c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM3_Init+0xe8>)
 800141a:	f005 feff 	bl	800721c <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001424:	f003 f9fa 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM3_Init+0xe8>)
 800142a:	f003 fafb 	bl	8004a24 <HAL_TIM_MspPostInit>

}
 800142e:	bf00      	nop
 8001430:	3738      	adds	r7, #56	; 0x38
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200041a8 	.word	0x200041a8
 800143c:	40000400 	.word	0x40000400

08001440 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001470:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <MX_TIM4_Init+0xe8>)
 8001472:	4a2e      	ldr	r2, [pc, #184]	; (800152c <MX_TIM4_Init+0xec>)
 8001474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 601-1;
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_TIM4_Init+0xe8>)
 8001478:	f44f 7216 	mov.w	r2, #600	; 0x258
 800147c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <MX_TIM4_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_TIM4_Init+0xe8>)
 8001486:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800148a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_TIM4_Init+0xe8>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_TIM4_Init+0xe8>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001498:	4823      	ldr	r0, [pc, #140]	; (8001528 <MX_TIM4_Init+0xe8>)
 800149a:	f005 faa1 	bl	80069e0 <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80014a4:	f003 f9ba 	bl	800481c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b2:	4619      	mov	r1, r3
 80014b4:	481c      	ldr	r0, [pc, #112]	; (8001528 <MX_TIM4_Init+0xe8>)
 80014b6:	f005 ff6f 	bl	8007398 <HAL_TIM_ConfigClockSource>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80014c0:	f003 f9ac 	bl	800481c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM4_Init+0xe8>)
 80014c6:	f005 fb4b 	bl	8006b60 <HAL_TIM_PWM_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80014d0:	f003 f9a4 	bl	800481c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	4619      	mov	r1, r3
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <MX_TIM4_Init+0xe8>)
 80014e4:	f006 fb54 	bl	8007b90 <HAL_TIMEx_MasterConfigSynchronization>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80014ee:	f003 f995 	bl	800481c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f2:	2360      	movs	r3, #96	; 0x60
 80014f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	4619      	mov	r1, r3
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM4_Init+0xe8>)
 800150a:	f005 fe87 	bl	800721c <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001514:	f003 f982 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM4_Init+0xe8>)
 800151a:	f003 fa83 	bl	8004a24 <HAL_TIM_MspPostInit>

}
 800151e:	bf00      	nop
 8001520:	3738      	adds	r7, #56	; 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20004108 	.word	0x20004108
 800152c:	40000800 	.word	0x40000800

08001530 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2224      	movs	r2, #36	; 0x24
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f00a f824 	bl	800b58c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_TIM8_Init+0xa4>)
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <MX_TIM8_Init+0xa8>)
 8001550:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <MX_TIM8_Init+0xa4>)
 8001554:	2203      	movs	r2, #3
 8001556:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <MX_TIM8_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 150;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_TIM8_Init+0xa4>)
 8001560:	2296      	movs	r2, #150	; 0x96
 8001562:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_TIM8_Init+0xa4>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_TIM8_Init+0xa4>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_TIM8_Init+0xa4>)
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001576:	2303      	movs	r3, #3
 8001578:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800158e:	2301      	movs	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_TIM8_Init+0xa4>)
 80015a2:	f005 fbff 	bl	8006da4 <HAL_TIM_Encoder_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 80015ac:	f003 f936 	bl	800481c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_TIM8_Init+0xa4>)
 80015be:	f006 fae7 	bl	8007b90 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 80015c8:	f003 f928 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3730      	adds	r7, #48	; 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200040bc 	.word	0x200040bc
 80015d8:	40010400 	.word	0x40010400

080015dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_UART4_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_UART4_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_UART4_Init+0x4c>)
 80015e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_UART4_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_UART4_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_UART4_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_UART4_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_UART4_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_UART4_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_UART4_Init+0x4c>)
 8001614:	f006 fb4c 	bl	8007cb0 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800161e:	f003 f8fd 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200042fc 	.word	0x200042fc
 800162c:	40004c00 	.word	0x40004c00

08001630 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_UART5_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_UART5_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_UART5_Init+0x4c>)
 800163c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001640:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_UART5_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_UART5_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_UART5_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_UART5_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_UART5_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_UART5_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_UART5_Init+0x4c>)
 8001668:	f006 fb22 	bl	8007cb0 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001672:	f003 f8d3 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200041f4 	.word	0x200041f4
 8001680:	40005000 	.word	0x40005000

08001684 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_USART1_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016bc:	f006 faf8 	bl	8007cb0 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f003 f8a9 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20004238 	.word	0x20004238
 80016d4:	40011000 	.word	0x40011000

080016d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <MX_USART2_UART_Init+0x50>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 8001710:	f006 face 	bl	8007cb0 <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800171a:	f003 f87f 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20004388 	.word	0x20004388
 8001728:	40004400 	.word	0x40004400

0800172c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_USART3_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001764:	f006 faa4 	bl	8007cb0 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f003 f855 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20004150 	.word	0x20004150
 800177c:	40004800 	.word	0x40004800

08001780 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_USART6_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 800178c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001790:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017b8:	f006 fa7a 	bl	8007cb0 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f003 f82b 	bl	800481c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200042b8 	.word	0x200042b8
 80017d0:	40011400 	.word	0x40011400

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	4b58      	ldr	r3, [pc, #352]	; (8001950 <MX_GPIO_Init+0x17c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a57      	ldr	r2, [pc, #348]	; (8001950 <MX_GPIO_Init+0x17c>)
 80017f4:	f043 0320 	orr.w	r3, r3, #32
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b55      	ldr	r3, [pc, #340]	; (8001950 <MX_GPIO_Init+0x17c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	4b51      	ldr	r3, [pc, #324]	; (8001950 <MX_GPIO_Init+0x17c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a50      	ldr	r2, [pc, #320]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a49      	ldr	r2, [pc, #292]	; (8001950 <MX_GPIO_Init+0x17c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a42      	ldr	r2, [pc, #264]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b40      	ldr	r3, [pc, #256]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a3b      	ldr	r2, [pc, #236]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <MX_GPIO_Init+0x17c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <MX_GPIO_Init+0x17c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a34      	ldr	r2, [pc, #208]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <MX_GPIO_Init+0x17c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a2d      	ldr	r2, [pc, #180]	; (8001950 <MX_GPIO_Init+0x17c>)
 800189c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <MX_GPIO_Init+0x17c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|LEDBlue_Pin|LEDGreen_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80018b4:	4827      	ldr	r0, [pc, #156]	; (8001954 <MX_GPIO_Init+0x180>)
 80018b6:	f003 ff7d 	bl	80057b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rightPWMGND_GPIO_Port, rightPWMGND_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c0:	4825      	ldr	r0, [pc, #148]	; (8001958 <MX_GPIO_Init+0x184>)
 80018c2:	f003 ff77 	bl	80057b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(leftPWMGND_GPIO_Port, leftPWMGND_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018cc:	4823      	ldr	r0, [pc, #140]	; (800195c <MX_GPIO_Init+0x188>)
 80018ce:	f003 ff71 	bl	80057b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018d2:	2310      	movs	r3, #16
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018da:	2302      	movs	r3, #2
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	481a      	ldr	r0, [pc, #104]	; (8001954 <MX_GPIO_Init+0x180>)
 80018ea:	f003 fdc7 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDBlue_Pin LEDGreen_Pin */
  GPIO_InitStruct.Pin = LEDBlue_Pin|LEDGreen_Pin;
 80018ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4813      	ldr	r0, [pc, #76]	; (8001954 <MX_GPIO_Init+0x180>)
 8001908:	f003 fdb8 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pin : rightPWMGND_Pin */
  GPIO_InitStruct.Pin = rightPWMGND_Pin;
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001916:	2302      	movs	r3, #2
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(rightPWMGND_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <MX_GPIO_Init+0x184>)
 8001926:	f003 fda9 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftPWMGND_Pin */
  GPIO_InitStruct.Pin = leftPWMGND_Pin;
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001934:	2302      	movs	r3, #2
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftPWMGND_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <MX_GPIO_Init+0x188>)
 8001944:	f003 fd9a 	bl	800547c <HAL_GPIO_Init>

}
 8001948:	bf00      	nop
 800194a:	3730      	adds	r7, #48	; 0x30
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40021400 	.word	0x40021400
 8001958:	40020c00 	.word	0x40020c00
 800195c:	40020000 	.word	0x40020000

08001960 <Car_Initial>:

/* USER CODE BEGIN 4 */
void Car_Initial(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 8001964:	f009 face 	bl	800af04 <vPortEnterCritical>
	state=Initial;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <Car_Initial+0x50>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
	temp_state = Unknow;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <Car_Initial+0x54>)
 8001970:	2228      	movs	r2, #40	; 0x28
 8001972:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001974:	2202      	movs	r2, #2
 8001976:	4910      	ldr	r1, [pc, #64]	; (80019b8 <Car_Initial+0x58>)
 8001978:	4810      	ldr	r0, [pc, #64]	; (80019bc <Car_Initial+0x5c>)
 800197a:	f006 fb1a 	bl	8007fb2 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);//�?????????????????????????????????????????????????????????????????????????启左侧PWM
 800197e:	2100      	movs	r1, #0
 8001980:	480f      	ldr	r0, [pc, #60]	; (80019c0 <Car_Initial+0x60>)
 8001982:	f005 f947 	bl	8006c14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);//�?????????????????????????????????????????????????????????????????????????启右侧PWM
 8001986:	2100      	movs	r1, #0
 8001988:	480e      	ldr	r0, [pc, #56]	; (80019c4 <Car_Initial+0x64>)
 800198a:	f005 f943 	bl	8006c14 <HAL_TIM_PWM_Start>
	taskEXIT_CRITICAL();
 800198e:	f009 fae9 	bl	800af64 <vPortExitCritical>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001992:	213c      	movs	r1, #60	; 0x3c
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <Car_Initial+0x68>)
 8001996:	f005 faab 	bl	8006ef0 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,500);
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <Car_Initial+0x68>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 80019a4:	4808      	ldr	r0, [pc, #32]	; (80019c8 <Car_Initial+0x68>)
 80019a6:	f005 f86b 	bl	8006a80 <HAL_TIM_Base_Start_IT>
	//vTaskSuspend(UART_RTHandle);//Suspend UART R and T
	//vTaskSuspend(PIDCameraHandle);//Suspend PID module
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200041f0 	.word	0x200041f0
 80019b4:	200042a8 	.word	0x200042a8
 80019b8:	200002f8 	.word	0x200002f8
 80019bc:	20004388 	.word	0x20004388
 80019c0:	200041a8 	.word	0x200041a8
 80019c4:	20004108 	.word	0x20004108
 80019c8:	20004340 	.word	0x20004340

080019cc <Car_Stop>:

void Car_Stop(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 80019d0:	f009 fa98 	bl	800af04 <vPortEnterCritical>
	PWM_SET_LEFT(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f000 fd3f 	bl	8002458 <PWM_SET_LEFT>
	PWM_SET_RIGHT(1);
 80019da:	2001      	movs	r0, #1
 80019dc:	f000 fd74 	bl	80024c8 <PWM_SET_RIGHT>
	taskEXIT_CRITICAL();
 80019e0:	f009 fac0 	bl	800af64 <vPortExitCritical>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <delay>:

void delay(uint32_t time_ms)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	uint32_t PreviousWakeTime=osKernelSysTick();
 80019f0:	f007 f88f 	bl	8008b12 <osKernelSysTick>
 80019f4:	4603      	mov	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]
	osDelayUntil(&PreviousWakeTime, time_ms);
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f007 f99a 	bl	8008d38 <osDelayUntil>
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <Angle_Diff>:

float Angle_Diff(float target, float input)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a16:	edc7 0a00 	vstr	s1, [r7]
	float Error;
	if(target >= 180)
 8001a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001acc <Angle_Diff+0xc0>
 8001a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	db08      	blt.n	8001a3e <Angle_Diff+0x32>
		target=-360+target;
 8001a2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a30:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001ad0 <Angle_Diff+0xc4>
 8001a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a38:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a3c:	e010      	b.n	8001a60 <Angle_Diff+0x54>
	else if(target <=-180)
 8001a3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a42:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001ad4 <Angle_Diff+0xc8>
 8001a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	d807      	bhi.n	8001a60 <Angle_Diff+0x54>
		target=360+target;
 8001a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a54:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001ad0 <Angle_Diff+0xc4>
 8001a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a5c:	edc7 7a01 	vstr	s15, [r7, #4]
	Error = target - input;
 8001a60:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a64:	edd7 7a00 	vldr	s15, [r7]
 8001a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6c:	edc7 7a03 	vstr	s15, [r7, #12]
		if(Error >= 180)
 8001a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a74:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001acc <Angle_Diff+0xc0>
 8001a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	db08      	blt.n	8001a94 <Angle_Diff+0x88>
			Error=Error-360;
 8001a82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a86:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001ad0 <Angle_Diff+0xc4>
 8001a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a8e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001a92:	e010      	b.n	8001ab6 <Angle_Diff+0xaa>
		else if(Error <= -180)
 8001a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a98:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001ad4 <Angle_Diff+0xc8>
 8001a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	d807      	bhi.n	8001ab6 <Angle_Diff+0xaa>
			Error=Error+360;
 8001aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aaa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001ad0 <Angle_Diff+0xc4>
 8001aae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ab2:	edc7 7a03 	vstr	s15, [r7, #12]
	return Error;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	ee07 3a90 	vmov	s15, r3
}
 8001abc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	43340000 	.word	0x43340000
 8001ad0:	43b40000 	.word	0x43b40000
 8001ad4:	c3340000 	.word	0xc3340000

08001ad8 <PID_Turning>:
// 		}
// 	 }
//}

int PID_Turning(float increment_angle,float Accept_Error)//If we want to turn right, parameter is negative
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b092      	sub	sp, #72	; 0x48
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ae2:	edc7 0a00 	vstr	s1, [r7]

	float PID_target=0;
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	647b      	str	r3, [r7, #68]	; 0x44
	float PID_Error_Last=0;
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	643b      	str	r3, [r7, #64]	; 0x40
	float initial_yaw=0;
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
	float PID_Output=0,PID_Input=0;;
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
	float Error = 0, Error_Total=0;
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
	float KP=13, KI=2, KD=0;
 8001b10:	4baf      	ldr	r3, [pc, #700]	; (8001dd0 <PID_Turning+0x2f8>)
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
	//15 2 0
	int t=0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
	float pwm_left=0,pwm_right=0;
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
	uint8_t Flag=0; //Indicate that if verifying process begin.
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Car_Stop();
 8001b36:	f7ff ff49 	bl	80019cc <Car_Stop>
	//delay(1500);
	for(int i=0;i<10;i++)			//Get average initial direction
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b3e:	e012      	b.n	8001b66 <PID_Turning+0x8e>
	{
			osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001b40:	4ba4      	ldr	r3, [pc, #656]	; (8001dd4 <PID_Turning+0x2fc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f007 f871 	bl	8008c30 <osSemaphoreWait>
			initial_yaw+=angle.z;
 8001b4e:	4ba2      	ldr	r3, [pc, #648]	; (8001dd8 <PID_Turning+0x300>)
 8001b50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b54:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for(int i=0;i<10;i++)			//Get average initial direction
 8001b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b62:	3301      	adds	r3, #1
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	dde9      	ble.n	8001b40 <PID_Turning+0x68>
	}
	initial_yaw=initial_yaw/10;
 8001b6c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b70:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	PID_target=initial_yaw + increment_angle;
 8001b7c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b88:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(PID_target > 180)
 8001b8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b90:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001ddc <PID_Turning+0x304>
 8001b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	dd07      	ble.n	8001bae <PID_Turning+0xd6>
		PID_target=-360+PID_target;
 8001b9e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ba2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001de0 <PID_Turning+0x308>
 8001ba6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001baa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(PID_target <-180)
 8001bae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bb2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001de4 <PID_Turning+0x30c>
 8001bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d507      	bpl.n	8001bd0 <PID_Turning+0xf8>
		PID_target=360+PID_target;
 8001bc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bc4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001de0 <PID_Turning+0x308>
 8001bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bcc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for(;;)
  {
	  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001bd0:	4b80      	ldr	r3, [pc, #512]	; (8001dd4 <PID_Turning+0x2fc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f007 f829 	bl	8008c30 <osSemaphoreWait>
	  	 PID_Input = angle.z;
 8001bde:	4b7e      	ldr	r3, [pc, #504]	; (8001dd8 <PID_Turning+0x300>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
	  	 Error=Angle_Diff(PID_target, PID_Input);
 8001be4:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001be8:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001bec:	f7ff ff0e 	bl	8001a0c <Angle_Diff>
 8001bf0:	ed87 0a08 	vstr	s0, [r7, #32]
	  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 8001bf4:	edd7 7a00 	vldr	s15, [r7]
 8001bf8:	eef1 7a67 	vneg.f32	s15, s15
 8001bfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c08:	dd17      	ble.n	8001c3a <PID_Turning+0x162>
 8001c0a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c0e:	edd7 7a00 	vldr	s15, [r7]
 8001c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d50e      	bpl.n	8001c3a <PID_Turning+0x162>
 8001c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10a      	bne.n	8001c3a <PID_Turning+0x162>
	  	 {
	  		 t++;
 8001c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c26:	3301      	adds	r3, #1
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
	  		if(t>2)
 8001c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	dd04      	ble.n	8001c3a <PID_Turning+0x162>
	  		{
	  			Flag = 1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
	  		}
	  	 }
	  	 if(Flag)
 8001c3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d026      	beq.n	8001c90 <PID_Turning+0x1b8>
	  	 {
	  		if(t>Angle_stable_cycles)
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	dd06      	ble.n	8001c56 <PID_Turning+0x17e>
	  		{
	  			Flag=0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
	  			return 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e0b7      	b.n	8001dc6 <PID_Turning+0x2ee>
	  		}
	  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 8001c56:	edd7 7a00 	vldr	s15, [r7]
 8001c5a:	eef1 7a67 	vneg.f32	s15, s15
 8001c5e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	dd0c      	ble.n	8001c86 <PID_Turning+0x1ae>
 8001c6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c70:	edd7 7a00 	vldr	s15, [r7]
 8001c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	d503      	bpl.n	8001c86 <PID_Turning+0x1ae>
	  		{
	  			t++;
 8001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c80:	3301      	adds	r3, #1
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
 8001c84:	e004      	b.n	8001c90 <PID_Turning+0x1b8>
	  		}
	  		else
	  		{
	  			Flag=0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
	  		}
	  	 }
	  	 Error_Total=Error_Total+KI*Error;
 8001c90:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c94:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	     PID_Output = KP * Error  +
 8001ca8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cac:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
	 				  KD * (Error - PID_Error_Last ) +
 8001cb4:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cb8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001cbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	     PID_Output = KP * Error  +
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
					  Error_Total;
	     PID_Error_Last = Error;
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	643b      	str	r3, [r7, #64]	; 0x40
	     pwm_right =   PID_Output;
 8001cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cde:	60fb      	str	r3, [r7, #12]
	     pwm_left  = - PID_Output;
 8001ce0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ce4:	eef1 7a67 	vneg.f32	s15, s15
 8001ce8:	edc7 7a04 	vstr	s15, [r7, #16]
	     pwm_right += pwm_right>0 ?PWM_Lowest:-PWM_Lowest;
 8001cec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	dd02      	ble.n	8001d00 <PID_Turning+0x228>
 8001cfa:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8001de8 <PID_Turning+0x310>
 8001cfe:	e001      	b.n	8001d04 <PID_Turning+0x22c>
 8001d00:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8001dec <PID_Turning+0x314>
 8001d04:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0c:	edc7 7a03 	vstr	s15, [r7, #12]
	     pwm_left  += pwm_left>0  ?PWM_Lowest:-PWM_Lowest;
 8001d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	dd02      	ble.n	8001d24 <PID_Turning+0x24c>
 8001d1e:	eddf 7a32 	vldr	s15, [pc, #200]	; 8001de8 <PID_Turning+0x310>
 8001d22:	e001      	b.n	8001d28 <PID_Turning+0x250>
 8001d24:	eddf 7a31 	vldr	s15, [pc, #196]	; 8001dec <PID_Turning+0x314>
 8001d28:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d30:	edc7 7a04 	vstr	s15, [r7, #16]
	     pwm_right =  pwm_right>= PWM_Higest?PWM_Higest:pwm_right;
 8001d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d38:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001df0 <PID_Turning+0x318>
 8001d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	db01      	blt.n	8001d4a <PID_Turning+0x272>
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <PID_Turning+0x31c>)
 8001d48:	e000      	b.n	8001d4c <PID_Turning+0x274>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	60fb      	str	r3, [r7, #12]
	     pwm_right =  pwm_right<= -PWM_Higest?-PWM_Higest:pwm_right;
 8001d4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d52:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001df8 <PID_Turning+0x320>
 8001d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	d801      	bhi.n	8001d64 <PID_Turning+0x28c>
 8001d60:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <PID_Turning+0x324>)
 8001d62:	e000      	b.n	8001d66 <PID_Turning+0x28e>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	60fb      	str	r3, [r7, #12]
	     pwm_left  =  pwm_left >= PWM_Higest?PWM_Higest:pwm_left;
 8001d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d6c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001df0 <PID_Turning+0x318>
 8001d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	db01      	blt.n	8001d7e <PID_Turning+0x2a6>
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <PID_Turning+0x31c>)
 8001d7c:	e000      	b.n	8001d80 <PID_Turning+0x2a8>
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	613b      	str	r3, [r7, #16]
	     pwm_left  =  pwm_left <= -PWM_Higest?-PWM_Higest:pwm_left;// 限幅
 8001d82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d86:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001df8 <PID_Turning+0x320>
 8001d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	d801      	bhi.n	8001d98 <PID_Turning+0x2c0>
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <PID_Turning+0x324>)
 8001d96:	e000      	b.n	8001d9a <PID_Turning+0x2c2>
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	613b      	str	r3, [r7, #16]
	    	 taskENTER_CRITICAL();
 8001d9c:	f009 f8b2 	bl	800af04 <vPortEnterCritical>
	    	 PWM_SET_RIGHT ((int32_t)   pwm_right);
 8001da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da8:	ee17 0a90 	vmov	r0, s15
 8001dac:	f000 fb8c 	bl	80024c8 <PWM_SET_RIGHT>
	    	 PWM_SET_LEFT  ((int32_t)   pwm_left );
 8001db0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001db8:	ee17 0a90 	vmov	r0, s15
 8001dbc:	f000 fb4c 	bl	8002458 <PWM_SET_LEFT>
	    	 taskEXIT_CRITICAL();
 8001dc0:	f009 f8d0 	bl	800af64 <vPortExitCritical>
	  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001dc4:	e704      	b.n	8001bd0 <PID_Turning+0xf8>
  }

}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3748      	adds	r7, #72	; 0x48
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	41500000 	.word	0x41500000
 8001dd4:	200042ac 	.word	0x200042ac
 8001dd8:	20000304 	.word	0x20000304
 8001ddc:	43340000 	.word	0x43340000
 8001de0:	43b40000 	.word	0x43b40000
 8001de4:	c3340000 	.word	0xc3340000
 8001de8:	43fa0000 	.word	0x43fa0000
 8001dec:	c3fa0000 	.word	0xc3fa0000
 8001df0:	44af0000 	.word	0x44af0000
 8001df4:	44af0000 	.word	0x44af0000
 8001df8:	c4af0000 	.word	0xc4af0000
 8001dfc:	c4af0000 	.word	0xc4af0000

08001e00 <PID_Straight>:
void PID_Straight(float speed)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b092      	sub	sp, #72	; 0x48
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	ed87 0a01 	vstr	s0, [r7, #4]
					float PID_target=0;
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
					float PID_Error_Last=0;
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	647b      	str	r3, [r7, #68]	; 0x44
					float initial_yaw=0;
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	643b      	str	r3, [r7, #64]	; 0x40
					float PID_Output=0,PID_Input=0;
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
					float Error = 0, Error_Total=0,Error_Total_Total=0;
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
					float KP=15, KI=6, KD=10, KI2=0.013;
 8001e3a:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <PID_Straight+0x1f0>)
 8001e3c:	623b      	str	r3, [r7, #32]
 8001e3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <PID_Straight+0x1f4>)
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <PID_Straight+0x1f8>)
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <PID_Straight+0x1fc>)
 8001e48:	617b      	str	r3, [r7, #20]
					int32_t pwm_right=0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
					int32_t pwm_left=0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
					//uint8_t Flag=0; //Indicate that if verifying process begin.
					Car_Stop();
 8001e52:	f7ff fdbb 	bl	80019cc <Car_Stop>
					if (PID_Straight_Reset_Flag)
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <PID_Straight+0x200>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 80bf 	bne.w	8001fde <PID_Straight+0x1de>
						return;
					osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <PID_Straight+0x204>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f006 fee1 	bl	8008c30 <osSemaphoreWait>
					for(int i=0;i<10;i++)			//Get average initial direction
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
 8001e72:	e015      	b.n	8001ea0 <PID_Straight+0xa0>
					{
							osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001e74:	4b63      	ldr	r3, [pc, #396]	; (8002004 <PID_Straight+0x204>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f006 fed7 	bl	8008c30 <osSemaphoreWait>
							initial_yaw+=angle.z;
 8001e82:	4b61      	ldr	r3, [pc, #388]	; (8002008 <PID_Straight+0x208>)
 8001e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e88:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e90:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
							delay(10);
 8001e94:	200a      	movs	r0, #10
 8001e96:	f7ff fda7 	bl	80019e8 <delay>
					for(int i=0;i<10;i++)			//Get average initial direction
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea2:	2b09      	cmp	r3, #9
 8001ea4:	dde6      	ble.n	8001e74 <PID_Straight+0x74>
					}
					initial_yaw=initial_yaw/10;
 8001ea6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001eaa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
					PID_target=initial_yaw;
 8001eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
				  for(;;)
				  {
					  	 if (PID_Straight_Reset_Flag)
 8001eba:	4b51      	ldr	r3, [pc, #324]	; (8002000 <PID_Straight+0x200>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 808f 	bne.w	8001fe2 <PID_Straight+0x1e2>
					  		 return;
		  	  	  	  	 //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green
					  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <PID_Straight+0x204>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f006 feaf 	bl	8008c30 <osSemaphoreWait>
					  	 PID_Input = angle.z;
 8001ed2:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <PID_Straight+0x208>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
					  	 Error=Angle_Diff(PID_target, PID_Input);
 8001ed8:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001edc:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001ee0:	f7ff fd94 	bl	8001a0c <Angle_Diff>
 8001ee4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
						 Error_Total=Error_Total+KI*Error;
 8001ee8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					     Error_Total_Total= Error_Total_Total+KI2*Error_Total;
 8001f00:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f04:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f14:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					     PID_Output = KP * Error  +
 8001f18:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f20:	ee27 7a27 	vmul.f32	s14, s14, s15
					 				  KD * (Error - PID_Error_Last ) +
 8001f24:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
					     PID_Output = KP * Error  +
 8001f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f44:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
									  Error_Total;
					     PID_Error_Last = Error;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	647b      	str	r3, [r7, #68]	; 0x44

					     pwm_right=	speed+	(int32_t) 	PID_Output;
 8001f4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f64:	ee17 3a90 	vmov	r3, s15
 8001f68:	613b      	str	r3, [r7, #16]
					     pwm_left=	speed-	(int32_t)  	PID_Output;
 8001f6a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f76:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f82:	ee17 3a90 	vmov	r3, s15
 8001f86:	60fb      	str	r3, [r7, #12]
					     pwm_right = pwm_right<PWM_Lowest ? PWM_Lowest : pwm_right;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f8e:	bfb8      	it	lt
 8001f90:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
 8001f94:	613b      	str	r3, [r7, #16]
					     pwm_right = pwm_right>PWM_Higest ? PWM_Higest : pwm_right;
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001f9c:	bfa8      	it	ge
 8001f9e:	f44f 63af 	movge.w	r3, #1400	; 0x578
 8001fa2:	613b      	str	r3, [r7, #16]
					     pwm_left = pwm_left<PWM_Lowest ? PWM_Lowest : pwm_left;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001faa:	bfb8      	it	lt
 8001fac:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
 8001fb0:	60fb      	str	r3, [r7, #12]
					     pwm_left = pwm_left>PWM_Higest ? PWM_Higest : pwm_left;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001fb8:	bfa8      	it	ge
 8001fba:	f44f 63af 	movge.w	r3, #1400	; 0x578
 8001fbe:	60fb      	str	r3, [r7, #12]
					     if (PID_Straight_Reset_Flag)
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <PID_Straight+0x200>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10e      	bne.n	8001fe6 <PID_Straight+0x1e6>
					     	return;
					     taskENTER_CRITICAL();
 8001fc8:	f008 ff9c 	bl	800af04 <vPortEnterCritical>
					     PWM_SET_RIGHT (pwm_right);
 8001fcc:	6938      	ldr	r0, [r7, #16]
 8001fce:	f000 fa7b 	bl	80024c8 <PWM_SET_RIGHT>
					     PWM_SET_LEFT(pwm_left);
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fa40 	bl	8002458 <PWM_SET_LEFT>
					     taskEXIT_CRITICAL();
 8001fd8:	f008 ffc4 	bl	800af64 <vPortExitCritical>
					  	 if (PID_Straight_Reset_Flag)
 8001fdc:	e76d      	b.n	8001eba <PID_Straight+0xba>
						return;
 8001fde:	bf00      	nop
 8001fe0:	e002      	b.n	8001fe8 <PID_Straight+0x1e8>
					  		 return;
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <PID_Straight+0x1e8>
					     	return;
 8001fe6:	bf00      	nop
					     }
}
 8001fe8:	3748      	adds	r7, #72	; 0x48
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	41700000 	.word	0x41700000
 8001ff4:	40c00000 	.word	0x40c00000
 8001ff8:	41200000 	.word	0x41200000
 8001ffc:	3c54fdf4 	.word	0x3c54fdf4
 8002000:	20000008 	.word	0x20000008
 8002004:	200042ac 	.word	0x200042ac
 8002008:	20000304 	.word	0x20000304

0800200c <Ultrasonic_Feedback>:

Distance Ultrasonic_Feedback(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
	uint8_t info=0xA0;
 8002012:	23a0      	movs	r3, #160	; 0xa0
 8002014:	74fb      	strb	r3, [r7, #19]
	uint8_t Rx_Buf[3]={0,0,0};
 8002016:	4a2b      	ldr	r2, [pc, #172]	; (80020c4 <Ultrasonic_Feedback+0xb8>)
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	4611      	mov	r1, r2
 8002020:	8019      	strh	r1, [r3, #0]
 8002022:	3302      	adds	r3, #2
 8002024:	0c12      	lsrs	r2, r2, #16
 8002026:	701a      	strb	r2, [r3, #0]
	uint32_t Data=0x00000000;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
	Distance distance={0.0,0.0};
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
	taskENTER_CRITICAL();
 8002038:	f008 ff64 	bl	800af04 <vPortEnterCritical>
	HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
 800203c:	f107 0113 	add.w	r1, r7, #19
 8002040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002044:	2201      	movs	r2, #1
 8002046:	4820      	ldr	r0, [pc, #128]	; (80020c8 <Ultrasonic_Feedback+0xbc>)
 8002048:	f005 fe7f 	bl	8007d4a <HAL_UART_Transmit>
	delay(200);
 800204c:	20c8      	movs	r0, #200	; 0xc8
 800204e:	f7ff fccb 	bl	80019e8 <delay>
	HAL_UART_Receive(&huart5,(uint8_t*) &Rx_Buf,3,1000);
 8002052:	f107 0110 	add.w	r1, r7, #16
 8002056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205a:	2203      	movs	r2, #3
 800205c:	481a      	ldr	r0, [pc, #104]	; (80020c8 <Ultrasonic_Feedback+0xbc>)
 800205e:	f005 ff06 	bl	8007e6e <HAL_UART_Receive>
	taskEXIT_CRITICAL();
 8002062:	f008 ff7f 	bl	800af64 <vPortExitCritical>
	Data=Data | (((uint32_t) (Rx_Buf[0]))<<16);
 8002066:	7c3b      	ldrb	r3, [r7, #16]
 8002068:	041b      	lsls	r3, r3, #16
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	4313      	orrs	r3, r2
 800206e:	61fb      	str	r3, [r7, #28]
	Data=Data | (((uint32_t) (Rx_Buf[1]))<<8);
 8002070:	7c7b      	ldrb	r3, [r7, #17]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	4313      	orrs	r3, r2
 8002078:	61fb      	str	r3, [r7, #28]
	Data=Data |((uint32_t) (Rx_Buf[2]));
 800207a:	7cbb      	ldrb	r3, [r7, #18]
 800207c:	461a      	mov	r2, r3
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4313      	orrs	r3, r2
 8002082:	61fb      	str	r3, [r7, #28]
	//HAL_UART_Transmit(&huart1, (uint8_t *) &Data, 4, 0xFFFF);
	distance.front=Data/1000;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <Ultrasonic_Feedback+0xc0>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002096:	edc7 7a02 	vstr	s15, [r7, #8]
	return distance;
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	f107 0208 	add.w	r2, r7, #8
 80020a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	ee07 2a10 	vmov	s14, r2
 80020b2:	ee07 3a90 	vmov	s15, r3
}
 80020b6:	eeb0 0a47 	vmov.f32	s0, s14
 80020ba:	eef0 0a67 	vmov.f32	s1, s15
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	0800c688 	.word	0x0800c688
 80020c8:	200041f4 	.word	0x200041f4
 80020cc:	10624dd3 	.word	0x10624dd3

080020d0 <Ultrasonic_Feedback_front>:

void Ultrasonic_Feedback_front(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Front,3);
 80020d4:	2203      	movs	r2, #3
 80020d6:	4906      	ldr	r1, [pc, #24]	; (80020f0 <Ultrasonic_Feedback_front+0x20>)
 80020d8:	4806      	ldr	r0, [pc, #24]	; (80020f4 <Ultrasonic_Feedback_front+0x24>)
 80020da:	f005 ff6a 	bl	8007fb2 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
 80020de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e2:	2201      	movs	r2, #1
 80020e4:	4904      	ldr	r1, [pc, #16]	; (80020f8 <Ultrasonic_Feedback_front+0x28>)
 80020e6:	4803      	ldr	r0, [pc, #12]	; (80020f4 <Ultrasonic_Feedback_front+0x24>)
 80020e8:	f005 fe2f 	bl	8007d4a <HAL_UART_Transmit>

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000300 	.word	0x20000300
 80020f4:	200041f4 	.word	0x200041f4
 80020f8:	2000000c 	.word	0x2000000c

080020fc <Ultrasonic_Feedback_right>:


}

float Ultrasonic_Feedback_right(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
    float diatance_temp=0;
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	607b      	str	r3, [r7, #4]

	HAL_UART_Receive_IT(&huart4,(uint8_t*) &Rx_Buf_Right,3);
 8002108:	2203      	movs	r2, #3
 800210a:	490e      	ldr	r1, [pc, #56]	; (8002144 <Ultrasonic_Feedback_right+0x48>)
 800210c:	480e      	ldr	r0, [pc, #56]	; (8002148 <Ultrasonic_Feedback_right+0x4c>)
 800210e:	f005 ff50 	bl	8007fb2 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart4,(uint8_t*) &info,1,0xFFFF);
 8002112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002116:	2201      	movs	r2, #1
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <Ultrasonic_Feedback_right+0x50>)
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <Ultrasonic_Feedback_right+0x4c>)
 800211c:	f005 fe15 	bl	8007d4a <HAL_UART_Transmit>
	osSemaphoreWait(gomile6SemHandle, osWaitForever);
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <Ultrasonic_Feedback_right+0x54>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	4618      	mov	r0, r3
 800212a:	f006 fd81 	bl	8008c30 <osSemaphoreWait>
	diatance_temp=right_distance.right;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <Ultrasonic_Feedback_right+0x58>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	607b      	str	r3, [r7, #4]
	return diatance_temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	ee07 3a90 	vmov	s15, r3

	//delay(200);
}
 800213a:	eeb0 0a67 	vmov.f32	s0, s15
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200002fc 	.word	0x200002fc
 8002148:	200042fc 	.word	0x200042fc
 800214c:	2000000c 	.word	0x2000000c
 8002150:	200040b0 	.word	0x200040b0
 8002154:	20000318 	.word	0x20000318

08002158 <HAL_UART_RxCpltCallback>:
//						     }
//
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  	if (huart->Instance==USART2){
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6c      	ldr	r2, [pc, #432]	; (8002318 <HAL_UART_RxCpltCallback+0x1c0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d142      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0x98>
  		Camera_Data=0x0000;
 800216a:	4b6c      	ldr	r3, [pc, #432]	; (800231c <HAL_UART_RxCpltCallback+0x1c4>)
 800216c:	2200      	movs	r2, #0
 800216e:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data | (((uint16_t) (Rx_Buf[0]))<<8);
 8002170:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_UART_RxCpltCallback+0x1c8>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	b21a      	sxth	r2, r3
 800217a:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_UART_RxCpltCallback+0x1c4>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	b21b      	sxth	r3, r3
 8002182:	4313      	orrs	r3, r2
 8002184:	b21b      	sxth	r3, r3
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b64      	ldr	r3, [pc, #400]	; (800231c <HAL_UART_RxCpltCallback+0x1c4>)
 800218a:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data|((uint16_t) (Rx_Buf[1]));
 800218c:	4b64      	ldr	r3, [pc, #400]	; (8002320 <HAL_UART_RxCpltCallback+0x1c8>)
 800218e:	785b      	ldrb	r3, [r3, #1]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_UART_RxCpltCallback+0x1c4>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b29a      	uxth	r2, r3
 800219e:	4b5f      	ldr	r3, [pc, #380]	; (800231c <HAL_UART_RxCpltCallback+0x1c4>)
 80021a0:	801a      	strh	r2, [r3, #0]
  		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 80021a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a6:	485f      	ldr	r0, [pc, #380]	; (8002324 <HAL_UART_RxCpltCallback+0x1cc>)
 80021a8:	f003 fb1d 	bl	80057e6 <HAL_GPIO_TogglePin>
  		Rx_Buf[0]=0;
 80021ac:	4b5c      	ldr	r3, [pc, #368]	; (8002320 <HAL_UART_RxCpltCallback+0x1c8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
  		Rx_Buf[1]=0;
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_UART_RxCpltCallback+0x1c8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	705a      	strb	r2, [r3, #1]
  		osSemaphoreRelease(CameraUARTSemHandle);
 80021b8:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <HAL_UART_RxCpltCallback+0x1d0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f006 fd85 	bl	8008ccc <osSemaphoreRelease>
  		if((Camera_Data & 0x4000) != 0)//IF Apriltag is found
 80021c2:	4b56      	ldr	r3, [pc, #344]	; (800231c <HAL_UART_RxCpltCallback+0x1c4>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_UART_RxCpltCallback+0x82>
  		{
  			osSemaphoreRelease(ApriltagSemHandle);
 80021d0:	4b56      	ldr	r3, [pc, #344]	; (800232c <HAL_UART_RxCpltCallback+0x1d4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f006 fd79 	bl	8008ccc <osSemaphoreRelease>
  		}
  		if(camera_recieve_IT_flag)
 80021da:	4b55      	ldr	r3, [pc, #340]	; (8002330 <HAL_UART_RxCpltCallback+0x1d8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8096 	beq.w	8002310 <HAL_UART_RxCpltCallback+0x1b8>
  			HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 80021e4:	2202      	movs	r2, #2
 80021e6:	494e      	ldr	r1, [pc, #312]	; (8002320 <HAL_UART_RxCpltCallback+0x1c8>)
 80021e8:	4852      	ldr	r0, [pc, #328]	; (8002334 <HAL_UART_RxCpltCallback+0x1dc>)
 80021ea:	f005 fee2 	bl	8007fb2 <HAL_UART_Receive_IT>
  		 		HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
  		 	}
  			//HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Sonic,3);
  			//HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
  		}
  }
 80021ee:	e08f      	b.n	8002310 <HAL_UART_RxCpltCallback+0x1b8>
  	else if (huart->Instance==UART4)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a50      	ldr	r2, [pc, #320]	; (8002338 <HAL_UART_RxCpltCallback+0x1e0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d131      	bne.n	800225e <HAL_UART_RxCpltCallback+0x106>
		uint32_t Data=0x00000000;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
	 	Data=Data | (((uint32_t) (Rx_Buf_Right[0]))<<16);
 80021fe:	4b4f      	ldr	r3, [pc, #316]	; (800233c <HAL_UART_RxCpltCallback+0x1e4>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	4313      	orrs	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
	 	Data=Data | (((uint32_t) (Rx_Buf_Right[1]))<<8);
 800220c:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_UART_RxCpltCallback+0x1e4>)
 800220e:	785b      	ldrb	r3, [r3, #1]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	4313      	orrs	r3, r2
 8002218:	60bb      	str	r3, [r7, #8]
	 	Data=Data |((uint32_t) (Rx_Buf_Right[2]));
 800221a:	4b48      	ldr	r3, [pc, #288]	; (800233c <HAL_UART_RxCpltCallback+0x1e4>)
 800221c:	789b      	ldrb	r3, [r3, #2]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4313      	orrs	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
	 	Rx_Buf_Right[0]=0;
 8002228:	4b44      	ldr	r3, [pc, #272]	; (800233c <HAL_UART_RxCpltCallback+0x1e4>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
		Rx_Buf_Right[1]=0;
 800222e:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_UART_RxCpltCallback+0x1e4>)
 8002230:	2200      	movs	r2, #0
 8002232:	705a      	strb	r2, [r3, #1]
	    Rx_Buf_Right[2]=0;
 8002234:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_UART_RxCpltCallback+0x1e4>)
 8002236:	2200      	movs	r2, #0
 8002238:	709a      	strb	r2, [r3, #2]
	 	right_distance.right=Data/1000;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4a40      	ldr	r2, [pc, #256]	; (8002340 <HAL_UART_RxCpltCallback+0x1e8>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	099b      	lsrs	r3, r3, #6
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224c:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_UART_RxCpltCallback+0x1ec>)
 800224e:	edc3 7a01 	vstr	s15, [r3, #4]
	 	osSemaphoreRelease(gomile6SemHandle);
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_UART_RxCpltCallback+0x1f0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f006 fd38 	bl	8008ccc <osSemaphoreRelease>
  }
 800225c:	e058      	b.n	8002310 <HAL_UART_RxCpltCallback+0x1b8>
  	else if (huart->Instance==UART5){
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a3a      	ldr	r2, [pc, #232]	; (800234c <HAL_UART_RxCpltCallback+0x1f4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d153      	bne.n	8002310 <HAL_UART_RxCpltCallback+0x1b8>
  			uint32_t Data=0x00000000;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  			Data=Data | (((uint32_t) (Rx_Buf_Front[0]))<<16);
 800226c:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_UART_RxCpltCallback+0x1f8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  			Data=Data | (((uint32_t) (Rx_Buf_Front[1]))<<8);
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_UART_RxCpltCallback+0x1f8>)
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  			Data=Data |((uint32_t) (Rx_Buf_Front[2]));
 8002288:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_UART_RxCpltCallback+0x1f8>)
 800228a:	789b      	ldrb	r3, [r3, #2]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  			front_distance.front=Data/1000;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a29      	ldr	r2, [pc, #164]	; (8002340 <HAL_UART_RxCpltCallback+0x1e8>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_UART_RxCpltCallback+0x1fc>)
 80022aa:	edc3 7a00 	vstr	s15, [r3]
  			Rx_Buf_Front[0]=0;
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_UART_RxCpltCallback+0x1f8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
  			Rx_Buf_Front[1]=0;
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_UART_RxCpltCallback+0x1f8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	705a      	strb	r2, [r3, #1]
  			Rx_Buf_Front[2]=0;
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <HAL_UART_RxCpltCallback+0x1f8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	709a      	strb	r2, [r3, #2]
  		 	front_distance.front=Data/1000;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_UART_RxCpltCallback+0x1e8>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	099b      	lsrs	r3, r3, #6
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_UART_RxCpltCallback+0x1fc>)
 80022d4:	edc3 7a00 	vstr	s15, [r3]
  		 	if(front_distance.front<250){
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <HAL_UART_RxCpltCallback+0x1fc>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002358 <HAL_UART_RxCpltCallback+0x200>
 80022e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	d505      	bpl.n	80022f8 <HAL_UART_RxCpltCallback+0x1a0>
  	  		 	osSemaphoreRelease(UltraFrontSemHandle);
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_UART_RxCpltCallback+0x204>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f006 fceb 	bl	8008ccc <osSemaphoreRelease>
  }
 80022f6:	e00b      	b.n	8002310 <HAL_UART_RxCpltCallback+0x1b8>
  		 		HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Front,3);
 80022f8:	2203      	movs	r2, #3
 80022fa:	4915      	ldr	r1, [pc, #84]	; (8002350 <HAL_UART_RxCpltCallback+0x1f8>)
 80022fc:	4818      	ldr	r0, [pc, #96]	; (8002360 <HAL_UART_RxCpltCallback+0x208>)
 80022fe:	f005 fe58 	bl	8007fb2 <HAL_UART_Receive_IT>
  		 		HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
 8002302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002306:	2201      	movs	r2, #1
 8002308:	4916      	ldr	r1, [pc, #88]	; (8002364 <HAL_UART_RxCpltCallback+0x20c>)
 800230a:	4815      	ldr	r0, [pc, #84]	; (8002360 <HAL_UART_RxCpltCallback+0x208>)
 800230c:	f005 fd1d 	bl	8007d4a <HAL_UART_Transmit>
  }
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40004400 	.word	0x40004400
 800231c:	200002fa 	.word	0x200002fa
 8002320:	200002f8 	.word	0x200002f8
 8002324:	40021400 	.word	0x40021400
 8002328:	20004198 	.word	0x20004198
 800232c:	200042b0 	.word	0x200042b0
 8002330:	2000032c 	.word	0x2000032c
 8002334:	20004388 	.word	0x20004388
 8002338:	40004c00 	.word	0x40004c00
 800233c:	200002fc 	.word	0x200002fc
 8002340:	10624dd3 	.word	0x10624dd3
 8002344:	20000318 	.word	0x20000318
 8002348:	200040b0 	.word	0x200040b0
 800234c:	40005000 	.word	0x40005000
 8002350:	20000300 	.word	0x20000300
 8002354:	20000320 	.word	0x20000320
 8002358:	437a0000 	.word	0x437a0000
 800235c:	2000419c 	.word	0x2000419c
 8002360:	200041f4 	.word	0x200041f4
 8002364:	2000000c 	.word	0x2000000c

08002368 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <HAL_UART_ErrorCallback+0x68>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d110      	bne.n	800239c <HAL_UART_ErrorCallback+0x34>
	{
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_UART_ErrorCallback+0x6c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_UART_ErrorCallback+0x6c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8002390:	2202      	movs	r2, #2
 8002392:	4911      	ldr	r1, [pc, #68]	; (80023d8 <HAL_UART_ErrorCallback+0x70>)
 8002394:	480f      	ldr	r0, [pc, #60]	; (80023d4 <HAL_UART_ErrorCallback+0x6c>)
 8002396:	f005 fe0c 	bl	8007fb2 <HAL_UART_Receive_IT>
	else if (huart->Instance==UART4)
	{
		__HAL_UART_CLEAR_OREFLAG(&huart4);
		HAL_UART_Receive_IT(&huart4,(uint8_t*) &Rx_Buf,3);
	}
}
 800239a:	e014      	b.n	80023c6 <HAL_UART_ErrorCallback+0x5e>
	else if (huart->Instance==UART4)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_UART_ErrorCallback+0x74>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d10f      	bne.n	80023c6 <HAL_UART_ErrorCallback+0x5e>
		__HAL_UART_CLEAR_OREFLAG(&huart4);
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_UART_ErrorCallback+0x78>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_UART_ErrorCallback+0x78>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
		HAL_UART_Receive_IT(&huart4,(uint8_t*) &Rx_Buf,3);
 80023bc:	2203      	movs	r2, #3
 80023be:	4906      	ldr	r1, [pc, #24]	; (80023d8 <HAL_UART_ErrorCallback+0x70>)
 80023c0:	4807      	ldr	r0, [pc, #28]	; (80023e0 <HAL_UART_ErrorCallback+0x78>)
 80023c2:	f005 fdf6 	bl	8007fb2 <HAL_UART_Receive_IT>
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40004400 	.word	0x40004400
 80023d4:	20004388 	.word	0x20004388
 80023d8:	200002f8 	.word	0x200002f8
 80023dc:	40004c00 	.word	0x40004c00
 80023e0:	200042fc 	.word	0x200042fc

080023e4 <color_judge>:

void color_judge(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	finalcolor=blue>pink? 1:2;
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <color_judge+0x64>)
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <color_judge+0x68>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d901      	bls.n	80023f8 <color_judge+0x14>
 80023f4:	2201      	movs	r2, #1
 80023f6:	e000      	b.n	80023fa <color_judge+0x16>
 80023f8:	2202      	movs	r2, #2
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <color_judge+0x6c>)
 80023fc:	701a      	strb	r2, [r3, #0]
	if(finalcolor==1)
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <color_judge+0x6c>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10b      	bne.n	800241e <color_judge+0x3a>
	{
	    finalcolor=blue>yellow? 1:3;
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <color_judge+0x64>)
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <color_judge+0x70>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d901      	bls.n	8002416 <color_judge+0x32>
 8002412:	2201      	movs	r2, #1
 8002414:	e000      	b.n	8002418 <color_judge+0x34>
 8002416:	2203      	movs	r2, #3
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <color_judge+0x6c>)
 800241a:	701a      	strb	r2, [r3, #0]
	else if(finalcolor==2)
	{
		finalcolor=pink>yellow? 2:3;
	}

}
 800241c:	e00e      	b.n	800243c <color_judge+0x58>
	else if(finalcolor==2)
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <color_judge+0x6c>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d10a      	bne.n	800243c <color_judge+0x58>
		finalcolor=pink>yellow? 2:3;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <color_judge+0x68>)
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <color_judge+0x70>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d901      	bls.n	8002436 <color_judge+0x52>
 8002432:	2202      	movs	r2, #2
 8002434:	e000      	b.n	8002438 <color_judge+0x54>
 8002436:	2203      	movs	r2, #3
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <color_judge+0x6c>)
 800243a:	701a      	strb	r2, [r3, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	2000033c 	.word	0x2000033c
 800244c:	2000033e 	.word	0x2000033e
 8002450:	20004104 	.word	0x20004104
 8002454:	20000340 	.word	0x20000340

08002458 <PWM_SET_LEFT>:

void PWM_SET_LEFT(int32_t duty)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da11      	bge.n	800248a <PWM_SET_LEFT+0x32>
		{
		if (duty <= -2000)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800246c:	dc02      	bgt.n	8002474 <PWM_SET_LEFT+0x1c>
			duty = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	e003      	b.n	800247c <PWM_SET_LEFT+0x24>
		else
			duty = 2000 + duty;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800247a:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800247c:	2201      	movs	r2, #1
 800247e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002482:	480f      	ldr	r0, [pc, #60]	; (80024c0 <PWM_SET_LEFT+0x68>)
 8002484:	f003 f996 	bl	80057b4 <HAL_GPIO_WritePin>
 8002488:	e00a      	b.n	80024a0 <PWM_SET_LEFT+0x48>
		}
	else
		{
			if (duty == 0)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <PWM_SET_LEFT+0x3c>
				duty = 1;
 8002490:	2301      	movs	r3, #1
 8002492:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002494:	2200      	movs	r2, #0
 8002496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800249a:	4809      	ldr	r0, [pc, #36]	; (80024c0 <PWM_SET_LEFT+0x68>)
 800249c:	f003 f98a 	bl	80057b4 <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024a6:	dd02      	ble.n	80024ae <PWM_SET_LEFT+0x56>
		duty = 2000;
 80024a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80024ac:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,duty);
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <PWM_SET_LEFT+0x6c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40020000 	.word	0x40020000
 80024c4:	200041a8 	.word	0x200041a8

080024c8 <PWM_SET_RIGHT>:

void PWM_SET_RIGHT(int32_t duty)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	duty=duty*PWM_Bias;
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7fe f81f 	bl	8000514 <__aeabi_i2d>
 80024d6:	a329      	add	r3, pc, #164	; (adr r3, 800257c <PWM_SET_RIGHT+0xb4>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe f884 	bl	80005e8 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fa90 	bl	8000a0c <__aeabi_d2iz>
 80024ec:	4603      	mov	r3, r0
 80024ee:	607b      	str	r3, [r7, #4]
	if ( duty < 0 )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da1d      	bge.n	8002532 <PWM_SET_RIGHT+0x6a>
		{
		if (duty <= -2000*PWM_Bias)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <PWM_SET_RIGHT+0xa8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	da02      	bge.n	8002504 <PWM_SET_RIGHT+0x3c>
			duty = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	e00f      	b.n	8002524 <PWM_SET_RIGHT+0x5c>
		else
			duty = 2000*PWM_Bias + duty;
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe f805 	bl	8000514 <__aeabi_i2d>
 800250a:	a317      	add	r3, pc, #92	; (adr r3, 8002568 <PWM_SET_RIGHT+0xa0>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fd feb4 	bl	800027c <__adddf3>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fa76 	bl	8000a0c <__aeabi_d2iz>
 8002520:	4603      	mov	r3, r0
 8002522:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800252a:	4812      	ldr	r0, [pc, #72]	; (8002574 <PWM_SET_RIGHT+0xac>)
 800252c:	f003 f942 	bl	80057b4 <HAL_GPIO_WritePin>
 8002530:	e00a      	b.n	8002548 <PWM_SET_RIGHT+0x80>
		}
	else
		{
			if (duty == 0)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <PWM_SET_RIGHT+0x74>
				duty = 1;
 8002538:	2301      	movs	r3, #1
 800253a:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002542:	480c      	ldr	r0, [pc, #48]	; (8002574 <PWM_SET_RIGHT+0xac>)
 8002544:	f003 f936 	bl	80057b4 <HAL_GPIO_WritePin>
		}
	if (duty > 2000*PWM_Bias)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f240 724a 	movw	r2, #1866	; 0x74a
 800254e:	4293      	cmp	r3, r2
 8002550:	dd02      	ble.n	8002558 <PWM_SET_RIGHT+0x90>
		duty = 2000*PWM_Bias;
 8002552:	f240 734a 	movw	r3, #1866	; 0x74a
 8002556:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,duty);
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <PWM_SET_RIGHT+0xb0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	cccccccd 	.word	0xcccccccd
 800256c:	409d28cc 	.word	0x409d28cc
 8002570:	fffff8b6 	.word	0xfffff8b6
 8002574:	40020c00 	.word	0x40020c00
 8002578:	20004108 	.word	0x20004108
 800257c:	87fcb924 	.word	0x87fcb924
 8002580:	3feddbf4 	.word	0x3feddbf4

08002584 <PID_Apriltag>:

int PID_Apriltag(float Accept_Error)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	; 0x38
 8002588:	af00      	add	r7, sp, #0
 800258a:	ed87 0a01 	vstr	s0, [r7, #4]

	float PID_target=0;
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
	float PID_Error_Last=0;
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
	float PID_Output=0,PID_Input=0;;
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
	float Error = 0, Error_Total=0;
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float KP=2, KI=0, KD=0.5;
 80025b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80025c2:	60fb      	str	r3, [r7, #12]
	int t=0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t Flag=0; //Indicate that if verifying process begin.
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Car_Stop();
 80025ce:	f7ff f9fd 	bl	80019cc <Car_Stop>
 	osSemaphoreWait(ApriltagSemHandle, 1000);
 80025d2:	4b78      	ldr	r3, [pc, #480]	; (80027b4 <PID_Apriltag+0x230>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025da:	4618      	mov	r0, r3
 80025dc:	f006 fb28 	bl	8008c30 <osSemaphoreWait>
  for(;;)
  {
	  	 osSemaphoreWait(CameraUARTSemHandle, 0);
 80025e0:	4b75      	ldr	r3, [pc, #468]	; (80027b8 <PID_Apriltag+0x234>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f006 fb22 	bl	8008c30 <osSemaphoreWait>
	  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 80025ec:	4b72      	ldr	r3, [pc, #456]	; (80027b8 <PID_Apriltag+0x234>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	4618      	mov	r0, r3
 80025f6:	f006 fb1b 	bl	8008c30 <osSemaphoreWait>
	  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 80025fa:	4b70      	ldr	r3, [pc, #448]	; (80027bc <PID_Apriltag+0x238>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002604:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002610:	edc7 7a07 	vstr	s15, [r7, #28]
	  	 Error=PID_target - PID_Input;
 8002614:	ed97 7a08 	vldr	s14, [r7, #32]
 8002618:	edd7 7a07 	vldr	s15, [r7, #28]
 800261c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002620:	edc7 7a06 	vstr	s15, [r7, #24]
	  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 8002624:	edd7 7a01 	vldr	s15, [r7, #4]
 8002628:	eef1 7a67 	vneg.f32	s15, s15
 800262c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002638:	dd17      	ble.n	800266a <PID_Apriltag+0xe6>
 800263a:	ed97 7a06 	vldr	s14, [r7, #24]
 800263e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	d50e      	bpl.n	800266a <PID_Apriltag+0xe6>
 800264c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <PID_Apriltag+0xe6>
	  	 {
	  		 t++;
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	3301      	adds	r3, #1
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
	  		if(t>2)
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	2b02      	cmp	r3, #2
 800265e:	dd04      	ble.n	800266a <PID_Apriltag+0xe6>
	  		{
	  			Flag = 1;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
	  		}
	  	 }
	  	 if(Flag)
 800266a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800266e:	2b00      	cmp	r3, #0
 8002670:	d026      	beq.n	80026c0 <PID_Apriltag+0x13c>
	  	 {
	  		if(t>3)
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	2b03      	cmp	r3, #3
 8002676:	dd06      	ble.n	8002686 <PID_Apriltag+0x102>
	  		{
	  			Flag=0;
 8002678:	2300      	movs	r3, #0
 800267a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 800267e:	2300      	movs	r3, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
	  			return 0;
 8002682:	2300      	movs	r3, #0
 8002684:	e092      	b.n	80027ac <PID_Apriltag+0x228>
	  		}
	  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 8002686:	edd7 7a01 	vldr	s15, [r7, #4]
 800268a:	eef1 7a67 	vneg.f32	s15, s15
 800268e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269a:	dd0c      	ble.n	80026b6 <PID_Apriltag+0x132>
 800269c:	ed97 7a06 	vldr	s14, [r7, #24]
 80026a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	d503      	bpl.n	80026b6 <PID_Apriltag+0x132>
	  		{
	  			t++;
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	3301      	adds	r3, #1
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b4:	e004      	b.n	80026c0 <PID_Apriltag+0x13c>
	  		}
	  		else
	  		{
	  			Flag=0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 80026bc:	2300      	movs	r3, #0
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
	  		}
	  	 }
	  	 Error_Total=Error_Total+KI*Error;
 80026c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80026c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026cc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80026d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     PID_Output = KP * Error  +
 80026d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80026dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80026e0:	ee27 7a27 	vmul.f32	s14, s14, s15
	 				  KD * (Error - PID_Error_Last ) +
 80026e4:	edd7 6a06 	vldr	s13, [r7, #24]
 80026e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80026ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	     PID_Output = KP * Error  +
 80026f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002704:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
					  Error_Total;
	     PID_Error_Last = Error;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
	     if(PID_Output < 0)
 800270c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	d513      	bpl.n	8002742 <PID_Apriltag+0x1be>
	     {
	    	 PID_Output-=PWM_Lowest;
 800271a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800271e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80027c0 <PID_Apriltag+0x23c>
 8002722:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002726:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    	 if(-PID_Output > PWM_Higest)
 800272a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800272e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80027c4 <PID_Apriltag+0x240>
 8002732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273a:	d520      	bpl.n	800277e <PID_Apriltag+0x1fa>
	    	 	PID_Output=-PWM_Higest;
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <PID_Apriltag+0x244>)
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
 8002740:	e01d      	b.n	800277e <PID_Apriltag+0x1fa>
	     }

	     else if(PID_Output > 0)
 8002742:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	dd13      	ble.n	8002778 <PID_Apriltag+0x1f4>
	     {
	    	 PID_Output+=PWM_Lowest;
 8002750:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002754:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80027c0 <PID_Apriltag+0x23c>
 8002758:	ee77 7a87 	vadd.f32	s15, s15, s14
 800275c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    	 if(-PID_Output > PWM_Higest)
 8002760:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002764:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80027c4 <PID_Apriltag+0x240>
 8002768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	d505      	bpl.n	800277e <PID_Apriltag+0x1fa>
	    	 	PID_Output=-PWM_Higest;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <PID_Apriltag+0x244>)
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
 8002776:	e002      	b.n	800277e <PID_Apriltag+0x1fa>
	     }
	     else
	    	PID_Output=0;
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
	    	 taskENTER_CRITICAL();
 800277e:	f008 fbc1 	bl	800af04 <vPortEnterCritical>
	    	 PWM_SET_RIGHT ((int32_t) (-PID_Output));
 8002782:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002786:	eef1 7a67 	vneg.f32	s15, s15
 800278a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800278e:	ee17 0a90 	vmov	r0, s15
 8002792:	f7ff fe99 	bl	80024c8 <PWM_SET_RIGHT>
	    	 PWM_SET_LEFT  ((int32_t)   PID_Output );
 8002796:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800279a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279e:	ee17 0a90 	vmov	r0, s15
 80027a2:	f7ff fe59 	bl	8002458 <PWM_SET_LEFT>
	    	 taskEXIT_CRITICAL();
 80027a6:	f008 fbdd 	bl	800af64 <vPortExitCritical>
	  	 osSemaphoreWait(CameraUARTSemHandle, 0);
 80027aa:	e719      	b.n	80025e0 <PID_Apriltag+0x5c>
	     }
	     delay(2);

}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3738      	adds	r7, #56	; 0x38
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200042b0 	.word	0x200042b0
 80027b8:	20004198 	.word	0x20004198
 80027bc:	200002fa 	.word	0x200002fa
 80027c0:	43fa0000 	.word	0x43fa0000
 80027c4:	c4af0000 	.word	0xc4af0000
 80027c8:	c4af0000 	.word	0xc4af0000

080027cc <Apriltag_Verify>:

int Apriltag_Verify(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
	int sem_count=0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
	for(int i=0;i<10;i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	e00f      	b.n	80027fc <Apriltag_Verify+0x30>
	{
		if(osSemaphoreWait(ApriltagSemHandle, 500)==0)
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <Apriltag_Verify+0x4c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027e4:	4618      	mov	r0, r3
 80027e6:	f006 fa23 	bl	8008c30 <osSemaphoreWait>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <Apriltag_Verify+0x2a>
			sem_count++;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3301      	adds	r3, #1
 80027f4:	607b      	str	r3, [r7, #4]
	for(int i=0;i<10;i++)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b09      	cmp	r3, #9
 8002800:	ddec      	ble.n	80027dc <Apriltag_Verify+0x10>
	}
	if(sem_count>8)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b08      	cmp	r3, #8
 8002806:	dd01      	ble.n	800280c <Apriltag_Verify+0x40>
		return 1;
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <Apriltag_Verify+0x42>
	else
		return 0;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200042b0 	.word	0x200042b0

0800281c <stepping>:

void stepping(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
     float Ultra_Input=0, Ultra_Input_last=0;
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
     float error=0;
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
     int32_t pulse_increment=50;
 8002834:	2332      	movs	r3, #50	; 0x32
 8002836:	617b      	str	r3, [r7, #20]
     //float pulse_increment_float=0;
     float Kp=15;
 8002838:	4b4d      	ldr	r3, [pc, #308]	; (8002970 <stepping+0x154>)
 800283a:	613b      	str	r3, [r7, #16]
     float PWM=0, pwm_left, pwm_right;
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
     vTaskResume(MileageHandle);
 8002842:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <stepping+0x158>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f007 fb90 	bl	8009f6c <vTaskResume>
//	 int32_t pwm_right=0;
//   int32_t pwm_left=0;

     for(int i=0;;i++)
 800284c:	2300      	movs	r3, #0
 800284e:	623b      	str	r3, [r7, #32]
     {
    	  if(distance_flag)
 8002850:	4b49      	ldr	r3, [pc, #292]	; (8002978 <stepping+0x15c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f040 8086 	bne.w	8002966 <stepping+0x14a>
    	  {
    		  return;
    	  }
		  critical_pulses=0;
 800285a:	4b48      	ldr	r3, [pc, #288]	; (800297c <stepping+0x160>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
		  vTaskResume(MileageHandle);
 8002860:	4b44      	ldr	r3, [pc, #272]	; (8002974 <stepping+0x158>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f007 fb81 	bl	8009f6c <vTaskResume>
		  //osSemaphoreWait(MileageSemHandle, osWaitForever);
		  critical_pulses=pulse_increment+number_of_pulses;
 800286a:	4b45      	ldr	r3, [pc, #276]	; (8002980 <stepping+0x164>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	4413      	add	r3, r2
 8002872:	4a42      	ldr	r2, [pc, #264]	; (800297c <stepping+0x160>)
 8002874:	6013      	str	r3, [r2, #0]
	  	  vTaskSuspend(PIDCameraHandle);
 8002876:	4b43      	ldr	r3, [pc, #268]	; (8002984 <stepping+0x168>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f007 fab2 	bl	8009de4 <vTaskSuspend>
	  	  //delay(200);
	  	  //PID_Straight_Reset_Flag=0;
	      //osSemaphoreWait(MileageSemHandle, osWaitForever);
	      //PID_Straight_Reset_Flag=1;
	      //vTaskSuspend(GoStraightHandle);
	  	  osSemaphoreRelease(MileageSemHandle);
 8002880:	4b41      	ldr	r3, [pc, #260]	; (8002988 <stepping+0x16c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f006 fa21 	bl	8008ccc <osSemaphoreRelease>
	      osSemaphoreWait(MileageSemHandle, 0);
 800288a:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <stepping+0x16c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f006 f9cd 	bl	8008c30 <osSemaphoreWait>
	      taskENTER_CRITICAL();
 8002896:	f008 fb35 	bl	800af04 <vPortEnterCritical>
	      PWM_SET_LEFT(1000);
 800289a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800289e:	f7ff fddb 	bl	8002458 <PWM_SET_LEFT>
	  	  PWM_SET_RIGHT(1000);
 80028a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a6:	f7ff fe0f 	bl	80024c8 <PWM_SET_RIGHT>
	      taskEXIT_CRITICAL();
 80028aa:	f008 fb5b 	bl	800af64 <vPortExitCritical>
	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <stepping+0x16c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f04f 31ff 	mov.w	r1, #4294967295
 80028b6:	4618      	mov	r0, r3
 80028b8:	f006 f9ba 	bl	8008c30 <osSemaphoreWait>
	  	  Car_Stop();
 80028bc:	f7ff f886 	bl	80019cc <Car_Stop>
	  	  delay(100);
 80028c0:	2064      	movs	r0, #100	; 0x64
 80028c2:	f7ff f891 	bl	80019e8 <delay>
	  	  vTaskSuspend(MileageHandle);
 80028c6:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <stepping+0x158>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f007 fa8a 	bl	8009de4 <vTaskSuspend>
	     Ultra_Input = Ultrasonic_Feedback_right();
 80028d0:	f7ff fc14 	bl	80020fc <Ultrasonic_Feedback_right>
 80028d4:	ed87 0a07 	vstr	s0, [r7, #28]
	     error = Ultra_Input - Ultra_Input_last;
 80028d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80028dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e4:	edc7 7a06 	vstr	s15, [r7, #24]
	     Ultra_Input_last = Ultra_Input;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
	     if(i==0)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d034      	beq.n	800295c <stepping+0x140>
	     }
	     else
	     {
//         if(error>0)
//	     {
	    	 PWM=Kp*error;
 80028f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80028f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	edc7 7a03 	vstr	s15, [r7, #12]
	    	 PWM = PWM > 250 ? 250 : PWM;
 8002902:	edd7 7a03 	vldr	s15, [r7, #12]
 8002906:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800298c <stepping+0x170>
 800290a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002912:	dd01      	ble.n	8002918 <stepping+0xfc>
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <stepping+0x174>)
 8002916:	e000      	b.n	800291a <stepping+0xfe>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	60fb      	str	r3, [r7, #12]
	    	 pwm_right = -PWM;
 800291c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002920:	eef1 7a67 	vneg.f32	s15, s15
 8002924:	edc7 7a02 	vstr	s15, [r7, #8]
	    	 pwm_left = PWM;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	607b      	str	r3, [r7, #4]
			 taskENTER_CRITICAL();
 800292c:	f008 faea 	bl	800af04 <vPortEnterCritical>
	         PWM_SET_RIGHT (pwm_right);
 8002930:	edd7 7a02 	vldr	s15, [r7, #8]
 8002934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002938:	ee17 0a90 	vmov	r0, s15
 800293c:	f7ff fdc4 	bl	80024c8 <PWM_SET_RIGHT>
	         PWM_SET_LEFT(pwm_left);
 8002940:	edd7 7a01 	vldr	s15, [r7, #4]
 8002944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002948:	ee17 0a90 	vmov	r0, s15
 800294c:	f7ff fd84 	bl	8002458 <PWM_SET_LEFT>
			 taskEXIT_CRITICAL();
 8002950:	f008 fb08 	bl	800af64 <vPortExitCritical>
			 delay(100);
 8002954:	2064      	movs	r0, #100	; 0x64
 8002956:	f7ff f847 	bl	80019e8 <delay>
 800295a:	e000      	b.n	800295e <stepping+0x142>
	    	 continue;
 800295c:	bf00      	nop
     for(int i=0;;i++)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	3301      	adds	r3, #1
 8002962:	623b      	str	r3, [r7, #32]
    	  if(distance_flag)
 8002964:	e774      	b.n	8002850 <stepping+0x34>
    		  return;
 8002966:	bf00      	nop
	     }
     }
}
 8002968:	3728      	adds	r7, #40	; 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	41700000 	.word	0x41700000
 8002974:	200040b8 	.word	0x200040b8
 8002978:	20000328 	.word	0x20000328
 800297c:	20000338 	.word	0x20000338
 8002980:	20000334 	.word	0x20000334
 8002984:	20004194 	.word	0x20004194
 8002988:	20004280 	.word	0x20004280
 800298c:	437a0000 	.word	0x437a0000
 8002990:	437a0000 	.word	0x437a0000

08002994 <stepping2>:

void stepping2(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0
     float Ultra_Input=0, Ultra_Input_last=0,Ultra_Input_last_last=0;
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
     float error=0;
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
     float judge=0;
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
     int32_t pulse_increment=50;
 80029b8:	2332      	movs	r3, #50	; 0x32
 80029ba:	617b      	str	r3, [r7, #20]
     float Kp=15;
 80029bc:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <stepping2+0x1a0>)
 80029be:	613b      	str	r3, [r7, #16]
     float PWM=0, pwm_left, pwm_right;
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
     //float pulse_increment_float=0;
     //float Kp=2;
     vTaskResume(MileageHandle);
 80029c6:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <stepping2+0x1a4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f007 face 	bl	8009f6c <vTaskResume>
//	 int32_t pwm_right=0;
//   int32_t pwm_left=0;

     for(int i=0;;i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
     {

		  critical_pulses=0;
 80029d4:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <stepping2+0x1a8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
		  vTaskResume(MileageHandle);
 80029da:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <stepping2+0x1a4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f007 fac4 	bl	8009f6c <vTaskResume>
		  //osSemaphoreWait(MileageSemHandle, osWaitForever);
		  critical_pulses=pulse_increment+number_of_pulses;
 80029e4:	4b56      	ldr	r3, [pc, #344]	; (8002b40 <stepping2+0x1ac>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a53      	ldr	r2, [pc, #332]	; (8002b3c <stepping2+0x1a8>)
 80029ee:	6013      	str	r3, [r2, #0]
	  	  vTaskSuspend(PIDCameraHandle);
 80029f0:	4b54      	ldr	r3, [pc, #336]	; (8002b44 <stepping2+0x1b0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f007 f9f5 	bl	8009de4 <vTaskSuspend>
	  	  //delay(200);
	  	  //PID_Straight_Reset_Flag=0;
	      //osSemaphoreWait(MileageSemHandle, osWaitForever);
	      //PID_Straight_Reset_Flag=1;
	      //vTaskSuspend(GoStraightHandle);
	  	  osSemaphoreRelease(MileageSemHandle);
 80029fa:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <stepping2+0x1b4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f006 f964 	bl	8008ccc <osSemaphoreRelease>
	      osSemaphoreWait(MileageSemHandle, 0);
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <stepping2+0x1b4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f006 f910 	bl	8008c30 <osSemaphoreWait>
	      taskENTER_CRITICAL();
 8002a10:	f008 fa78 	bl	800af04 <vPortEnterCritical>
	      PWM_SET_LEFT(1000);
 8002a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a18:	f7ff fd1e 	bl	8002458 <PWM_SET_LEFT>
	  	  PWM_SET_RIGHT(1000);
 8002a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a20:	f7ff fd52 	bl	80024c8 <PWM_SET_RIGHT>
	      taskEXIT_CRITICAL();
 8002a24:	f008 fa9e 	bl	800af64 <vPortExitCritical>
	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8002a28:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <stepping2+0x1b4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a30:	4618      	mov	r0, r3
 8002a32:	f006 f8fd 	bl	8008c30 <osSemaphoreWait>
	  	  Car_Stop();
 8002a36:	f7fe ffc9 	bl	80019cc <Car_Stop>
	  	  delay(100);
 8002a3a:	2064      	movs	r0, #100	; 0x64
 8002a3c:	f7fe ffd4 	bl	80019e8 <delay>
	  	  vTaskSuspend(MileageHandle);
 8002a40:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <stepping2+0x1a4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f007 f9cd 	bl	8009de4 <vTaskSuspend>
	     Ultra_Input = Ultrasonic_Feedback_right();
 8002a4a:	f7ff fb57 	bl	80020fc <Ultrasonic_Feedback_right>
 8002a4e:	ed87 0a08 	vstr	s0, [r7, #32]
	     judge = Ultra_Input<Ultra_Input_last? Ultra_Input:Ultra_Input_last;
 8002a52:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	d501      	bpl.n	8002a68 <stepping2+0xd4>
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	e000      	b.n	8002a6a <stepping2+0xd6>
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	61bb      	str	r3, [r7, #24]
	     judge = judge<Ultra_Input_last_last? judge:Ultra_Input_last_last;
 8002a6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	d501      	bpl.n	8002a82 <stepping2+0xee>
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	e000      	b.n	8002a84 <stepping2+0xf0>
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	61bb      	str	r3, [r7, #24]
	     if(judge>3000)
 8002a86:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a8a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002b4c <stepping2+0x1b8>
 8002a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	dc48      	bgt.n	8002b2a <stepping2+0x196>
	     {
	    	 return;
	     }
	     error = Ultra_Input - Ultra_Input_last;
 8002a98:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa4:	edc7 7a07 	vstr	s15, [r7, #28]
	     Ultra_Input_last_last = Ultra_Input_last;
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
	     Ultra_Input_last = Ultra_Input;
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	     if(i==0)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d034      	beq.n	8002b20 <stepping2+0x18c>
	     {
	    	 continue;
	     }
	     else
	     {
	    	 PWM=Kp*error;
 8002ab6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002aba:	edd7 7a07 	vldr	s15, [r7, #28]
 8002abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac2:	edc7 7a03 	vstr	s15, [r7, #12]
	    	 PWM = PWM > 250 ? 250 : PWM;
 8002ac6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aca:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b50 <stepping2+0x1bc>
 8002ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	dd01      	ble.n	8002adc <stepping2+0x148>
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <stepping2+0x1c0>)
 8002ada:	e000      	b.n	8002ade <stepping2+0x14a>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	60fb      	str	r3, [r7, #12]
	    	 pwm_right = -PWM;
 8002ae0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ae4:	eef1 7a67 	vneg.f32	s15, s15
 8002ae8:	edc7 7a02 	vstr	s15, [r7, #8]
	    	 pwm_left = PWM;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	607b      	str	r3, [r7, #4]
			 taskENTER_CRITICAL();
 8002af0:	f008 fa08 	bl	800af04 <vPortEnterCritical>
	         PWM_SET_RIGHT (pwm_right);
 8002af4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002afc:	ee17 0a90 	vmov	r0, s15
 8002b00:	f7ff fce2 	bl	80024c8 <PWM_SET_RIGHT>
	         PWM_SET_LEFT(pwm_left);
 8002b04:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7ff fca2 	bl	8002458 <PWM_SET_LEFT>
			 taskEXIT_CRITICAL();
 8002b14:	f008 fa26 	bl	800af64 <vPortExitCritical>
			 delay(100);
 8002b18:	2064      	movs	r0, #100	; 0x64
 8002b1a:	f7fe ff65 	bl	80019e8 <delay>
 8002b1e:	e000      	b.n	8002b22 <stepping2+0x18e>
	    	 continue;
 8002b20:	bf00      	nop
     for(int i=0;;i++)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
		  critical_pulses=0;
 8002b28:	e754      	b.n	80029d4 <stepping2+0x40>
	    	 return;
 8002b2a:	bf00      	nop
	     }
     }
}
 8002b2c:	3730      	adds	r7, #48	; 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	41700000 	.word	0x41700000
 8002b38:	200040b8 	.word	0x200040b8
 8002b3c:	20000338 	.word	0x20000338
 8002b40:	20000334 	.word	0x20000334
 8002b44:	20004194 	.word	0x20004194
 8002b48:	20004280 	.word	0x20004280
 8002b4c:	453b8000 	.word	0x453b8000
 8002b50:	437a0000 	.word	0x437a0000
 8002b54:	437a0000 	.word	0x437a0000

08002b58 <feeding>:

void feeding(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	e014      	b.n	8002b8e <feeding+0x36>
	{
	   HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_SET);
 8002b64:	2201      	movs	r2, #1
 8002b66:	2110      	movs	r1, #16
 8002b68:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <feeding+0x48>)
 8002b6a:	f002 fe23 	bl	80057b4 <HAL_GPIO_WritePin>
	   delay(500);
 8002b6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b72:	f7fe ff39 	bl	80019e8 <delay>
	   HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2110      	movs	r1, #16
 8002b7a:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <feeding+0x48>)
 8002b7c:	f002 fe1a 	bl	80057b4 <HAL_GPIO_WritePin>
	   delay(1500);
 8002b80:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b84:	f7fe ff30 	bl	80019e8 <delay>
	for(int i = 0; i<3; i++)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	dde7      	ble.n	8002b64 <feeding+0xc>
	}
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021400 	.word	0x40021400

08002ba4 <sendall>:

void sendall(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0

   printf("team32: che che\r\n2429410Z Yiyao Zhong\r\n2429513H Haiyang Hao\r2429453Y Chunlei Yu\r\n2429458Y Xiaoyu Yi\r\n2429488L Yunfei Ling\r\n2429494B Jinsong Bai\r\n2429459L Xiaoyuan Li\r\n2429491L Yuhan Li\r\n2429567W Aodong Wei\r\n2429264Y Jingxuan Yang\r\n");
 8002ba8:	4814      	ldr	r0, [pc, #80]	; (8002bfc <sendall+0x58>)
 8002baa:	f008 fd7d 	bl	800b6a8 <puts>

		HAL_RTC_GetTime(&hrtc,&timenow,RTC_FORMAT_BIN);//get the time from RTC as the real world time
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4913      	ldr	r1, [pc, #76]	; (8002c00 <sendall+0x5c>)
 8002bb2:	4814      	ldr	r0, [pc, #80]	; (8002c04 <sendall+0x60>)
 8002bb4:	f003 fd30 	bl	8006618 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,&datenow,RTC_FORMAT_BIN);//get the date from RTC as the real world time
 8002bb8:	2200      	movs	r2, #0
 8002bba:	4913      	ldr	r1, [pc, #76]	; (8002c08 <sendall+0x64>)
 8002bbc:	4811      	ldr	r0, [pc, #68]	; (8002c04 <sendall+0x60>)
 8002bbe:	f003 fe30 	bl	8006822 <HAL_RTC_GetDate>
		taskENTER_CRITICAL();
 8002bc2:	f008 f99f 	bl	800af04 <vPortEnterCritical>
		printf("%02d/%02d/%02d \r\n", datenow.Year, datenow.Month, datenow.Date);	//print real time date to uart2
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <sendall+0x64>)
 8002bc8:	78db      	ldrb	r3, [r3, #3]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <sendall+0x64>)
 8002bce:	785b      	ldrb	r3, [r3, #1]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <sendall+0x64>)
 8002bd4:	789b      	ldrb	r3, [r3, #2]
 8002bd6:	480d      	ldr	r0, [pc, #52]	; (8002c0c <sendall+0x68>)
 8002bd8:	f008 fce0 	bl	800b59c <iprintf>
		printf("%02d/%02d/%02d \r\n", timenow.Hours, timenow.Minutes, timenow.Seconds);//print real world time to uart2
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <sendall+0x5c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <sendall+0x5c>)
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <sendall+0x5c>)
 8002bea:	789b      	ldrb	r3, [r3, #2]
 8002bec:	4807      	ldr	r0, [pc, #28]	; (8002c0c <sendall+0x68>)
 8002bee:	f008 fcd5 	bl	800b59c <iprintf>
		taskEXIT_CRITICAL();
 8002bf2:	f008 f9b7 	bl	800af64 <vPortExitCritical>
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	0800c68c 	.word	0x0800c68c
 8002c00:	200043cc 	.word	0x200043cc
 8002c04:	20004284 	.word	0x20004284
 8002c08:	200040b4 	.word	0x200040b4
 8002c0c:	0800c774 	.word	0x0800c774

08002c10 <State_Transition>:
	HAL_UART_Transmit(&huart6, &temp, 1, 0xFFFF);
    return ch;
}

uint8_t State_Transition(State* current_state)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	State next_state = Unknow;
 8002c18:	2328      	movs	r3, #40	; 0x28
 8002c1a:	73fb      	strb	r3, [r7, #15]
	switch(state)
 8002c1c:	4bba      	ldr	r3, [pc, #744]	; (8002f08 <State_Transition+0x2f8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	2b25      	cmp	r3, #37	; 0x25
 8002c24:	f200 81a0 	bhi.w	8002f68 <State_Transition+0x358>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <State_Transition+0x20>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002cc9 	.word	0x08002cc9
 8002c34:	08002ccf 	.word	0x08002ccf
 8002c38:	08002f69 	.word	0x08002f69
 8002c3c:	08002ce3 	.word	0x08002ce3
 8002c40:	08002ce9 	.word	0x08002ce9
 8002c44:	08002cef 	.word	0x08002cef
 8002c48:	08002cf5 	.word	0x08002cf5
 8002c4c:	08002cfb 	.word	0x08002cfb
 8002c50:	08002d01 	.word	0x08002d01
 8002c54:	08002d07 	.word	0x08002d07
 8002c58:	08002d0d 	.word	0x08002d0d
 8002c5c:	08002d13 	.word	0x08002d13
 8002c60:	08002d19 	.word	0x08002d19
 8002c64:	08002d1f 	.word	0x08002d1f
 8002c68:	08002d25 	.word	0x08002d25
 8002c6c:	08002e15 	.word	0x08002e15
 8002c70:	08002f69 	.word	0x08002f69
 8002c74:	08002d2b 	.word	0x08002d2b
 8002c78:	08002d6d 	.word	0x08002d6d
 8002c7c:	08002d89 	.word	0x08002d89
 8002c80:	08002da5 	.word	0x08002da5
 8002c84:	08002dc1 	.word	0x08002dc1
 8002c88:	08002ddd 	.word	0x08002ddd
 8002c8c:	08002df9 	.word	0x08002df9
 8002c90:	08002f69 	.word	0x08002f69
 8002c94:	08002e1b 	.word	0x08002e1b
 8002c98:	08002e21 	.word	0x08002e21
 8002c9c:	08002e3d 	.word	0x08002e3d
 8002ca0:	08002e43 	.word	0x08002e43
 8002ca4:	08002e49 	.word	0x08002e49
 8002ca8:	08002f69 	.word	0x08002f69
 8002cac:	08002e8d 	.word	0x08002e8d
 8002cb0:	08002e65 	.word	0x08002e65
 8002cb4:	08002f69 	.word	0x08002f69
 8002cb8:	08002e6b 	.word	0x08002e6b
 8002cbc:	08002f69 	.word	0x08002f69
 8002cc0:	08002e81 	.word	0x08002e81
 8002cc4:	08002e87 	.word	0x08002e87
	{
		case Initial:
					next_state = Go_Mile_1;
 8002cc8:	2312      	movs	r3, #18
 8002cca:	73fb      	strb	r3, [r7, #15]
					break;
 8002ccc:	e14f      	b.n	8002f6e <State_Transition+0x35e>
		case Line_Search:
					if(distance_flag==0)
 8002cce:	4b8f      	ldr	r3, [pc, #572]	; (8002f0c <State_Transition+0x2fc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <State_Transition+0xcc>
						next_state = Line_Search;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	73fb      	strb	r3, [r7, #15]
					else
						next_state= TurnRight;
					break;
 8002cda:	e148      	b.n	8002f6e <State_Transition+0x35e>
						next_state= TurnRight;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	73fb      	strb	r3, [r7, #15]
					break;
 8002ce0:	e145      	b.n	8002f6e <State_Transition+0x35e>
		/*case TurnRight:
					next_state = Go_Mile_1;
					break;*/
		case TurnRight1_1:
					next_state = Go_Mile_2_1;
 8002ce2:	2313      	movs	r3, #19
 8002ce4:	73fb      	strb	r3, [r7, #15]
					break;
 8002ce6:	e142      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight1_2:
					next_state = Go_Mile_2_2;
 8002ce8:	2314      	movs	r3, #20
 8002cea:	73fb      	strb	r3, [r7, #15]
					break;
 8002cec:	e13f      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight1_3:
					next_state = Go_Mile_2_3;
 8002cee:	2315      	movs	r3, #21
 8002cf0:	73fb      	strb	r3, [r7, #15]
					break;
 8002cf2:	e13c      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight2_1:
					next_state = Go_Mile_3_1;
 8002cf4:	2316      	movs	r3, #22
 8002cf6:	73fb      	strb	r3, [r7, #15]
					break;
 8002cf8:	e139      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight2_3:
					next_state = Go_Mile_3_3;
 8002cfa:	2317      	movs	r3, #23
 8002cfc:	73fb      	strb	r3, [r7, #15]
					break;
 8002cfe:	e136      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight3_1:
					next_state = Go_Mile_4;
 8002d00:	2318      	movs	r3, #24
 8002d02:	73fb      	strb	r3, [r7, #15]
					break;
 8002d04:	e133      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight3_3:
					next_state = Go_Mile_4;
 8002d06:	2318      	movs	r3, #24
 8002d08:	73fb      	strb	r3, [r7, #15]
					break;
 8002d0a:	e130      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight4:
					next_state = GoStraight_Until_Barrier;
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	73fb      	strb	r3, [r7, #15]
					break;
 8002d10:	e12d      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight5:
					next_state = Go_Mile_6;
 8002d12:	231a      	movs	r3, #26
 8002d14:	73fb      	strb	r3, [r7, #15]
					break;
 8002d16:	e12a      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight6:
					next_state = Go_Mile_7;
 8002d18:	231c      	movs	r3, #28
 8002d1a:	73fb      	strb	r3, [r7, #15]
					break;
 8002d1c:	e127      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight7:
					next_state = Go_Mile_8_Until_Apriltag;
 8002d1e:	231d      	movs	r3, #29
 8002d20:	73fb      	strb	r3, [r7, #15]
					break;
 8002d22:	e124      	b.n	8002f6e <State_Transition+0x35e>
		case TurnRight8:
					next_state = Go_Mile_10;
 8002d24:	231f      	movs	r3, #31
 8002d26:	73fb      	strb	r3, [r7, #15]
					break;
 8002d28:	e121      	b.n	8002f6e <State_Transition+0x35e>
//					else
//						next_state = TurnRight;
			        //next_state = TurnRight5;
					//break;
		case Go_Mile_1:
					if(*current_state == Mile_Adjust)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d113      	bne.n	8002d5a <State_Transition+0x14a>
		                switch(finalcolor)
 8002d32:	4b77      	ldr	r3, [pc, #476]	; (8002f10 <State_Transition+0x300>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d00c      	beq.n	8002d54 <State_Transition+0x144>
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	dc14      	bgt.n	8002d68 <State_Transition+0x158>
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d002      	beq.n	8002d48 <State_Transition+0x138>
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d003      	beq.n	8002d4e <State_Transition+0x13e>
		                	break;
		                case 3:
		                	next_state = TurnRight1_2;
		                	break;
		                default:
		                	break;
 8002d46:	e00f      	b.n	8002d68 <State_Transition+0x158>
		                	next_state = TurnRight1_3;
 8002d48:	2306      	movs	r3, #6
 8002d4a:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002d4c:	e00d      	b.n	8002d6a <State_Transition+0x15a>
		                	next_state = TurnRight1_1;
 8002d4e:	2304      	movs	r3, #4
 8002d50:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002d52:	e00a      	b.n	8002d6a <State_Transition+0x15a>
		                	next_state = TurnRight1_2;
 8002d54:	2305      	movs	r3, #5
 8002d56:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002d58:	e007      	b.n	8002d6a <State_Transition+0x15a>
		                }


					else
						{
						temp_state = *current_state;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	4b6d      	ldr	r3, [pc, #436]	; (8002f14 <State_Transition+0x304>)
 8002d60:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002d62:	2320      	movs	r3, #32
 8002d64:	73fb      	strb	r3, [r7, #15]
						}
					break;
 8002d66:	e102      	b.n	8002f6e <State_Transition+0x35e>
		                	break;
 8002d68:	bf00      	nop
					break;
 8002d6a:	e100      	b.n	8002f6e <State_Transition+0x35e>
		case Go_Mile_2_1:
					if(*current_state == Mile_Adjust)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d102      	bne.n	8002d7a <State_Transition+0x16a>
						next_state = TurnRight2_1;
 8002d74:	2307      	movs	r3, #7
 8002d76:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002d78:	e0f9      	b.n	8002f6e <State_Transition+0x35e>
						temp_state = *current_state;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	4b65      	ldr	r3, [pc, #404]	; (8002f14 <State_Transition+0x304>)
 8002d80:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002d82:	2320      	movs	r3, #32
 8002d84:	73fb      	strb	r3, [r7, #15]
					break;
 8002d86:	e0f2      	b.n	8002f6e <State_Transition+0x35e>
		case Go_Mile_2_2:
					if(*current_state == Mile_Adjust)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d102      	bne.n	8002d96 <State_Transition+0x186>
						next_state = Go_Mile_4;
 8002d90:	2318      	movs	r3, #24
 8002d92:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002d94:	e0eb      	b.n	8002f6e <State_Transition+0x35e>
						temp_state = *current_state;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	4b5e      	ldr	r3, [pc, #376]	; (8002f14 <State_Transition+0x304>)
 8002d9c:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002d9e:	2320      	movs	r3, #32
 8002da0:	73fb      	strb	r3, [r7, #15]
					break;
 8002da2:	e0e4      	b.n	8002f6e <State_Transition+0x35e>
		case Go_Mile_2_3:
					if(*current_state == Mile_Adjust)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d102      	bne.n	8002db2 <State_Transition+0x1a2>
						next_state = TurnRight2_3;
 8002dac:	2308      	movs	r3, #8
 8002dae:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002db0:	e0dd      	b.n	8002f6e <State_Transition+0x35e>
						temp_state = *current_state;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	4b57      	ldr	r3, [pc, #348]	; (8002f14 <State_Transition+0x304>)
 8002db8:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	73fb      	strb	r3, [r7, #15]
					break;
 8002dbe:	e0d6      	b.n	8002f6e <State_Transition+0x35e>

		case Go_Mile_3_1:
					if(*current_state == Mile_Adjust)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d102      	bne.n	8002dce <State_Transition+0x1be>
						next_state = TurnRight3_1;
 8002dc8:	2309      	movs	r3, #9
 8002dca:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002dcc:	e0cf      	b.n	8002f6e <State_Transition+0x35e>
						temp_state = *current_state;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <State_Transition+0x304>)
 8002dd4:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	73fb      	strb	r3, [r7, #15]
					break;
 8002dda:	e0c8      	b.n	8002f6e <State_Transition+0x35e>

		case Go_Mile_3_3:
					if(*current_state == Mile_Adjust)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d102      	bne.n	8002dea <State_Transition+0x1da>
						next_state = TurnRight3_3;
 8002de4:	230a      	movs	r3, #10
 8002de6:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002de8:	e0c1      	b.n	8002f6e <State_Transition+0x35e>
						temp_state = *current_state;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <State_Transition+0x304>)
 8002df0:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002df2:	2320      	movs	r3, #32
 8002df4:	73fb      	strb	r3, [r7, #15]
					break;
 8002df6:	e0ba      	b.n	8002f6e <State_Transition+0x35e>

		case Go_Mile_4:
					if(*current_state == Mile_Adjust)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d102      	bne.n	8002e06 <State_Transition+0x1f6>
						next_state = TurnRight4;
 8002e00:	230b      	movs	r3, #11
 8002e02:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002e04:	e0b3      	b.n	8002f6e <State_Transition+0x35e>
						temp_state = *current_state;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	4b42      	ldr	r3, [pc, #264]	; (8002f14 <State_Transition+0x304>)
 8002e0c:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	73fb      	strb	r3, [r7, #15]
					break;
 8002e12:	e0ac      	b.n	8002f6e <State_Transition+0x35e>
		case GoStraight_Until_Barrier:
					//if(*current_state == Mile_Adjust)
						next_state = TurnRight5;
 8002e14:	230c      	movs	r3, #12
 8002e16:	73fb      	strb	r3, [r7, #15]
//					else
//						{
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
					break;
 8002e18:	e0a9      	b.n	8002f6e <State_Transition+0x35e>
		case Go_Mile_6:
					//if(*current_state == Mile_Adjust)
						next_state = Go_Mile_6_7;
 8002e1a:	231b      	movs	r3, #27
 8002e1c:	73fb      	strb	r3, [r7, #15]
					/*else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}*/
					 break;
 8002e1e:	e0a6      	b.n	8002f6e <State_Transition+0x35e>
		case Go_Mile_6_7:
					if(*current_state == Mile_Adjust)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d102      	bne.n	8002e2e <State_Transition+0x21e>
						next_state = TurnRight6;
 8002e28:	230d      	movs	r3, #13
 8002e2a:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002e2c:	e09f      	b.n	8002f6e <State_Transition+0x35e>
						temp_state = *current_state;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <State_Transition+0x304>)
 8002e34:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002e36:	2320      	movs	r3, #32
 8002e38:	73fb      	strb	r3, [r7, #15]
					break;
 8002e3a:	e098      	b.n	8002f6e <State_Transition+0x35e>
		case Go_Mile_7:
//					if(*current_state == Mile_Adjust)
						next_state = TurnRight7;
 8002e3c:	230e      	movs	r3, #14
 8002e3e:	73fb      	strb	r3, [r7, #15]
//					else
//						{
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
					break;
 8002e40:	e095      	b.n	8002f6e <State_Transition+0x35e>
		case Go_Mile_8_Until_Apriltag:
					next_state=Apriltag_Check;
 8002e42:	2323      	movs	r3, #35	; 0x23
 8002e44:	73fb      	strb	r3, [r7, #15]
					break;
 8002e46:	e092      	b.n	8002f6e <State_Transition+0x35e>
		case Go_Mile_9:
					if(*current_state == Mile_Adjust)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d102      	bne.n	8002e56 <State_Transition+0x246>
						next_state = TurnRight8;
 8002e50:	230f      	movs	r3, #15
 8002e52:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002e54:	e08b      	b.n	8002f6e <State_Transition+0x35e>
						temp_state = *current_state;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <State_Transition+0x304>)
 8002e5c:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	73fb      	strb	r3, [r7, #15]
					break;
 8002e62:	e084      	b.n	8002f6e <State_Transition+0x35e>
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
//					break;
		case Apriltag_Adjust1:
					next_state = Feeding;
 8002e64:	2325      	movs	r3, #37	; 0x25
 8002e66:	73fb      	strb	r3, [r7, #15]
					break;
 8002e68:	e081      	b.n	8002f6e <State_Transition+0x35e>
		case Apriltag_Check:
					if(Apriltag_Verify())
 8002e6a:	f7ff fcaf 	bl	80027cc <Apriltag_Verify>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <State_Transition+0x26a>
						next_state = Apriltag_Adjust1;
 8002e74:	2321      	movs	r3, #33	; 0x21
 8002e76:	73fb      	strb	r3, [r7, #15]
					else
						next_state=Go_Mile_8_Until_Apriltag;
					break;
 8002e78:	e079      	b.n	8002f6e <State_Transition+0x35e>
						next_state=Go_Mile_8_Until_Apriltag;
 8002e7a:	231d      	movs	r3, #29
 8002e7c:	73fb      	strb	r3, [r7, #15]
					break;
 8002e7e:	e076      	b.n	8002f6e <State_Transition+0x35e>
		case Feeding:
					next_state=Go_Mile_9;
 8002e80:	231e      	movs	r3, #30
 8002e82:	73fb      	strb	r3, [r7, #15]
					break;
 8002e84:	e073      	b.n	8002f6e <State_Transition+0x35e>
		case Communication:
					next_state=Communication;
 8002e86:	2326      	movs	r3, #38	; 0x26
 8002e88:	73fb      	strb	r3, [r7, #15]
					break;
 8002e8a:	e070      	b.n	8002f6e <State_Transition+0x35e>
		case Mile_Adjust:
					switch (temp_state)
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <State_Transition+0x304>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	3b10      	subs	r3, #16
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d864      	bhi.n	8002f60 <State_Transition+0x350>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <State_Transition+0x28c>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002f3d 	.word	0x08002f3d
 8002ea0:	08002f61 	.word	0x08002f61
 8002ea4:	08002edd 	.word	0x08002edd
 8002ea8:	08002f19 	.word	0x08002f19
 8002eac:	08002f1f 	.word	0x08002f1f
 8002eb0:	08002f25 	.word	0x08002f25
 8002eb4:	08002f2b 	.word	0x08002f2b
 8002eb8:	08002f31 	.word	0x08002f31
 8002ebc:	08002f37 	.word	0x08002f37
 8002ec0:	08002f61 	.word	0x08002f61
 8002ec4:	08002f43 	.word	0x08002f43
 8002ec8:	08002f49 	.word	0x08002f49
 8002ecc:	08002f4f 	.word	0x08002f4f
 8002ed0:	08002f61 	.word	0x08002f61
 8002ed4:	08002f55 	.word	0x08002f55
 8002ed8:	08002f5b 	.word	0x08002f5b
					{
					case Go_Mile_1:
		                switch(finalcolor)
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <State_Transition+0x300>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d00c      	beq.n	8002efe <State_Transition+0x2ee>
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	dc0d      	bgt.n	8002f04 <State_Transition+0x2f4>
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d002      	beq.n	8002ef2 <State_Transition+0x2e2>
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d003      	beq.n	8002ef8 <State_Transition+0x2e8>
		                	break;
		                case 3:
		                	next_state = TurnRight1_2;
		                	break;
		                default:
		                	break;
 8002ef0:	e008      	b.n	8002f04 <State_Transition+0x2f4>
		                	next_state = TurnRight1_3;
 8002ef2:	2306      	movs	r3, #6
 8002ef4:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002ef6:	e006      	b.n	8002f06 <State_Transition+0x2f6>
		                	next_state = TurnRight1_1;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002efc:	e003      	b.n	8002f06 <State_Transition+0x2f6>
		                	next_state = TurnRight1_2;
 8002efe:	2305      	movs	r3, #5
 8002f00:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002f02:	e000      	b.n	8002f06 <State_Transition+0x2f6>
		                	break;
 8002f04:	bf00      	nop
		                }
						break;
 8002f06:	e02e      	b.n	8002f66 <State_Transition+0x356>
 8002f08:	200041f0 	.word	0x200041f0
 8002f0c:	20000328 	.word	0x20000328
 8002f10:	20004104 	.word	0x20004104
 8002f14:	200042a8 	.word	0x200042a8
					case Go_Mile_2_1:
						next_state = TurnRight2_1;
 8002f18:	2307      	movs	r3, #7
 8002f1a:	73fb      	strb	r3, [r7, #15]
						break;
 8002f1c:	e023      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_2_2:
						next_state = Go_Mile_4;
 8002f1e:	2318      	movs	r3, #24
 8002f20:	73fb      	strb	r3, [r7, #15]
						break;
 8002f22:	e020      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_2_3:
						next_state = TurnRight2_3;
 8002f24:	2308      	movs	r3, #8
 8002f26:	73fb      	strb	r3, [r7, #15]
						break;
 8002f28:	e01d      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_3_1:
						next_state = TurnRight3_1;
 8002f2a:	2309      	movs	r3, #9
 8002f2c:	73fb      	strb	r3, [r7, #15]
						break;
 8002f2e:	e01a      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_3_3:
						next_state = TurnRight3_3;
 8002f30:	230a      	movs	r3, #10
 8002f32:	73fb      	strb	r3, [r7, #15]
						break;
 8002f34:	e017      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_4:
						next_state = TurnRight4;
 8002f36:	230b      	movs	r3, #11
 8002f38:	73fb      	strb	r3, [r7, #15]
						break;
 8002f3a:	e014      	b.n	8002f66 <State_Transition+0x356>
					case GoStraight_Until_Barrier:
						next_state = TurnRight5;
 8002f3c:	230c      	movs	r3, #12
 8002f3e:	73fb      	strb	r3, [r7, #15]
						break;
 8002f40:	e011      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_6:
						next_state = Go_Mile_6_7;
 8002f42:	231b      	movs	r3, #27
 8002f44:	73fb      	strb	r3, [r7, #15]
						break;
 8002f46:	e00e      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_6_7:
						next_state = TurnRight6;
 8002f48:	230d      	movs	r3, #13
 8002f4a:	73fb      	strb	r3, [r7, #15]
						break;
 8002f4c:	e00b      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_7:
						next_state = TurnRight7;
 8002f4e:	230e      	movs	r3, #14
 8002f50:	73fb      	strb	r3, [r7, #15]
						break;
 8002f52:	e008      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_9:
						next_state = TurnRight8;
 8002f54:	230f      	movs	r3, #15
 8002f56:	73fb      	strb	r3, [r7, #15]
						break;
 8002f58:	e005      	b.n	8002f66 <State_Transition+0x356>
					case Go_Mile_10:
						next_state = Idle;
 8002f5a:	2327      	movs	r3, #39	; 0x27
 8002f5c:	73fb      	strb	r3, [r7, #15]
						break;
 8002f5e:	e002      	b.n	8002f66 <State_Transition+0x356>
					default:
						next_state = Initial;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
						break;
 8002f64:	bf00      	nop
					}
					//temp_state = Mile_Adjust;
					break;
 8002f66:	e002      	b.n	8002f6e <State_Transition+0x35e>
		default:
					next_state = Initial;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
					break;
 8002f6c:	bf00      	nop
	}
	if (next_state == *current_state)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d101      	bne.n	8002f7c <State_Transition+0x36c>
		return 1;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e003      	b.n	8002f84 <State_Transition+0x374>
	else
	{

		*current_state=next_state;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	701a      	strb	r2, [r3, #0]
		return 0;
 8002f82:	2300      	movs	r3, #0
	}
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <StreamTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StreamTask */
void StreamTask(void const * argument)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t Same_State_Flag=0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
	uint32_t pulse_incremnet=0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]
	Car_Initial();
 8002f9c:	f7fe fce0 	bl	8001960 <Car_Initial>
	delay(1000);
 8002fa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fa4:	f7fe fd20 	bl	80019e8 <delay>
  /* Infinite loop */
  for(;;)
  {

	  delay(50);
 8002fa8:	2032      	movs	r0, #50	; 0x32
 8002faa:	f7fe fd1d 	bl	80019e8 <delay>
	  //delay(10);
	  //PreviousWakeTime = osKernelSysTick()
	  //osDelayUntil(&PreviousWakeTime = osKernelSysTick(), 500);
	  //HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);

	  Same_State_Flag = State_Transition(&state);
 8002fae:	48b8      	ldr	r0, [pc, #736]	; (8003290 <StreamTask+0x304>)
 8002fb0:	f7ff fe2e 	bl	8002c10 <State_Transition>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]
	  if(Same_State_Flag)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f041 8068 	bne.w	8004090 <StreamTask+0x1104>
		  continue;
	  switch(state)
 8002fc0:	4bb3      	ldr	r3, [pc, #716]	; (8003290 <StreamTask+0x304>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	2b26      	cmp	r3, #38	; 0x26
 8002fc8:	f201 805f 	bhi.w	800408a <StreamTask+0x10fe>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <StreamTask+0x48>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08003071 	.word	0x08003071
 8002fd8:	0800308d 	.word	0x0800308d
 8002fdc:	080030af 	.word	0x080030af
 8002fe0:	0800310f 	.word	0x0800310f
 8002fe4:	0800316f 	.word	0x0800316f
 8002fe8:	080031cf 	.word	0x080031cf
 8002fec:	0800322f 	.word	0x0800322f
 8002ff0:	080032c1 	.word	0x080032c1
 8002ff4:	08003321 	.word	0x08003321
 8002ff8:	08003381 	.word	0x08003381
 8002ffc:	080033e1 	.word	0x080033e1
 8003000:	08003441 	.word	0x08003441
 8003004:	080034a1 	.word	0x080034a1
 8003008:	08003501 	.word	0x08003501
 800300c:	08003561 	.word	0x08003561
 8003010:	080035e9 	.word	0x080035e9
 8003014:	0800364f 	.word	0x0800364f
 8003018:	080036f5 	.word	0x080036f5
 800301c:	080037bd 	.word	0x080037bd
 8003020:	080038a5 	.word	0x080038a5
 8003024:	08003949 	.word	0x08003949
 8003028:	080039ed 	.word	0x080039ed
 800302c:	08003a91 	.word	0x08003a91
 8003030:	08003b5d 	.word	0x08003b5d
 8003034:	08003bff 	.word	0x08003bff
 8003038:	08003c69 	.word	0x08003c69
 800303c:	08003cb5 	.word	0x08003cb5
 8003040:	08003d57 	.word	0x08003d57
 8003044:	08003df5 	.word	0x08003df5
 8003048:	08003e9b 	.word	0x08003e9b
 800304c:	08003f45 	.word	0x08003f45
 8003050:	08004045 	.word	0x08004045
 8003054:	08003fef 	.word	0x08003fef
 8003058:	0800408b 	.word	0x0800408b
 800305c:	08003fe9 	.word	0x08003fe9
 8003060:	0800408b 	.word	0x0800408b
 8003064:	0800402f 	.word	0x0800402f
 8003068:	08004039 	.word	0x08004039
 800306c:	08004085 	.word	0x08004085
	  {
	  case Initial:
		  	  	  	  	  state= Idle;
 8003070:	4b87      	ldr	r3, [pc, #540]	; (8003290 <StreamTask+0x304>)
 8003072:	2227      	movs	r2, #39	; 0x27
 8003074:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8003076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800307a:	f7fe fcb5 	bl	80019e8 <delay>
		  	  	  	      state= Initial;
 800307e:	4b84      	ldr	r3, [pc, #528]	; (8003290 <StreamTask+0x304>)
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  Car_Initial();
 8003084:	f7fe fc6c 	bl	8001960 <Car_Initial>
		  	  	  	  	  break;
 8003088:	f001 b803 	b.w	8004092 <StreamTask+0x1106>
	  case Line_Search:
		  	  	  	  	  state= Idle;
 800308c:	4b80      	ldr	r3, [pc, #512]	; (8003290 <StreamTask+0x304>)
 800308e:	2227      	movs	r2, #39	; 0x27
 8003090:	701a      	strb	r2, [r3, #0]
		  		  	  	  delay(500);
 8003092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003096:	f7fe fca7 	bl	80019e8 <delay>
		  		  	  	  state= Line_Search;
 800309a:	4b7d      	ldr	r3, [pc, #500]	; (8003290 <StreamTask+0x304>)
 800309c:	2202      	movs	r2, #2
 800309e:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  vTaskResume(PIDCameraHandle);
 80030a0:	4b7c      	ldr	r3, [pc, #496]	; (8003294 <StreamTask+0x308>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f006 ff61 	bl	8009f6c <vTaskResume>
		  	  	  	  	  //vTaskResume(GyroReceiveHandle);
		  	  	  	  	  break;
 80030aa:	f000 bff2 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 80030ae:	4b7a      	ldr	r3, [pc, #488]	; (8003298 <StreamTask+0x30c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f006 fe96 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80030b8:	4b78      	ldr	r3, [pc, #480]	; (800329c <StreamTask+0x310>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f006 fe91 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80030c2:	4b77      	ldr	r3, [pc, #476]	; (80032a0 <StreamTask+0x314>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f006 fe8c 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80030cc:	f7fe fc7e 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 80030d0:	2032      	movs	r0, #50	; 0x32
 80030d2:	f7fe fc89 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 80030d6:	4b73      	ldr	r3, [pc, #460]	; (80032a4 <StreamTask+0x318>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80030dc:	4b72      	ldr	r3, [pc, #456]	; (80032a8 <StreamTask+0x31c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80030e2:	4b72      	ldr	r3, [pc, #456]	; (80032ac <StreamTask+0x320>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f006 ff40 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 80030ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030f0:	f7fe fc7a 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(-90,2);
 80030f4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80030f8:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80032b0 <StreamTask+0x324>
 80030fc:	f7fe fcec 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003100:	4b69      	ldr	r3, [pc, #420]	; (80032a8 <StreamTask+0x31c>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003106:	f7fe fc61 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 800310a:	f000 bfc2 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight1_1:
						  vTaskSuspend(DistanceCheckHandle);
 800310e:	4b62      	ldr	r3, [pc, #392]	; (8003298 <StreamTask+0x30c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f006 fe66 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003118:	4b60      	ldr	r3, [pc, #384]	; (800329c <StreamTask+0x310>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f006 fe61 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003122:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <StreamTask+0x314>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f006 fe5c 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800312c:	f7fe fc4e 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003130:	2032      	movs	r0, #50	; 0x32
 8003132:	f7fe fc59 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003136:	4b5b      	ldr	r3, [pc, #364]	; (80032a4 <StreamTask+0x318>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800313c:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <StreamTask+0x31c>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003142:	4b5a      	ldr	r3, [pc, #360]	; (80032ac <StreamTask+0x320>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f006 ff10 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 800314c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003150:	f7fe fc4a 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(45,2);
 8003154:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003158:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80032b4 <StreamTask+0x328>
 800315c:	f7fe fcbc 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003160:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <StreamTask+0x31c>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003166:	f7fe fc31 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 800316a:	f000 bf92 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight1_2:
						  vTaskSuspend(DistanceCheckHandle);
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <StreamTask+0x30c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f006 fe36 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003178:	4b48      	ldr	r3, [pc, #288]	; (800329c <StreamTask+0x310>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f006 fe31 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003182:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <StreamTask+0x314>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f006 fe2c 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800318c:	f7fe fc1e 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003190:	2032      	movs	r0, #50	; 0x32
 8003192:	f7fe fc29 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003196:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <StreamTask+0x318>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800319c:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <StreamTask+0x31c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80031a2:	4b42      	ldr	r3, [pc, #264]	; (80032ac <StreamTask+0x320>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f006 fee0 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 80031ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031b0:	f7fe fc1a 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(90,2);
 80031b4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80031b8:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80032b8 <StreamTask+0x32c>
 80031bc:	f7fe fc8c 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80031c0:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <StreamTask+0x31c>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80031c6:	f7fe fc01 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 80031ca:	f000 bf62 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight1_3:
						  vTaskSuspend(DistanceCheckHandle);
 80031ce:	4b32      	ldr	r3, [pc, #200]	; (8003298 <StreamTask+0x30c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f006 fe06 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80031d8:	4b30      	ldr	r3, [pc, #192]	; (800329c <StreamTask+0x310>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f006 fe01 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80031e2:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <StreamTask+0x314>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f006 fdfc 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80031ec:	f7fe fbee 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 80031f0:	2032      	movs	r0, #50	; 0x32
 80031f2:	f7fe fbf9 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 80031f6:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <StreamTask+0x318>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <StreamTask+0x31c>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003202:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <StreamTask+0x320>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f006 feb0 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 800320c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003210:	f7fe fbea 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(135,2);
 8003214:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003218:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80032bc <StreamTask+0x330>
 800321c:	f7fe fc5c 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003220:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <StreamTask+0x31c>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003226:	f7fe fbd1 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 800322a:	f000 bf32 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight2_1:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <StreamTask+0x30c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f006 fdd6 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003238:	4b18      	ldr	r3, [pc, #96]	; (800329c <StreamTask+0x310>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f006 fdd1 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <StreamTask+0x314>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f006 fdcc 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800324c:	f7fe fbbe 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003250:	2032      	movs	r0, #50	; 0x32
 8003252:	f7fe fbc9 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <StreamTask+0x318>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <StreamTask+0x31c>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <StreamTask+0x320>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f006 fe80 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 800326c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003270:	f7fe fbba 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(90,2);
 8003274:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003278:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80032b8 <StreamTask+0x32c>
 800327c:	f7fe fc2c 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <StreamTask+0x31c>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003286:	f7fe fba1 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 800328a:	f000 bf02 	b.w	8004092 <StreamTask+0x1106>
 800328e:	bf00      	nop
 8003290:	200041f0 	.word	0x200041f0
 8003294:	20004194 	.word	0x20004194
 8003298:	200041a0 	.word	0x200041a0
 800329c:	200041a4 	.word	0x200041a4
 80032a0:	200040b8 	.word	0x200040b8
 80032a4:	20000328 	.word	0x20000328
 80032a8:	20000330 	.word	0x20000330
 80032ac:	200043e4 	.word	0x200043e4
 80032b0:	c2b40000 	.word	0xc2b40000
 80032b4:	42340000 	.word	0x42340000
 80032b8:	42b40000 	.word	0x42b40000
 80032bc:	43070000 	.word	0x43070000
	  case TurnRight2_3:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 80032c0:	4bbf      	ldr	r3, [pc, #764]	; (80035c0 <StreamTask+0x634>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f006 fd8d 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80032ca:	4bbe      	ldr	r3, [pc, #760]	; (80035c4 <StreamTask+0x638>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f006 fd88 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80032d4:	4bbc      	ldr	r3, [pc, #752]	; (80035c8 <StreamTask+0x63c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f006 fd83 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80032de:	f7fe fb75 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 80032e2:	2032      	movs	r0, #50	; 0x32
 80032e4:	f7fe fb80 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 80032e8:	4bb8      	ldr	r3, [pc, #736]	; (80035cc <StreamTask+0x640>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80032ee:	4bb8      	ldr	r3, [pc, #736]	; (80035d0 <StreamTask+0x644>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80032f4:	4bb7      	ldr	r3, [pc, #732]	; (80035d4 <StreamTask+0x648>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f006 fe37 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 80032fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003302:	f7fe fb71 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(-90,2);
 8003306:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800330a:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80035d8 <StreamTask+0x64c>
 800330e:	f7fe fbe3 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003312:	4baf      	ldr	r3, [pc, #700]	; (80035d0 <StreamTask+0x644>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003318:	f7fe fb58 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 800331c:	f000 beb9 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight3_1:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8003320:	4ba7      	ldr	r3, [pc, #668]	; (80035c0 <StreamTask+0x634>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f006 fd5d 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800332a:	4ba6      	ldr	r3, [pc, #664]	; (80035c4 <StreamTask+0x638>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f006 fd58 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003334:	4ba4      	ldr	r3, [pc, #656]	; (80035c8 <StreamTask+0x63c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f006 fd53 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800333e:	f7fe fb45 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003342:	2032      	movs	r0, #50	; 0x32
 8003344:	f7fe fb50 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003348:	4ba0      	ldr	r3, [pc, #640]	; (80035cc <StreamTask+0x640>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800334e:	4ba0      	ldr	r3, [pc, #640]	; (80035d0 <StreamTask+0x644>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003354:	4b9f      	ldr	r3, [pc, #636]	; (80035d4 <StreamTask+0x648>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f006 fe07 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 800335e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003362:	f7fe fb41 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(-45,2);
 8003366:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800336a:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 80035dc <StreamTask+0x650>
 800336e:	f7fe fbb3 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003372:	4b97      	ldr	r3, [pc, #604]	; (80035d0 <StreamTask+0x644>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003378:	f7fe fb28 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 800337c:	f000 be89 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight3_3:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8003380:	4b8f      	ldr	r3, [pc, #572]	; (80035c0 <StreamTask+0x634>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f006 fd2d 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800338a:	4b8e      	ldr	r3, [pc, #568]	; (80035c4 <StreamTask+0x638>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f006 fd28 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003394:	4b8c      	ldr	r3, [pc, #560]	; (80035c8 <StreamTask+0x63c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f006 fd23 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800339e:	f7fe fb15 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 80033a2:	2032      	movs	r0, #50	; 0x32
 80033a4:	f7fe fb20 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 80033a8:	4b88      	ldr	r3, [pc, #544]	; (80035cc <StreamTask+0x640>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <StreamTask+0x644>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80033b4:	4b87      	ldr	r3, [pc, #540]	; (80035d4 <StreamTask+0x648>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f006 fdd7 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 80033be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033c2:	f7fe fb11 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(45,2);
 80033c6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80033ca:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80035e0 <StreamTask+0x654>
 80033ce:	f7fe fb83 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80033d2:	4b7f      	ldr	r3, [pc, #508]	; (80035d0 <StreamTask+0x644>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80033d8:	f7fe faf8 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 80033dc:	f000 be59 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight4:
						  vTaskSuspend(DistanceCheckHandle);
 80033e0:	4b77      	ldr	r3, [pc, #476]	; (80035c0 <StreamTask+0x634>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f006 fcfd 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <StreamTask+0x638>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f006 fcf8 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80033f4:	4b74      	ldr	r3, [pc, #464]	; (80035c8 <StreamTask+0x63c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f006 fcf3 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80033fe:	f7fe fae5 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003402:	2032      	movs	r0, #50	; 0x32
 8003404:	f7fe faf0 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003408:	4b70      	ldr	r3, [pc, #448]	; (80035cc <StreamTask+0x640>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800340e:	4b70      	ldr	r3, [pc, #448]	; (80035d0 <StreamTask+0x644>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003414:	4b6f      	ldr	r3, [pc, #444]	; (80035d4 <StreamTask+0x648>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f006 fda7 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 800341e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003422:	f7fe fae1 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(-90,2);
 8003426:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800342a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80035d8 <StreamTask+0x64c>
 800342e:	f7fe fb53 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003432:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <StreamTask+0x644>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003438:	f7fe fac8 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 800343c:	f000 be29 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight5:
						  vTaskSuspend(DistanceCheckHandle);
 8003440:	4b5f      	ldr	r3, [pc, #380]	; (80035c0 <StreamTask+0x634>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f006 fccd 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800344a:	4b5e      	ldr	r3, [pc, #376]	; (80035c4 <StreamTask+0x638>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f006 fcc8 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003454:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <StreamTask+0x63c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f006 fcc3 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800345e:	f7fe fab5 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003462:	2032      	movs	r0, #50	; 0x32
 8003464:	f7fe fac0 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003468:	4b58      	ldr	r3, [pc, #352]	; (80035cc <StreamTask+0x640>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <StreamTask+0x644>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003474:	4b57      	ldr	r3, [pc, #348]	; (80035d4 <StreamTask+0x648>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f006 fd77 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 800347e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003482:	f7fe fab1 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(90,2);
 8003486:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800348a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80035e4 <StreamTask+0x658>
 800348e:	f7fe fb23 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003492:	4b4f      	ldr	r3, [pc, #316]	; (80035d0 <StreamTask+0x644>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003498:	f7fe fa98 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 800349c:	f000 bdf9 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight6:
						  vTaskSuspend(DistanceCheckHandle);
 80034a0:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <StreamTask+0x634>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f006 fc9d 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80034aa:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <StreamTask+0x638>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f006 fc98 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80034b4:	4b44      	ldr	r3, [pc, #272]	; (80035c8 <StreamTask+0x63c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f006 fc93 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80034be:	f7fe fa85 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 80034c2:	2032      	movs	r0, #50	; 0x32
 80034c4:	f7fe fa90 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 80034c8:	4b40      	ldr	r3, [pc, #256]	; (80035cc <StreamTask+0x640>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80034ce:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <StreamTask+0x644>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <StreamTask+0x648>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f006 fd47 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 80034de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034e2:	f7fe fa81 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(-90,2);
 80034e6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80034ea:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80035d8 <StreamTask+0x64c>
 80034ee:	f7fe faf3 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80034f2:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <StreamTask+0x644>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80034f8:	f7fe fa68 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 80034fc:	f000 bdc9 	b.w	8004092 <StreamTask+0x1106>
	  case TurnRight7:
						  vTaskSuspend(DistanceCheckHandle);
 8003500:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <StreamTask+0x634>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f006 fc6d 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800350a:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <StreamTask+0x638>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f006 fc68 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <StreamTask+0x63c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f006 fc63 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800351e:	f7fe fa55 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003522:	2032      	movs	r0, #50	; 0x32
 8003524:	f7fe fa60 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <StreamTask+0x640>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800352e:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <StreamTask+0x644>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <StreamTask+0x648>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f006 fd17 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 800353e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003542:	f7fe fa51 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(90,2);
 8003546:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800354a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80035e4 <StreamTask+0x658>
 800354e:	f7fe fac3 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8003552:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <StreamTask+0x644>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003558:	f7fe fa38 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 800355c:	f000 bd99 	b.w	8004092 <StreamTask+0x1106>

	  case TurnRight8:
						  vTaskSuspend(DistanceCheckHandle);
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <StreamTask+0x634>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f006 fc3d 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <StreamTask+0x638>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f006 fc38 	bl	8009de4 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <StreamTask+0x63c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f006 fc33 	bl	8009de4 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800357e:	f7fe fa25 	bl	80019cc <Car_Stop>
	  	  	  	  	  	  delay(50);
 8003582:	2032      	movs	r0, #50	; 0x32
 8003584:	f7fe fa30 	bl	80019e8 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003588:	4b10      	ldr	r3, [pc, #64]	; (80035cc <StreamTask+0x640>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <StreamTask+0x644>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <StreamTask+0x648>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f006 fce7 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(500);
 800359e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035a2:	f7fe fa21 	bl	80019e8 <delay>
		  	  	  	  	  PID_Turning(90,2);
 80035a6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80035aa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80035e4 <StreamTask+0x658>
 80035ae:	f7fe fa93 	bl	8001ad8 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <StreamTask+0x644>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80035b8:	f7fe fa08 	bl	80019cc <Car_Stop>
		  		  	  	  break;
 80035bc:	f000 bd69 	b.w	8004092 <StreamTask+0x1106>
 80035c0:	200041a0 	.word	0x200041a0
 80035c4:	200041a4 	.word	0x200041a4
 80035c8:	200040b8 	.word	0x200040b8
 80035cc:	20000328 	.word	0x20000328
 80035d0:	20000330 	.word	0x20000330
 80035d4:	200043e4 	.word	0x200043e4
 80035d8:	c2b40000 	.word	0xc2b40000
 80035dc:	c2340000 	.word	0xc2340000
 80035e0:	42340000 	.word	0x42340000
 80035e4:	42b40000 	.word	0x42b40000

	  case GoStraight_Until_Barrier:
		  	  	  	  	  //state= Idle;
		  	  	  	  	  vTaskSuspend(PIDCameraHandle);
 80035e8:	4b9e      	ldr	r3, [pc, #632]	; (8003864 <StreamTask+0x8d8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f006 fbf9 	bl	8009de4 <vTaskSuspend>
		  	  	  	  	  vTaskSuspend(GyroReceiveHandle);
 80035f2:	4b9d      	ldr	r3, [pc, #628]	; (8003868 <StreamTask+0x8dc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f006 fbf4 	bl	8009de4 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 80035fc:	4b9b      	ldr	r3, [pc, #620]	; (800386c <StreamTask+0x8e0>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8003602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003606:	f7fe f9ef 	bl	80019e8 <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  critical_distance.front=350;
 800360a:	4b99      	ldr	r3, [pc, #612]	; (8003870 <StreamTask+0x8e4>)
 800360c:	4a99      	ldr	r2, [pc, #612]	; (8003874 <StreamTask+0x8e8>)
 800360e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8003610:	4b99      	ldr	r3, [pc, #612]	; (8003878 <StreamTask+0x8ec>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f006 fca9 	bl	8009f6c <vTaskResume>
		  	  	  	  	  PWM_SET_LEFT(PWM_Mid);
 800361a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800361e:	f7fe ff1b 	bl	8002458 <PWM_SET_LEFT>
		  	  	  	  	  PWM_SET_RIGHT(PWM_Mid);
 8003622:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003626:	f7fe ff4f 	bl	80024c8 <PWM_SET_RIGHT>
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 800362a:	4b94      	ldr	r3, [pc, #592]	; (800387c <StreamTask+0x8f0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f04f 31ff 	mov.w	r1, #4294967295
 8003632:	4618      	mov	r0, r3
 8003634:	f005 fafc 	bl	8008c30 <osSemaphoreWait>
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 8003638:	4b90      	ldr	r3, [pc, #576]	; (800387c <StreamTask+0x8f0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f04f 31ff 	mov.w	r1, #4294967295
 8003640:	4618      	mov	r0, r3
 8003642:	f005 faf5 	bl	8008c30 <osSemaphoreWait>
		  	  	  	  	  Car_Stop();
 8003646:	f7fe f9c1 	bl	80019cc <Car_Stop>
		  	  	  	      //vTaskSuspend(DistanceCheckHandle);
		  	  	  	  	  break;
 800364a:	f000 bd22 	b.w	8004092 <StreamTask+0x1106>
	  case Go_Mile:
	  					  vTaskSuspend(DistanceCheckHandle);
 800364e:	4b8a      	ldr	r3, [pc, #552]	; (8003878 <StreamTask+0x8ec>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f006 fbc6 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=33000;//室外
 8003658:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800365c:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 800365e:	4b88      	ldr	r3, [pc, #544]	; (8003880 <StreamTask+0x8f4>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003664:	4b80      	ldr	r3, [pc, #512]	; (8003868 <StreamTask+0x8dc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f006 fc7f 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 800366e:	4b85      	ldr	r3, [pc, #532]	; (8003884 <StreamTask+0x8f8>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003674:	4b84      	ldr	r3, [pc, #528]	; (8003888 <StreamTask+0x8fc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f006 fc77 	bl	8009f6c <vTaskResume>
						  delay(500);
 800367e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003682:	f7fe f9b1 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003686:	4b81      	ldr	r3, [pc, #516]	; (800388c <StreamTask+0x900>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f04f 31ff 	mov.w	r1, #4294967295
 800368e:	4618      	mov	r0, r3
 8003690:	f005 face 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003694:	4b7e      	ldr	r3, [pc, #504]	; (8003890 <StreamTask+0x904>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	461a      	mov	r2, r3
 80036a0:	4b78      	ldr	r3, [pc, #480]	; (8003884 <StreamTask+0x8f8>)
 80036a2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 80036a4:	4b7b      	ldr	r3, [pc, #492]	; (8003894 <StreamTask+0x908>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 80036aa:	4b7b      	ldr	r3, [pc, #492]	; (8003898 <StreamTask+0x90c>)
 80036ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80036b0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 80036b2:	4b7a      	ldr	r3, [pc, #488]	; (800389c <StreamTask+0x910>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f006 fc58 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 80036bc:	20c8      	movs	r0, #200	; 0xc8
 80036be:	f7fe f993 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 80036c2:	4b74      	ldr	r3, [pc, #464]	; (8003894 <StreamTask+0x908>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80036c8:	4b70      	ldr	r3, [pc, #448]	; (800388c <StreamTask+0x900>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	4618      	mov	r0, r3
 80036d2:	f005 faad 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 80036d6:	4b6f      	ldr	r3, [pc, #444]	; (8003894 <StreamTask+0x908>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80036dc:	4b6f      	ldr	r3, [pc, #444]	; (800389c <StreamTask+0x910>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f006 fb7f 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 80036e6:	f7fe f971 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80036ea:	4b65      	ldr	r3, [pc, #404]	; (8003880 <StreamTask+0x8f4>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80036f0:	f000 bccf 	b.w	8004092 <StreamTask+0x1106>
	  case Go_Mile_1:
						  vTaskSuspend(DistanceCheckHandle);
 80036f4:	4b60      	ldr	r3, [pc, #384]	; (8003878 <StreamTask+0x8ec>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f006 fb73 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=200;//室外
 80036fe:	23c8      	movs	r3, #200	; 0xc8
 8003700:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  camera_recieve_IT_flag=1;
 8003702:	4b5a      	ldr	r3, [pc, #360]	; (800386c <StreamTask+0x8e0>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
						  vTaskResume(ColorcheckHandle);
 8003708:	4b65      	ldr	r3, [pc, #404]	; (80038a0 <StreamTask+0x914>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f006 fc2d 	bl	8009f6c <vTaskResume>
						  gyro_reset_flag=0;
 8003712:	4b5b      	ldr	r3, [pc, #364]	; (8003880 <StreamTask+0x8f4>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <StreamTask+0x8dc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f006 fc25 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 8003722:	4b58      	ldr	r3, [pc, #352]	; (8003884 <StreamTask+0x8f8>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003728:	4b57      	ldr	r3, [pc, #348]	; (8003888 <StreamTask+0x8fc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f006 fc1d 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003736:	f7fe f957 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 800373a:	4b54      	ldr	r3, [pc, #336]	; (800388c <StreamTask+0x900>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f04f 31ff 	mov.w	r1, #4294967295
 8003742:	4618      	mov	r0, r3
 8003744:	f005 fa74 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003748:	4b51      	ldr	r3, [pc, #324]	; (8003890 <StreamTask+0x904>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4413      	add	r3, r2
 8003752:	461a      	mov	r2, r3
 8003754:	4b4b      	ldr	r3, [pc, #300]	; (8003884 <StreamTask+0x8f8>)
 8003756:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003758:	4b4e      	ldr	r3, [pc, #312]	; (8003894 <StreamTask+0x908>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 800375e:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <StreamTask+0x90c>)
 8003760:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003764:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003766:	4b4d      	ldr	r3, [pc, #308]	; (800389c <StreamTask+0x910>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f006 fbfe 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 8003770:	20c8      	movs	r0, #200	; 0xc8
 8003772:	f7fe f939 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <StreamTask+0x908>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <StreamTask+0x900>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	4618      	mov	r0, r3
 8003786:	f005 fa53 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 800378a:	4b42      	ldr	r3, [pc, #264]	; (8003894 <StreamTask+0x908>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003790:	4b42      	ldr	r3, [pc, #264]	; (800389c <StreamTask+0x910>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f006 fb25 	bl	8009de4 <vTaskSuspend>
		  	  	  	      vTaskSuspend(ColorcheckHandle);
 800379a:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <StreamTask+0x914>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f006 fb20 	bl	8009de4 <vTaskSuspend>
		  	  	  	      camera_recieve_IT_flag=0;
 80037a4:	4b31      	ldr	r3, [pc, #196]	; (800386c <StreamTask+0x8e0>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
		  	  	  	      color_judge();
 80037aa:	f7fe fe1b 	bl	80023e4 <color_judge>
		  	  	  		  Car_Stop();
 80037ae:	f7fe f90d 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80037b2:	4b33      	ldr	r3, [pc, #204]	; (8003880 <StreamTask+0x8f4>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80037b8:	f000 bc6b 	b.w	8004092 <StreamTask+0x1106>
	  case Go_Mile_2_1:
						  vTaskSuspend(DistanceCheckHandle);
 80037bc:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <StreamTask+0x8ec>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f006 fb0f 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 80037c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80037ca:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80037cc:	4b2c      	ldr	r3, [pc, #176]	; (8003880 <StreamTask+0x8f4>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 80037d2:	4b25      	ldr	r3, [pc, #148]	; (8003868 <StreamTask+0x8dc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f006 fbc8 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 80037dc:	4b29      	ldr	r3, [pc, #164]	; (8003884 <StreamTask+0x8f8>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <StreamTask+0x8fc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f006 fbc0 	bl	8009f6c <vTaskResume>
						  delay(500);
 80037ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037f0:	f7fe f8fa 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <StreamTask+0x900>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f04f 31ff 	mov.w	r1, #4294967295
 80037fc:	4618      	mov	r0, r3
 80037fe:	f005 fa17 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <StreamTask+0x904>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4413      	add	r3, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <StreamTask+0x8f8>)
 8003810:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <StreamTask+0x908>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003818:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <StreamTask+0x90c>)
 800381a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800381e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <StreamTask+0x910>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f006 fba1 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 800382a:	20c8      	movs	r0, #200	; 0xc8
 800382c:	f7fe f8dc 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <StreamTask+0x908>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <StreamTask+0x900>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f04f 31ff 	mov.w	r1, #4294967295
 800383e:	4618      	mov	r0, r3
 8003840:	f005 f9f6 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <StreamTask+0x908>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 800384a:	4b14      	ldr	r3, [pc, #80]	; (800389c <StreamTask+0x910>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f006 fac8 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003854:	f7fe f8ba 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <StreamTask+0x8f4>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 800385e:	f000 bc18 	b.w	8004092 <StreamTask+0x1106>
 8003862:	bf00      	nop
 8003864:	20004194 	.word	0x20004194
 8003868:	200043e4 	.word	0x200043e4
 800386c:	2000032c 	.word	0x2000032c
 8003870:	20000310 	.word	0x20000310
 8003874:	43af0000 	.word	0x43af0000
 8003878:	200041a0 	.word	0x200041a0
 800387c:	200040ac 	.word	0x200040ac
 8003880:	20000330 	.word	0x20000330
 8003884:	20000338 	.word	0x20000338
 8003888:	200040b8 	.word	0x200040b8
 800388c:	20004280 	.word	0x20004280
 8003890:	20000334 	.word	0x20000334
 8003894:	20000008 	.word	0x20000008
 8003898:	20000000 	.word	0x20000000
 800389c:	200041a4 	.word	0x200041a4
 80038a0:	200042a4 	.word	0x200042a4
	  case Go_Mile_2_2:
						  vTaskSuspend(DistanceCheckHandle);
 80038a4:	4ba3      	ldr	r3, [pc, #652]	; (8003b34 <StreamTask+0xba8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f006 fa9b 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 80038ae:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80038b2:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80038b4:	4ba0      	ldr	r3, [pc, #640]	; (8003b38 <StreamTask+0xbac>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 80038ba:	4ba0      	ldr	r3, [pc, #640]	; (8003b3c <StreamTask+0xbb0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f006 fb54 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 80038c4:	4b9e      	ldr	r3, [pc, #632]	; (8003b40 <StreamTask+0xbb4>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 80038ca:	4b9e      	ldr	r3, [pc, #632]	; (8003b44 <StreamTask+0xbb8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f006 fb4c 	bl	8009f6c <vTaskResume>
						  delay(500);
 80038d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038d8:	f7fe f886 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 80038dc:	4b9a      	ldr	r3, [pc, #616]	; (8003b48 <StreamTask+0xbbc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	4618      	mov	r0, r3
 80038e6:	f005 f9a3 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 80038ea:	4b98      	ldr	r3, [pc, #608]	; (8003b4c <StreamTask+0xbc0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4413      	add	r3, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b92      	ldr	r3, [pc, #584]	; (8003b40 <StreamTask+0xbb4>)
 80038f8:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 80038fa:	4b95      	ldr	r3, [pc, #596]	; (8003b50 <StreamTask+0xbc4>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003900:	4b94      	ldr	r3, [pc, #592]	; (8003b54 <StreamTask+0xbc8>)
 8003902:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003906:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003908:	4b93      	ldr	r3, [pc, #588]	; (8003b58 <StreamTask+0xbcc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f006 fb2d 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 8003912:	20c8      	movs	r0, #200	; 0xc8
 8003914:	f7fe f868 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003918:	4b8d      	ldr	r3, [pc, #564]	; (8003b50 <StreamTask+0xbc4>)
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 800391e:	4b8a      	ldr	r3, [pc, #552]	; (8003b48 <StreamTask+0xbbc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f04f 31ff 	mov.w	r1, #4294967295
 8003926:	4618      	mov	r0, r3
 8003928:	f005 f982 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 800392c:	4b88      	ldr	r3, [pc, #544]	; (8003b50 <StreamTask+0xbc4>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003932:	4b89      	ldr	r3, [pc, #548]	; (8003b58 <StreamTask+0xbcc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f006 fa54 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 800393c:	f7fe f846 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003940:	4b7d      	ldr	r3, [pc, #500]	; (8003b38 <StreamTask+0xbac>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003946:	e3a4      	b.n	8004092 <StreamTask+0x1106>
	  case Go_Mile_2_3:
						  vTaskSuspend(DistanceCheckHandle);
 8003948:	4b7a      	ldr	r3, [pc, #488]	; (8003b34 <StreamTask+0xba8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f006 fa49 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003952:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003956:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003958:	4b77      	ldr	r3, [pc, #476]	; (8003b38 <StreamTask+0xbac>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 800395e:	4b77      	ldr	r3, [pc, #476]	; (8003b3c <StreamTask+0xbb0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f006 fb02 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 8003968:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <StreamTask+0xbb4>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 800396e:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <StreamTask+0xbb8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f006 fafa 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800397c:	f7fe f834 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003980:	4b71      	ldr	r3, [pc, #452]	; (8003b48 <StreamTask+0xbbc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f04f 31ff 	mov.w	r1, #4294967295
 8003988:	4618      	mov	r0, r3
 800398a:	f005 f951 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 800398e:	4b6f      	ldr	r3, [pc, #444]	; (8003b4c <StreamTask+0xbc0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4413      	add	r3, r2
 8003998:	461a      	mov	r2, r3
 800399a:	4b69      	ldr	r3, [pc, #420]	; (8003b40 <StreamTask+0xbb4>)
 800399c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 800399e:	4b6c      	ldr	r3, [pc, #432]	; (8003b50 <StreamTask+0xbc4>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 80039a4:	4b6b      	ldr	r3, [pc, #428]	; (8003b54 <StreamTask+0xbc8>)
 80039a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80039aa:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 80039ac:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <StreamTask+0xbcc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f006 fadb 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 80039b6:	20c8      	movs	r0, #200	; 0xc8
 80039b8:	f7fe f816 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 80039bc:	4b64      	ldr	r3, [pc, #400]	; (8003b50 <StreamTask+0xbc4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80039c2:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <StreamTask+0xbbc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f04f 31ff 	mov.w	r1, #4294967295
 80039ca:	4618      	mov	r0, r3
 80039cc:	f005 f930 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 80039d0:	4b5f      	ldr	r3, [pc, #380]	; (8003b50 <StreamTask+0xbc4>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80039d6:	4b60      	ldr	r3, [pc, #384]	; (8003b58 <StreamTask+0xbcc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f006 fa02 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 80039e0:	f7fd fff4 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80039e4:	4b54      	ldr	r3, [pc, #336]	; (8003b38 <StreamTask+0xbac>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80039ea:	e352      	b.n	8004092 <StreamTask+0x1106>

	  case Go_Mile_3_1:
						  vTaskSuspend(DistanceCheckHandle);
 80039ec:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <StreamTask+0xba8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f006 f9f7 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 80039f6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80039fa:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80039fc:	4b4e      	ldr	r3, [pc, #312]	; (8003b38 <StreamTask+0xbac>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003a02:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <StreamTask+0xbb0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f006 fab0 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <StreamTask+0xbb4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003a12:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <StreamTask+0xbb8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f006 faa8 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a20:	f7fd ffe2 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003a24:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <StreamTask+0xbbc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f04f 31ff 	mov.w	r1, #4294967295
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f005 f8ff 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003a32:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <StreamTask+0xbc0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4b40      	ldr	r3, [pc, #256]	; (8003b40 <StreamTask+0xbb4>)
 8003a40:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003a42:	4b43      	ldr	r3, [pc, #268]	; (8003b50 <StreamTask+0xbc4>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003a48:	4b42      	ldr	r3, [pc, #264]	; (8003b54 <StreamTask+0xbc8>)
 8003a4a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003a4e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003a50:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <StreamTask+0xbcc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f006 fa89 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 8003a5a:	20c8      	movs	r0, #200	; 0xc8
 8003a5c:	f7fd ffc4 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003a60:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <StreamTask+0xbc4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <StreamTask+0xbbc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f005 f8de 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003a74:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <StreamTask+0xbc4>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003a7a:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <StreamTask+0xbcc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f006 f9b0 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003a84:	f7fd ffa2 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <StreamTask+0xbac>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003a8e:	e300      	b.n	8004092 <StreamTask+0x1106>
	  case Go_Mile_3_3:
						  vTaskSuspend(DistanceCheckHandle);
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <StreamTask+0xba8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f006 f9a5 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003a9a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003a9e:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <StreamTask+0xbac>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003aa6:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <StreamTask+0xbb0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f006 fa5e 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 8003ab0:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <StreamTask+0xbb4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003ab6:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <StreamTask+0xbb8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f006 fa56 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ac4:	f7fd ff90 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <StreamTask+0xbbc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f005 f8ad 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <StreamTask+0xbc0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4413      	add	r3, r2
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <StreamTask+0xbb4>)
 8003ae4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <StreamTask+0xbc4>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <StreamTask+0xbc8>)
 8003aee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003af2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003af4:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <StreamTask+0xbcc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f006 fa37 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 8003afe:	20c8      	movs	r0, #200	; 0xc8
 8003b00:	f7fd ff72 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <StreamTask+0xbc4>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <StreamTask+0xbbc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f04f 31ff 	mov.w	r1, #4294967295
 8003b12:	4618      	mov	r0, r3
 8003b14:	f005 f88c 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <StreamTask+0xbc4>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <StreamTask+0xbcc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f006 f95e 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003b28:	f7fd ff50 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003b2c:	4b02      	ldr	r3, [pc, #8]	; (8003b38 <StreamTask+0xbac>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003b32:	e2ae      	b.n	8004092 <StreamTask+0x1106>
 8003b34:	200041a0 	.word	0x200041a0
 8003b38:	20000330 	.word	0x20000330
 8003b3c:	200043e4 	.word	0x200043e4
 8003b40:	20000338 	.word	0x20000338
 8003b44:	200040b8 	.word	0x200040b8
 8003b48:	20004280 	.word	0x20004280
 8003b4c:	20000334 	.word	0x20000334
 8003b50:	20000008 	.word	0x20000008
 8003b54:	20000000 	.word	0x20000000
 8003b58:	200041a4 	.word	0x200041a4
	  case Go_Mile_4:
	  					  vTaskSuspend(DistanceCheckHandle);
 8003b5c:	4b95      	ldr	r3, [pc, #596]	; (8003db4 <StreamTask+0xe28>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f006 f93f 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=200;//室外
 8003b66:	23c8      	movs	r3, #200	; 0xc8
 8003b68:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003b6a:	4b93      	ldr	r3, [pc, #588]	; (8003db8 <StreamTask+0xe2c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003b70:	4b92      	ldr	r3, [pc, #584]	; (8003dbc <StreamTask+0xe30>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f006 f9f9 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 8003b7a:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <StreamTask+0xe34>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003b80:	4b90      	ldr	r3, [pc, #576]	; (8003dc4 <StreamTask+0xe38>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f006 f9f1 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003b8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b8e:	f7fd ff2b 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003b92:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <StreamTask+0xe3c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f04f 31ff 	mov.w	r1, #4294967295
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f005 f848 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003ba0:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <StreamTask+0xe40>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4413      	add	r3, r2
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b84      	ldr	r3, [pc, #528]	; (8003dc0 <StreamTask+0xe34>)
 8003bae:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003bb0:	4b87      	ldr	r3, [pc, #540]	; (8003dd0 <StreamTask+0xe44>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003bb6:	4b87      	ldr	r3, [pc, #540]	; (8003dd4 <StreamTask+0xe48>)
 8003bb8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003bbc:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003bbe:	4b86      	ldr	r3, [pc, #536]	; (8003dd8 <StreamTask+0xe4c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f006 f9d2 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 8003bc8:	20c8      	movs	r0, #200	; 0xc8
 8003bca:	f7fd ff0d 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003bce:	4b80      	ldr	r3, [pc, #512]	; (8003dd0 <StreamTask+0xe44>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003bd4:	4b7c      	ldr	r3, [pc, #496]	; (8003dc8 <StreamTask+0xe3c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f005 f827 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003be2:	4b7b      	ldr	r3, [pc, #492]	; (8003dd0 <StreamTask+0xe44>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003be8:	4b7b      	ldr	r3, [pc, #492]	; (8003dd8 <StreamTask+0xe4c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f006 f8f9 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003bf2:	f7fd feeb 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003bf6:	4b70      	ldr	r3, [pc, #448]	; (8003db8 <StreamTask+0xe2c>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003bfc:	e249      	b.n	8004092 <StreamTask+0x1106>
	  case Go_Mile_5:
						  //vTaskSuspend(DistanceCheckHandle);
						  //pulse_incremnet=6900;//室内
						  //pulse_incremnet=0;//室外
						  //pulse_incremnet=600; //小正方形
		                  Ultrasonic_Feedback_front();
 8003bfe:	f7fe fa67 	bl	80020d0 <Ultrasonic_Feedback_front>
						  gyro_reset_flag=0;
 8003c02:	4b6d      	ldr	r3, [pc, #436]	; (8003db8 <StreamTask+0xe2c>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003c08:	4b6c      	ldr	r3, [pc, #432]	; (8003dbc <StreamTask+0xe30>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f006 f9ad 	bl	8009f6c <vTaskResume>
						  //critical_pulses=0;
						  //vTaskResume(MileageHandle);
						  delay(500);
 8003c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c16:	f7fd fee7 	bl	80019e8 <delay>
						  //osSemaphoreWait(MileageSemHandle, osWaitForever);
						  //critical_pulses=pulse_incremnet+number_of_pulses;
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <StreamTask+0xe44>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003c20:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <StreamTask+0xe48>)
 8003c22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c26:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003c28:	4b6b      	ldr	r3, [pc, #428]	; (8003dd8 <StreamTask+0xe4c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f006 f99d 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 8003c32:	20c8      	movs	r0, #200	; 0xc8
 8003c34:	f7fd fed8 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003c38:	4b65      	ldr	r3, [pc, #404]	; (8003dd0 <StreamTask+0xe44>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(UltraFrontSemHandle, osWaitForever);
 8003c3e:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <StreamTask+0xe50>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f04f 31ff 	mov.w	r1, #4294967295
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 fff2 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003c4c:	4b60      	ldr	r3, [pc, #384]	; (8003dd0 <StreamTask+0xe44>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003c52:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <StreamTask+0xe4c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f006 f8c4 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003c5c:	f7fd feb6 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003c60:	4b55      	ldr	r3, [pc, #340]	; (8003db8 <StreamTask+0xe2c>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003c66:	e214      	b.n	8004092 <StreamTask+0x1106>
	  case Go_Mile_6:
	  	  	              vTaskSuspend(GyroReceiveHandle);
 8003c68:	4b54      	ldr	r3, [pc, #336]	; (8003dbc <StreamTask+0xe30>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f006 f8b9 	bl	8009de4 <vTaskSuspend>
		                  critical_pulses=0;
 8003c72:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <StreamTask+0xe34>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
	  	  	              vTaskSuspend(PIDCameraHandle);
 8003c78:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <StreamTask+0xe54>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f006 f8b1 	bl	8009de4 <vTaskSuspend>
	  	  	              vTaskSuspend(DistanceCheckHandle);
 8003c82:	4b4c      	ldr	r3, [pc, #304]	; (8003db4 <StreamTask+0xe28>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f006 f8ac 	bl	8009de4 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003c8c:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <StreamTask+0xe58>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8003c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c96:	f7fd fea7 	bl	80019e8 <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  //critical_distance.front=350;
		  	  	  	  	  //vTaskResume(DistanceCheckHandle);
		  	  	  	      distance_flag=0;
 8003c9a:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <StreamTask+0xe5c>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
	  	                  stepping2();
 8003ca0:	f7fe fe78 	bl	8002994 <stepping2>
		  	  	  	      Car_Stop();
 8003ca4:	f7fd fe92 	bl	80019cc <Car_Stop>
	  		              vTaskSuspend(GyroReceiveHandle);
 8003ca8:	4b44      	ldr	r3, [pc, #272]	; (8003dbc <StreamTask+0xe30>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f006 f899 	bl	8009de4 <vTaskSuspend>
	  		              break;
 8003cb2:	e1ee      	b.n	8004092 <StreamTask+0x1106>
	  case Go_Mile_6_7:
	  					  vTaskSuspend(DistanceCheckHandle);
 8003cb4:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <StreamTask+0xe28>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f006 f893 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=100;//室外
 8003cbe:	2364      	movs	r3, #100	; 0x64
 8003cc0:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <StreamTask+0xe2c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003cc8:	4b3c      	ldr	r3, [pc, #240]	; (8003dbc <StreamTask+0xe30>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f006 f94d 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 8003cd2:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <StreamTask+0xe34>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003cd8:	4b3a      	ldr	r3, [pc, #232]	; (8003dc4 <StreamTask+0xe38>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f006 f945 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003ce2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ce6:	f7fd fe7f 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003cea:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <StreamTask+0xe3c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f004 ff9c 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003cf8:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <StreamTask+0xe40>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4413      	add	r3, r2
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <StreamTask+0xe34>)
 8003d06:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003d08:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <StreamTask+0xe44>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <StreamTask+0xe48>)
 8003d10:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d14:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003d16:	4b30      	ldr	r3, [pc, #192]	; (8003dd8 <StreamTask+0xe4c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f006 f926 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 8003d20:	20c8      	movs	r0, #200	; 0xc8
 8003d22:	f7fd fe61 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <StreamTask+0xe44>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003d2c:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <StreamTask+0xe3c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f04f 31ff 	mov.w	r1, #4294967295
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 ff7b 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <StreamTask+0xe44>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003d40:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <StreamTask+0xe4c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f006 f84d 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003d4a:	f7fd fe3f 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <StreamTask+0xe2c>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003d54:	e19d      	b.n	8004092 <StreamTask+0x1106>
	  case Go_Mile_7:
	  	  	              vTaskSuspend(GyroReceiveHandle);
 8003d56:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <StreamTask+0xe30>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f006 f842 	bl	8009de4 <vTaskSuspend>
		                  critical_pulses=0;
 8003d60:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <StreamTask+0xe34>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
	  	  	              vTaskSuspend(PIDCameraHandle);
 8003d66:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <StreamTask+0xe54>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f006 f83a 	bl	8009de4 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003d70:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <StreamTask+0xe58>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8003d76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d7a:	f7fd fe35 	bl	80019e8 <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  critical_distance.front=350;
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <StreamTask+0xe60>)
 8003d80:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <StreamTask+0xe64>)
 8003d82:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <StreamTask+0xe28>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f006 f8ef 	bl	8009f6c <vTaskResume>
		  	  	  	      distance_flag=0;
 8003d8e:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <StreamTask+0xe5c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
	  	                  stepping();
 8003d94:	f7fe fd42 	bl	800281c <stepping>
		  	  	  	      Car_Stop();
 8003d98:	f7fd fe18 	bl	80019cc <Car_Stop>
		  	  	  	      vTaskSuspend(DistanceCheckHandle);
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <StreamTask+0xe28>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f006 f81f 	bl	8009de4 <vTaskSuspend>
	  		              vTaskSuspend(GyroReceiveHandle);
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <StreamTask+0xe30>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f006 f81a 	bl	8009de4 <vTaskSuspend>
	  		              break;
 8003db0:	e16f      	b.n	8004092 <StreamTask+0x1106>
 8003db2:	bf00      	nop
 8003db4:	200041a0 	.word	0x200041a0
 8003db8:	20000330 	.word	0x20000330
 8003dbc:	200043e4 	.word	0x200043e4
 8003dc0:	20000338 	.word	0x20000338
 8003dc4:	200040b8 	.word	0x200040b8
 8003dc8:	20004280 	.word	0x20004280
 8003dcc:	20000334 	.word	0x20000334
 8003dd0:	20000008 	.word	0x20000008
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	200041a4 	.word	0x200041a4
 8003ddc:	2000419c 	.word	0x2000419c
 8003de0:	20004194 	.word	0x20004194
 8003de4:	2000032c 	.word	0x2000032c
 8003de8:	20000328 	.word	0x20000328
 8003dec:	20000310 	.word	0x20000310
 8003df0:	43af0000 	.word	0x43af0000
	  case Go_Mile_8_Until_Apriltag:
						  vTaskSuspend(DistanceCheckHandle);
 8003df4:	4ba8      	ldr	r3, [pc, #672]	; (8004098 <StreamTask+0x110c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f005 fff3 	bl	8009de4 <vTaskSuspend>
						  gyro_reset_flag=0;
 8003dfe:	4ba7      	ldr	r3, [pc, #668]	; (800409c <StreamTask+0x1110>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
						  camera_recieve_IT_flag=1;
 8003e04:	4ba6      	ldr	r3, [pc, #664]	; (80040a0 <StreamTask+0x1114>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
						  HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	49a5      	ldr	r1, [pc, #660]	; (80040a4 <StreamTask+0x1118>)
 8003e0e:	48a6      	ldr	r0, [pc, #664]	; (80040a8 <StreamTask+0x111c>)
 8003e10:	f004 f8cf 	bl	8007fb2 <HAL_UART_Receive_IT>
						  vTaskResume(GyroReceiveHandle);
 8003e14:	4ba5      	ldr	r3, [pc, #660]	; (80040ac <StreamTask+0x1120>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f006 f8a7 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003e1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e22:	f7fd fde1 	bl	80019e8 <delay>
						  PID_Straight_Reset_Flag=1;
 8003e26:	4ba2      	ldr	r3, [pc, #648]	; (80040b0 <StreamTask+0x1124>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
						  go_straight_speed=PWM_Mid-200;
 8003e2c:	4ba1      	ldr	r3, [pc, #644]	; (80040b4 <StreamTask+0x1128>)
 8003e2e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003e32:	601a      	str	r2, [r3, #0]
						  vTaskResume(GoStraightHandle);
 8003e34:	4ba0      	ldr	r3, [pc, #640]	; (80040b8 <StreamTask+0x112c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f006 f897 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003e3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e42:	f7fd fdd1 	bl	80019e8 <delay>
						  PID_Straight_Reset_Flag=0;
 8003e46:	4b9a      	ldr	r3, [pc, #616]	; (80040b0 <StreamTask+0x1124>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
						  osSemaphoreWait(ApriltagSemHandle, 0);
 8003e4c:	4b9b      	ldr	r3, [pc, #620]	; (80040bc <StreamTask+0x1130>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f004 feec 	bl	8008c30 <osSemaphoreWait>
						  osSemaphoreWait(ApriltagSemHandle, osWaitForever);
 8003e58:	4b98      	ldr	r3, [pc, #608]	; (80040bc <StreamTask+0x1130>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e60:	4618      	mov	r0, r3
 8003e62:	f004 fee5 	bl	8008c30 <osSemaphoreWait>
						  PID_Straight_Reset_Flag=1;
 8003e66:	4b92      	ldr	r3, [pc, #584]	; (80040b0 <StreamTask+0x1124>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
						  vTaskSuspend(GoStraightHandle);
 8003e6c:	4b92      	ldr	r3, [pc, #584]	; (80040b8 <StreamTask+0x112c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f005 ffb7 	bl	8009de4 <vTaskSuspend>
						  PWM_SET_LEFT(PWM_Mid-100);
 8003e76:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003e7a:	f7fe faed 	bl	8002458 <PWM_SET_LEFT>
						  PWM_SET_RIGHT(PWM_Mid-100);
 8003e7e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003e82:	f7fe fb21 	bl	80024c8 <PWM_SET_RIGHT>
						  delay(1200);
 8003e86:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8003e8a:	f7fd fdad 	bl	80019e8 <delay>
						  Car_Stop();
 8003e8e:	f7fd fd9d 	bl	80019cc <Car_Stop>
						  gyro_reset_flag=1;
 8003e92:	4b82      	ldr	r3, [pc, #520]	; (800409c <StreamTask+0x1110>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
						  //vTaskSuspend(MileageHandle);
						  break;
 8003e98:	e0fb      	b.n	8004092 <StreamTask+0x1106>
	  case Go_Mile_9:
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003e9a:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <StreamTask+0x1114>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
						  vTaskSuspend(DistanceCheckHandle);
 8003ea0:	4b7d      	ldr	r3, [pc, #500]	; (8004098 <StreamTask+0x110c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f005 ff9d 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003eaa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003eae:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003eb0:	4b7a      	ldr	r3, [pc, #488]	; (800409c <StreamTask+0x1110>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003eb6:	4b7d      	ldr	r3, [pc, #500]	; (80040ac <StreamTask+0x1120>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f006 f856 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 8003ec0:	4b7f      	ldr	r3, [pc, #508]	; (80040c0 <StreamTask+0x1134>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003ec6:	4b7f      	ldr	r3, [pc, #508]	; (80040c4 <StreamTask+0x1138>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f006 f84e 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003ed0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ed4:	f7fd fd88 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003ed8:	4b7b      	ldr	r3, [pc, #492]	; (80040c8 <StreamTask+0x113c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f004 fea5 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003ee6:	4b79      	ldr	r3, [pc, #484]	; (80040cc <StreamTask+0x1140>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4413      	add	r3, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4b73      	ldr	r3, [pc, #460]	; (80040c0 <StreamTask+0x1134>)
 8003ef4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003ef6:	4b6e      	ldr	r3, [pc, #440]	; (80040b0 <StreamTask+0x1124>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003efc:	4b6d      	ldr	r3, [pc, #436]	; (80040b4 <StreamTask+0x1128>)
 8003efe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f02:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003f04:	4b6c      	ldr	r3, [pc, #432]	; (80040b8 <StreamTask+0x112c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f006 f82f 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 8003f0e:	20c8      	movs	r0, #200	; 0xc8
 8003f10:	f7fd fd6a 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003f14:	4b66      	ldr	r3, [pc, #408]	; (80040b0 <StreamTask+0x1124>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003f1a:	4b6b      	ldr	r3, [pc, #428]	; (80040c8 <StreamTask+0x113c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 fe84 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003f28:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <StreamTask+0x1124>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003f2e:	4b62      	ldr	r3, [pc, #392]	; (80040b8 <StreamTask+0x112c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f005 ff56 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003f38:	f7fd fd48 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003f3c:	4b57      	ldr	r3, [pc, #348]	; (800409c <StreamTask+0x1110>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003f42:	e0a6      	b.n	8004092 <StreamTask+0x1106>
	  case Go_Mile_10:
						 vTaskSuspend(DistanceCheckHandle);
 8003f44:	4b54      	ldr	r3, [pc, #336]	; (8004098 <StreamTask+0x110c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f005 ff4b 	bl	8009de4 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003f4e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003f52:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003f54:	4b51      	ldr	r3, [pc, #324]	; (800409c <StreamTask+0x1110>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003f5a:	4b54      	ldr	r3, [pc, #336]	; (80040ac <StreamTask+0x1120>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f006 f804 	bl	8009f6c <vTaskResume>
						  critical_pulses=0;
 8003f64:	4b56      	ldr	r3, [pc, #344]	; (80040c0 <StreamTask+0x1134>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003f6a:	4b56      	ldr	r3, [pc, #344]	; (80040c4 <StreamTask+0x1138>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f005 fffc 	bl	8009f6c <vTaskResume>
						  delay(500);
 8003f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f78:	f7fd fd36 	bl	80019e8 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003f7c:	4b52      	ldr	r3, [pc, #328]	; (80040c8 <StreamTask+0x113c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
 8003f84:	4618      	mov	r0, r3
 8003f86:	f004 fe53 	bl	8008c30 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003f8a:	4b50      	ldr	r3, [pc, #320]	; (80040cc <StreamTask+0x1140>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4413      	add	r3, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b4a      	ldr	r3, [pc, #296]	; (80040c0 <StreamTask+0x1134>)
 8003f98:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003f9a:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <StreamTask+0x1124>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003fa0:	4b44      	ldr	r3, [pc, #272]	; (80040b4 <StreamTask+0x1128>)
 8003fa2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003fa6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003fa8:	4b43      	ldr	r3, [pc, #268]	; (80040b8 <StreamTask+0x112c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f005 ffdd 	bl	8009f6c <vTaskResume>
		  	  	  	  	  delay(200);
 8003fb2:	20c8      	movs	r0, #200	; 0xc8
 8003fb4:	f7fd fd18 	bl	80019e8 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003fb8:	4b3d      	ldr	r3, [pc, #244]	; (80040b0 <StreamTask+0x1124>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003fbe:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <StreamTask+0x113c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f004 fe32 	bl	8008c30 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003fcc:	4b38      	ldr	r3, [pc, #224]	; (80040b0 <StreamTask+0x1124>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <StreamTask+0x112c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f005 ff04 	bl	8009de4 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003fdc:	f7fd fcf6 	bl	80019cc <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	; (800409c <StreamTask+0x1110>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003fe6:	e054      	b.n	8004092 <StreamTask+0x1106>
	  case Apriltag_Check:
		  	  	  	  	  Car_Stop();
 8003fe8:	f7fd fcf0 	bl	80019cc <Car_Stop>
		  	  	  	  	  break;
 8003fec:	e051      	b.n	8004092 <StreamTask+0x1106>
	  case Apriltag_Adjust1:
						  vTaskSuspend(DistanceCheckHandle);
 8003fee:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <StreamTask+0x110c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f005 fef6 	bl	8009de4 <vTaskSuspend>
						  vTaskSuspend(GoStraightHandle);
 8003ff8:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <StreamTask+0x112c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f005 fef1 	bl	8009de4 <vTaskSuspend>
						  //vTaskSuspend(MileageHandle);
						  gyro_reset_flag=1;
 8004002:	4b26      	ldr	r3, [pc, #152]	; (800409c <StreamTask+0x1110>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
						  Car_Stop();
 8004008:	f7fd fce0 	bl	80019cc <Car_Stop>
						  delay(50);
 800400c:	2032      	movs	r0, #50	; 0x32
 800400e:	f7fd fceb 	bl	80019e8 <delay>
						  distance_flag=0;
 8004012:	4b2f      	ldr	r3, [pc, #188]	; (80040d0 <StreamTask+0x1144>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
						  delay(500);
 8004018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800401c:	f7fd fce4 	bl	80019e8 <delay>
						  PID_Apriltag(5);
 8004020:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8004024:	f7fe faae 	bl	8002584 <PID_Apriltag>
						  Car_Stop();
 8004028:	f7fd fcd0 	bl	80019cc <Car_Stop>
						  break;
 800402c:	e031      	b.n	8004092 <StreamTask+0x1106>
	  case Feeding:
		  	  	  	  	  Car_Stop();
 800402e:	f7fd fccd 	bl	80019cc <Car_Stop>
		  	  	  	  	  feeding();
 8004032:	f7fe fd91 	bl	8002b58 <feeding>
		  	  	  	  	  break;
 8004036:	e02c      	b.n	8004092 <StreamTask+0x1106>
	  case Communication:
		  	  	  	  	  vTaskResume(WirelessHandle);
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <StreamTask+0x1148>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f005 ff95 	bl	8009f6c <vTaskResume>
		  	  	  	  	  break;
 8004042:	e026      	b.n	8004092 <StreamTask+0x1106>
	  case Mile_Adjust:
		  	  	  	  	  vTaskResume(MileageHandle);
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <StreamTask+0x1138>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f005 ff8f 	bl	8009f6c <vTaskResume>
		  	  	  	  	  osSemaphoreWait(MileageNegSemHandle, 0);
 800404e:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <StreamTask+0x114c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f004 fdeb 	bl	8008c30 <osSemaphoreWait>
		  	  	  	  	  PWM_SET_LEFT(-PWM_Lowest-80);
 800405a:	4820      	ldr	r0, [pc, #128]	; (80040dc <StreamTask+0x1150>)
 800405c:	f7fe f9fc 	bl	8002458 <PWM_SET_LEFT>
		  	  	  		  PWM_SET_RIGHT(-PWM_Lowest-80);
 8004060:	481e      	ldr	r0, [pc, #120]	; (80040dc <StreamTask+0x1150>)
 8004062:	f7fe fa31 	bl	80024c8 <PWM_SET_RIGHT>
		  	  	  		  osSemaphoreWait(MileageNegSemHandle, osWaitForever);
 8004066:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <StreamTask+0x114c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f04f 31ff 	mov.w	r1, #4294967295
 800406e:	4618      	mov	r0, r3
 8004070:	f004 fdde 	bl	8008c30 <osSemaphoreWait>
		  	  	  		  Car_Stop();
 8004074:	f7fd fcaa 	bl	80019cc <Car_Stop>
		  	  	  		  vTaskSuspend(MileageHandle);
 8004078:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <StreamTask+0x1138>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f005 feb1 	bl	8009de4 <vTaskSuspend>
		  	  	  	  	  break;
 8004082:	e006      	b.n	8004092 <StreamTask+0x1106>
	  case Idle:
		  	  	  	  	  Car_Stop();
 8004084:	f7fd fca2 	bl	80019cc <Car_Stop>
		  	  	  	  	  break;
 8004088:	e003      	b.n	8004092 <StreamTask+0x1106>
	  default :
		  	  	  	  	  Car_Initial();
 800408a:	f7fd fc69 	bl	8001960 <Car_Initial>
		  	  	  	  	  break;
 800408e:	e000      	b.n	8004092 <StreamTask+0x1106>
		  continue;
 8004090:	bf00      	nop
	  delay(50);
 8004092:	f7fe bf89 	b.w	8002fa8 <StreamTask+0x1c>
 8004096:	bf00      	nop
 8004098:	200041a0 	.word	0x200041a0
 800409c:	20000330 	.word	0x20000330
 80040a0:	2000032c 	.word	0x2000032c
 80040a4:	200002f8 	.word	0x200002f8
 80040a8:	20004388 	.word	0x20004388
 80040ac:	200043e4 	.word	0x200043e4
 80040b0:	20000008 	.word	0x20000008
 80040b4:	20000000 	.word	0x20000000
 80040b8:	200041a4 	.word	0x200041a4
 80040bc:	200042b0 	.word	0x200042b0
 80040c0:	20000338 	.word	0x20000338
 80040c4:	200040b8 	.word	0x200040b8
 80040c8:	20004280 	.word	0x20004280
 80040cc:	20000334 	.word	0x20000334
 80040d0:	20000328 	.word	0x20000328
 80040d4:	200043e0 	.word	0x200043e0
 80040d8:	200042b4 	.word	0x200042b4
 80040dc:	fffffdbc 	.word	0xfffffdbc

080040e0 <PIDCameraTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PIDCameraTask */
void PIDCameraTask(void const * argument)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PIDCameraTask */
		vTaskSuspend(PIDCameraHandle);
 80040e8:	4b5e      	ldr	r3, [pc, #376]	; (8004264 <PIDCameraTask+0x184>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f005 fe79 	bl	8009de4 <vTaskSuspend>
		float PID_Error_Last=0;
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
		float PID_Output=0;                    // PWM输出占空
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
		float Error = 0, Error_Total=0;
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
		int32_t PID_Input=0;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
		camera_recieve_IT_flag=1;
 800410e:	4b56      	ldr	r3, [pc, #344]	; (8004268 <PIDCameraTask+0x188>)
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8004114:	2202      	movs	r2, #2
 8004116:	4955      	ldr	r1, [pc, #340]	; (800426c <PIDCameraTask+0x18c>)
 8004118:	4855      	ldr	r0, [pc, #340]	; (8004270 <PIDCameraTask+0x190>)
 800411a:	f003 ff4a 	bl	8007fb2 <HAL_UART_Receive_IT>
	  /* Infinite loop */
	  for(;;)
	  {
		  if(state == Idle)
 800411e:	4b55      	ldr	r3, [pc, #340]	; (8004274 <PIDCameraTask+0x194>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b27      	cmp	r3, #39	; 0x27
 8004124:	d105      	bne.n	8004132 <PIDCameraTask+0x52>
		  {
			  vTaskSuspend(PIDCameraHandle);
 8004126:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <PIDCameraTask+0x184>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f005 fe5a 	bl	8009de4 <vTaskSuspend>
			  continue;
 8004130:	e097      	b.n	8004262 <PIDCameraTask+0x182>
		  }
//		  	 if(camera_ready_flag==0)
//		  		 continue;
//		  	 camera_ready_flag=0;
		  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8004132:	4b51      	ldr	r3, [pc, #324]	; (8004278 <PIDCameraTask+0x198>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f04f 31ff 	mov.w	r1, #4294967295
 800413a:	4618      	mov	r0, r3
 800413c:	f004 fd78 	bl	8008c30 <osSemaphoreWait>
		  	 HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 8004140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004144:	484d      	ldr	r0, [pc, #308]	; (800427c <PIDCameraTask+0x19c>)
 8004146:	f001 fb4e 	bl	80057e6 <HAL_GPIO_TogglePin>
		  	 //delay(10);
		  	 //Data=0x03E8;
		  	 //PID_Input=-300;
		  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 800414a:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <PIDCameraTask+0x1a0>)
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004154:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004158:	60fb      	str	r3, [r7, #12]
		  	 if (PID_Input == -1000)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004160:	d07e      	beq.n	8004260 <PIDCameraTask+0x180>
		  		 continue;
		  	 Error = PID_Target - PID_Input;		  // 偏差 = 目标 - 实际
 8004162:	4b48      	ldr	r3, [pc, #288]	; (8004284 <PIDCameraTask+0x1a4>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004176:	edc7 7a04 	vstr	s15, [r7, #16]
		  	 PID_Output = Kp * Error  +
 800417a:	4b43      	ldr	r3, [pc, #268]	; (8004288 <PIDCameraTask+0x1a8>)
 800417c:	ed93 7a00 	vldr	s14, [r3]
 8004180:	edd7 7a04 	vldr	s15, [r7, #16]
 8004184:	ee27 7a27 	vmul.f32	s14, s14, s15
		  				  Kd * (Error - PID_Error_Last ) +
 8004188:	edd7 6a04 	vldr	s13, [r7, #16]
 800418c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004190:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004194:	4b3d      	ldr	r3, [pc, #244]	; (800428c <PIDCameraTask+0x1ac>)
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		  	 PID_Output = Kp * Error  +
 800419e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80041a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041aa:	edc7 7a06 	vstr	s15, [r7, #24]
		  				  Error_Total;
		  	 Error_Total=Error_Total+Ki*Error;
 80041ae:	4b38      	ldr	r3, [pc, #224]	; (8004290 <PIDCameraTask+0x1b0>)
 80041b0:	ed93 7a00 	vldr	s14, [r3]
 80041b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80041b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80041c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c4:	edc7 7a05 	vstr	s15, [r7, #20]
		  	 PID_Error_Last = Error;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	61fb      	str	r3, [r7, #28]
		  	 if(PID_Output < 0)
 80041cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80041d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d8:	d508      	bpl.n	80041ec <PIDCameraTask+0x10c>
		  		 PID_Output-=PWM_Lowest;
 80041da:	edd7 7a06 	vldr	s15, [r7, #24]
 80041de:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004294 <PIDCameraTask+0x1b4>
 80041e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041e6:	edc7 7a06 	vstr	s15, [r7, #24]
 80041ea:	e007      	b.n	80041fc <PIDCameraTask+0x11c>
		  	 else
		  		 PID_Output+=PWM_Lowest;
 80041ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80041f0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004294 <PIDCameraTask+0x1b4>
 80041f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041f8:	edc7 7a06 	vstr	s15, [r7, #24]
		     if(PID_Output > PWM_Higest-PWM_Mid) 			PID_Output =	2000-PWM_Mid;	    // 限幅
 80041fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004200:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004298 <PIDCameraTask+0x1b8>
 8004204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420c:	dd02      	ble.n	8004214 <PIDCameraTask+0x134>
 800420e:	4b23      	ldr	r3, [pc, #140]	; (800429c <PIDCameraTask+0x1bc>)
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e00a      	b.n	800422a <PIDCameraTask+0x14a>
		     else if(PID_Output <-(PWM_Higest-PWM_Mid)) 	PID_Output = 	-(2000-PWM_Mid);
 8004214:	edd7 7a06 	vldr	s15, [r7, #24]
 8004218:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80042a0 <PIDCameraTask+0x1c0>
 800421c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004224:	d501      	bpl.n	800422a <PIDCameraTask+0x14a>
 8004226:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <PIDCameraTask+0x1c4>)
 8004228:	61bb      	str	r3, [r7, #24]
		     taskENTER_CRITICAL();
 800422a:	f006 fe6b 	bl	800af04 <vPortEnterCritical>
		     PWM_SET_RIGHT ((PWM_Mid + (int32_t) PID_Output));
 800422e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004236:	ee17 3a90 	vmov	r3, s15
 800423a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe f942 	bl	80024c8 <PWM_SET_RIGHT>
		     PWM_SET_LEFT  ((PWM_Mid - (int32_t) PID_Output));
 8004244:	edd7 7a06 	vldr	s15, [r7, #24]
 8004248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800424c:	ee17 3a90 	vmov	r3, s15
 8004250:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe f8ff 	bl	8002458 <PWM_SET_LEFT>
		     taskEXIT_CRITICAL();
 800425a:	f006 fe83 	bl	800af64 <vPortExitCritical>
 800425e:	e75e      	b.n	800411e <PIDCameraTask+0x3e>
		  		 continue;
 8004260:	bf00      	nop
		  if(state == Idle)
 8004262:	e75c      	b.n	800411e <PIDCameraTask+0x3e>
 8004264:	20004194 	.word	0x20004194
 8004268:	2000032c 	.word	0x2000032c
 800426c:	200002f8 	.word	0x200002f8
 8004270:	20004388 	.word	0x20004388
 8004274:	200041f0 	.word	0x200041f0
 8004278:	20004198 	.word	0x20004198
 800427c:	40021400 	.word	0x40021400
 8004280:	200002fa 	.word	0x200002fa
 8004284:	20000342 	.word	0x20000342
 8004288:	20000010 	.word	0x20000010
 800428c:	20000348 	.word	0x20000348
 8004290:	20000344 	.word	0x20000344
 8004294:	43fa0000 	.word	0x43fa0000
 8004298:	44160000 	.word	0x44160000
 800429c:	44960000 	.word	0x44960000
 80042a0:	c4160000 	.word	0xc4160000
 80042a4:	c4960000 	.word	0xc4960000

080042a8 <GyroReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroReceiveTask */
void GyroReceiveTask(void const * argument)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08e      	sub	sp, #56	; 0x38
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroReceiveTask */
	vTaskSuspend(GyroReceiveHandle);
 80042b0:	4ba6      	ldr	r3, [pc, #664]	; (800454c <GyroReceiveTask+0x2a4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f005 fd95 	bl	8009de4 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  delay(100);
 80042ba:	2064      	movs	r0, #100	; 0x64
 80042bc:	f7fd fb94 	bl	80019e8 <delay>
	  uint8_t AxH=0, AxL=0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  int16_t Ax=0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	853b      	strh	r3, [r7, #40]	; 0x28

	  uint8_t AyH=0,AyL=0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  int16_t Ay=0;
 80042dc:	2300      	movs	r3, #0
 80042de:	84bb      	strh	r3, [r7, #36]	; 0x24

	  uint8_t YawH=0,YawL=0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  int16_t Yaw=0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	843b      	strh	r3, [r7, #32]

	  uint8_t sum=0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int i=0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30
	  int h=0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint8_t GyroData[21]={0};
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	f107 030c 	add.w	r3, r7, #12
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	741a      	strb	r2, [r3, #16]
	  taskENTER_CRITICAL();
 8004312:	f006 fdf7 	bl	800af04 <vPortEnterCritical>
	  HAL_UART_Receive(&huart3, (uint8_t *) &GyroData, sizeof(GyroData), 50);
 8004316:	f107 0108 	add.w	r1, r7, #8
 800431a:	2332      	movs	r3, #50	; 0x32
 800431c:	2215      	movs	r2, #21
 800431e:	488c      	ldr	r0, [pc, #560]	; (8004550 <GyroReceiveTask+0x2a8>)
 8004320:	f003 fda5 	bl	8007e6e <HAL_UART_Receive>
	  taskEXIT_CRITICAL();
 8004324:	f006 fe1e 	bl	800af64 <vPortExitCritical>
	  while(h<14)
 8004328:	e009      	b.n	800433e <GyroReceiveTask+0x96>
	  {
		  if(GyroData[h]==0x55)
 800432a:	f107 0208 	add.w	r2, r7, #8
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	4413      	add	r3, r2
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b55      	cmp	r3, #85	; 0x55
 8004336:	d006      	beq.n	8004346 <GyroReceiveTask+0x9e>
			  break;
		  h++;
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	3301      	adds	r3, #1
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while(h<14)
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	2b0d      	cmp	r3, #13
 8004342:	ddf2      	ble.n	800432a <GyroReceiveTask+0x82>
 8004344:	e000      	b.n	8004348 <GyroReceiveTask+0xa0>
			  break;
 8004346:	bf00      	nop
	  }
	  if(GyroData[h]!=0x55)
 8004348:	f107 0208 	add.w	r2, r7, #8
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	4413      	add	r3, r2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b55      	cmp	r3, #85	; 0x55
 8004354:	f040 80f3 	bne.w	800453e <GyroReceiveTask+0x296>
		  continue;
	  if(GyroData[h+1]!=0x53)
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	3301      	adds	r3, #1
 800435c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004360:	4413      	add	r3, r2
 8004362:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004366:	2b53      	cmp	r3, #83	; 0x53
 8004368:	f040 80eb 	bne.w	8004542 <GyroReceiveTask+0x29a>
		  continue;
	  i=0;
 800436c:	2300      	movs	r3, #0
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
	  sum=0;
 8004370:	2300      	movs	r3, #0
 8004372:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  while(i<10)
 8004376:	e00f      	b.n	8004398 <GyroReceiveTask+0xf0>
	  {
		  sum=sum+GyroData[h+i];
 8004378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	4413      	add	r3, r2
 800437e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004382:	4413      	add	r3, r2
 8004384:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8004388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800438c:	4413      	add	r3, r2
 800438e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  i++;
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	3301      	adds	r3, #1
 8004396:	633b      	str	r3, [r7, #48]	; 0x30
	  while(i<10)
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	2b09      	cmp	r3, #9
 800439c:	ddec      	ble.n	8004378 <GyroReceiveTask+0xd0>
	  }
	  	  if (sum!=GyroData[h+10])
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	330a      	adds	r3, #10
 80043a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043a6:	4413      	add	r3, r2
 80043a8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80043ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80043b0:	429a      	cmp	r2, r3
 80043b2:	f040 80c8 	bne.w	8004546 <GyroReceiveTask+0x29e>
	  		  continue;
	  AxL=GyroData[h+2];
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	3302      	adds	r3, #2
 80043ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043be:	4413      	add	r3, r2
 80043c0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80043c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  AxH=GyroData[h+3];
 80043c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ca:	3303      	adds	r3, #3
 80043cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043d0:	4413      	add	r3, r2
 80043d2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  AyL=GyroData[h+4];
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	3304      	adds	r3, #4
 80043de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043e2:	4413      	add	r3, r2
 80043e4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80043e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  AyH=GyroData[h+5];
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	3305      	adds	r3, #5
 80043f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043f4:	4413      	add	r3, r2
 80043f6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80043fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  YawL=GyroData[h+6];
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	3306      	adds	r3, #6
 8004402:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004406:	4413      	add	r3, r2
 8004408:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  YawH=GyroData[h+7];
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	3307      	adds	r3, #7
 8004414:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004418:	4413      	add	r3, r2
 800441a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  Ax=((((int16_t) AxH)<<8) | AxL);
 8004422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	b21a      	sxth	r2, r3
 800442a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800442e:	b21b      	sxth	r3, r3
 8004430:	4313      	orrs	r3, r2
 8004432:	853b      	strh	r3, [r7, #40]	; 0x28
	  Ay=((((int16_t) AyH)<<8) | AyL);
 8004434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	b21a      	sxth	r2, r3
 800443c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004440:	b21b      	sxth	r3, r3
 8004442:	4313      	orrs	r3, r2
 8004444:	84bb      	strh	r3, [r7, #36]	; 0x24
	  Yaw=((((int16_t) YawH)<<8) | YawL);
 8004446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	b21a      	sxth	r2, r3
 800444e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004452:	b21b      	sxth	r3, r3
 8004454:	4313      	orrs	r3, r2
 8004456:	843b      	strh	r3, [r7, #32]
	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  //taskENTER_CRITICAL();
	  //HAL_UART_Transmit(&huart1, (uint8_t *) &Yaw, sizeof(Yaw), 0xFFFF);
	  //taskEXIT_CRITICAL();
	  if(gyro_reset_flag)
 8004458:	4b3e      	ldr	r3, [pc, #248]	; (8004554 <GyroReceiveTask+0x2ac>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <GyroReceiveTask+0x1c4>
	  {
		  vTaskSuspend(GyroReceiveHandle);
 8004460:	4b3a      	ldr	r3, [pc, #232]	; (800454c <GyroReceiveTask+0x2a4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f005 fcbd 	bl	8009de4 <vTaskSuspend>
		  continue;
 800446a:	e06d      	b.n	8004548 <GyroReceiveTask+0x2a0>
	  }

	  angle.x=(((float)Ax) / 32768.0 * 180.0);
 800446c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004478:	ee17 0a90 	vmov	r0, s15
 800447c:	f7fc f85c 	bl	8000538 <__aeabi_f2d>
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	4b34      	ldr	r3, [pc, #208]	; (8004558 <GyroReceiveTask+0x2b0>)
 8004486:	f7fc f9d9 	bl	800083c <__aeabi_ddiv>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	4b31      	ldr	r3, [pc, #196]	; (800455c <GyroReceiveTask+0x2b4>)
 8004498:	f7fc f8a6 	bl	80005e8 <__aeabi_dmul>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7fc fada 	bl	8000a5c <__aeabi_d2f>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <GyroReceiveTask+0x2b8>)
 80044ac:	6013      	str	r3, [r2, #0]
	  angle.y=(((float)Ay) / 32768.0 * 180.0);
 80044ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ba:	ee17 0a90 	vmov	r0, s15
 80044be:	f7fc f83b 	bl	8000538 <__aeabi_f2d>
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <GyroReceiveTask+0x2b0>)
 80044c8:	f7fc f9b8 	bl	800083c <__aeabi_ddiv>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <GyroReceiveTask+0x2b4>)
 80044da:	f7fc f885 	bl	80005e8 <__aeabi_dmul>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	f7fc fab9 	bl	8000a5c <__aeabi_d2f>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <GyroReceiveTask+0x2b8>)
 80044ee:	6053      	str	r3, [r2, #4]
	  angle.z=(((float)Yaw) / 32768.0 * 180.0);
 80044f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fc:	ee17 0a90 	vmov	r0, s15
 8004500:	f7fc f81a 	bl	8000538 <__aeabi_f2d>
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <GyroReceiveTask+0x2b0>)
 800450a:	f7fc f997 	bl	800083c <__aeabi_ddiv>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <GyroReceiveTask+0x2b4>)
 800451c:	f7fc f864 	bl	80005e8 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	f7fc fa98 	bl	8000a5c <__aeabi_d2f>
 800452c:	4603      	mov	r3, r0
 800452e:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <GyroReceiveTask+0x2b8>)
 8004530:	6093      	str	r3, [r2, #8]
	  osSemaphoreRelease(GyroReadySemHandle);
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <GyroReceiveTask+0x2bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f004 fbc8 	bl	8008ccc <osSemaphoreRelease>
 800453c:	e6bd      	b.n	80042ba <GyroReceiveTask+0x12>
		  continue;
 800453e:	bf00      	nop
 8004540:	e6bb      	b.n	80042ba <GyroReceiveTask+0x12>
		  continue;
 8004542:	bf00      	nop
 8004544:	e6b9      	b.n	80042ba <GyroReceiveTask+0x12>
	  		  continue;
 8004546:	bf00      	nop
  {
 8004548:	e6b7      	b.n	80042ba <GyroReceiveTask+0x12>
 800454a:	bf00      	nop
 800454c:	200043e4 	.word	0x200043e4
 8004550:	20004150 	.word	0x20004150
 8004554:	20000330 	.word	0x20000330
 8004558:	40e00000 	.word	0x40e00000
 800455c:	40668000 	.word	0x40668000
 8004560:	20000304 	.word	0x20000304
 8004564:	200042ac 	.word	0x200042ac

08004568 <DistanceCheckTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DistanceCheckTask */
void DistanceCheckTask(void const * argument)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DistanceCheckTask */
	vTaskSuspend(DistanceCheckHandle);
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <DistanceCheckTask+0xa0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f005 fc35 	bl	8009de4 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  Distance distance={0.0,0.0};
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
	  Distance temp=Ultrasonic_Feedback();
 8004586:	f7fd fd41 	bl	800200c <Ultrasonic_Feedback>
 800458a:	eeb0 7a40 	vmov.f32	s14, s0
 800458e:	eef0 7a60 	vmov.f32	s15, s1
 8004592:	ed87 7a03 	vstr	s14, [r7, #12]
 8004596:	edc7 7a04 	vstr	s15, [r7, #16]
	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  for(int i=0;i<1;i++)
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	e00a      	b.n	80045b6 <DistanceCheckTask+0x4e>
	  {
		  distance.front+=temp.front;
 80045a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80045a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ac:	edc7 7a05 	vstr	s15, [r7, #20]
	  for(int i=0;i<1;i++)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	ddf1      	ble.n	80045a0 <DistanceCheckTask+0x38>
	  }
	  distance.front/=1;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	617b      	str	r3, [r7, #20]
	  if(distance.front < critical_distance.front)
 80045c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <DistanceCheckTask+0xa4>)
 80045c6:	edd3 7a00 	vldr	s15, [r3]
 80045ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d2:	d50e      	bpl.n	80045f2 <DistanceCheckTask+0x8a>
	  {
		  distance_flag=1;
 80045d4:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <DistanceCheckTask+0xa8>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
		  osSemaphoreRelease(CriticalDistanceSemHandle);
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <DistanceCheckTask+0xac>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f004 fb74 	bl	8008ccc <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 80045e4:	2201      	movs	r2, #1
 80045e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045ea:	480b      	ldr	r0, [pc, #44]	; (8004618 <DistanceCheckTask+0xb0>)
 80045ec:	f001 f8e2 	bl	80057b4 <HAL_GPIO_WritePin>
 80045f0:	e7c3      	b.n	800457a <DistanceCheckTask+0x12>
	  }
	  else
	  {
		  distance_flag=0;
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <DistanceCheckTask+0xa8>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 80045f8:	2200      	movs	r2, #0
 80045fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045fe:	4806      	ldr	r0, [pc, #24]	; (8004618 <DistanceCheckTask+0xb0>)
 8004600:	f001 f8d8 	bl	80057b4 <HAL_GPIO_WritePin>
  {
 8004604:	e7b9      	b.n	800457a <DistanceCheckTask+0x12>
 8004606:	bf00      	nop
 8004608:	200041a0 	.word	0x200041a0
 800460c:	20000310 	.word	0x20000310
 8004610:	20000328 	.word	0x20000328
 8004614:	200040ac 	.word	0x200040ac
 8004618:	40021400 	.word	0x40021400

0800461c <MileageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MileageTask */
void MileageTask(void const * argument)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MileageTask */
	//uint8_t mileage_counter;
	vTaskSuspend(MileageHandle);
 8004624:	4b15      	ldr	r3, [pc, #84]	; (800467c <MileageTask+0x60>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f005 fbdb 	bl	8009de4 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  taskENTER_CRITICAL();
 800462e:	f006 fc69 	bl	800af04 <vPortEnterCritical>
	  //mileage_counter=__HAL_TIM_GET_COUNTER(&htim2);
	  //number_of_pulses=1000*(mileage_IT_number-1)+mileage_counter;
	  number_of_pulses=5000*mileage_IT_number+__HAL_TIM_GET_COUNTER(&htim2);
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <MileageTask+0x64>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f241 3288 	movw	r2, #5000	; 0x1388
 800463a:	fb02 f303 	mul.w	r3, r2, r3
 800463e:	461a      	mov	r2, r3
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <MileageTask+0x68>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	4413      	add	r3, r2
 8004648:	461a      	mov	r2, r3
 800464a:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <MileageTask+0x6c>)
 800464c:	601a      	str	r2, [r3, #0]
	  taskEXIT_CRITICAL();
 800464e:	f006 fc89 	bl	800af64 <vPortExitCritical>
	  //HAL_UART_Transmit(&huart1, &number_of_pulses, sizeof(number_of_pulses), 1000);
	  if (number_of_pulses>critical_pulses)
 8004652:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <MileageTask+0x6c>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <MileageTask+0x70>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	dd05      	ble.n	800466a <MileageTask+0x4e>
		  osSemaphoreRelease(MileageSemHandle);
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <MileageTask+0x74>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f004 fb32 	bl	8008ccc <osSemaphoreRelease>
 8004668:	e004      	b.n	8004674 <MileageTask+0x58>
	  else
		  osSemaphoreRelease(MileageNegSemHandle);
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <MileageTask+0x78>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f004 fb2c 	bl	8008ccc <osSemaphoreRelease>
	  delay(50);
 8004674:	2032      	movs	r0, #50	; 0x32
 8004676:	f7fd f9b7 	bl	80019e8 <delay>
	  taskENTER_CRITICAL();
 800467a:	e7d8      	b.n	800462e <MileageTask+0x12>
 800467c:	200040b8 	.word	0x200040b8
 8004680:	20000004 	.word	0x20000004
 8004684:	20004340 	.word	0x20004340
 8004688:	20000334 	.word	0x20000334
 800468c:	20000338 	.word	0x20000338
 8004690:	20004280 	.word	0x20004280
 8004694:	200042b4 	.word	0x200042b4

08004698 <GoStraightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GoStraightTask */
void GoStraightTask(void const * argument)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GoStraightTask */
	vTaskSuspend(GoStraightHandle);
 80046a0:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <GoStraightTask+0x3c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f005 fb9d 	bl	8009de4 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	if (PID_Straight_Reset_Flag)
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <GoStraightTask+0x40>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <GoStraightTask+0x36>
		continue;
	PID_Straight((float)go_straight_speed);
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <GoStraightTask+0x44>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046be:	eeb0 0a67 	vmov.f32	s0, s15
 80046c2:	f7fd fb9d 	bl	8001e00 <PID_Straight>
    delay(100);
 80046c6:	2064      	movs	r0, #100	; 0x64
 80046c8:	f7fd f98e 	bl	80019e8 <delay>
 80046cc:	e7ed      	b.n	80046aa <GoStraightTask+0x12>
		continue;
 80046ce:	bf00      	nop
	if (PID_Straight_Reset_Flag)
 80046d0:	e7eb      	b.n	80046aa <GoStraightTask+0x12>
 80046d2:	bf00      	nop
 80046d4:	200041a4 	.word	0x200041a4
 80046d8:	20000008 	.word	0x20000008
 80046dc:	20000000 	.word	0x20000000

080046e0 <ColorcheckTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ColorcheckTask */
void ColorcheckTask(void const * argument)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ColorcheckTask */
	vTaskSuspend(ColorcheckHandle);
 80046e8:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <ColorcheckTask+0x88>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f005 fb79 	bl	8009de4 <vTaskSuspend>
	uint16_t temp=0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */

	HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 80046f6:	2202      	movs	r2, #2
 80046f8:	491c      	ldr	r1, [pc, #112]	; (800476c <ColorcheckTask+0x8c>)
 80046fa:	481d      	ldr	r0, [pc, #116]	; (8004770 <ColorcheckTask+0x90>)
 80046fc:	f003 fc59 	bl	8007fb2 <HAL_UART_Receive_IT>
	for(;;)
	{
		temp=0;
 8004700:	2300      	movs	r3, #0
 8004702:	81fb      	strh	r3, [r7, #14]
	  osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <ColorcheckTask+0x94>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f04f 31ff 	mov.w	r1, #4294967295
 800470c:	4618      	mov	r0, r3
 800470e:	f004 fa8f 	bl	8008c30 <osSemaphoreWait>
	  //camera_recieve_IT_flag=0;

	  temp = Camera_Data;
 8004712:	4b19      	ldr	r3, [pc, #100]	; (8004778 <ColorcheckTask+0x98>)
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	81fb      	strh	r3, [r7, #14]
	  temp = temp&(0x1800);
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800471e:	81fb      	strh	r3, [r7, #14]
	  temp = (temp>>11);
 8004720:	89fb      	ldrh	r3, [r7, #14]
 8004722:	0adb      	lsrs	r3, r3, #11
 8004724:	81fb      	strh	r3, [r7, #14]
	  switch(temp)
 8004726:	89fb      	ldrh	r3, [r7, #14]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d014      	beq.n	8004756 <ColorcheckTask+0x76>
 800472c:	2b03      	cmp	r3, #3
 800472e:	dc19      	bgt.n	8004764 <ColorcheckTask+0x84>
 8004730:	2b01      	cmp	r3, #1
 8004732:	d002      	beq.n	800473a <ColorcheckTask+0x5a>
 8004734:	2b02      	cmp	r3, #2
 8004736:	d007      	beq.n	8004748 <ColorcheckTask+0x68>
		  break;
	  case 3:
		  yellow++;
		  break;
	  default:
		  break;
 8004738:	e014      	b.n	8004764 <ColorcheckTask+0x84>
		  blue++;
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <ColorcheckTask+0x9c>)
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	4b0e      	ldr	r3, [pc, #56]	; (800477c <ColorcheckTask+0x9c>)
 8004744:	801a      	strh	r2, [r3, #0]
		  break;
 8004746:	e00e      	b.n	8004766 <ColorcheckTask+0x86>
		  pink++;
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <ColorcheckTask+0xa0>)
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <ColorcheckTask+0xa0>)
 8004752:	801a      	strh	r2, [r3, #0]
		  break;
 8004754:	e007      	b.n	8004766 <ColorcheckTask+0x86>
		  yellow++;
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <ColorcheckTask+0xa4>)
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <ColorcheckTask+0xa4>)
 8004760:	801a      	strh	r2, [r3, #0]
		  break;
 8004762:	e000      	b.n	8004766 <ColorcheckTask+0x86>
		  break;
 8004764:	bf00      	nop
		temp=0;
 8004766:	e7cb      	b.n	8004700 <ColorcheckTask+0x20>
 8004768:	200042a4 	.word	0x200042a4
 800476c:	200002f8 	.word	0x200002f8
 8004770:	20004388 	.word	0x20004388
 8004774:	20004198 	.word	0x20004198
 8004778:	200002fa 	.word	0x200002fa
 800477c:	2000033c 	.word	0x2000033c
 8004780:	2000033e 	.word	0x2000033e
 8004784:	20000340 	.word	0x20000340

08004788 <WirelessTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_WirelessTask */
void WirelessTask(void const * argument)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WirelessTask */
	uint8_t Wireless_Rx[1];
	uint8_t test_data=0x53;
 8004790:	2353      	movs	r3, #83	; 0x53
 8004792:	73fb      	strb	r3, [r7, #15]
	vTaskSuspend(WirelessHandle);
 8004794:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <WirelessTask+0x30>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f005 fb23 	bl	8009de4 <vTaskSuspend>
  /* Infinite loop */
	for(;;){
			//HAL_UART_Transmit(&huart6,&test_data,1,0xFFFF);//retransmission part
			sendall(); //first transmission
 800479e:	f7fe fa01 	bl	8002ba4 <sendall>
//			}
//			else
//			{
//				sendall();
//			}
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 80047a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047a6:	4805      	ldr	r0, [pc, #20]	; (80047bc <WirelessTask+0x34>)
 80047a8:	f001 f81d 	bl	80057e6 <HAL_GPIO_TogglePin>
			delay(1000);
 80047ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047b0:	f7fd f91a 	bl	80019e8 <delay>
			sendall(); //first transmission
 80047b4:	e7f3      	b.n	800479e <WirelessTask+0x16>
 80047b6:	bf00      	nop
 80047b8:	200043e0 	.word	0x200043e0
 80047bc:	40021400 	.word	0x40021400

080047c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a10      	ldr	r2, [pc, #64]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d102      	bne.n	80047d8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80047d2:	f000 fcbf 	bl	8005154 <HAL_IncTick>
	   	else
  		mileage_IT_number++;
  		//HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
  	}
  /* USER CODE END Callback 1 */
}
 80047d6:	e016      	b.n	8004806 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if(htim->Instance==TIM2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e0:	d111      	bne.n	8004806 <HAL_TIM_PeriodElapsedCallback+0x46>
		if(__HAL_TIM_GET_COUNTER(&htim2)>3000)
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d905      	bls.n	80047fc <HAL_TIM_PeriodElapsedCallback+0x3c>
	    	mileage_IT_number--;
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80047f8:	6013      	str	r3, [r2, #0]
}
 80047fa:	e004      	b.n	8004806 <HAL_TIM_PeriodElapsedCallback+0x46>
  		mileage_IT_number++;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3301      	adds	r3, #1
 8004802:	4a05      	ldr	r2, [pc, #20]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004804:	6013      	str	r3, [r2, #0]
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000
 8004814:	20004340 	.word	0x20004340
 8004818:	20000004 	.word	0x20000004

0800481c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004820:	b672      	cpsid	i
}
 8004822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004824:	e7fe      	b.n	8004824 <Error_Handler+0x8>
	...

08004828 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <HAL_MspInit+0x54>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	4a11      	ldr	r2, [pc, #68]	; (800487c <HAL_MspInit+0x54>)
 8004838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800483c:	6453      	str	r3, [r2, #68]	; 0x44
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <HAL_MspInit+0x54>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_MspInit+0x54>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <HAL_MspInit+0x54>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	6413      	str	r3, [r2, #64]	; 0x40
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <HAL_MspInit+0x54>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004866:	2200      	movs	r2, #0
 8004868:	210f      	movs	r1, #15
 800486a:	f06f 0001 	mvn.w	r0, #1
 800486e:	f000 fd49 	bl	8005304 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800

08004880 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a05      	ldr	r2, [pc, #20]	; (80048a4 <HAL_RTC_MspInit+0x24>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d102      	bne.n	8004898 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RTC_MspInit+0x28>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40002800 	.word	0x40002800
 80048a8:	42470e3c 	.word	0x42470e3c

080048ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08c      	sub	sp, #48	; 0x30
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b4:	f107 031c 	add.w	r3, r7, #28
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d134      	bne.n	8004938 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a33      	ldr	r2, [pc, #204]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	4a2c      	ldr	r2, [pc, #176]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6313      	str	r3, [r2, #48]	; 0x30
 80048fa:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8004906:	2322      	movs	r3, #34	; 0x22
 8004908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490a:	2302      	movs	r3, #2
 800490c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004912:	2300      	movs	r3, #0
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004916:	2301      	movs	r3, #1
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491a:	f107 031c 	add.w	r3, r7, #28
 800491e:	4619      	mov	r1, r3
 8004920:	4821      	ldr	r0, [pc, #132]	; (80049a8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004922:	f000 fdab 	bl	800547c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004926:	2200      	movs	r2, #0
 8004928:	2105      	movs	r1, #5
 800492a:	201c      	movs	r0, #28
 800492c:	f000 fcea 	bl	8005304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004930:	201c      	movs	r0, #28
 8004932:	f000 fd03 	bl	800533c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004936:	e030      	b.n	800499a <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM8)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <HAL_TIM_Encoder_MspInit+0x100>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d12b      	bne.n	800499a <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 800494c:	f043 0302 	orr.w	r3, r3, #2
 8004950:	6453      	str	r3, [r2, #68]	; 0x44
 8004952:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	6313      	str	r3, [r2, #48]	; 0x30
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800497a:	23c0      	movs	r3, #192	; 0xc0
 800497c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497e:	2302      	movs	r3, #2
 8004980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004986:	2300      	movs	r3, #0
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800498a:	2303      	movs	r3, #3
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800498e:	f107 031c 	add.w	r3, r7, #28
 8004992:	4619      	mov	r1, r3
 8004994:	4806      	ldr	r0, [pc, #24]	; (80049b0 <HAL_TIM_Encoder_MspInit+0x104>)
 8004996:	f000 fd71 	bl	800547c <HAL_GPIO_Init>
}
 800499a:	bf00      	nop
 800499c:	3730      	adds	r7, #48	; 0x30
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40020000 	.word	0x40020000
 80049ac:	40010400 	.word	0x40010400
 80049b0:	40020800 	.word	0x40020800

080049b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <HAL_TIM_Base_MspInit+0x64>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_TIM_Base_MspInit+0x68>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <HAL_TIM_Base_MspInit+0x68>)
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	6413      	str	r3, [r2, #64]	; 0x40
 80049d6:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <HAL_TIM_Base_MspInit+0x68>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80049e2:	e012      	b.n	8004a0a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0d      	ldr	r2, [pc, #52]	; (8004a20 <HAL_TIM_Base_MspInit+0x6c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d10d      	bne.n	8004a0a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_TIM_Base_MspInit+0x68>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <HAL_TIM_Base_MspInit+0x68>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <HAL_TIM_Base_MspInit+0x68>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40000800 	.word	0x40000800

08004a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2c:	f107 0314 	add.w	r3, r7, #20
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <HAL_TIM_MspPostInit+0xb0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d11e      	bne.n	8004a84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <HAL_TIM_MspPostInit+0xb4>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	4a22      	ldr	r2, [pc, #136]	; (8004ad8 <HAL_TIM_MspPostInit+0xb4>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6313      	str	r3, [r2, #48]	; 0x30
 8004a56:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_TIM_MspPostInit+0xb4>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = leftPWM_Pin;
 8004a62:	2340      	movs	r3, #64	; 0x40
 8004a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a66:	2302      	movs	r3, #2
 8004a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a72:	2302      	movs	r3, #2
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftPWM_GPIO_Port, &GPIO_InitStruct);
 8004a76:	f107 0314 	add.w	r3, r7, #20
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4817      	ldr	r0, [pc, #92]	; (8004adc <HAL_TIM_MspPostInit+0xb8>)
 8004a7e:	f000 fcfd 	bl	800547c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004a82:	e023      	b.n	8004acc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a15      	ldr	r2, [pc, #84]	; (8004ae0 <HAL_TIM_MspPostInit+0xbc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d11e      	bne.n	8004acc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <HAL_TIM_MspPostInit+0xb4>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	4a10      	ldr	r2, [pc, #64]	; (8004ad8 <HAL_TIM_MspPostInit+0xb4>)
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <HAL_TIM_MspPostInit+0xb4>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightPWM_Pin;
 8004aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004abc:	2302      	movs	r3, #2
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightPWM_GPIO_Port, &GPIO_InitStruct);
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4807      	ldr	r0, [pc, #28]	; (8004ae4 <HAL_TIM_MspPostInit+0xc0>)
 8004ac8:	f000 fcd8 	bl	800547c <HAL_GPIO_Init>
}
 8004acc:	bf00      	nop
 8004ace:	3728      	adds	r7, #40	; 0x28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	40000800 	.word	0x40000800
 8004ae4:	40020c00 	.word	0x40020c00

08004ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b094      	sub	sp, #80	; 0x50
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a98      	ldr	r2, [pc, #608]	; (8004d68 <HAL_UART_MspInit+0x280>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d135      	bne.n	8004b76 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b0e:	4b97      	ldr	r3, [pc, #604]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	4a96      	ldr	r2, [pc, #600]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b18:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1a:	4b94      	ldr	r3, [pc, #592]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2a:	4b90      	ldr	r3, [pc, #576]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	4a8f      	ldr	r2, [pc, #572]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	6313      	str	r3, [r2, #48]	; 0x30
 8004b36:	4b8d      	ldr	r3, [pc, #564]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b50:	2303      	movs	r3, #3
 8004b52:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004b54:	2308      	movs	r3, #8
 8004b56:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4884      	ldr	r0, [pc, #528]	; (8004d70 <HAL_UART_MspInit+0x288>)
 8004b60:	f000 fc8c 	bl	800547c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8004b64:	2200      	movs	r2, #0
 8004b66:	2105      	movs	r1, #5
 8004b68:	2034      	movs	r0, #52	; 0x34
 8004b6a:	f000 fbcb 	bl	8005304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004b6e:	2034      	movs	r0, #52	; 0x34
 8004b70:	f000 fbe4 	bl	800533c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004b74:	e13e      	b.n	8004df4 <HAL_UART_MspInit+0x30c>
  else if(huart->Instance==UART5)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a7e      	ldr	r2, [pc, #504]	; (8004d74 <HAL_UART_MspInit+0x28c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d14b      	bne.n	8004c18 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004b80:	2300      	movs	r3, #0
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30
 8004b84:	4b79      	ldr	r3, [pc, #484]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	4a78      	ldr	r2, [pc, #480]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b90:	4b76      	ldr	r3, [pc, #472]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b98:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba0:	4b72      	ldr	r3, [pc, #456]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	4a71      	ldr	r2, [pc, #452]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004ba6:	f043 0304 	orr.w	r3, r3, #4
 8004baa:	6313      	str	r3, [r2, #48]	; 0x30
 8004bac:	4b6f      	ldr	r3, [pc, #444]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bb8:	2300      	movs	r3, #0
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bbc:	4b6b      	ldr	r3, [pc, #428]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	4a6a      	ldr	r2, [pc, #424]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004bc2:	f043 0308 	orr.w	r3, r3, #8
 8004bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc8:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bde:	2301      	movs	r3, #1
 8004be0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be2:	2303      	movs	r3, #3
 8004be4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004be6:	2308      	movs	r3, #8
 8004be8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bee:	4619      	mov	r1, r3
 8004bf0:	485f      	ldr	r0, [pc, #380]	; (8004d70 <HAL_UART_MspInit+0x288>)
 8004bf2:	f000 fc43 	bl	800547c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c02:	2303      	movs	r3, #3
 8004c04:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004c06:	2308      	movs	r3, #8
 8004c08:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4859      	ldr	r0, [pc, #356]	; (8004d78 <HAL_UART_MspInit+0x290>)
 8004c12:	f000 fc33 	bl	800547c <HAL_GPIO_Init>
}
 8004c16:	e0ed      	b.n	8004df4 <HAL_UART_MspInit+0x30c>
  else if(huart->Instance==USART1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a57      	ldr	r2, [pc, #348]	; (8004d7c <HAL_UART_MspInit+0x294>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d135      	bne.n	8004c8e <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
 8004c26:	4b51      	ldr	r3, [pc, #324]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	4a50      	ldr	r2, [pc, #320]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004c2c:	f043 0310 	orr.w	r3, r3, #16
 8004c30:	6453      	str	r3, [r2, #68]	; 0x44
 8004c32:	4b4e      	ldr	r3, [pc, #312]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	4b4a      	ldr	r3, [pc, #296]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a49      	ldr	r2, [pc, #292]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c60:	2302      	movs	r3, #2
 8004c62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c6c:	2307      	movs	r3, #7
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c74:	4619      	mov	r1, r3
 8004c76:	4842      	ldr	r0, [pc, #264]	; (8004d80 <HAL_UART_MspInit+0x298>)
 8004c78:	f000 fc00 	bl	800547c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2105      	movs	r1, #5
 8004c80:	2025      	movs	r0, #37	; 0x25
 8004c82:	f000 fb3f 	bl	8005304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c86:	2025      	movs	r0, #37	; 0x25
 8004c88:	f000 fb58 	bl	800533c <HAL_NVIC_EnableIRQ>
}
 8004c8c:	e0b2      	b.n	8004df4 <HAL_UART_MspInit+0x30c>
  else if(huart->Instance==USART2)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a3c      	ldr	r2, [pc, #240]	; (8004d84 <HAL_UART_MspInit+0x29c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d134      	bne.n	8004d02 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	4b33      	ldr	r3, [pc, #204]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	4a32      	ldr	r2, [pc, #200]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca8:	4b30      	ldr	r3, [pc, #192]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	4b2c      	ldr	r3, [pc, #176]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	4a2b      	ldr	r2, [pc, #172]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc4:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ce0:	2307      	movs	r3, #7
 8004ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4825      	ldr	r0, [pc, #148]	; (8004d80 <HAL_UART_MspInit+0x298>)
 8004cec:	f000 fbc6 	bl	800547c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2105      	movs	r1, #5
 8004cf4:	2026      	movs	r0, #38	; 0x26
 8004cf6:	f000 fb05 	bl	8005304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004cfa:	2026      	movs	r0, #38	; 0x26
 8004cfc:	f000 fb1e 	bl	800533c <HAL_NVIC_EnableIRQ>
}
 8004d00:	e078      	b.n	8004df4 <HAL_UART_MspInit+0x30c>
  else if(huart->Instance==USART3)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a20      	ldr	r2, [pc, #128]	; (8004d88 <HAL_UART_MspInit+0x2a0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d141      	bne.n	8004d90 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	4b16      	ldr	r3, [pc, #88]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004d32:	f043 0302 	orr.w	r3, r3, #2
 8004d36:	6313      	str	r3, [r2, #48]	; 0x30
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <HAL_UART_MspInit+0x284>)
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004d44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d48:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d52:	2303      	movs	r3, #3
 8004d54:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d56:	2307      	movs	r3, #7
 8004d58:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d5e:	4619      	mov	r1, r3
 8004d60:	480a      	ldr	r0, [pc, #40]	; (8004d8c <HAL_UART_MspInit+0x2a4>)
 8004d62:	f000 fb8b 	bl	800547c <HAL_GPIO_Init>
}
 8004d66:	e045      	b.n	8004df4 <HAL_UART_MspInit+0x30c>
 8004d68:	40004c00 	.word	0x40004c00
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40020800 	.word	0x40020800
 8004d74:	40005000 	.word	0x40005000
 8004d78:	40020c00 	.word	0x40020c00
 8004d7c:	40011000 	.word	0x40011000
 8004d80:	40020000 	.word	0x40020000
 8004d84:	40004400 	.word	0x40004400
 8004d88:	40004800 	.word	0x40004800
 8004d8c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_UART_MspInit+0x314>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d12c      	bne.n	8004df4 <HAL_UART_MspInit+0x30c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <HAL_UART_MspInit+0x318>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <HAL_UART_MspInit+0x318>)
 8004da4:	f043 0320 	orr.w	r3, r3, #32
 8004da8:	6453      	str	r3, [r2, #68]	; 0x44
 8004daa:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <HAL_UART_MspInit+0x318>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <HAL_UART_MspInit+0x318>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	4a10      	ldr	r2, [pc, #64]	; (8004e00 <HAL_UART_MspInit+0x318>)
 8004dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <HAL_UART_MspInit+0x318>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8004dd2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de0:	2303      	movs	r3, #3
 8004de2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004de4:	2308      	movs	r3, #8
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004de8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004dec:	4619      	mov	r1, r3
 8004dee:	4805      	ldr	r0, [pc, #20]	; (8004e04 <HAL_UART_MspInit+0x31c>)
 8004df0:	f000 fb44 	bl	800547c <HAL_GPIO_Init>
}
 8004df4:	bf00      	nop
 8004df6:	3750      	adds	r7, #80	; 0x50
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40011400 	.word	0x40011400
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40021800 	.word	0x40021800

08004e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	; 0x30
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004e18:	2200      	movs	r2, #0
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	2019      	movs	r0, #25
 8004e1e:	f000 fa71 	bl	8005304 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004e22:	2019      	movs	r0, #25
 8004e24:	f000 fa8a 	bl	800533c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <HAL_InitTick+0xa4>)
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <HAL_InitTick+0xa4>)
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	6453      	str	r3, [r2, #68]	; 0x44
 8004e38:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <HAL_InitTick+0xa4>)
 8004e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e44:	f107 0210 	add.w	r2, r7, #16
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 f964 	bl	800611c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004e54:	f001 f94e 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <HAL_InitTick+0xa8>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	0c9b      	lsrs	r3, r3, #18
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e6e:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <HAL_InitTick+0xb0>)
 8004e70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e78:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004e7a:	4a0e      	ldr	r2, [pc, #56]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004e8c:	4809      	ldr	r0, [pc, #36]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e8e:	f001 fda7 	bl	80069e0 <HAL_TIM_Base_Init>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004e98:	4806      	ldr	r0, [pc, #24]	; (8004eb4 <HAL_InitTick+0xac>)
 8004e9a:	f001 fdf1 	bl	8006a80 <HAL_TIM_Base_Start_IT>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	e000      	b.n	8004ea4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3730      	adds	r7, #48	; 0x30
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	431bde83 	.word	0x431bde83
 8004eb4:	200043e8 	.word	0x200043e8
 8004eb8:	40010000 	.word	0x40010000

08004ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004ec0:	f001 f95e 	bl	8006180 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ec4:	e7fe      	b.n	8004ec4 <NMI_Handler+0x8>

08004ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eca:	e7fe      	b.n	8004eca <HardFault_Handler+0x4>

08004ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ed0:	e7fe      	b.n	8004ed0 <MemManage_Handler+0x4>

08004ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ed6:	e7fe      	b.n	8004ed6 <BusFault_Handler+0x4>

08004ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004edc:	e7fe      	b.n	8004edc <UsageFault_Handler+0x4>

08004ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ef0:	4802      	ldr	r0, [pc, #8]	; (8004efc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004ef2:	f002 f88b 	bl	800700c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	200043e8 	.word	0x200043e8

08004f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <TIM2_IRQHandler+0x10>)
 8004f06:	f002 f881 	bl	800700c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f0a:	bf00      	nop
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20004340 	.word	0x20004340

08004f14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f18:	4802      	ldr	r0, [pc, #8]	; (8004f24 <USART1_IRQHandler+0x10>)
 8004f1a:	f003 f87b 	bl	8008014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20004238 	.word	0x20004238

08004f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f2c:	4802      	ldr	r0, [pc, #8]	; (8004f38 <USART2_IRQHandler+0x10>)
 8004f2e:	f003 f871 	bl	8008014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20004388 	.word	0x20004388

08004f3c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004f40:	4802      	ldr	r0, [pc, #8]	; (8004f4c <UART4_IRQHandler+0x10>)
 8004f42:	f003 f867 	bl	8008014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200042fc 	.word	0x200042fc

08004f50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e00a      	b.n	8004f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f62:	f3af 8000 	nop.w
 8004f66:	4601      	mov	r1, r0
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	60ba      	str	r2, [r7, #8]
 8004f6e:	b2ca      	uxtb	r2, r1
 8004f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	3301      	adds	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	dbf0      	blt.n	8004f62 <_read+0x12>
	}

return len;
 8004f80:	687b      	ldr	r3, [r7, #4]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b086      	sub	sp, #24
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e009      	b.n	8004fb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	60ba      	str	r2, [r7, #8]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	3301      	adds	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	dbf1      	blt.n	8004f9c <_write+0x12>
	}
	return len;
 8004fb8:	687b      	ldr	r3, [r7, #4]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <_close>:

int _close(int file)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fea:	605a      	str	r2, [r3, #4]
	return 0;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <_isatty>:

int _isatty(int file)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
	return 1;
 8005002:	2301      	movs	r3, #1
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
	return 0;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005034:	4a14      	ldr	r2, [pc, #80]	; (8005088 <_sbrk+0x5c>)
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <_sbrk+0x60>)
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005040:	4b13      	ldr	r3, [pc, #76]	; (8005090 <_sbrk+0x64>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <_sbrk+0x64>)
 800504a:	4a12      	ldr	r2, [pc, #72]	; (8005094 <_sbrk+0x68>)
 800504c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <_sbrk+0x64>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	429a      	cmp	r2, r3
 800505a:	d207      	bcs.n	800506c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800505c:	f006 fa5e 	bl	800b51c <__errno>
 8005060:	4603      	mov	r3, r0
 8005062:	220c      	movs	r2, #12
 8005064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005066:	f04f 33ff 	mov.w	r3, #4294967295
 800506a:	e009      	b.n	8005080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800506c:	4b08      	ldr	r3, [pc, #32]	; (8005090 <_sbrk+0x64>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <_sbrk+0x64>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4413      	add	r3, r2
 800507a:	4a05      	ldr	r2, [pc, #20]	; (8005090 <_sbrk+0x64>)
 800507c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800507e:	68fb      	ldr	r3, [r7, #12]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20020000 	.word	0x20020000
 800508c:	00000400 	.word	0x00000400
 8005090:	2000034c 	.word	0x2000034c
 8005094:	20004448 	.word	0x20004448

08005098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <SystemInit+0x20>)
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a2:	4a05      	ldr	r2, [pc, #20]	; (80050b8 <SystemInit+0x20>)
 80050a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	e000ed00 	.word	0xe000ed00

080050bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050c0:	480d      	ldr	r0, [pc, #52]	; (80050f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050c2:	490e      	ldr	r1, [pc, #56]	; (80050fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050c4:	4a0e      	ldr	r2, [pc, #56]	; (8005100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050c8:	e002      	b.n	80050d0 <LoopCopyDataInit>

080050ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ce:	3304      	adds	r3, #4

080050d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050d4:	d3f9      	bcc.n	80050ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050d6:	4a0b      	ldr	r2, [pc, #44]	; (8005104 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80050d8:	4c0b      	ldr	r4, [pc, #44]	; (8005108 <LoopFillZerobss+0x26>)
  movs r3, #0
 80050da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050dc:	e001      	b.n	80050e2 <LoopFillZerobss>

080050de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050e0:	3204      	adds	r2, #4

080050e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050e4:	d3fb      	bcc.n	80050de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050e6:	f7ff ffd7 	bl	8005098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050ea:	f006 fa1d 	bl	800b528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050ee:	f7fb fe9b 	bl	8000e28 <main>
  bx  lr    
 80050f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80050f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050fc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8005100:	0800c850 	.word	0x0800c850
  ldr r2, =_sbss
 8005104:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005108:	20004444 	.word	0x20004444

0800510c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800510c:	e7fe      	b.n	800510c <ADC_IRQHandler>
	...

08005110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005114:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <HAL_Init+0x40>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a0d      	ldr	r2, [pc, #52]	; (8005150 <HAL_Init+0x40>)
 800511a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800511e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_Init+0x40>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a0a      	ldr	r2, [pc, #40]	; (8005150 <HAL_Init+0x40>)
 8005126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800512a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800512c:	4b08      	ldr	r3, [pc, #32]	; (8005150 <HAL_Init+0x40>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a07      	ldr	r2, [pc, #28]	; (8005150 <HAL_Init+0x40>)
 8005132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005138:	2003      	movs	r0, #3
 800513a:	f000 f8d8 	bl	80052ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800513e:	2000      	movs	r0, #0
 8005140:	f7ff fe62 	bl	8004e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005144:	f7ff fb70 	bl	8004828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40023c00 	.word	0x40023c00

08005154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <HAL_IncTick+0x20>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_IncTick+0x24>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4413      	add	r3, r2
 8005164:	4a04      	ldr	r2, [pc, #16]	; (8005178 <HAL_IncTick+0x24>)
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	2000001c 	.word	0x2000001c
 8005178:	20004430 	.word	0x20004430

0800517c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return uwTick;
 8005180:	4b03      	ldr	r3, [pc, #12]	; (8005190 <HAL_GetTick+0x14>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20004430 	.word	0x20004430

08005194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <__NVIC_SetPriorityGrouping+0x44>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051b0:	4013      	ands	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051c6:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <__NVIC_SetPriorityGrouping+0x44>)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	60d3      	str	r3, [r2, #12]
}
 80051cc:	bf00      	nop
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	e000ed00 	.word	0xe000ed00

080051dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051e0:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <__NVIC_GetPriorityGrouping+0x18>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	f003 0307 	and.w	r3, r3, #7
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005206:	2b00      	cmp	r3, #0
 8005208:	db0b      	blt.n	8005222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	f003 021f 	and.w	r2, r3, #31
 8005210:	4907      	ldr	r1, [pc, #28]	; (8005230 <__NVIC_EnableIRQ+0x38>)
 8005212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	2001      	movs	r0, #1
 800521a:	fa00 f202 	lsl.w	r2, r0, r2
 800521e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	e000e100 	.word	0xe000e100

08005234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	6039      	str	r1, [r7, #0]
 800523e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005244:	2b00      	cmp	r3, #0
 8005246:	db0a      	blt.n	800525e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	490c      	ldr	r1, [pc, #48]	; (8005280 <__NVIC_SetPriority+0x4c>)
 800524e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005252:	0112      	lsls	r2, r2, #4
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	440b      	add	r3, r1
 8005258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800525c:	e00a      	b.n	8005274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4908      	ldr	r1, [pc, #32]	; (8005284 <__NVIC_SetPriority+0x50>)
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	3b04      	subs	r3, #4
 800526c:	0112      	lsls	r2, r2, #4
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	440b      	add	r3, r1
 8005272:	761a      	strb	r2, [r3, #24]
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	e000e100 	.word	0xe000e100
 8005284:	e000ed00 	.word	0xe000ed00

08005288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f1c3 0307 	rsb	r3, r3, #7
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	bf28      	it	cs
 80052a6:	2304      	movcs	r3, #4
 80052a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	3304      	adds	r3, #4
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d902      	bls.n	80052b8 <NVIC_EncodePriority+0x30>
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3b03      	subs	r3, #3
 80052b6:	e000      	b.n	80052ba <NVIC_EncodePriority+0x32>
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052bc:	f04f 32ff 	mov.w	r2, #4294967295
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43da      	mvns	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	401a      	ands	r2, r3
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052d0:	f04f 31ff 	mov.w	r1, #4294967295
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	fa01 f303 	lsl.w	r3, r1, r3
 80052da:	43d9      	mvns	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052e0:	4313      	orrs	r3, r2
         );
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3724      	adds	r7, #36	; 0x24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff ff4c 	bl	8005194 <__NVIC_SetPriorityGrouping>
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005316:	f7ff ff61 	bl	80051dc <__NVIC_GetPriorityGrouping>
 800531a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	6978      	ldr	r0, [r7, #20]
 8005322:	f7ff ffb1 	bl	8005288 <NVIC_EncodePriority>
 8005326:	4602      	mov	r2, r0
 8005328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ff80 	bl	8005234 <__NVIC_SetPriority>
}
 8005334:	bf00      	nop
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff ff54 	bl	80051f8 <__NVIC_EnableIRQ>
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005364:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005366:	f7ff ff09 	bl	800517c <HAL_GetTick>
 800536a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d008      	beq.n	800538a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2280      	movs	r2, #128	; 0x80
 800537c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e052      	b.n	8005430 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0216 	bic.w	r2, r2, #22
 8005398:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <HAL_DMA_Abort+0x62>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0208 	bic.w	r2, r2, #8
 80053c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053da:	e013      	b.n	8005404 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053dc:	f7ff fece 	bl	800517c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d90c      	bls.n	8005404 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2203      	movs	r2, #3
 80053fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e015      	b.n	8005430 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e4      	bne.n	80053dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005416:	223f      	movs	r2, #63	; 0x3f
 8005418:	409a      	lsls	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d004      	beq.n	8005456 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2280      	movs	r2, #128	; 0x80
 8005450:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e00c      	b.n	8005470 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2205      	movs	r2, #5
 800545a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800547c:	b480      	push	{r7}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	e16b      	b.n	8005770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005498:	2201      	movs	r2, #1
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4013      	ands	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	f040 815a 	bne.w	800576a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d005      	beq.n	80054ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d130      	bne.n	8005530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	2203      	movs	r2, #3
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005504:	2201      	movs	r2, #1
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 0201 	and.w	r2, r3, #1
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	2b03      	cmp	r3, #3
 800553a:	d017      	beq.n	800556c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	2203      	movs	r2, #3
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	43db      	mvns	r3, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d123      	bne.n	80055c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	08da      	lsrs	r2, r3, #3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3208      	adds	r2, #8
 8005580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	220f      	movs	r2, #15
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	08da      	lsrs	r2, r3, #3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3208      	adds	r2, #8
 80055ba:	69b9      	ldr	r1, [r7, #24]
 80055bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	2203      	movs	r2, #3
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 0203 	and.w	r2, r3, #3
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80b4 	beq.w	800576a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	4b60      	ldr	r3, [pc, #384]	; (8005788 <HAL_GPIO_Init+0x30c>)
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	4a5f      	ldr	r2, [pc, #380]	; (8005788 <HAL_GPIO_Init+0x30c>)
 800560c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005610:	6453      	str	r3, [r2, #68]	; 0x44
 8005612:	4b5d      	ldr	r3, [pc, #372]	; (8005788 <HAL_GPIO_Init+0x30c>)
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800561e:	4a5b      	ldr	r2, [pc, #364]	; (800578c <HAL_GPIO_Init+0x310>)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	3302      	adds	r3, #2
 8005626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	220f      	movs	r2, #15
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43db      	mvns	r3, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4013      	ands	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a52      	ldr	r2, [pc, #328]	; (8005790 <HAL_GPIO_Init+0x314>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d02b      	beq.n	80056a2 <HAL_GPIO_Init+0x226>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a51      	ldr	r2, [pc, #324]	; (8005794 <HAL_GPIO_Init+0x318>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d025      	beq.n	800569e <HAL_GPIO_Init+0x222>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a50      	ldr	r2, [pc, #320]	; (8005798 <HAL_GPIO_Init+0x31c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01f      	beq.n	800569a <HAL_GPIO_Init+0x21e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a4f      	ldr	r2, [pc, #316]	; (800579c <HAL_GPIO_Init+0x320>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d019      	beq.n	8005696 <HAL_GPIO_Init+0x21a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_GPIO_Init+0x324>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_GPIO_Init+0x216>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a4d      	ldr	r2, [pc, #308]	; (80057a4 <HAL_GPIO_Init+0x328>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00d      	beq.n	800568e <HAL_GPIO_Init+0x212>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a4c      	ldr	r2, [pc, #304]	; (80057a8 <HAL_GPIO_Init+0x32c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <HAL_GPIO_Init+0x20e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a4b      	ldr	r2, [pc, #300]	; (80057ac <HAL_GPIO_Init+0x330>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d101      	bne.n	8005686 <HAL_GPIO_Init+0x20a>
 8005682:	2307      	movs	r3, #7
 8005684:	e00e      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 8005686:	2308      	movs	r3, #8
 8005688:	e00c      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800568a:	2306      	movs	r3, #6
 800568c:	e00a      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800568e:	2305      	movs	r3, #5
 8005690:	e008      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 8005692:	2304      	movs	r3, #4
 8005694:	e006      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 8005696:	2303      	movs	r3, #3
 8005698:	e004      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800569a:	2302      	movs	r3, #2
 800569c:	e002      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 80056a2:	2300      	movs	r3, #0
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	f002 0203 	and.w	r2, r2, #3
 80056aa:	0092      	lsls	r2, r2, #2
 80056ac:	4093      	lsls	r3, r2
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056b4:	4935      	ldr	r1, [pc, #212]	; (800578c <HAL_GPIO_Init+0x310>)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	089b      	lsrs	r3, r3, #2
 80056ba:	3302      	adds	r3, #2
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056c2:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <HAL_GPIO_Init+0x334>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056e6:	4a32      	ldr	r2, [pc, #200]	; (80057b0 <HAL_GPIO_Init+0x334>)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056ec:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <HAL_GPIO_Init+0x334>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005710:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005716:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800573a:	4a1d      	ldr	r2, [pc, #116]	; (80057b0 <HAL_GPIO_Init+0x334>)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005764:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	f67f ae90 	bls.w	8005498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	3724      	adds	r7, #36	; 0x24
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40023800 	.word	0x40023800
 800578c:	40013800 	.word	0x40013800
 8005790:	40020000 	.word	0x40020000
 8005794:	40020400 	.word	0x40020400
 8005798:	40020800 	.word	0x40020800
 800579c:	40020c00 	.word	0x40020c00
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40021400 	.word	0x40021400
 80057a8:	40021800 	.word	0x40021800
 80057ac:	40021c00 	.word	0x40021c00
 80057b0:	40013c00 	.word	0x40013c00

080057b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
 80057c0:	4613      	mov	r3, r2
 80057c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057c4:	787b      	ldrb	r3, [r7, #1]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057ca:	887a      	ldrh	r2, [r7, #2]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057d0:	e003      	b.n	80057da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057d2:	887b      	ldrh	r3, [r7, #2]
 80057d4:	041a      	lsls	r2, r3, #16
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	619a      	str	r2, [r3, #24]
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057f8:	887a      	ldrh	r2, [r7, #2]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4013      	ands	r3, r2
 80057fe:	041a      	lsls	r2, r3, #16
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	43d9      	mvns	r1, r3
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	400b      	ands	r3, r1
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	619a      	str	r2, [r3, #24]
}
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e264      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d075      	beq.n	8005926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800583a:	4ba3      	ldr	r3, [pc, #652]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 030c 	and.w	r3, r3, #12
 8005842:	2b04      	cmp	r3, #4
 8005844:	d00c      	beq.n	8005860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005846:	4ba0      	ldr	r3, [pc, #640]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800584e:	2b08      	cmp	r3, #8
 8005850:	d112      	bne.n	8005878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005852:	4b9d      	ldr	r3, [pc, #628]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800585e:	d10b      	bne.n	8005878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005860:	4b99      	ldr	r3, [pc, #612]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d05b      	beq.n	8005924 <HAL_RCC_OscConfig+0x108>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d157      	bne.n	8005924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e23f      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	d106      	bne.n	8005890 <HAL_RCC_OscConfig+0x74>
 8005882:	4b91      	ldr	r3, [pc, #580]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a90      	ldr	r2, [pc, #576]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e01d      	b.n	80058cc <HAL_RCC_OscConfig+0xb0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005898:	d10c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x98>
 800589a:	4b8b      	ldr	r3, [pc, #556]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a8a      	ldr	r2, [pc, #552]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4b88      	ldr	r3, [pc, #544]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a87      	ldr	r2, [pc, #540]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e00b      	b.n	80058cc <HAL_RCC_OscConfig+0xb0>
 80058b4:	4b84      	ldr	r3, [pc, #528]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a83      	ldr	r2, [pc, #524]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	4b81      	ldr	r3, [pc, #516]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a80      	ldr	r2, [pc, #512]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d4:	f7ff fc52 	bl	800517c <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058dc:	f7ff fc4e 	bl	800517c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b64      	cmp	r3, #100	; 0x64
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e204      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ee:	4b76      	ldr	r3, [pc, #472]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0xc0>
 80058fa:	e014      	b.n	8005926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fc:	f7ff fc3e 	bl	800517c <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005904:	f7ff fc3a 	bl	800517c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b64      	cmp	r3, #100	; 0x64
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e1f0      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005916:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0xe8>
 8005922:	e000      	b.n	8005926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d063      	beq.n	80059fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005932:	4b65      	ldr	r3, [pc, #404]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800593e:	4b62      	ldr	r3, [pc, #392]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005946:	2b08      	cmp	r3, #8
 8005948:	d11c      	bne.n	8005984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800594a:	4b5f      	ldr	r3, [pc, #380]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d116      	bne.n	8005984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005956:	4b5c      	ldr	r3, [pc, #368]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_RCC_OscConfig+0x152>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d001      	beq.n	800596e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e1c4      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596e:	4b56      	ldr	r3, [pc, #344]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4952      	ldr	r1, [pc, #328]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800597e:	4313      	orrs	r3, r2
 8005980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005982:	e03a      	b.n	80059fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d020      	beq.n	80059ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800598c:	4b4f      	ldr	r3, [pc, #316]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005992:	f7ff fbf3 	bl	800517c <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800599a:	f7ff fbef 	bl	800517c <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e1a5      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ac:	4b46      	ldr	r3, [pc, #280]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b8:	4b43      	ldr	r3, [pc, #268]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	4940      	ldr	r1, [pc, #256]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
 80059cc:	e015      	b.n	80059fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ce:	4b3f      	ldr	r3, [pc, #252]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7ff fbd2 	bl	800517c <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059dc:	f7ff fbce 	bl	800517c <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e184      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ee:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d030      	beq.n	8005a68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d016      	beq.n	8005a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a0e:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <HAL_RCC_OscConfig+0x2b4>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a14:	f7ff fbb2 	bl	800517c <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a1c:	f7ff fbae 	bl	800517c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e164      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2e:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0x200>
 8005a3a:	e015      	b.n	8005a68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a3c:	4b24      	ldr	r3, [pc, #144]	; (8005ad0 <HAL_RCC_OscConfig+0x2b4>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a42:	f7ff fb9b 	bl	800517c <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a4a:	f7ff fb97 	bl	800517c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e14d      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f0      	bne.n	8005a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a0 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a76:	2300      	movs	r3, #0
 8005a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7a:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10f      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	4a0e      	ldr	r2, [pc, #56]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6413      	str	r3, [r2, #64]	; 0x40
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCC_OscConfig+0x2b8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d121      	bne.n	8005af6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <HAL_RCC_OscConfig+0x2b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a07      	ldr	r2, [pc, #28]	; (8005ad4 <HAL_RCC_OscConfig+0x2b8>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005abe:	f7ff fb5d 	bl	800517c <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac4:	e011      	b.n	8005aea <HAL_RCC_OscConfig+0x2ce>
 8005ac6:	bf00      	nop
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	42470000 	.word	0x42470000
 8005ad0:	42470e80 	.word	0x42470e80
 8005ad4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad8:	f7ff fb50 	bl	800517c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e106      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aea:	4b85      	ldr	r3, [pc, #532]	; (8005d00 <HAL_RCC_OscConfig+0x4e4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d106      	bne.n	8005b0c <HAL_RCC_OscConfig+0x2f0>
 8005afe:	4b81      	ldr	r3, [pc, #516]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	4a80      	ldr	r2, [pc, #512]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0a:	e01c      	b.n	8005b46 <HAL_RCC_OscConfig+0x32a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b05      	cmp	r3, #5
 8005b12:	d10c      	bne.n	8005b2e <HAL_RCC_OscConfig+0x312>
 8005b14:	4b7b      	ldr	r3, [pc, #492]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	4a7a      	ldr	r2, [pc, #488]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b1a:	f043 0304 	orr.w	r3, r3, #4
 8005b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b20:	4b78      	ldr	r3, [pc, #480]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	4a77      	ldr	r2, [pc, #476]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2c:	e00b      	b.n	8005b46 <HAL_RCC_OscConfig+0x32a>
 8005b2e:	4b75      	ldr	r3, [pc, #468]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a74      	ldr	r2, [pc, #464]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3a:	4b72      	ldr	r3, [pc, #456]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	4a71      	ldr	r2, [pc, #452]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b40:	f023 0304 	bic.w	r3, r3, #4
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d015      	beq.n	8005b7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4e:	f7ff fb15 	bl	800517c <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b54:	e00a      	b.n	8005b6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b56:	f7ff fb11 	bl	800517c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e0c5      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0ee      	beq.n	8005b56 <HAL_RCC_OscConfig+0x33a>
 8005b78:	e014      	b.n	8005ba4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7a:	f7ff faff 	bl	800517c <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b80:	e00a      	b.n	8005b98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f7ff fafb 	bl	800517c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e0af      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b98:	4b5a      	ldr	r3, [pc, #360]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ee      	bne.n	8005b82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d105      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005baa:	4b56      	ldr	r3, [pc, #344]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	4a55      	ldr	r2, [pc, #340]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 809b 	beq.w	8005cf6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bc0:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 030c 	and.w	r3, r3, #12
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d05c      	beq.n	8005c86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d141      	bne.n	8005c58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd4:	4b4c      	ldr	r3, [pc, #304]	; (8005d08 <HAL_RCC_OscConfig+0x4ec>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bda:	f7ff facf 	bl	800517c <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be2:	f7ff facb 	bl	800517c <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e081      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf4:	4b43      	ldr	r3, [pc, #268]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f0      	bne.n	8005be2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	019b      	lsls	r3, r3, #6
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	041b      	lsls	r3, r3, #16
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	061b      	lsls	r3, r3, #24
 8005c24:	4937      	ldr	r1, [pc, #220]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c2a:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <HAL_RCC_OscConfig+0x4ec>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7ff faa4 	bl	800517c <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c38:	f7ff faa0 	bl	800517c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e056      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4a:	4b2e      	ldr	r3, [pc, #184]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x41c>
 8005c56:	e04e      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c58:	4b2b      	ldr	r3, [pc, #172]	; (8005d08 <HAL_RCC_OscConfig+0x4ec>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5e:	f7ff fa8d 	bl	800517c <HAL_GetTick>
 8005c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c66:	f7ff fa89 	bl	800517c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e03f      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c78:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f0      	bne.n	8005c66 <HAL_RCC_OscConfig+0x44a>
 8005c84:	e037      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e032      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <HAL_RCC_OscConfig+0x4e8>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d028      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d121      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d11a      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cc8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d111      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	085b      	lsrs	r3, r3, #1
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d107      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d001      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40007000 	.word	0x40007000
 8005d04:	40023800 	.word	0x40023800
 8005d08:	42470060 	.word	0x42470060

08005d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0cc      	b.n	8005eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d20:	4b68      	ldr	r3, [pc, #416]	; (8005ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d90c      	bls.n	8005d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2e:	4b65      	ldr	r3, [pc, #404]	; (8005ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d36:	4b63      	ldr	r3, [pc, #396]	; (8005ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d001      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0b8      	b.n	8005eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d020      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d60:	4b59      	ldr	r3, [pc, #356]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	4a58      	ldr	r2, [pc, #352]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d78:	4b53      	ldr	r3, [pc, #332]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	4a52      	ldr	r2, [pc, #328]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d84:	4b50      	ldr	r3, [pc, #320]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	494d      	ldr	r1, [pc, #308]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d044      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d107      	bne.n	8005dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005daa:	4b47      	ldr	r3, [pc, #284]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d119      	bne.n	8005dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e07f      	b.n	8005eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d003      	beq.n	8005dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d107      	bne.n	8005dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dca:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e06f      	b.n	8005eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dda:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e067      	b.n	8005eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dea:	4b37      	ldr	r3, [pc, #220]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f023 0203 	bic.w	r2, r3, #3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	4934      	ldr	r1, [pc, #208]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dfc:	f7ff f9be 	bl	800517c <HAL_GetTick>
 8005e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e02:	e00a      	b.n	8005e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e04:	f7ff f9ba 	bl	800517c <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e04f      	b.n	8005eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 020c 	and.w	r2, r3, #12
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d1eb      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e2c:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d20c      	bcs.n	8005e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3a:	4b22      	ldr	r3, [pc, #136]	; (8005ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e42:	4b20      	ldr	r3, [pc, #128]	; (8005ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d001      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e032      	b.n	8005eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e60:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	4916      	ldr	r1, [pc, #88]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e7e:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	490e      	ldr	r1, [pc, #56]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e92:	f000 f82d 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 8005e96:	4602      	mov	r2, r0
 8005e98:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	490a      	ldr	r1, [pc, #40]	; (8005ecc <HAL_RCC_ClockConfig+0x1c0>)
 8005ea4:	5ccb      	ldrb	r3, [r1, r3]
 8005ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eaa:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eae:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe ffa8 	bl	8004e08 <HAL_InitTick>

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40023c00 	.word	0x40023c00
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	0800c790 	.word	0x0800c790
 8005ed0:	20000014 	.word	0x20000014
 8005ed4:	20000018 	.word	0x20000018

08005ed8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005edc:	4b03      	ldr	r3, [pc, #12]	; (8005eec <HAL_RCC_EnableCSS+0x14>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	4247004c 	.word	0x4247004c

08005ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	607b      	str	r3, [r7, #4]
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	2300      	movs	r3, #0
 8005f02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f08:	4b67      	ldr	r3, [pc, #412]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 030c 	and.w	r3, r3, #12
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d00d      	beq.n	8005f30 <HAL_RCC_GetSysClockFreq+0x40>
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	f200 80bd 	bhi.w	8006094 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_RCC_GetSysClockFreq+0x34>
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d003      	beq.n	8005f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f22:	e0b7      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f24:	4b61      	ldr	r3, [pc, #388]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f26:	60bb      	str	r3, [r7, #8]
       break;
 8005f28:	e0b7      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f2a:	4b61      	ldr	r3, [pc, #388]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005f2c:	60bb      	str	r3, [r7, #8]
      break;
 8005f2e:	e0b4      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f30:	4b5d      	ldr	r3, [pc, #372]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f3a:	4b5b      	ldr	r3, [pc, #364]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d04d      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f46:	4b58      	ldr	r3, [pc, #352]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	099b      	lsrs	r3, r3, #6
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f56:	f04f 0100 	mov.w	r1, #0
 8005f5a:	ea02 0800 	and.w	r8, r2, r0
 8005f5e:	ea03 0901 	and.w	r9, r3, r1
 8005f62:	4640      	mov	r0, r8
 8005f64:	4649      	mov	r1, r9
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	014b      	lsls	r3, r1, #5
 8005f70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f74:	0142      	lsls	r2, r0, #5
 8005f76:	4610      	mov	r0, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	ebb0 0008 	subs.w	r0, r0, r8
 8005f7e:	eb61 0109 	sbc.w	r1, r1, r9
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	018b      	lsls	r3, r1, #6
 8005f8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f90:	0182      	lsls	r2, r0, #6
 8005f92:	1a12      	subs	r2, r2, r0
 8005f94:	eb63 0301 	sbc.w	r3, r3, r1
 8005f98:	f04f 0000 	mov.w	r0, #0
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	00d9      	lsls	r1, r3, #3
 8005fa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fa6:	00d0      	lsls	r0, r2, #3
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	eb12 0208 	adds.w	r2, r2, r8
 8005fb0:	eb43 0309 	adc.w	r3, r3, r9
 8005fb4:	f04f 0000 	mov.w	r0, #0
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	0259      	lsls	r1, r3, #9
 8005fbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005fc2:	0250      	lsls	r0, r2, #9
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4619      	mov	r1, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	f7fa fd92 	bl	8000afc <__aeabi_uldivmod>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4613      	mov	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e04a      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fe2:	4b31      	ldr	r3, [pc, #196]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	099b      	lsrs	r3, r3, #6
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	ea02 0400 	and.w	r4, r2, r0
 8005ffa:	ea03 0501 	and.w	r5, r3, r1
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	014b      	lsls	r3, r1, #5
 800600c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006010:	0142      	lsls	r2, r0, #5
 8006012:	4610      	mov	r0, r2
 8006014:	4619      	mov	r1, r3
 8006016:	1b00      	subs	r0, r0, r4
 8006018:	eb61 0105 	sbc.w	r1, r1, r5
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	018b      	lsls	r3, r1, #6
 8006026:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800602a:	0182      	lsls	r2, r0, #6
 800602c:	1a12      	subs	r2, r2, r0
 800602e:	eb63 0301 	sbc.w	r3, r3, r1
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f04f 0100 	mov.w	r1, #0
 800603a:	00d9      	lsls	r1, r3, #3
 800603c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006040:	00d0      	lsls	r0, r2, #3
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	1912      	adds	r2, r2, r4
 8006048:	eb45 0303 	adc.w	r3, r5, r3
 800604c:	f04f 0000 	mov.w	r0, #0
 8006050:	f04f 0100 	mov.w	r1, #0
 8006054:	0299      	lsls	r1, r3, #10
 8006056:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800605a:	0290      	lsls	r0, r2, #10
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4610      	mov	r0, r2
 8006062:	4619      	mov	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	461a      	mov	r2, r3
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	f7fa fd46 	bl	8000afc <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	3301      	adds	r3, #1
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	60bb      	str	r3, [r7, #8]
      break;
 8006092:	e002      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006096:	60bb      	str	r3, [r7, #8]
      break;
 8006098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609a:	68bb      	ldr	r3, [r7, #8]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	007a1200 	.word	0x007a1200

080060b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060ba:	681b      	ldr	r3, [r3, #0]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20000014 	.word	0x20000014

080060cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060d0:	f7ff fff0 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060d4:	4602      	mov	r2, r0
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	0a9b      	lsrs	r3, r3, #10
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	4903      	ldr	r1, [pc, #12]	; (80060f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e2:	5ccb      	ldrb	r3, [r1, r3]
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40023800 	.word	0x40023800
 80060f0:	0800c7a0 	.word	0x0800c7a0

080060f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060f8:	f7ff ffdc 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	0b5b      	lsrs	r3, r3, #13
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	0800c7a0 	.word	0x0800c7a0

0800611c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	220f      	movs	r2, #15
 800612a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800612c:	4b12      	ldr	r3, [pc, #72]	; (8006178 <HAL_RCC_GetClockConfig+0x5c>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0203 	and.w	r2, r3, #3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006138:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <HAL_RCC_GetClockConfig+0x5c>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <HAL_RCC_GetClockConfig+0x5c>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <HAL_RCC_GetClockConfig+0x5c>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	08db      	lsrs	r3, r3, #3
 8006156:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800615e:	4b07      	ldr	r3, [pc, #28]	; (800617c <HAL_RCC_GetClockConfig+0x60>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0207 	and.w	r2, r3, #7
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	601a      	str	r2, [r3, #0]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40023800 	.word	0x40023800
 800617c:	40023c00 	.word	0x40023c00

08006180 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d104      	bne.n	800619a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006190:	f000 f80a 	bl	80061a8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006194:	4b03      	ldr	r3, [pc, #12]	; (80061a4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006196:	2280      	movs	r2, #128	; 0x80
 8006198:	701a      	strb	r2, [r3, #0]
  }
}
 800619a:	bf00      	nop
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40023800 	.word	0x40023800
 80061a4:	4002380e 	.word	0x4002380e

080061a8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d105      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d035      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061e0:	4b62      	ldr	r3, [pc, #392]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061e6:	f7fe ffc9 	bl	800517c <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061ec:	e008      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061ee:	f7fe ffc5 	bl	800517c <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e0b0      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006200:	4b5b      	ldr	r3, [pc, #364]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f0      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	019a      	lsls	r2, r3, #6
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	071b      	lsls	r3, r3, #28
 8006218:	4955      	ldr	r1, [pc, #340]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006220:	4b52      	ldr	r3, [pc, #328]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006226:	f7fe ffa9 	bl	800517c <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800622e:	f7fe ffa5 	bl	800517c <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e090      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006240:	4b4b      	ldr	r3, [pc, #300]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8083 	beq.w	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	4b44      	ldr	r3, [pc, #272]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	4a43      	ldr	r2, [pc, #268]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006268:	6413      	str	r3, [r2, #64]	; 0x40
 800626a:	4b41      	ldr	r3, [pc, #260]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006276:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3e      	ldr	r2, [pc, #248]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800627c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006280:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006282:	f7fe ff7b 	bl	800517c <HAL_GetTick>
 8006286:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006288:	e008      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800628a:	f7fe ff77 	bl	800517c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e062      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800629c:	4b35      	ldr	r3, [pc, #212]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f0      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062a8:	4b31      	ldr	r3, [pc, #196]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d02f      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d028      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062c6:	4b2a      	ldr	r3, [pc, #168]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062d0:	4b29      	ldr	r3, [pc, #164]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062d6:	4b28      	ldr	r3, [pc, #160]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062dc:	4a24      	ldr	r2, [pc, #144]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062e2:	4b23      	ldr	r3, [pc, #140]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d114      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062ee:	f7fe ff45 	bl	800517c <HAL_GetTick>
 80062f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f4:	e00a      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f6:	f7fe ff41 	bl	800517c <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	f241 3288 	movw	r2, #5000	; 0x1388
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e02a      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800630c:	4b18      	ldr	r3, [pc, #96]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0ee      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006324:	d10d      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006326:	4b12      	ldr	r3, [pc, #72]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633a:	490d      	ldr	r1, [pc, #52]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800633c:	4313      	orrs	r3, r2
 800633e:	608b      	str	r3, [r1, #8]
 8006340:	e005      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006348:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800634c:	6093      	str	r3, [r2, #8]
 800634e:	4b08      	ldr	r3, [pc, #32]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006350:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800635a:	4905      	ldr	r1, [pc, #20]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800635c:	4313      	orrs	r3, r2
 800635e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	42470068 	.word	0x42470068
 8006370:	40023800 	.word	0x40023800
 8006374:	40007000 	.word	0x40007000
 8006378:	42470e40 	.word	0x42470e40

0800637c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e083      	b.n	8006496 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	7f5b      	ldrb	r3, [r3, #29]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fe fa6e 	bl	8004880 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	22ca      	movs	r2, #202	; 0xca
 80063b0:	625a      	str	r2, [r3, #36]	; 0x24
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2253      	movs	r2, #83	; 0x53
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 faa8 	bl	8006910 <RTC_EnterInitMode>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d008      	beq.n	80063d8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	22ff      	movs	r2, #255	; 0xff
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e05e      	b.n	8006496 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6812      	ldr	r2, [r2, #0]
 80063e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ea:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6899      	ldr	r1, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68d2      	ldr	r2, [r2, #12]
 8006412:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6919      	ldr	r1, [r3, #16]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	041a      	lsls	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006436:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10e      	bne.n	8006464 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa3a 	bl	80068c0 <HAL_RTC_WaitForSynchro>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	22ff      	movs	r2, #255	; 0xff
 8006458:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2204      	movs	r2, #4
 800645e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e018      	b.n	8006496 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006472:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	22ff      	movs	r2, #255	; 0xff
 800648c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006494:	2300      	movs	r3, #0
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800649e:	b590      	push	{r4, r7, lr}
 80064a0:	b087      	sub	sp, #28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	7f1b      	ldrb	r3, [r3, #28]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_RTC_SetTime+0x1c>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e0aa      	b.n	8006610 <HAL_RTC_SetTime+0x172>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2202      	movs	r2, #2
 80064c4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d126      	bne.n	800651a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2200      	movs	r2, #0
 80064de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fa3f 	bl	8006968 <RTC_ByteToBcd2>
 80064ea:	4603      	mov	r3, r0
 80064ec:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fa38 	bl	8006968 <RTC_ByteToBcd2>
 80064f8:	4603      	mov	r3, r0
 80064fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80064fc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	789b      	ldrb	r3, [r3, #2]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fa30 	bl	8006968 <RTC_ByteToBcd2>
 8006508:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800650a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	78db      	ldrb	r3, [r3, #3]
 8006512:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e018      	b.n	800654c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800653a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006540:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	78db      	ldrb	r3, [r3, #3]
 8006546:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	22ca      	movs	r2, #202	; 0xca
 8006552:	625a      	str	r2, [r3, #36]	; 0x24
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2253      	movs	r2, #83	; 0x53
 800655a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f9d7 	bl	8006910 <RTC_EnterInitMode>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	22ff      	movs	r2, #255	; 0xff
 800656e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2204      	movs	r2, #4
 8006574:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e047      	b.n	8006610 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800658a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800658e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800659e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6899      	ldr	r1, [r3, #8]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d111      	bne.n	80065fa <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 f972 	bl	80068c0 <HAL_RTC_WaitForSynchro>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00b      	beq.n	80065fa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	22ff      	movs	r2, #255	; 0xff
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2204      	movs	r2, #4
 80065ee:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e00a      	b.n	8006610 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	22ff      	movs	r2, #255	; 0xff
 8006600:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800660e:	2300      	movs	r3, #0
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	bd90      	pop	{r4, r7, pc}

08006618 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800664a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800664e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	0c1b      	lsrs	r3, r3, #16
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665a:	b2da      	uxtb	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	0a1b      	lsrs	r3, r3, #8
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666a:	b2da      	uxtb	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006678:	b2da      	uxtb	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	0c1b      	lsrs	r3, r3, #16
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d11a      	bne.n	80066ca <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f000 f983 	bl	80069a4 <RTC_Bcd2ToByte>
 800669e:	4603      	mov	r3, r0
 80066a0:	461a      	mov	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f97a 	bl	80069a4 <RTC_Bcd2ToByte>
 80066b0:	4603      	mov	r3, r0
 80066b2:	461a      	mov	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	789b      	ldrb	r3, [r3, #2]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 f971 	bl	80069a4 <RTC_Bcd2ToByte>
 80066c2:	4603      	mov	r3, r0
 80066c4:	461a      	mov	r2, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80066d4:	b590      	push	{r4, r7, lr}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	7f1b      	ldrb	r3, [r3, #28]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_RTC_SetDate+0x1c>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e094      	b.n	800681a <HAL_RTC_SetDate+0x146>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2202      	movs	r2, #2
 80066fa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10e      	bne.n	8006720 <HAL_RTC_SetDate+0x4c>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	b2db      	uxtb	r3, r3
 8006718:	330a      	adds	r3, #10
 800671a:	b2da      	uxtb	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d11c      	bne.n	8006760 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	78db      	ldrb	r3, [r3, #3]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 f91c 	bl	8006968 <RTC_ByteToBcd2>
 8006730:	4603      	mov	r3, r0
 8006732:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 f915 	bl	8006968 <RTC_ByteToBcd2>
 800673e:	4603      	mov	r3, r0
 8006740:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006742:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	789b      	ldrb	r3, [r3, #2]
 8006748:	4618      	mov	r0, r3
 800674a:	f000 f90d 	bl	8006968 <RTC_ByteToBcd2>
 800674e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006750:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e00e      	b.n	800677e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	78db      	ldrb	r3, [r3, #3]
 8006764:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800676c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006772:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	22ca      	movs	r2, #202	; 0xca
 8006784:	625a      	str	r2, [r3, #36]	; 0x24
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2253      	movs	r2, #83	; 0x53
 800678c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f8be 	bl	8006910 <RTC_EnterInitMode>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00b      	beq.n	80067b2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	22ff      	movs	r2, #255	; 0xff
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2204      	movs	r2, #4
 80067a6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e033      	b.n	800681a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d111      	bne.n	8006804 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f86d 	bl	80068c0 <HAL_RTC_WaitForSynchro>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	22ff      	movs	r2, #255	; 0xff
 80067f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2204      	movs	r2, #4
 80067f8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e00a      	b.n	800681a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	22ff      	movs	r2, #255	; 0xff
 800680a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006818:	2300      	movs	r3, #0
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	bd90      	pop	{r4, r7, pc}

08006822 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800683c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006840:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	0a1b      	lsrs	r3, r3, #8
 8006850:	b2db      	uxtb	r3, r3
 8006852:	f003 031f 	and.w	r3, r3, #31
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006864:	b2da      	uxtb	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	0b5b      	lsrs	r3, r3, #13
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	b2da      	uxtb	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11a      	bne.n	80068b6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	78db      	ldrb	r3, [r3, #3]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f88d 	bl	80069a4 <RTC_Bcd2ToByte>
 800688a:	4603      	mov	r3, r0
 800688c:	461a      	mov	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 f884 	bl	80069a4 <RTC_Bcd2ToByte>
 800689c:	4603      	mov	r3, r0
 800689e:	461a      	mov	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	789b      	ldrb	r3, [r3, #2]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f87b 	bl	80069a4 <RTC_Bcd2ToByte>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068dc:	f7fe fc4e 	bl	800517c <HAL_GetTick>
 80068e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80068e2:	e009      	b.n	80068f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80068e4:	f7fe fc4a 	bl	800517c <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068f2:	d901      	bls.n	80068f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e007      	b.n	8006908 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ee      	beq.n	80068e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d119      	bne.n	800695e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f04f 32ff 	mov.w	r2, #4294967295
 8006932:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006934:	f7fe fc22 	bl	800517c <HAL_GetTick>
 8006938:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800693a:	e009      	b.n	8006950 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800693c:	f7fe fc1e 	bl	800517c <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800694a:	d901      	bls.n	8006950 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e007      	b.n	8006960 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0ee      	beq.n	800693c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006976:	e005      	b.n	8006984 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	3b0a      	subs	r3, #10
 8006982:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	2b09      	cmp	r3, #9
 8006988:	d8f6      	bhi.n	8006978 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	b2da      	uxtb	r2, r3
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	4313      	orrs	r3, r2
 8006996:	b2db      	uxtb	r3, r3
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	4603      	mov	r3, r0
 80069ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	091b      	lsrs	r3, r3, #4
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	461a      	mov	r2, r3
 80069ba:	4613      	mov	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	4413      	add	r3, r2
 80069d2:	b2db      	uxtb	r3, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e041      	b.n	8006a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fd ffd4 	bl	80049b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f000 fda6 	bl	8007570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d001      	beq.n	8006a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e04e      	b.n	8006b36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a23      	ldr	r2, [pc, #140]	; (8006b44 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d022      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac2:	d01d      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1f      	ldr	r2, [pc, #124]	; (8006b48 <HAL_TIM_Base_Start_IT+0xc8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d018      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1e      	ldr	r2, [pc, #120]	; (8006b4c <HAL_TIM_Base_Start_IT+0xcc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00e      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <HAL_TIM_Base_Start_IT+0xd8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_TIM_Base_Start_IT+0xdc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d111      	bne.n	8006b24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b06      	cmp	r3, #6
 8006b10:	d010      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0201 	orr.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b22:	e007      	b.n	8006b34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40000400 	.word	0x40000400
 8006b4c:	40000800 	.word	0x40000800
 8006b50:	40000c00 	.word	0x40000c00
 8006b54:	40010400 	.word	0x40010400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40001800 	.word	0x40001800

08006b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e041      	b.n	8006bf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f839 	bl	8006bfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f000 fce6 	bl	8007570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <HAL_TIM_PWM_Start+0x24>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	e022      	b.n	8006c7e <HAL_TIM_PWM_Start+0x6a>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d109      	bne.n	8006c52 <HAL_TIM_PWM_Start+0x3e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	bf14      	ite	ne
 8006c4a:	2301      	movne	r3, #1
 8006c4c:	2300      	moveq	r3, #0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	e015      	b.n	8006c7e <HAL_TIM_PWM_Start+0x6a>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d109      	bne.n	8006c6c <HAL_TIM_PWM_Start+0x58>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	bf14      	ite	ne
 8006c64:	2301      	movne	r3, #1
 8006c66:	2300      	moveq	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	e008      	b.n	8006c7e <HAL_TIM_PWM_Start+0x6a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	bf14      	ite	ne
 8006c78:	2301      	movne	r3, #1
 8006c7a:	2300      	moveq	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e07c      	b.n	8006d80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d104      	bne.n	8006c96 <HAL_TIM_PWM_Start+0x82>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c94:	e013      	b.n	8006cbe <HAL_TIM_PWM_Start+0xaa>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d104      	bne.n	8006ca6 <HAL_TIM_PWM_Start+0x92>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca4:	e00b      	b.n	8006cbe <HAL_TIM_PWM_Start+0xaa>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d104      	bne.n	8006cb6 <HAL_TIM_PWM_Start+0xa2>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb4:	e003      	b.n	8006cbe <HAL_TIM_PWM_Start+0xaa>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 ff3c 	bl	8007b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2d      	ldr	r2, [pc, #180]	; (8006d88 <HAL_TIM_PWM_Start+0x174>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0xcc>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2c      	ldr	r2, [pc, #176]	; (8006d8c <HAL_TIM_PWM_Start+0x178>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d101      	bne.n	8006ce4 <HAL_TIM_PWM_Start+0xd0>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <HAL_TIM_PWM_Start+0xd2>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a22      	ldr	r2, [pc, #136]	; (8006d88 <HAL_TIM_PWM_Start+0x174>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d022      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x136>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0c:	d01d      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x136>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <HAL_TIM_PWM_Start+0x17c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d018      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x136>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <HAL_TIM_PWM_Start+0x180>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x136>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1c      	ldr	r2, [pc, #112]	; (8006d98 <HAL_TIM_PWM_Start+0x184>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00e      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x136>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <HAL_TIM_PWM_Start+0x178>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x136>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a18      	ldr	r2, [pc, #96]	; (8006d9c <HAL_TIM_PWM_Start+0x188>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x136>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <HAL_TIM_PWM_Start+0x18c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d111      	bne.n	8006d6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b06      	cmp	r3, #6
 8006d5a:	d010      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6c:	e007      	b.n	8006d7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40010400 	.word	0x40010400
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40000c00 	.word	0x40000c00
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40001800 	.word	0x40001800

08006da4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e097      	b.n	8006ee8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d106      	bne.n	8006dd2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fd fd6d 	bl	80048ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de8:	f023 0307 	bic.w	r3, r3, #7
 8006dec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4619      	mov	r1, r3
 8006df8:	4610      	mov	r0, r2
 8006dfa:	f000 fbb9 	bl	8007570 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	4313      	orrs	r3, r2
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e44:	f023 030c 	bic.w	r3, r3, #12
 8006e48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	4313      	orrs	r3, r2
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	011a      	lsls	r2, r3, #4
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	031b      	lsls	r3, r3, #12
 8006e74:	4313      	orrs	r3, r2
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	4313      	orrs	r3, r2
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d110      	bne.n	8006f42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d102      	bne.n	8006f2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f26:	7b7b      	ldrb	r3, [r7, #13]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d001      	beq.n	8006f30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e069      	b.n	8007004 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f40:	e031      	b.n	8006fa6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d110      	bne.n	8006f6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d102      	bne.n	8006f54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f4e:	7b3b      	ldrb	r3, [r7, #12]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d001      	beq.n	8006f58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e055      	b.n	8007004 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f68:	e01d      	b.n	8006fa6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d108      	bne.n	8006f82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d105      	bne.n	8006f82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f76:	7b7b      	ldrb	r3, [r7, #13]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d102      	bne.n	8006f82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f7c:	7b3b      	ldrb	r3, [r7, #12]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d001      	beq.n	8006f86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e03e      	b.n	8007004 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <HAL_TIM_Encoder_Start+0xc4>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d008      	beq.n	8006fc4 <HAL_TIM_Encoder_Start+0xd4>
 8006fb2:	e00f      	b.n	8006fd4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fdc1 	bl	8007b44 <TIM_CCxChannelCmd>
      break;
 8006fc2:	e016      	b.n	8006ff2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	2104      	movs	r1, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fdb9 	bl	8007b44 <TIM_CCxChannelCmd>
      break;
 8006fd2:	e00e      	b.n	8006ff2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 fdb1 	bl	8007b44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	2104      	movs	r1, #4
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fdaa 	bl	8007b44 <TIM_CCxChannelCmd>
      break;
 8006ff0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0201 	orr.w	r2, r2, #1
 8007000:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b02      	cmp	r3, #2
 8007020:	d122      	bne.n	8007068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b02      	cmp	r3, #2
 800702e:	d11b      	bne.n	8007068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0202 	mvn.w	r2, #2
 8007038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fa70 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 8007054:	e005      	b.n	8007062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa62 	bl	8007520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fa73 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b04      	cmp	r3, #4
 8007074:	d122      	bne.n	80070bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b04      	cmp	r3, #4
 8007082:	d11b      	bne.n	80070bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0204 	mvn.w	r2, #4
 800708c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa46 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 80070a8:	e005      	b.n	80070b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa38 	bl	8007520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fa49 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d122      	bne.n	8007110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d11b      	bne.n	8007110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f06f 0208 	mvn.w	r2, #8
 80070e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2204      	movs	r2, #4
 80070e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa1c 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 80070fc:	e005      	b.n	800710a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa0e 	bl	8007520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fa1f 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b10      	cmp	r3, #16
 800711c:	d122      	bne.n	8007164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0310 	and.w	r3, r3, #16
 8007128:	2b10      	cmp	r3, #16
 800712a:	d11b      	bne.n	8007164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0210 	mvn.w	r2, #16
 8007134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2208      	movs	r2, #8
 800713a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f9f2 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 8007150:	e005      	b.n	800715e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9e4 	bl	8007520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f9f5 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b01      	cmp	r3, #1
 8007170:	d10e      	bne.n	8007190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b01      	cmp	r3, #1
 800717e:	d107      	bne.n	8007190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0201 	mvn.w	r2, #1
 8007188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fd fb18 	bl	80047c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719a:	2b80      	cmp	r3, #128	; 0x80
 800719c:	d10e      	bne.n	80071bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a8:	2b80      	cmp	r3, #128	; 0x80
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fd70 	bl	8007c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d10e      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	d107      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9ba 	bl	800755c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d10e      	bne.n	8007214 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b20      	cmp	r3, #32
 8007202:	d107      	bne.n	8007214 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f06f 0220 	mvn.w	r2, #32
 800720c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fd3a 	bl	8007c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800722e:	2b01      	cmp	r3, #1
 8007230:	d101      	bne.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007232:	2302      	movs	r3, #2
 8007234:	e0ac      	b.n	8007390 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b0c      	cmp	r3, #12
 8007242:	f200 809f 	bhi.w	8007384 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007246:	a201      	add	r2, pc, #4	; (adr r2, 800724c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	08007281 	.word	0x08007281
 8007250:	08007385 	.word	0x08007385
 8007254:	08007385 	.word	0x08007385
 8007258:	08007385 	.word	0x08007385
 800725c:	080072c1 	.word	0x080072c1
 8007260:	08007385 	.word	0x08007385
 8007264:	08007385 	.word	0x08007385
 8007268:	08007385 	.word	0x08007385
 800726c:	08007303 	.word	0x08007303
 8007270:	08007385 	.word	0x08007385
 8007274:	08007385 	.word	0x08007385
 8007278:	08007385 	.word	0x08007385
 800727c:	08007343 	.word	0x08007343
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fa12 	bl	80076b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0208 	orr.w	r2, r2, #8
 800729a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0204 	bic.w	r2, r2, #4
 80072aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6999      	ldr	r1, [r3, #24]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	691a      	ldr	r2, [r3, #16]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	619a      	str	r2, [r3, #24]
      break;
 80072be:	e062      	b.n	8007386 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fa62 	bl	8007790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6999      	ldr	r1, [r3, #24]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	021a      	lsls	r2, r3, #8
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	619a      	str	r2, [r3, #24]
      break;
 8007300:	e041      	b.n	8007386 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	4618      	mov	r0, r3
 800730a:	f000 fab7 	bl	800787c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0208 	orr.w	r2, r2, #8
 800731c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0204 	bic.w	r2, r2, #4
 800732c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69d9      	ldr	r1, [r3, #28]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	61da      	str	r2, [r3, #28]
      break;
 8007340:	e021      	b.n	8007386 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	4618      	mov	r0, r3
 800734a:	f000 fb0b 	bl	8007964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800735c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800736c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69d9      	ldr	r1, [r3, #28]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	021a      	lsls	r2, r3, #8
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	61da      	str	r2, [r3, #28]
      break;
 8007382:	e000      	b.n	8007386 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007384:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_TIM_ConfigClockSource+0x18>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e0b3      	b.n	8007518 <HAL_TIM_ConfigClockSource+0x180>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e8:	d03e      	beq.n	8007468 <HAL_TIM_ConfigClockSource+0xd0>
 80073ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ee:	f200 8087 	bhi.w	8007500 <HAL_TIM_ConfigClockSource+0x168>
 80073f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f6:	f000 8085 	beq.w	8007504 <HAL_TIM_ConfigClockSource+0x16c>
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fe:	d87f      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x168>
 8007400:	2b70      	cmp	r3, #112	; 0x70
 8007402:	d01a      	beq.n	800743a <HAL_TIM_ConfigClockSource+0xa2>
 8007404:	2b70      	cmp	r3, #112	; 0x70
 8007406:	d87b      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x168>
 8007408:	2b60      	cmp	r3, #96	; 0x60
 800740a:	d050      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x116>
 800740c:	2b60      	cmp	r3, #96	; 0x60
 800740e:	d877      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x168>
 8007410:	2b50      	cmp	r3, #80	; 0x50
 8007412:	d03c      	beq.n	800748e <HAL_TIM_ConfigClockSource+0xf6>
 8007414:	2b50      	cmp	r3, #80	; 0x50
 8007416:	d873      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x168>
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d058      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x136>
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d86f      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x168>
 8007420:	2b30      	cmp	r3, #48	; 0x30
 8007422:	d064      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x156>
 8007424:	2b30      	cmp	r3, #48	; 0x30
 8007426:	d86b      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x168>
 8007428:	2b20      	cmp	r3, #32
 800742a:	d060      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x156>
 800742c:	2b20      	cmp	r3, #32
 800742e:	d867      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x168>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d05c      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x156>
 8007434:	2b10      	cmp	r3, #16
 8007436:	d05a      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007438:	e062      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6899      	ldr	r1, [r3, #8]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f000 fb5b 	bl	8007b04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800745c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	609a      	str	r2, [r3, #8]
      break;
 8007466:	e04e      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6899      	ldr	r1, [r3, #8]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f000 fb44 	bl	8007b04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800748a:	609a      	str	r2, [r3, #8]
      break;
 800748c:	e03b      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6859      	ldr	r1, [r3, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	461a      	mov	r2, r3
 800749c:	f000 fab8 	bl	8007a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2150      	movs	r1, #80	; 0x50
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fb11 	bl	8007ace <TIM_ITRx_SetConfig>
      break;
 80074ac:	e02b      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6859      	ldr	r1, [r3, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f000 fad7 	bl	8007a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2160      	movs	r1, #96	; 0x60
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fb01 	bl	8007ace <TIM_ITRx_SetConfig>
      break;
 80074cc:	e01b      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6859      	ldr	r1, [r3, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	461a      	mov	r2, r3
 80074dc:	f000 fa98 	bl	8007a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2140      	movs	r1, #64	; 0x40
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 faf1 	bl	8007ace <TIM_ITRx_SetConfig>
      break;
 80074ec:	e00b      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f000 fae8 	bl	8007ace <TIM_ITRx_SetConfig>
        break;
 80074fe:	e002      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007500:	bf00      	nop
 8007502:	e000      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007504:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a40      	ldr	r2, [pc, #256]	; (8007684 <TIM_Base_SetConfig+0x114>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d013      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758e:	d00f      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a3d      	ldr	r2, [pc, #244]	; (8007688 <TIM_Base_SetConfig+0x118>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00b      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a3c      	ldr	r2, [pc, #240]	; (800768c <TIM_Base_SetConfig+0x11c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d007      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a3b      	ldr	r2, [pc, #236]	; (8007690 <TIM_Base_SetConfig+0x120>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d003      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a3a      	ldr	r2, [pc, #232]	; (8007694 <TIM_Base_SetConfig+0x124>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d108      	bne.n	80075c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2f      	ldr	r2, [pc, #188]	; (8007684 <TIM_Base_SetConfig+0x114>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d02b      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d0:	d027      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a2c      	ldr	r2, [pc, #176]	; (8007688 <TIM_Base_SetConfig+0x118>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d023      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a2b      	ldr	r2, [pc, #172]	; (800768c <TIM_Base_SetConfig+0x11c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01f      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a2a      	ldr	r2, [pc, #168]	; (8007690 <TIM_Base_SetConfig+0x120>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01b      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a29      	ldr	r2, [pc, #164]	; (8007694 <TIM_Base_SetConfig+0x124>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d017      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a28      	ldr	r2, [pc, #160]	; (8007698 <TIM_Base_SetConfig+0x128>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d013      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a27      	ldr	r2, [pc, #156]	; (800769c <TIM_Base_SetConfig+0x12c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00f      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a26      	ldr	r2, [pc, #152]	; (80076a0 <TIM_Base_SetConfig+0x130>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00b      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a25      	ldr	r2, [pc, #148]	; (80076a4 <TIM_Base_SetConfig+0x134>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d007      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a24      	ldr	r2, [pc, #144]	; (80076a8 <TIM_Base_SetConfig+0x138>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d003      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a23      	ldr	r2, [pc, #140]	; (80076ac <TIM_Base_SetConfig+0x13c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d108      	bne.n	8007634 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a0a      	ldr	r2, [pc, #40]	; (8007684 <TIM_Base_SetConfig+0x114>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d003      	beq.n	8007668 <TIM_Base_SetConfig+0xf8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a0c      	ldr	r2, [pc, #48]	; (8007694 <TIM_Base_SetConfig+0x124>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d103      	bne.n	8007670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	615a      	str	r2, [r3, #20]
}
 8007676:	bf00      	nop
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40010000 	.word	0x40010000
 8007688:	40000400 	.word	0x40000400
 800768c:	40000800 	.word	0x40000800
 8007690:	40000c00 	.word	0x40000c00
 8007694:	40010400 	.word	0x40010400
 8007698:	40014000 	.word	0x40014000
 800769c:	40014400 	.word	0x40014400
 80076a0:	40014800 	.word	0x40014800
 80076a4:	40001800 	.word	0x40001800
 80076a8:	40001c00 	.word	0x40001c00
 80076ac:	40002000 	.word	0x40002000

080076b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f023 0201 	bic.w	r2, r3, #1
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f023 0302 	bic.w	r3, r3, #2
 80076f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a20      	ldr	r2, [pc, #128]	; (8007788 <TIM_OC1_SetConfig+0xd8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d003      	beq.n	8007714 <TIM_OC1_SetConfig+0x64>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a1f      	ldr	r2, [pc, #124]	; (800778c <TIM_OC1_SetConfig+0xdc>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d10c      	bne.n	800772e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f023 0308 	bic.w	r3, r3, #8
 800771a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f023 0304 	bic.w	r3, r3, #4
 800772c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a15      	ldr	r2, [pc, #84]	; (8007788 <TIM_OC1_SetConfig+0xd8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d003      	beq.n	800773e <TIM_OC1_SetConfig+0x8e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a14      	ldr	r2, [pc, #80]	; (800778c <TIM_OC1_SetConfig+0xdc>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d111      	bne.n	8007762 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800774c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	621a      	str	r2, [r3, #32]
}
 800777c:	bf00      	nop
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	40010000 	.word	0x40010000
 800778c:	40010400 	.word	0x40010400

08007790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f023 0210 	bic.w	r2, r3, #16
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f023 0320 	bic.w	r3, r3, #32
 80077da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a22      	ldr	r2, [pc, #136]	; (8007874 <TIM_OC2_SetConfig+0xe4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC2_SetConfig+0x68>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a21      	ldr	r2, [pc, #132]	; (8007878 <TIM_OC2_SetConfig+0xe8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d10d      	bne.n	8007814 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	4313      	orrs	r3, r2
 800780a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a17      	ldr	r2, [pc, #92]	; (8007874 <TIM_OC2_SetConfig+0xe4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d003      	beq.n	8007824 <TIM_OC2_SetConfig+0x94>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a16      	ldr	r2, [pc, #88]	; (8007878 <TIM_OC2_SetConfig+0xe8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d113      	bne.n	800784c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800782a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000
 8007878:	40010400 	.word	0x40010400

0800787c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0303 	bic.w	r3, r3, #3
 80078b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a21      	ldr	r2, [pc, #132]	; (800795c <TIM_OC3_SetConfig+0xe0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d003      	beq.n	80078e2 <TIM_OC3_SetConfig+0x66>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a20      	ldr	r2, [pc, #128]	; (8007960 <TIM_OC3_SetConfig+0xe4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d10d      	bne.n	80078fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a16      	ldr	r2, [pc, #88]	; (800795c <TIM_OC3_SetConfig+0xe0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d003      	beq.n	800790e <TIM_OC3_SetConfig+0x92>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a15      	ldr	r2, [pc, #84]	; (8007960 <TIM_OC3_SetConfig+0xe4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d113      	bne.n	8007936 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800791c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	621a      	str	r2, [r3, #32]
}
 8007950:	bf00      	nop
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	40010000 	.word	0x40010000
 8007960:	40010400 	.word	0x40010400

08007964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800799a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	031b      	lsls	r3, r3, #12
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a12      	ldr	r2, [pc, #72]	; (8007a08 <TIM_OC4_SetConfig+0xa4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_OC4_SetConfig+0x68>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a11      	ldr	r2, [pc, #68]	; (8007a0c <TIM_OC4_SetConfig+0xa8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d109      	bne.n	80079e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	019b      	lsls	r3, r3, #6
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40010000 	.word	0x40010000
 8007a0c:	40010400 	.word	0x40010400

08007a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0201 	bic.w	r2, r3, #1
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 030a 	bic.w	r3, r3, #10
 8007a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	621a      	str	r2, [r3, #32]
}
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b087      	sub	sp, #28
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f023 0210 	bic.w	r2, r3, #16
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	031b      	lsls	r3, r3, #12
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	621a      	str	r2, [r3, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f043 0307 	orr.w	r3, r3, #7
 8007af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	609a      	str	r2, [r3, #8]
}
 8007af8:	bf00      	nop
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	021a      	lsls	r2, r3, #8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	609a      	str	r2, [r3, #8]
}
 8007b38:	bf00      	nop
 8007b3a:	371c      	adds	r7, #28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f003 031f 	and.w	r3, r3, #31
 8007b56:	2201      	movs	r2, #1
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1a      	ldr	r2, [r3, #32]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	43db      	mvns	r3, r3
 8007b66:	401a      	ands	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a1a      	ldr	r2, [r3, #32]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	621a      	str	r2, [r3, #32]
}
 8007b82:	bf00      	nop
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
	...

08007b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e05a      	b.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d022      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf4:	d01d      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a1d      	ldr	r2, [pc, #116]	; (8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d018      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a1b      	ldr	r2, [pc, #108]	; (8007c74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d013      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a1a      	ldr	r2, [pc, #104]	; (8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00e      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a18      	ldr	r2, [pc, #96]	; (8007c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d009      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a17      	ldr	r2, [pc, #92]	; (8007c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d004      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d10c      	bne.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	40010000 	.word	0x40010000
 8007c70:	40000400 	.word	0x40000400
 8007c74:	40000800 	.word	0x40000800
 8007c78:	40000c00 	.word	0x40000c00
 8007c7c:	40010400 	.word	0x40010400
 8007c80:	40014000 	.word	0x40014000
 8007c84:	40001800 	.word	0x40001800

08007c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e03f      	b.n	8007d42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d106      	bne.n	8007cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fc ff06 	bl	8004ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2224      	movs	r2, #36	; 0x24
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fd13 	bl	8008720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695a      	ldr	r2, [r3, #20]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b08a      	sub	sp, #40	; 0x28
 8007d4e:	af02      	add	r7, sp, #8
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	603b      	str	r3, [r7, #0]
 8007d56:	4613      	mov	r3, r2
 8007d58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d17c      	bne.n	8007e64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <HAL_UART_Transmit+0x2c>
 8007d70:	88fb      	ldrh	r3, [r7, #6]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e075      	b.n	8007e66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_UART_Transmit+0x3e>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e06e      	b.n	8007e66 <HAL_UART_Transmit+0x11c>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2221      	movs	r2, #33	; 0x21
 8007d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d9e:	f7fd f9ed 	bl	800517c <HAL_GetTick>
 8007da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	88fa      	ldrh	r2, [r7, #6]
 8007da8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	88fa      	ldrh	r2, [r7, #6]
 8007dae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d108      	bne.n	8007dcc <HAL_UART_Transmit+0x82>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d104      	bne.n	8007dcc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	61bb      	str	r3, [r7, #24]
 8007dca:	e003      	b.n	8007dd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ddc:	e02a      	b.n	8007e34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2200      	movs	r2, #0
 8007de6:	2180      	movs	r1, #128	; 0x80
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 fad5 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e036      	b.n	8007e66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	3302      	adds	r3, #2
 8007e12:	61bb      	str	r3, [r7, #24]
 8007e14:	e007      	b.n	8007e26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	781a      	ldrb	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	3301      	adds	r3, #1
 8007e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1cf      	bne.n	8007dde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2200      	movs	r2, #0
 8007e46:	2140      	movs	r1, #64	; 0x40
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 faa5 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e006      	b.n	8007e66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	e000      	b.n	8007e66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
  }
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b08a      	sub	sp, #40	; 0x28
 8007e72:	af02      	add	r7, sp, #8
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	603b      	str	r3, [r7, #0]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	f040 808c 	bne.w	8007fa8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <HAL_UART_Receive+0x2e>
 8007e96:	88fb      	ldrh	r3, [r7, #6]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e084      	b.n	8007faa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_UART_Receive+0x40>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e07d      	b.n	8007faa <HAL_UART_Receive+0x13c>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2222      	movs	r2, #34	; 0x22
 8007ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eca:	f7fd f957 	bl	800517c <HAL_GetTick>
 8007ece:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	88fa      	ldrh	r2, [r7, #6]
 8007ed4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	88fa      	ldrh	r2, [r7, #6]
 8007eda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee4:	d108      	bne.n	8007ef8 <HAL_UART_Receive+0x8a>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	e003      	b.n	8007f00 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007f08:	e043      	b.n	8007f92 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2120      	movs	r1, #32
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fa3f 	bl	8008398 <UART_WaitOnFlagUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e042      	b.n	8007faa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10c      	bne.n	8007f44 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	3302      	adds	r3, #2
 8007f40:	61bb      	str	r3, [r7, #24]
 8007f42:	e01f      	b.n	8007f84 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4c:	d007      	beq.n	8007f5e <HAL_UART_Receive+0xf0>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10a      	bne.n	8007f6c <HAL_UART_Receive+0xfe>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e008      	b.n	8007f7e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	3301      	adds	r3, #1
 8007f82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1b6      	bne.n	8007f0a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	e000      	b.n	8007faa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007fa8:	2302      	movs	r3, #2
  }
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d11d      	bne.n	8008008 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <HAL_UART_Receive_IT+0x26>
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e016      	b.n	800800a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_UART_Receive_IT+0x38>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e00f      	b.n	800800a <HAL_UART_Receive_IT+0x58>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007ff8:	88fb      	ldrh	r3, [r7, #6]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 fa14 	bl	800842c <UART_Start_Receive_IT>
 8008004:	4603      	mov	r3, r0
 8008006:	e000      	b.n	800800a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008008:	2302      	movs	r3, #2
  }
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08a      	sub	sp, #40	; 0x28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008034:	2300      	movs	r3, #0
 8008036:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10d      	bne.n	8008066 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	f003 0320 	and.w	r3, r3, #32
 8008050:	2b00      	cmp	r3, #0
 8008052:	d008      	beq.n	8008066 <HAL_UART_IRQHandler+0x52>
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fac7 	bl	80085f2 <UART_Receive_IT>
      return;
 8008064:	e17c      	b.n	8008360 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80b1 	beq.w	80081d0 <HAL_UART_IRQHandler+0x1bc>
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d105      	bne.n	8008084 <HAL_UART_IRQHandler+0x70>
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80a6 	beq.w	80081d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <HAL_UART_IRQHandler+0x90>
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	f043 0201 	orr.w	r2, r3, #1
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <HAL_UART_IRQHandler+0xb0>
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080bc:	f043 0202 	orr.w	r2, r3, #2
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_UART_IRQHandler+0xd0>
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	f043 0204 	orr.w	r2, r3, #4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00f      	beq.n	800810e <HAL_UART_IRQHandler+0xfa>
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	f003 0320 	and.w	r3, r3, #32
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <HAL_UART_IRQHandler+0xee>
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d005      	beq.n	800810e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	f043 0208 	orr.w	r2, r3, #8
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 811f 	beq.w	8008356 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <HAL_UART_IRQHandler+0x11e>
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fa60 	bl	80085f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813c:	2b40      	cmp	r3, #64	; 0x40
 800813e:	bf0c      	ite	eq
 8008140:	2301      	moveq	r3, #1
 8008142:	2300      	movne	r3, #0
 8008144:	b2db      	uxtb	r3, r3
 8008146:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <HAL_UART_IRQHandler+0x146>
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d031      	beq.n	80081be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f9a0 	bl	80084a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b40      	cmp	r3, #64	; 0x40
 800816c:	d123      	bne.n	80081b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695a      	ldr	r2, [r3, #20]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800817c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	2b00      	cmp	r3, #0
 8008184:	d013      	beq.n	80081ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	4a77      	ldr	r2, [pc, #476]	; (8008368 <HAL_UART_IRQHandler+0x354>)
 800818c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008192:	4618      	mov	r0, r3
 8008194:	f7fd f950 	bl	8005438 <HAL_DMA_Abort_IT>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d016      	beq.n	80081cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081a8:	4610      	mov	r0, r2
 80081aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ac:	e00e      	b.n	80081cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fa f8da 	bl	8002368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b4:	e00a      	b.n	80081cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7fa f8d6 	bl	8002368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081bc:	e006      	b.n	80081cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fa f8d2 	bl	8002368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80081ca:	e0c4      	b.n	8008356 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	bf00      	nop
    return;
 80081ce:	e0c2      	b.n	8008356 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	f040 80a2 	bne.w	800831e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 809c 	beq.w	800831e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	f003 0310 	and.w	r3, r3, #16
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8096 	beq.w	800831e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b40      	cmp	r3, #64	; 0x40
 8008214:	d14f      	bne.n	80082b6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008220:	8a3b      	ldrh	r3, [r7, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 8099 	beq.w	800835a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800822c:	8a3a      	ldrh	r2, [r7, #16]
 800822e:	429a      	cmp	r2, r3
 8008230:	f080 8093 	bcs.w	800835a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8a3a      	ldrh	r2, [r7, #16]
 8008238:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008244:	d02b      	beq.n	800829e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008254:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695a      	ldr	r2, [r3, #20]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0201 	bic.w	r2, r2, #1
 8008264:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695a      	ldr	r2, [r3, #20]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008274:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0210 	bic.w	r2, r2, #16
 8008292:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008298:	4618      	mov	r0, r3
 800829a:	f7fd f85d 	bl	8005358 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f866 	bl	8008380 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80082b4:	e051      	b.n	800835a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082be:	b29b      	uxth	r3, r3
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d047      	beq.n	800835e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80082ce:	8a7b      	ldrh	r3, [r7, #18]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d044      	beq.n	800835e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082e2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695a      	ldr	r2, [r3, #20]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0210 	bic.w	r2, r2, #16
 8008310:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008312:	8a7b      	ldrh	r3, [r7, #18]
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f832 	bl	8008380 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800831c:	e01f      	b.n	800835e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008324:	2b00      	cmp	r3, #0
 8008326:	d008      	beq.n	800833a <HAL_UART_IRQHandler+0x326>
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f8f5 	bl	8008522 <UART_Transmit_IT>
    return;
 8008338:	e012      	b.n	8008360 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00d      	beq.n	8008360 <HAL_UART_IRQHandler+0x34c>
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d008      	beq.n	8008360 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f937 	bl	80085c2 <UART_EndTransmit_IT>
    return;
 8008354:	e004      	b.n	8008360 <HAL_UART_IRQHandler+0x34c>
    return;
 8008356:	bf00      	nop
 8008358:	e002      	b.n	8008360 <HAL_UART_IRQHandler+0x34c>
      return;
 800835a:	bf00      	nop
 800835c:	e000      	b.n	8008360 <HAL_UART_IRQHandler+0x34c>
      return;
 800835e:	bf00      	nop
  }
}
 8008360:	3728      	adds	r7, #40	; 0x28
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	080084fb 	.word	0x080084fb

0800836c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4613      	mov	r3, r2
 80083a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a8:	e02c      	b.n	8008404 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b0:	d028      	beq.n	8008404 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80083b8:	f7fc fee0 	bl	800517c <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d21d      	bcs.n	8008404 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80083d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	695a      	ldr	r2, [r3, #20]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0201 	bic.w	r2, r2, #1
 80083e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e00f      	b.n	8008424 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4013      	ands	r3, r2
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	429a      	cmp	r2, r3
 8008412:	bf0c      	ite	eq
 8008414:	2301      	moveq	r3, #1
 8008416:	2300      	movne	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	429a      	cmp	r2, r3
 8008420:	d0c3      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	88fa      	ldrh	r2, [r7, #6]
 8008444:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	88fa      	ldrh	r2, [r7, #6]
 800844a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2222      	movs	r2, #34	; 0x22
 8008456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008470:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	695a      	ldr	r2, [r3, #20]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 0201 	orr.w	r2, r2, #1
 8008480:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0220 	orr.w	r2, r2, #32
 8008490:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695a      	ldr	r2, [r3, #20]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0201 	bic.w	r2, r2, #1
 80084c6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d107      	bne.n	80084e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0210 	bic.w	r2, r2, #16
 80084de:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7f9 ff27 	bl	8002368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800851a:	bf00      	nop
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b21      	cmp	r3, #33	; 0x21
 8008534:	d13e      	bne.n	80085b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853e:	d114      	bne.n	800856a <UART_Transmit_IT+0x48>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d110      	bne.n	800856a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800855c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	1c9a      	adds	r2, r3, #2
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	621a      	str	r2, [r3, #32]
 8008568:	e008      	b.n	800857c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	1c59      	adds	r1, r3, #1
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6211      	str	r1, [r2, #32]
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29b      	uxth	r3, r3
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4619      	mov	r1, r3
 800858a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10f      	bne.n	80085b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800859e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2220      	movs	r2, #32
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff fec2 	bl	800836c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b22      	cmp	r3, #34	; 0x22
 8008604:	f040 8087 	bne.w	8008716 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008610:	d117      	bne.n	8008642 <UART_Receive_IT+0x50>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d113      	bne.n	8008642 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	b29a      	uxth	r2, r3
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	1c9a      	adds	r2, r3, #2
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	629a      	str	r2, [r3, #40]	; 0x28
 8008640:	e026      	b.n	8008690 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008654:	d007      	beq.n	8008666 <UART_Receive_IT+0x74>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <UART_Receive_IT+0x82>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	e008      	b.n	8008686 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008680:	b2da      	uxtb	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29b      	uxth	r3, r3
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	4619      	mov	r1, r3
 800869e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d136      	bne.n	8008712 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0220 	bic.w	r2, r2, #32
 80086b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695a      	ldr	r2, [r3, #20]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0201 	bic.w	r2, r2, #1
 80086d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d10e      	bne.n	8008702 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0210 	bic.w	r2, r2, #16
 80086f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fe40 	bl	8008380 <HAL_UARTEx_RxEventCallback>
 8008700:	e002      	b.n	8008708 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7f9 fd28 	bl	8002158 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	e002      	b.n	8008718 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	e000      	b.n	8008718 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008716:	2302      	movs	r3, #2
  }
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	b09f      	sub	sp, #124	; 0x7c
 8008726:	af00      	add	r7, sp, #0
 8008728:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800872a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008736:	68d9      	ldr	r1, [r3, #12]
 8008738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	ea40 0301 	orr.w	r3, r0, r1
 8008740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008744:	689a      	ldr	r2, [r3, #8]
 8008746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	431a      	orrs	r2, r3
 800874c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	431a      	orrs	r2, r3
 8008752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	4313      	orrs	r3, r2
 8008758:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800875a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008764:	f021 010c 	bic.w	r1, r1, #12
 8008768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800876e:	430b      	orrs	r3, r1
 8008770:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800877c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877e:	6999      	ldr	r1, [r3, #24]
 8008780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	ea40 0301 	orr.w	r3, r0, r1
 8008788:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4bc5      	ldr	r3, [pc, #788]	; (8008aa4 <UART_SetConfig+0x384>)
 8008790:	429a      	cmp	r2, r3
 8008792:	d004      	beq.n	800879e <UART_SetConfig+0x7e>
 8008794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	4bc3      	ldr	r3, [pc, #780]	; (8008aa8 <UART_SetConfig+0x388>)
 800879a:	429a      	cmp	r2, r3
 800879c:	d103      	bne.n	80087a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800879e:	f7fd fca9 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
 80087a2:	6778      	str	r0, [r7, #116]	; 0x74
 80087a4:	e002      	b.n	80087ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087a6:	f7fd fc91 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 80087aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b4:	f040 80b6 	bne.w	8008924 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ba:	461c      	mov	r4, r3
 80087bc:	f04f 0500 	mov.w	r5, #0
 80087c0:	4622      	mov	r2, r4
 80087c2:	462b      	mov	r3, r5
 80087c4:	1891      	adds	r1, r2, r2
 80087c6:	6439      	str	r1, [r7, #64]	; 0x40
 80087c8:	415b      	adcs	r3, r3
 80087ca:	647b      	str	r3, [r7, #68]	; 0x44
 80087cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087d0:	1912      	adds	r2, r2, r4
 80087d2:	eb45 0303 	adc.w	r3, r5, r3
 80087d6:	f04f 0000 	mov.w	r0, #0
 80087da:	f04f 0100 	mov.w	r1, #0
 80087de:	00d9      	lsls	r1, r3, #3
 80087e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087e4:	00d0      	lsls	r0, r2, #3
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	1911      	adds	r1, r2, r4
 80087ec:	6639      	str	r1, [r7, #96]	; 0x60
 80087ee:	416b      	adcs	r3, r5
 80087f0:	667b      	str	r3, [r7, #100]	; 0x64
 80087f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f04f 0300 	mov.w	r3, #0
 80087fc:	1891      	adds	r1, r2, r2
 80087fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008800:	415b      	adcs	r3, r3
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008808:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800880c:	f7f8 f976 	bl	8000afc <__aeabi_uldivmod>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4ba5      	ldr	r3, [pc, #660]	; (8008aac <UART_SetConfig+0x38c>)
 8008816:	fba3 2302 	umull	r2, r3, r3, r2
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	011e      	lsls	r6, r3, #4
 800881e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008820:	461c      	mov	r4, r3
 8008822:	f04f 0500 	mov.w	r5, #0
 8008826:	4622      	mov	r2, r4
 8008828:	462b      	mov	r3, r5
 800882a:	1891      	adds	r1, r2, r2
 800882c:	6339      	str	r1, [r7, #48]	; 0x30
 800882e:	415b      	adcs	r3, r3
 8008830:	637b      	str	r3, [r7, #52]	; 0x34
 8008832:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008836:	1912      	adds	r2, r2, r4
 8008838:	eb45 0303 	adc.w	r3, r5, r3
 800883c:	f04f 0000 	mov.w	r0, #0
 8008840:	f04f 0100 	mov.w	r1, #0
 8008844:	00d9      	lsls	r1, r3, #3
 8008846:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800884a:	00d0      	lsls	r0, r2, #3
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	1911      	adds	r1, r2, r4
 8008852:	65b9      	str	r1, [r7, #88]	; 0x58
 8008854:	416b      	adcs	r3, r5
 8008856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	461a      	mov	r2, r3
 800885e:	f04f 0300 	mov.w	r3, #0
 8008862:	1891      	adds	r1, r2, r2
 8008864:	62b9      	str	r1, [r7, #40]	; 0x28
 8008866:	415b      	adcs	r3, r3
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800886a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800886e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008872:	f7f8 f943 	bl	8000afc <__aeabi_uldivmod>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4b8c      	ldr	r3, [pc, #560]	; (8008aac <UART_SetConfig+0x38c>)
 800887c:	fba3 1302 	umull	r1, r3, r3, r2
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	2164      	movs	r1, #100	; 0x64
 8008884:	fb01 f303 	mul.w	r3, r1, r3
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	3332      	adds	r3, #50	; 0x32
 800888e:	4a87      	ldr	r2, [pc, #540]	; (8008aac <UART_SetConfig+0x38c>)
 8008890:	fba2 2303 	umull	r2, r3, r2, r3
 8008894:	095b      	lsrs	r3, r3, #5
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800889c:	441e      	add	r6, r3
 800889e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088a0:	4618      	mov	r0, r3
 80088a2:	f04f 0100 	mov.w	r1, #0
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	1894      	adds	r4, r2, r2
 80088ac:	623c      	str	r4, [r7, #32]
 80088ae:	415b      	adcs	r3, r3
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
 80088b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088b6:	1812      	adds	r2, r2, r0
 80088b8:	eb41 0303 	adc.w	r3, r1, r3
 80088bc:	f04f 0400 	mov.w	r4, #0
 80088c0:	f04f 0500 	mov.w	r5, #0
 80088c4:	00dd      	lsls	r5, r3, #3
 80088c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80088ca:	00d4      	lsls	r4, r2, #3
 80088cc:	4622      	mov	r2, r4
 80088ce:	462b      	mov	r3, r5
 80088d0:	1814      	adds	r4, r2, r0
 80088d2:	653c      	str	r4, [r7, #80]	; 0x50
 80088d4:	414b      	adcs	r3, r1
 80088d6:	657b      	str	r3, [r7, #84]	; 0x54
 80088d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	461a      	mov	r2, r3
 80088de:	f04f 0300 	mov.w	r3, #0
 80088e2:	1891      	adds	r1, r2, r2
 80088e4:	61b9      	str	r1, [r7, #24]
 80088e6:	415b      	adcs	r3, r3
 80088e8:	61fb      	str	r3, [r7, #28]
 80088ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80088f2:	f7f8 f903 	bl	8000afc <__aeabi_uldivmod>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4b6c      	ldr	r3, [pc, #432]	; (8008aac <UART_SetConfig+0x38c>)
 80088fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	2164      	movs	r1, #100	; 0x64
 8008904:	fb01 f303 	mul.w	r3, r1, r3
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	3332      	adds	r3, #50	; 0x32
 800890e:	4a67      	ldr	r2, [pc, #412]	; (8008aac <UART_SetConfig+0x38c>)
 8008910:	fba2 2303 	umull	r2, r3, r2, r3
 8008914:	095b      	lsrs	r3, r3, #5
 8008916:	f003 0207 	and.w	r2, r3, #7
 800891a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4432      	add	r2, r6
 8008920:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008922:	e0b9      	b.n	8008a98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008926:	461c      	mov	r4, r3
 8008928:	f04f 0500 	mov.w	r5, #0
 800892c:	4622      	mov	r2, r4
 800892e:	462b      	mov	r3, r5
 8008930:	1891      	adds	r1, r2, r2
 8008932:	6139      	str	r1, [r7, #16]
 8008934:	415b      	adcs	r3, r3
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800893c:	1912      	adds	r2, r2, r4
 800893e:	eb45 0303 	adc.w	r3, r5, r3
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f04f 0100 	mov.w	r1, #0
 800894a:	00d9      	lsls	r1, r3, #3
 800894c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008950:	00d0      	lsls	r0, r2, #3
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	eb12 0804 	adds.w	r8, r2, r4
 800895a:	eb43 0905 	adc.w	r9, r3, r5
 800895e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	4618      	mov	r0, r3
 8008964:	f04f 0100 	mov.w	r1, #0
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	f04f 0300 	mov.w	r3, #0
 8008970:	008b      	lsls	r3, r1, #2
 8008972:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008976:	0082      	lsls	r2, r0, #2
 8008978:	4640      	mov	r0, r8
 800897a:	4649      	mov	r1, r9
 800897c:	f7f8 f8be 	bl	8000afc <__aeabi_uldivmod>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4b49      	ldr	r3, [pc, #292]	; (8008aac <UART_SetConfig+0x38c>)
 8008986:	fba3 2302 	umull	r2, r3, r3, r2
 800898a:	095b      	lsrs	r3, r3, #5
 800898c:	011e      	lsls	r6, r3, #4
 800898e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008990:	4618      	mov	r0, r3
 8008992:	f04f 0100 	mov.w	r1, #0
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	1894      	adds	r4, r2, r2
 800899c:	60bc      	str	r4, [r7, #8]
 800899e:	415b      	adcs	r3, r3
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089a6:	1812      	adds	r2, r2, r0
 80089a8:	eb41 0303 	adc.w	r3, r1, r3
 80089ac:	f04f 0400 	mov.w	r4, #0
 80089b0:	f04f 0500 	mov.w	r5, #0
 80089b4:	00dd      	lsls	r5, r3, #3
 80089b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089ba:	00d4      	lsls	r4, r2, #3
 80089bc:	4622      	mov	r2, r4
 80089be:	462b      	mov	r3, r5
 80089c0:	1814      	adds	r4, r2, r0
 80089c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80089c4:	414b      	adcs	r3, r1
 80089c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f04f 0100 	mov.w	r1, #0
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	f04f 0300 	mov.w	r3, #0
 80089da:	008b      	lsls	r3, r1, #2
 80089dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089e0:	0082      	lsls	r2, r0, #2
 80089e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089e6:	f7f8 f889 	bl	8000afc <__aeabi_uldivmod>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4b2f      	ldr	r3, [pc, #188]	; (8008aac <UART_SetConfig+0x38c>)
 80089f0:	fba3 1302 	umull	r1, r3, r3, r2
 80089f4:	095b      	lsrs	r3, r3, #5
 80089f6:	2164      	movs	r1, #100	; 0x64
 80089f8:	fb01 f303 	mul.w	r3, r1, r3
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	011b      	lsls	r3, r3, #4
 8008a00:	3332      	adds	r3, #50	; 0x32
 8008a02:	4a2a      	ldr	r2, [pc, #168]	; (8008aac <UART_SetConfig+0x38c>)
 8008a04:	fba2 2303 	umull	r2, r3, r2, r3
 8008a08:	095b      	lsrs	r3, r3, #5
 8008a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a0e:	441e      	add	r6, r3
 8008a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a12:	4618      	mov	r0, r3
 8008a14:	f04f 0100 	mov.w	r1, #0
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	1894      	adds	r4, r2, r2
 8008a1e:	603c      	str	r4, [r7, #0]
 8008a20:	415b      	adcs	r3, r3
 8008a22:	607b      	str	r3, [r7, #4]
 8008a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a28:	1812      	adds	r2, r2, r0
 8008a2a:	eb41 0303 	adc.w	r3, r1, r3
 8008a2e:	f04f 0400 	mov.w	r4, #0
 8008a32:	f04f 0500 	mov.w	r5, #0
 8008a36:	00dd      	lsls	r5, r3, #3
 8008a38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a3c:	00d4      	lsls	r4, r2, #3
 8008a3e:	4622      	mov	r2, r4
 8008a40:	462b      	mov	r3, r5
 8008a42:	eb12 0a00 	adds.w	sl, r2, r0
 8008a46:	eb43 0b01 	adc.w	fp, r3, r1
 8008a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f04f 0100 	mov.w	r1, #0
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	f04f 0300 	mov.w	r3, #0
 8008a5c:	008b      	lsls	r3, r1, #2
 8008a5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a62:	0082      	lsls	r2, r0, #2
 8008a64:	4650      	mov	r0, sl
 8008a66:	4659      	mov	r1, fp
 8008a68:	f7f8 f848 	bl	8000afc <__aeabi_uldivmod>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <UART_SetConfig+0x38c>)
 8008a72:	fba3 1302 	umull	r1, r3, r3, r2
 8008a76:	095b      	lsrs	r3, r3, #5
 8008a78:	2164      	movs	r1, #100	; 0x64
 8008a7a:	fb01 f303 	mul.w	r3, r1, r3
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	3332      	adds	r3, #50	; 0x32
 8008a84:	4a09      	ldr	r2, [pc, #36]	; (8008aac <UART_SetConfig+0x38c>)
 8008a86:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8a:	095b      	lsrs	r3, r3, #5
 8008a8c:	f003 020f 	and.w	r2, r3, #15
 8008a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4432      	add	r2, r6
 8008a96:	609a      	str	r2, [r3, #8]
}
 8008a98:	bf00      	nop
 8008a9a:	377c      	adds	r7, #124	; 0x7c
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40011000 	.word	0x40011000
 8008aa8:	40011400 	.word	0x40011400
 8008aac:	51eb851f 	.word	0x51eb851f

08008ab0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ac2:	2b84      	cmp	r3, #132	; 0x84
 8008ac4:	d005      	beq.n	8008ad2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008ac6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4413      	add	r3, r2
 8008ace:	3303      	adds	r3, #3
 8008ad0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ae6:	f3ef 8305 	mrs	r3, IPSR
 8008aea:	607b      	str	r3, [r7, #4]
  return(result);
 8008aec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bf14      	ite	ne
 8008af2:	2301      	movne	r3, #1
 8008af4:	2300      	moveq	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008b08:	f001 fa8e 	bl	800a028 <vTaskStartScheduler>
  
  return osOK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008b16:	f7ff ffe3 	bl	8008ae0 <inHandlerMode>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008b20:	f001 fb9c 	bl	800a25c <xTaskGetTickCountFromISR>
 8008b24:	4603      	mov	r3, r0
 8008b26:	e002      	b.n	8008b2e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008b28:	f001 fb88 	bl	800a23c <xTaskGetTickCount>
 8008b2c:	4603      	mov	r3, r0
  }
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b34:	b089      	sub	sp, #36	; 0x24
 8008b36:	af04      	add	r7, sp, #16
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d020      	beq.n	8008b86 <osThreadCreate+0x54>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01c      	beq.n	8008b86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685c      	ldr	r4, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681d      	ldr	r5, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691e      	ldr	r6, [r3, #16]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7ff ffa6 	bl	8008ab0 <makeFreeRtosPriority>
 8008b64:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b6e:	9202      	str	r2, [sp, #8]
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	9100      	str	r1, [sp, #0]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	4632      	mov	r2, r6
 8008b78:	4629      	mov	r1, r5
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 ff20 	bl	80099c0 <xTaskCreateStatic>
 8008b80:	4603      	mov	r3, r0
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e01c      	b.n	8008bc0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685c      	ldr	r4, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b92:	b29e      	uxth	r6, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff ff88 	bl	8008ab0 <makeFreeRtosPriority>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	f107 030c 	add.w	r3, r7, #12
 8008ba6:	9301      	str	r3, [sp, #4]
 8008ba8:	9200      	str	r2, [sp, #0]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	4632      	mov	r2, r6
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 ff62 	bl	8009a7a <xTaskCreate>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d001      	beq.n	8008bc0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e000      	b.n	8008bc2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bca <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b086      	sub	sp, #24
 8008bce:	af02      	add	r7, sp, #8
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00f      	beq.n	8008bfc <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d10a      	bne.n	8008bf8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2203      	movs	r2, #3
 8008be8:	9200      	str	r2, [sp, #0]
 8008bea:	2200      	movs	r2, #0
 8008bec:	2100      	movs	r1, #0
 8008bee:	2001      	movs	r0, #1
 8008bf0:	f000 f9d4 	bl	8008f9c <xQueueGenericCreateStatic>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	e016      	b.n	8008c26 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e014      	b.n	8008c26 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d110      	bne.n	8008c24 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008c02:	2203      	movs	r2, #3
 8008c04:	2100      	movs	r1, #0
 8008c06:	2001      	movs	r0, #1
 8008c08:	f000 fa40 	bl	800908c <xQueueGenericCreate>
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <osSemaphoreCreate+0x56>
 8008c14:	2300      	movs	r3, #0
 8008c16:	2200      	movs	r2, #0
 8008c18:	2100      	movs	r1, #0
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 fa90 	bl	8009140 <xQueueGenericSend>
      return sema;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	e000      	b.n	8008c26 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008c24:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
	...

08008c30 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008c44:	2380      	movs	r3, #128	; 0x80
 8008c46:	e03a      	b.n	8008cbe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d103      	bne.n	8008c5c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008c54:	f04f 33ff 	mov.w	r3, #4294967295
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	e009      	b.n	8008c70 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d006      	beq.n	8008c70 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <osSemaphoreWait+0x40>
      ticks = 1;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008c70:	f7ff ff36 	bl	8008ae0 <inHandlerMode>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d017      	beq.n	8008caa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2100      	movs	r1, #0
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fcf4 	bl	8009670 <xQueueReceiveFromISR>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d001      	beq.n	8008c92 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008c8e:	23ff      	movs	r3, #255	; 0xff
 8008c90:	e015      	b.n	8008cbe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d011      	beq.n	8008cbc <osSemaphoreWait+0x8c>
 8008c98:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <osSemaphoreWait+0x98>)
 8008c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	e008      	b.n	8008cbc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fbd3 	bl	8009458 <xQueueSemaphoreTake>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d001      	beq.n	8008cbc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008cb8:	23ff      	movs	r3, #255	; 0xff
 8008cba:	e000      	b.n	8008cbe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008cdc:	f7ff ff00 	bl	8008ae0 <inHandlerMode>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d016      	beq.n	8008d14 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008ce6:	f107 0308 	add.w	r3, r7, #8
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fb25 	bl	800933c <xQueueGiveFromISR>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d001      	beq.n	8008cfc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008cf8:	23ff      	movs	r3, #255	; 0xff
 8008cfa:	e017      	b.n	8008d2c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d013      	beq.n	8008d2a <osSemaphoreRelease+0x5e>
 8008d02:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <osSemaphoreRelease+0x68>)
 8008d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	e00a      	b.n	8008d2a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008d14:	2300      	movs	r3, #0
 8008d16:	2200      	movs	r2, #0
 8008d18:	2100      	movs	r1, #0
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa10 	bl	8009140 <xQueueGenericSend>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d001      	beq.n	8008d2a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008d26:	23ff      	movs	r3, #255	; 0xff
 8008d28:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	e000ed04 	.word	0xe000ed04

08008d38 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <osDelayUntil+0x18>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	e000      	b.n	8008d52 <osDelayUntil+0x1a>
 8008d50:	2301      	movs	r3, #1
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 ffc7 	bl	8009ce8 <vTaskDelayUntil>
  
  return osOK;
 8008d5a:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f103 0208 	add.w	r2, r3, #8
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f103 0208 	add.w	r2, r3, #8
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f103 0208 	add.w	r2, r3, #8
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008db2:	bf00      	nop
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	689a      	ldr	r2, [r3, #8]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
}
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e06:	b480      	push	{r7}
 8008e08:	b085      	sub	sp, #20
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d103      	bne.n	8008e26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e00c      	b.n	8008e40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	e002      	b.n	8008e34 <vListInsert+0x2e>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d2f6      	bcs.n	8008e2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	601a      	str	r2, [r3, #0]
}
 8008e6c:	bf00      	nop
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	6892      	ldr	r2, [r2, #8]
 8008e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	6852      	ldr	r2, [r2, #4]
 8008e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d103      	bne.n	8008eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	1e5a      	subs	r2, r3, #1
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10a      	bne.n	8008ef6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ef6:	f002 f805 	bl	800af04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f02:	68f9      	ldr	r1, [r7, #12]
 8008f04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	441a      	add	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f26:	3b01      	subs	r3, #1
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f2c:	fb01 f303 	mul.w	r3, r1, r3
 8008f30:	441a      	add	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	22ff      	movs	r2, #255	; 0xff
 8008f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	22ff      	movs	r2, #255	; 0xff
 8008f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d114      	bne.n	8008f76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01a      	beq.n	8008f8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3310      	adds	r3, #16
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f001 fac9 	bl	800a4f0 <xTaskRemoveFromEventList>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d012      	beq.n	8008f8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f64:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <xQueueGenericReset+0xcc>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	e009      	b.n	8008f8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3310      	adds	r3, #16
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff fef2 	bl	8008d64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3324      	adds	r3, #36	; 0x24
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff feed 	bl	8008d64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f8a:	f001 ffeb 	bl	800af64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f8e:	2301      	movs	r3, #1
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08e      	sub	sp, #56	; 0x38
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fde:	bf00      	nop
 8008fe0:	e7fe      	b.n	8008fe0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <xQueueGenericCreateStatic+0x52>
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <xQueueGenericCreateStatic+0x56>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <xQueueGenericCreateStatic+0x58>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	623b      	str	r3, [r7, #32]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <xQueueGenericCreateStatic+0x7e>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <xQueueGenericCreateStatic+0x82>
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <xQueueGenericCreateStatic+0x84>
 800901e:	2300      	movs	r3, #0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	61fb      	str	r3, [r7, #28]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800903a:	2348      	movs	r3, #72	; 0x48
 800903c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2b48      	cmp	r3, #72	; 0x48
 8009042:	d00a      	beq.n	800905a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	61bb      	str	r3, [r7, #24]
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800905a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00d      	beq.n	8009082 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800906e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	4613      	mov	r3, r2
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	68b9      	ldr	r1, [r7, #8]
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 f83f 	bl	8009100 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009084:	4618      	mov	r0, r3
 8009086:	3730      	adds	r7, #48	; 0x30
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08a      	sub	sp, #40	; 0x28
 8009090:	af02      	add	r7, sp, #8
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	4613      	mov	r3, r2
 8009098:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	613b      	str	r3, [r7, #16]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	3348      	adds	r3, #72	; 0x48
 80090c4:	4618      	mov	r0, r3
 80090c6:	f002 f83f 	bl	800b148 <pvPortMalloc>
 80090ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d011      	beq.n	80090f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	3348      	adds	r3, #72	; 0x48
 80090da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090e4:	79fa      	ldrb	r2, [r7, #7]
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	4613      	mov	r3, r2
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	68b9      	ldr	r1, [r7, #8]
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 f805 	bl	8009100 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090f6:	69bb      	ldr	r3, [r7, #24]
	}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d103      	bne.n	800911c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	e002      	b.n	8009122 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800912e:	2101      	movs	r1, #1
 8009130:	69b8      	ldr	r0, [r7, #24]
 8009132:	f7ff fecb 	bl	8008ecc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08e      	sub	sp, #56	; 0x38
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800914e:	2300      	movs	r3, #0
 8009150:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <xQueueGenericSend+0x32>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <xQueueGenericSend+0x40>
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <xQueueGenericSend+0x44>
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <xQueueGenericSend+0x46>
 8009184:	2300      	movs	r3, #0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <xQueueGenericSend+0x60>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800919c:	bf00      	nop
 800919e:	e7fe      	b.n	800919e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d103      	bne.n	80091ae <xQueueGenericSend+0x6e>
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d101      	bne.n	80091b2 <xQueueGenericSend+0x72>
 80091ae:	2301      	movs	r3, #1
 80091b0:	e000      	b.n	80091b4 <xQueueGenericSend+0x74>
 80091b2:	2300      	movs	r3, #0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10a      	bne.n	80091ce <xQueueGenericSend+0x8e>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	623b      	str	r3, [r7, #32]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091ce:	f001 fb4b 	bl	800a868 <xTaskGetSchedulerState>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d102      	bne.n	80091de <xQueueGenericSend+0x9e>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <xQueueGenericSend+0xa2>
 80091de:	2301      	movs	r3, #1
 80091e0:	e000      	b.n	80091e4 <xQueueGenericSend+0xa4>
 80091e2:	2300      	movs	r3, #0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <xQueueGenericSend+0xbe>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	61fb      	str	r3, [r7, #28]
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091fe:	f001 fe81 	bl	800af04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920a:	429a      	cmp	r2, r3
 800920c:	d302      	bcc.n	8009214 <xQueueGenericSend+0xd4>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d129      	bne.n	8009268 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800921a:	f000 fac1 	bl	80097a0 <prvCopyDataToQueue>
 800921e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	2b00      	cmp	r3, #0
 8009226:	d010      	beq.n	800924a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	3324      	adds	r3, #36	; 0x24
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f95f 	bl	800a4f0 <xTaskRemoveFromEventList>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d013      	beq.n	8009260 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009238:	4b3f      	ldr	r3, [pc, #252]	; (8009338 <xQueueGenericSend+0x1f8>)
 800923a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	e00a      	b.n	8009260 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d007      	beq.n	8009260 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009250:	4b39      	ldr	r3, [pc, #228]	; (8009338 <xQueueGenericSend+0x1f8>)
 8009252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009260:	f001 fe80 	bl	800af64 <vPortExitCritical>
				return pdPASS;
 8009264:	2301      	movs	r3, #1
 8009266:	e063      	b.n	8009330 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d103      	bne.n	8009276 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800926e:	f001 fe79 	bl	800af64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009272:	2300      	movs	r3, #0
 8009274:	e05c      	b.n	8009330 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800927c:	f107 0314 	add.w	r3, r7, #20
 8009280:	4618      	mov	r0, r3
 8009282:	f001 f997 	bl	800a5b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009286:	2301      	movs	r3, #1
 8009288:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800928a:	f001 fe6b 	bl	800af64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800928e:	f000 ff2b 	bl	800a0e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009292:	f001 fe37 	bl	800af04 <vPortEnterCritical>
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800929c:	b25b      	sxtb	r3, r3
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a2:	d103      	bne.n	80092ac <xQueueGenericSend+0x16c>
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092b2:	b25b      	sxtb	r3, r3
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d103      	bne.n	80092c2 <xQueueGenericSend+0x182>
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092c2:	f001 fe4f 	bl	800af64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092c6:	1d3a      	adds	r2, r7, #4
 80092c8:	f107 0314 	add.w	r3, r7, #20
 80092cc:	4611      	mov	r1, r2
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 f986 	bl	800a5e0 <xTaskCheckForTimeOut>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d124      	bne.n	8009324 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80092da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092dc:	f000 fb58 	bl	8009990 <prvIsQueueFull>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d018      	beq.n	8009318 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	3310      	adds	r3, #16
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	4611      	mov	r1, r2
 80092ee:	4618      	mov	r0, r3
 80092f0:	f001 f8da 	bl	800a4a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80092f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092f6:	f000 fae3 	bl	80098c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80092fa:	f000 ff03 	bl	800a104 <xTaskResumeAll>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	f47f af7c 	bne.w	80091fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009306:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <xQueueGenericSend+0x1f8>)
 8009308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	e772      	b.n	80091fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800931a:	f000 fad1 	bl	80098c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800931e:	f000 fef1 	bl	800a104 <xTaskResumeAll>
 8009322:	e76c      	b.n	80091fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009326:	f000 facb 	bl	80098c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800932a:	f000 feeb 	bl	800a104 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800932e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009330:	4618      	mov	r0, r3
 8009332:	3738      	adds	r7, #56	; 0x38
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08e      	sub	sp, #56	; 0x38
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	623b      	str	r3, [r7, #32]
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <xQueueGiveFromISR+0x48>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	61fb      	str	r3, [r7, #28]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <xQueueGiveFromISR+0x58>
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <xQueueGiveFromISR+0x5c>
 8009394:	2301      	movs	r3, #1
 8009396:	e000      	b.n	800939a <xQueueGiveFromISR+0x5e>
 8009398:	2300      	movs	r3, #0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	61bb      	str	r3, [r7, #24]
}
 80093b0:	bf00      	nop
 80093b2:	e7fe      	b.n	80093b2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093b4:	f001 fe88 	bl	800b0c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80093b8:	f3ef 8211 	mrs	r2, BASEPRI
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	617a      	str	r2, [r7, #20]
 80093ce:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80093d0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80093da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d22b      	bcs.n	800943c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fe:	d112      	bne.n	8009426 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	2b00      	cmp	r3, #0
 8009406:	d016      	beq.n	8009436 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	3324      	adds	r3, #36	; 0x24
 800940c:	4618      	mov	r0, r3
 800940e:	f001 f86f 	bl	800a4f0 <xTaskRemoveFromEventList>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00e      	beq.n	8009436 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00b      	beq.n	8009436 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2201      	movs	r2, #1
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	e007      	b.n	8009436 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800942a:	3301      	adds	r3, #1
 800942c:	b2db      	uxtb	r3, r3
 800942e:	b25a      	sxtb	r2, r3
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009436:	2301      	movs	r3, #1
 8009438:	637b      	str	r3, [r7, #52]	; 0x34
 800943a:	e001      	b.n	8009440 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800943c:	2300      	movs	r3, #0
 800943e:	637b      	str	r3, [r7, #52]	; 0x34
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800944a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800944e:	4618      	mov	r0, r3
 8009450:	3738      	adds	r7, #56	; 0x38
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08e      	sub	sp, #56	; 0x38
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009462:	2300      	movs	r3, #0
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800946a:	2300      	movs	r3, #0
 800946c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	623b      	str	r3, [r7, #32]
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	61fb      	str	r3, [r7, #28]
}
 80094a4:	bf00      	nop
 80094a6:	e7fe      	b.n	80094a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094a8:	f001 f9de 	bl	800a868 <xTaskGetSchedulerState>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d102      	bne.n	80094b8 <xQueueSemaphoreTake+0x60>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <xQueueSemaphoreTake+0x64>
 80094b8:	2301      	movs	r3, #1
 80094ba:	e000      	b.n	80094be <xQueueSemaphoreTake+0x66>
 80094bc:	2300      	movs	r3, #0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10a      	bne.n	80094d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	61bb      	str	r3, [r7, #24]
}
 80094d4:	bf00      	nop
 80094d6:	e7fe      	b.n	80094d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094d8:	f001 fd14 	bl	800af04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d024      	beq.n	8009532 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	1e5a      	subs	r2, r3, #1
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d104      	bne.n	8009502 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80094f8:	f001 fb5e 	bl	800abb8 <pvTaskIncrementMutexHeldCount>
 80094fc:	4602      	mov	r2, r0
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009500:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00f      	beq.n	800952a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	3310      	adds	r3, #16
 800950e:	4618      	mov	r0, r3
 8009510:	f000 ffee 	bl	800a4f0 <xTaskRemoveFromEventList>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d007      	beq.n	800952a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800951a:	4b54      	ldr	r3, [pc, #336]	; (800966c <xQueueSemaphoreTake+0x214>)
 800951c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800952a:	f001 fd1b 	bl	800af64 <vPortExitCritical>
				return pdPASS;
 800952e:	2301      	movs	r3, #1
 8009530:	e097      	b.n	8009662 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d111      	bne.n	800955c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	617b      	str	r3, [r7, #20]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009554:	f001 fd06 	bl	800af64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009558:	2300      	movs	r3, #0
 800955a:	e082      	b.n	8009662 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955e:	2b00      	cmp	r3, #0
 8009560:	d106      	bne.n	8009570 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009562:	f107 030c 	add.w	r3, r7, #12
 8009566:	4618      	mov	r0, r3
 8009568:	f001 f824 	bl	800a5b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800956c:	2301      	movs	r3, #1
 800956e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009570:	f001 fcf8 	bl	800af64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009574:	f000 fdb8 	bl	800a0e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009578:	f001 fcc4 	bl	800af04 <vPortEnterCritical>
 800957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009582:	b25b      	sxtb	r3, r3
 8009584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009588:	d103      	bne.n	8009592 <xQueueSemaphoreTake+0x13a>
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009598:	b25b      	sxtb	r3, r3
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959e:	d103      	bne.n	80095a8 <xQueueSemaphoreTake+0x150>
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095a8:	f001 fcdc 	bl	800af64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095ac:	463a      	mov	r2, r7
 80095ae:	f107 030c 	add.w	r3, r7, #12
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 f813 	bl	800a5e0 <xTaskCheckForTimeOut>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d132      	bne.n	8009626 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095c2:	f000 f9cf 	bl	8009964 <prvIsQueueEmpty>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d026      	beq.n	800961a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d109      	bne.n	80095e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80095d4:	f001 fc96 	bl	800af04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	4618      	mov	r0, r3
 80095de:	f001 f961 	bl	800a8a4 <xTaskPriorityInherit>
 80095e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80095e4:	f001 fcbe 	bl	800af64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	3324      	adds	r3, #36	; 0x24
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	4611      	mov	r1, r2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 ff59 	bl	800a4a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095f8:	f000 f962 	bl	80098c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095fc:	f000 fd82 	bl	800a104 <xTaskResumeAll>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	f47f af68 	bne.w	80094d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009608:	4b18      	ldr	r3, [pc, #96]	; (800966c <xQueueSemaphoreTake+0x214>)
 800960a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	e75e      	b.n	80094d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800961a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800961c:	f000 f950 	bl	80098c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009620:	f000 fd70 	bl	800a104 <xTaskResumeAll>
 8009624:	e758      	b.n	80094d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009628:	f000 f94a 	bl	80098c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800962c:	f000 fd6a 	bl	800a104 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009632:	f000 f997 	bl	8009964 <prvIsQueueEmpty>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	f43f af4d 	beq.w	80094d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00d      	beq.n	8009660 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009644:	f001 fc5e 	bl	800af04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800964a:	f000 f891 	bl	8009770 <prvGetDisinheritPriorityAfterTimeout>
 800964e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009656:	4618      	mov	r0, r3
 8009658:	f001 fa20 	bl	800aa9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800965c:	f001 fc82 	bl	800af64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009662:	4618      	mov	r0, r3
 8009664:	3738      	adds	r7, #56	; 0x38
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08e      	sub	sp, #56	; 0x38
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	623b      	str	r3, [r7, #32]
}
 8009698:	bf00      	nop
 800969a:	e7fe      	b.n	800969a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d103      	bne.n	80096aa <xQueueReceiveFromISR+0x3a>
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <xQueueReceiveFromISR+0x3e>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <xQueueReceiveFromISR+0x40>
 80096ae:	2300      	movs	r3, #0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	61fb      	str	r3, [r7, #28]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096ca:	f001 fcfd 	bl	800b0c8 <vPortValidateInterruptPriority>
	__asm volatile
 80096ce:	f3ef 8211 	mrs	r2, BASEPRI
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	61ba      	str	r2, [r7, #24]
 80096e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80096e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d02f      	beq.n	8009756 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009704:	f000 f8b6 	bl	8009874 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	1e5a      	subs	r2, r3, #1
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d112      	bne.n	8009740 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d016      	beq.n	8009750 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	3310      	adds	r3, #16
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fee2 	bl	800a4f0 <xTaskRemoveFromEventList>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00e      	beq.n	8009750 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	e007      	b.n	8009750 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009744:	3301      	adds	r3, #1
 8009746:	b2db      	uxtb	r3, r3
 8009748:	b25a      	sxtb	r2, r3
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009750:	2301      	movs	r3, #1
 8009752:	637b      	str	r3, [r7, #52]	; 0x34
 8009754:	e001      	b.n	800975a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009756:	2300      	movs	r3, #0
 8009758:	637b      	str	r3, [r7, #52]	; 0x34
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f383 8811 	msr	BASEPRI, r3
}
 8009764:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009768:	4618      	mov	r0, r3
 800976a:	3738      	adds	r7, #56	; 0x38
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977c:	2b00      	cmp	r3, #0
 800977e:	d006      	beq.n	800978e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f1c3 0307 	rsb	r3, r3, #7
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	e001      	b.n	8009792 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800978e:	2300      	movs	r3, #0
 8009790:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009792:	68fb      	ldr	r3, [r7, #12]
	}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10d      	bne.n	80097da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d14d      	bne.n	8009862 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f001 f8e0 	bl	800a990 <xTaskPriorityDisinherit>
 80097d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	609a      	str	r2, [r3, #8]
 80097d8:	e043      	b.n	8009862 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d119      	bne.n	8009814 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6858      	ldr	r0, [r3, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e8:	461a      	mov	r2, r3
 80097ea:	68b9      	ldr	r1, [r7, #8]
 80097ec:	f001 fec0 	bl	800b570 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f8:	441a      	add	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	429a      	cmp	r2, r3
 8009808:	d32b      	bcc.n	8009862 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	605a      	str	r2, [r3, #4]
 8009812:	e026      	b.n	8009862 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68d8      	ldr	r0, [r3, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981c:	461a      	mov	r2, r3
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	f001 fea6 	bl	800b570 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68da      	ldr	r2, [r3, #12]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982c:	425b      	negs	r3, r3
 800982e:	441a      	add	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68da      	ldr	r2, [r3, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d207      	bcs.n	8009850 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009848:	425b      	negs	r3, r3
 800984a:	441a      	add	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b02      	cmp	r3, #2
 8009854:	d105      	bne.n	8009862 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	3b01      	subs	r3, #1
 8009860:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800986a:	697b      	ldr	r3, [r7, #20]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009882:	2b00      	cmp	r3, #0
 8009884:	d018      	beq.n	80098b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988e:	441a      	add	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68da      	ldr	r2, [r3, #12]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	429a      	cmp	r2, r3
 800989e:	d303      	bcc.n	80098a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68d9      	ldr	r1, [r3, #12]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b0:	461a      	mov	r2, r3
 80098b2:	6838      	ldr	r0, [r7, #0]
 80098b4:	f001 fe5c 	bl	800b570 <memcpy>
	}
}
 80098b8:	bf00      	nop
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80098c8:	f001 fb1c 	bl	800af04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098d4:	e011      	b.n	80098fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d012      	beq.n	8009904 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3324      	adds	r3, #36	; 0x24
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fe04 	bl	800a4f0 <xTaskRemoveFromEventList>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098ee:	f000 fed9 	bl	800a6a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	dce9      	bgt.n	80098d6 <prvUnlockQueue+0x16>
 8009902:	e000      	b.n	8009906 <prvUnlockQueue+0x46>
					break;
 8009904:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	22ff      	movs	r2, #255	; 0xff
 800990a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800990e:	f001 fb29 	bl	800af64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009912:	f001 faf7 	bl	800af04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800991c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800991e:	e011      	b.n	8009944 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d012      	beq.n	800994e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3310      	adds	r3, #16
 800992c:	4618      	mov	r0, r3
 800992e:	f000 fddf 	bl	800a4f0 <xTaskRemoveFromEventList>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009938:	f000 feb4 	bl	800a6a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	3b01      	subs	r3, #1
 8009940:	b2db      	uxtb	r3, r3
 8009942:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009948:	2b00      	cmp	r3, #0
 800994a:	dce9      	bgt.n	8009920 <prvUnlockQueue+0x60>
 800994c:	e000      	b.n	8009950 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800994e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	22ff      	movs	r2, #255	; 0xff
 8009954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009958:	f001 fb04 	bl	800af64 <vPortExitCritical>
}
 800995c:	bf00      	nop
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800996c:	f001 faca 	bl	800af04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009978:	2301      	movs	r3, #1
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	e001      	b.n	8009982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800997e:	2300      	movs	r3, #0
 8009980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009982:	f001 faef 	bl	800af64 <vPortExitCritical>

	return xReturn;
 8009986:	68fb      	ldr	r3, [r7, #12]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009998:	f001 fab4 	bl	800af04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d102      	bne.n	80099ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80099a8:	2301      	movs	r3, #1
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e001      	b.n	80099b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099b2:	f001 fad7 	bl	800af64 <vPortExitCritical>

	return xReturn;
 80099b6:	68fb      	ldr	r3, [r7, #12]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08e      	sub	sp, #56	; 0x38
 80099c4:	af04      	add	r7, sp, #16
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80099ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	623b      	str	r3, [r7, #32]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80099ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <xTaskCreateStatic+0x46>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	61fb      	str	r3, [r7, #28]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a06:	2354      	movs	r3, #84	; 0x54
 8009a08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2b54      	cmp	r3, #84	; 0x54
 8009a0e:	d00a      	beq.n	8009a26 <xTaskCreateStatic+0x66>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	61bb      	str	r3, [r7, #24]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d01e      	beq.n	8009a6c <xTaskCreateStatic+0xac>
 8009a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d01b      	beq.n	8009a6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	2202      	movs	r2, #2
 8009a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a46:	2300      	movs	r3, #0
 8009a48:	9303      	str	r3, [sp, #12]
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	9302      	str	r3, [sp, #8]
 8009a4e:	f107 0314 	add.w	r3, r7, #20
 8009a52:	9301      	str	r3, [sp, #4]
 8009a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	68b9      	ldr	r1, [r7, #8]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 f850 	bl	8009b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a66:	f000 f8d5 	bl	8009c14 <prvAddNewTaskToReadyList>
 8009a6a:	e001      	b.n	8009a70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a70:	697b      	ldr	r3, [r7, #20]
	}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3728      	adds	r7, #40	; 0x28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b08c      	sub	sp, #48	; 0x30
 8009a7e:	af04      	add	r7, sp, #16
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	603b      	str	r3, [r7, #0]
 8009a86:	4613      	mov	r3, r2
 8009a88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 fb5a 	bl	800b148 <pvPortMalloc>
 8009a94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00e      	beq.n	8009aba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a9c:	2054      	movs	r0, #84	; 0x54
 8009a9e:	f001 fb53 	bl	800b148 <pvPortMalloc>
 8009aa2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30
 8009ab0:	e005      	b.n	8009abe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ab2:	6978      	ldr	r0, [r7, #20]
 8009ab4:	f001 fc14 	bl	800b2e0 <vPortFree>
 8009ab8:	e001      	b.n	8009abe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d017      	beq.n	8009af4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009acc:	88fa      	ldrh	r2, [r7, #6]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	9303      	str	r3, [sp, #12]
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	9302      	str	r3, [sp, #8]
 8009ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	68b9      	ldr	r1, [r7, #8]
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 f80e 	bl	8009b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ae8:	69f8      	ldr	r0, [r7, #28]
 8009aea:	f000 f893 	bl	8009c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009aee:	2301      	movs	r3, #1
 8009af0:	61bb      	str	r3, [r7, #24]
 8009af2:	e002      	b.n	8009afa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009af4:	f04f 33ff 	mov.w	r3, #4294967295
 8009af8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009afa:	69bb      	ldr	r3, [r7, #24]
	}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3720      	adds	r7, #32
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b088      	sub	sp, #32
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	f023 0307 	bic.w	r3, r3, #7
 8009b2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <prvInitialiseNewTask+0x48>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	617b      	str	r3, [r7, #20]
}
 8009b48:	bf00      	nop
 8009b4a:	e7fe      	b.n	8009b4a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01f      	beq.n	8009b92 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b52:	2300      	movs	r3, #0
 8009b54:	61fb      	str	r3, [r7, #28]
 8009b56:	e012      	b.n	8009b7e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	7819      	ldrb	r1, [r3, #0]
 8009b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	4413      	add	r3, r2
 8009b66:	3334      	adds	r3, #52	; 0x34
 8009b68:	460a      	mov	r2, r1
 8009b6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d006      	beq.n	8009b86 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	61fb      	str	r3, [r7, #28]
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	2b0f      	cmp	r3, #15
 8009b82:	d9e9      	bls.n	8009b58 <prvInitialiseNewTask+0x54>
 8009b84:	e000      	b.n	8009b88 <prvInitialiseNewTask+0x84>
			{
				break;
 8009b86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b90:	e003      	b.n	8009b9a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	2b06      	cmp	r3, #6
 8009b9e:	d901      	bls.n	8009ba4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ba0:	2306      	movs	r3, #6
 8009ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	3304      	adds	r3, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff f8f2 	bl	8008da4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	3318      	adds	r3, #24
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7ff f8ed 	bl	8008da4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd2:	f1c3 0207 	rsb	r2, r3, #7
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	2200      	movs	r2, #0
 8009be4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	68f9      	ldr	r1, [r7, #12]
 8009bf2:	69b8      	ldr	r0, [r7, #24]
 8009bf4:	f001 f85a 	bl	800acac <pxPortInitialiseStack>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c0a:	bf00      	nop
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c1c:	f001 f972 	bl	800af04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c20:	4b2a      	ldr	r3, [pc, #168]	; (8009ccc <prvAddNewTaskToReadyList+0xb8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3301      	adds	r3, #1
 8009c26:	4a29      	ldr	r2, [pc, #164]	; (8009ccc <prvAddNewTaskToReadyList+0xb8>)
 8009c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c2a:	4b29      	ldr	r3, [pc, #164]	; (8009cd0 <prvAddNewTaskToReadyList+0xbc>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d109      	bne.n	8009c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c32:	4a27      	ldr	r2, [pc, #156]	; (8009cd0 <prvAddNewTaskToReadyList+0xbc>)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c38:	4b24      	ldr	r3, [pc, #144]	; (8009ccc <prvAddNewTaskToReadyList+0xb8>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d110      	bne.n	8009c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c40:	f000 fd54 	bl	800a6ec <prvInitialiseTaskLists>
 8009c44:	e00d      	b.n	8009c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c46:	4b23      	ldr	r3, [pc, #140]	; (8009cd4 <prvAddNewTaskToReadyList+0xc0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d109      	bne.n	8009c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c4e:	4b20      	ldr	r3, [pc, #128]	; (8009cd0 <prvAddNewTaskToReadyList+0xbc>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d802      	bhi.n	8009c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c5c:	4a1c      	ldr	r2, [pc, #112]	; (8009cd0 <prvAddNewTaskToReadyList+0xbc>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c62:	4b1d      	ldr	r3, [pc, #116]	; (8009cd8 <prvAddNewTaskToReadyList+0xc4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3301      	adds	r3, #1
 8009c68:	4a1b      	ldr	r2, [pc, #108]	; (8009cd8 <prvAddNewTaskToReadyList+0xc4>)
 8009c6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c70:	2201      	movs	r2, #1
 8009c72:	409a      	lsls	r2, r3
 8009c74:	4b19      	ldr	r3, [pc, #100]	; (8009cdc <prvAddNewTaskToReadyList+0xc8>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	4a18      	ldr	r2, [pc, #96]	; (8009cdc <prvAddNewTaskToReadyList+0xc8>)
 8009c7c:	6013      	str	r3, [r2, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4a15      	ldr	r2, [pc, #84]	; (8009ce0 <prvAddNewTaskToReadyList+0xcc>)
 8009c8c:	441a      	add	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3304      	adds	r3, #4
 8009c92:	4619      	mov	r1, r3
 8009c94:	4610      	mov	r0, r2
 8009c96:	f7ff f892 	bl	8008dbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c9a:	f001 f963 	bl	800af64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c9e:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <prvAddNewTaskToReadyList+0xc0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00e      	beq.n	8009cc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ca6:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <prvAddNewTaskToReadyList+0xbc>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d207      	bcs.n	8009cc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009cb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <prvAddNewTaskToReadyList+0xd0>)
 8009cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20000450 	.word	0x20000450
 8009cd0:	20000350 	.word	0x20000350
 8009cd4:	2000045c 	.word	0x2000045c
 8009cd8:	2000046c 	.word	0x2000046c
 8009cdc:	20000458 	.word	0x20000458
 8009ce0:	20000354 	.word	0x20000354
 8009ce4:	e000ed04 	.word	0xe000ed04

08009ce8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08a      	sub	sp, #40	; 0x28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <vTaskDelayUntil+0x2a>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	617b      	str	r3, [r7, #20]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <vTaskDelayUntil+0x46>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	613b      	str	r3, [r7, #16]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009d2e:	4b2a      	ldr	r3, [pc, #168]	; (8009dd8 <vTaskDelayUntil+0xf0>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00a      	beq.n	8009d4c <vTaskDelayUntil+0x64>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	60fb      	str	r3, [r7, #12]
}
 8009d48:	bf00      	nop
 8009d4a:	e7fe      	b.n	8009d4a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009d4c:	f000 f9cc 	bl	800a0e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009d50:	4b22      	ldr	r3, [pc, #136]	; (8009ddc <vTaskDelayUntil+0xf4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6a3a      	ldr	r2, [r7, #32]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d20b      	bcs.n	8009d82 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d211      	bcs.n	8009d98 <vTaskDelayUntil+0xb0>
 8009d74:	69fa      	ldr	r2, [r7, #28]
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d90d      	bls.n	8009d98 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d80:	e00a      	b.n	8009d98 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d303      	bcc.n	8009d94 <vTaskDelayUntil+0xac>
 8009d8c:	69fa      	ldr	r2, [r7, #28]
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d901      	bls.n	8009d98 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009d94:	2301      	movs	r3, #1
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009da4:	69fa      	ldr	r2, [r7, #28]
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 ff17 	bl	800abe0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009db2:	f000 f9a7 	bl	800a104 <xTaskResumeAll>
 8009db6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d107      	bne.n	8009dce <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009dbe:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <vTaskDelayUntil+0xf8>)
 8009dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dce:	bf00      	nop
 8009dd0:	3728      	adds	r7, #40	; 0x28
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20000478 	.word	0x20000478
 8009ddc:	20000454 	.word	0x20000454
 8009de0:	e000ed04 	.word	0xe000ed04

08009de4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009dec:	f001 f88a 	bl	800af04 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d102      	bne.n	8009dfc <vTaskSuspend+0x18>
 8009df6:	4b3c      	ldr	r3, [pc, #240]	; (8009ee8 <vTaskSuspend+0x104>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	e000      	b.n	8009dfe <vTaskSuspend+0x1a>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7ff f837 	bl	8008e78 <uxListRemove>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d115      	bne.n	8009e3c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e14:	4935      	ldr	r1, [pc, #212]	; (8009eec <vTaskSuspend+0x108>)
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	440b      	add	r3, r1
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <vTaskSuspend+0x58>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e30:	43da      	mvns	r2, r3
 8009e32:	4b2f      	ldr	r3, [pc, #188]	; (8009ef0 <vTaskSuspend+0x10c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4013      	ands	r3, r2
 8009e38:	4a2d      	ldr	r2, [pc, #180]	; (8009ef0 <vTaskSuspend+0x10c>)
 8009e3a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d004      	beq.n	8009e4e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	3318      	adds	r3, #24
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff f815 	bl	8008e78 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3304      	adds	r3, #4
 8009e52:	4619      	mov	r1, r3
 8009e54:	4827      	ldr	r0, [pc, #156]	; (8009ef4 <vTaskSuspend+0x110>)
 8009e56:	f7fe ffb2 	bl	8008dbe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d103      	bne.n	8009e6e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009e6e:	f001 f879 	bl	800af64 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009e72:	4b21      	ldr	r3, [pc, #132]	; (8009ef8 <vTaskSuspend+0x114>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d005      	beq.n	8009e86 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009e7a:	f001 f843 	bl	800af04 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009e7e:	f000 fcd3 	bl	800a828 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009e82:	f001 f86f 	bl	800af64 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009e86:	4b18      	ldr	r3, [pc, #96]	; (8009ee8 <vTaskSuspend+0x104>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d127      	bne.n	8009ee0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8009e90:	4b19      	ldr	r3, [pc, #100]	; (8009ef8 <vTaskSuspend+0x114>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d017      	beq.n	8009ec8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009e98:	4b18      	ldr	r3, [pc, #96]	; (8009efc <vTaskSuspend+0x118>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00a      	beq.n	8009eb6 <vTaskSuspend+0xd2>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	60bb      	str	r3, [r7, #8]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8009eb6:	4b12      	ldr	r3, [pc, #72]	; (8009f00 <vTaskSuspend+0x11c>)
 8009eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ec6:	e00b      	b.n	8009ee0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <vTaskSuspend+0x110>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <vTaskSuspend+0x120>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d103      	bne.n	8009edc <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8009ed4:	4b04      	ldr	r3, [pc, #16]	; (8009ee8 <vTaskSuspend+0x104>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
	}
 8009eda:	e001      	b.n	8009ee0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8009edc:	f000 fa88 	bl	800a3f0 <vTaskSwitchContext>
	}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20000350 	.word	0x20000350
 8009eec:	20000354 	.word	0x20000354
 8009ef0:	20000458 	.word	0x20000458
 8009ef4:	2000043c 	.word	0x2000043c
 8009ef8:	2000045c 	.word	0x2000045c
 8009efc:	20000478 	.word	0x20000478
 8009f00:	e000ed04 	.word	0xe000ed04
 8009f04:	20000450 	.word	0x20000450

08009f08 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	60fb      	str	r3, [r7, #12]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	4a0a      	ldr	r2, [pc, #40]	; (8009f64 <prvTaskIsTaskSuspended+0x5c>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d10a      	bne.n	8009f54 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f42:	4a09      	ldr	r2, [pc, #36]	; (8009f68 <prvTaskIsTaskSuspended+0x60>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d005      	beq.n	8009f54 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8009f50:	2301      	movs	r3, #1
 8009f52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f54:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009f56:	4618      	mov	r0, r3
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	2000043c 	.word	0x2000043c
 8009f68:	20000410 	.word	0x20000410

08009f6c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10a      	bne.n	8009f94 <vTaskResume+0x28>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60bb      	str	r3, [r7, #8]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009f94:	4b20      	ldr	r3, [pc, #128]	; (800a018 <vTaskResume+0xac>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d037      	beq.n	800a00e <vTaskResume+0xa2>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d034      	beq.n	800a00e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8009fa4:	f000 ffae 	bl	800af04 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7ff ffad 	bl	8009f08 <prvTaskIsTaskSuspended>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02a      	beq.n	800a00a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe ff5d 	bl	8008e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	409a      	lsls	r2, r3
 8009fc6:	4b15      	ldr	r3, [pc, #84]	; (800a01c <vTaskResume+0xb0>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	4a13      	ldr	r2, [pc, #76]	; (800a01c <vTaskResume+0xb0>)
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4a10      	ldr	r2, [pc, #64]	; (800a020 <vTaskResume+0xb4>)
 8009fde:	441a      	add	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f7fe fee9 	bl	8008dbe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff0:	4b09      	ldr	r3, [pc, #36]	; (800a018 <vTaskResume+0xac>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d307      	bcc.n	800a00a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009ffa:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <vTaskResume+0xb8>)
 8009ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a00a:	f000 ffab 	bl	800af64 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a00e:	bf00      	nop
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20000350 	.word	0x20000350
 800a01c:	20000458 	.word	0x20000458
 800a020:	20000354 	.word	0x20000354
 800a024:	e000ed04 	.word	0xe000ed04

0800a028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08a      	sub	sp, #40	; 0x28
 800a02c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a036:	463a      	mov	r2, r7
 800a038:	1d39      	adds	r1, r7, #4
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f6 fed8 	bl	8000df4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	9202      	str	r2, [sp, #8]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	2300      	movs	r3, #0
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	2300      	movs	r3, #0
 800a054:	460a      	mov	r2, r1
 800a056:	491e      	ldr	r1, [pc, #120]	; (800a0d0 <vTaskStartScheduler+0xa8>)
 800a058:	481e      	ldr	r0, [pc, #120]	; (800a0d4 <vTaskStartScheduler+0xac>)
 800a05a:	f7ff fcb1 	bl	80099c0 <xTaskCreateStatic>
 800a05e:	4603      	mov	r3, r0
 800a060:	4a1d      	ldr	r2, [pc, #116]	; (800a0d8 <vTaskStartScheduler+0xb0>)
 800a062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a064:	4b1c      	ldr	r3, [pc, #112]	; (800a0d8 <vTaskStartScheduler+0xb0>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a06c:	2301      	movs	r3, #1
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	e001      	b.n	800a076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d116      	bne.n	800a0aa <vTaskStartScheduler+0x82>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	613b      	str	r3, [r7, #16]
}
 800a08e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a090:	4b12      	ldr	r3, [pc, #72]	; (800a0dc <vTaskStartScheduler+0xb4>)
 800a092:	f04f 32ff 	mov.w	r2, #4294967295
 800a096:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a098:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <vTaskStartScheduler+0xb8>)
 800a09a:	2201      	movs	r2, #1
 800a09c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a09e:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <vTaskStartScheduler+0xbc>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0a4:	f000 fe8c 	bl	800adc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0a8:	e00e      	b.n	800a0c8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b0:	d10a      	bne.n	800a0c8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	60fb      	str	r3, [r7, #12]
}
 800a0c4:	bf00      	nop
 800a0c6:	e7fe      	b.n	800a0c6 <vTaskStartScheduler+0x9e>
}
 800a0c8:	bf00      	nop
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	0800c788 	.word	0x0800c788
 800a0d4:	0800a6bd 	.word	0x0800a6bd
 800a0d8:	20000474 	.word	0x20000474
 800a0dc:	20000470 	.word	0x20000470
 800a0e0:	2000045c 	.word	0x2000045c
 800a0e4:	20000454 	.word	0x20000454

0800a0e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0ec:	4b04      	ldr	r3, [pc, #16]	; (800a100 <vTaskSuspendAll+0x18>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	4a03      	ldr	r2, [pc, #12]	; (800a100 <vTaskSuspendAll+0x18>)
 800a0f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0f6:	bf00      	nop
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	20000478 	.word	0x20000478

0800a104 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a10e:	2300      	movs	r3, #0
 800a110:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a112:	4b41      	ldr	r3, [pc, #260]	; (800a218 <xTaskResumeAll+0x114>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10a      	bne.n	800a130 <xTaskResumeAll+0x2c>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	603b      	str	r3, [r7, #0]
}
 800a12c:	bf00      	nop
 800a12e:	e7fe      	b.n	800a12e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a130:	f000 fee8 	bl	800af04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a134:	4b38      	ldr	r3, [pc, #224]	; (800a218 <xTaskResumeAll+0x114>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3b01      	subs	r3, #1
 800a13a:	4a37      	ldr	r2, [pc, #220]	; (800a218 <xTaskResumeAll+0x114>)
 800a13c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a13e:	4b36      	ldr	r3, [pc, #216]	; (800a218 <xTaskResumeAll+0x114>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d161      	bne.n	800a20a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a146:	4b35      	ldr	r3, [pc, #212]	; (800a21c <xTaskResumeAll+0x118>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d05d      	beq.n	800a20a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a14e:	e02e      	b.n	800a1ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a150:	4b33      	ldr	r3, [pc, #204]	; (800a220 <xTaskResumeAll+0x11c>)
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	3318      	adds	r3, #24
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fe fe8b 	bl	8008e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	3304      	adds	r3, #4
 800a166:	4618      	mov	r0, r3
 800a168:	f7fe fe86 	bl	8008e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	2201      	movs	r2, #1
 800a172:	409a      	lsls	r2, r3
 800a174:	4b2b      	ldr	r3, [pc, #172]	; (800a224 <xTaskResumeAll+0x120>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4313      	orrs	r3, r2
 800a17a:	4a2a      	ldr	r2, [pc, #168]	; (800a224 <xTaskResumeAll+0x120>)
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4a27      	ldr	r2, [pc, #156]	; (800a228 <xTaskResumeAll+0x124>)
 800a18c:	441a      	add	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3304      	adds	r3, #4
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7fe fe12 	bl	8008dbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19e:	4b23      	ldr	r3, [pc, #140]	; (800a22c <xTaskResumeAll+0x128>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d302      	bcc.n	800a1ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a1a8:	4b21      	ldr	r3, [pc, #132]	; (800a230 <xTaskResumeAll+0x12c>)
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1ae:	4b1c      	ldr	r3, [pc, #112]	; (800a220 <xTaskResumeAll+0x11c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1cc      	bne.n	800a150 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1bc:	f000 fb34 	bl	800a828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1c0:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <xTaskResumeAll+0x130>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d010      	beq.n	800a1ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1cc:	f000 f858 	bl	800a280 <xTaskIncrementTick>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a1d6:	4b16      	ldr	r3, [pc, #88]	; (800a230 <xTaskResumeAll+0x12c>)
 800a1d8:	2201      	movs	r2, #1
 800a1da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1f1      	bne.n	800a1cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a1e8:	4b12      	ldr	r3, [pc, #72]	; (800a234 <xTaskResumeAll+0x130>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1ee:	4b10      	ldr	r3, [pc, #64]	; (800a230 <xTaskResumeAll+0x12c>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d009      	beq.n	800a20a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1fa:	4b0f      	ldr	r3, [pc, #60]	; (800a238 <xTaskResumeAll+0x134>)
 800a1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a20a:	f000 feab 	bl	800af64 <vPortExitCritical>

	return xAlreadyYielded;
 800a20e:	68bb      	ldr	r3, [r7, #8]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000478 	.word	0x20000478
 800a21c:	20000450 	.word	0x20000450
 800a220:	20000410 	.word	0x20000410
 800a224:	20000458 	.word	0x20000458
 800a228:	20000354 	.word	0x20000354
 800a22c:	20000350 	.word	0x20000350
 800a230:	20000464 	.word	0x20000464
 800a234:	20000460 	.word	0x20000460
 800a238:	e000ed04 	.word	0xe000ed04

0800a23c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a242:	4b05      	ldr	r3, [pc, #20]	; (800a258 <xTaskGetTickCount+0x1c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a248:	687b      	ldr	r3, [r7, #4]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	370c      	adds	r7, #12
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	20000454 	.word	0x20000454

0800a25c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a262:	f000 ff31 	bl	800b0c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a266:	2300      	movs	r3, #0
 800a268:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a26a:	4b04      	ldr	r3, [pc, #16]	; (800a27c <xTaskGetTickCountFromISR+0x20>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a270:	683b      	ldr	r3, [r7, #0]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000454 	.word	0x20000454

0800a280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a286:	2300      	movs	r3, #0
 800a288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a28a:	4b4e      	ldr	r3, [pc, #312]	; (800a3c4 <xTaskIncrementTick+0x144>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f040 808e 	bne.w	800a3b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a294:	4b4c      	ldr	r3, [pc, #304]	; (800a3c8 <xTaskIncrementTick+0x148>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3301      	adds	r3, #1
 800a29a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a29c:	4a4a      	ldr	r2, [pc, #296]	; (800a3c8 <xTaskIncrementTick+0x148>)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d120      	bne.n	800a2ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2a8:	4b48      	ldr	r3, [pc, #288]	; (800a3cc <xTaskIncrementTick+0x14c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	603b      	str	r3, [r7, #0]
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <xTaskIncrementTick+0x46>
 800a2c8:	4b40      	ldr	r3, [pc, #256]	; (800a3cc <xTaskIncrementTick+0x14c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	60fb      	str	r3, [r7, #12]
 800a2ce:	4b40      	ldr	r3, [pc, #256]	; (800a3d0 <xTaskIncrementTick+0x150>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a3e      	ldr	r2, [pc, #248]	; (800a3cc <xTaskIncrementTick+0x14c>)
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	4a3e      	ldr	r2, [pc, #248]	; (800a3d0 <xTaskIncrementTick+0x150>)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6013      	str	r3, [r2, #0]
 800a2dc:	4b3d      	ldr	r3, [pc, #244]	; (800a3d4 <xTaskIncrementTick+0x154>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	4a3c      	ldr	r2, [pc, #240]	; (800a3d4 <xTaskIncrementTick+0x154>)
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	f000 fa9f 	bl	800a828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2ea:	4b3b      	ldr	r3, [pc, #236]	; (800a3d8 <xTaskIncrementTick+0x158>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d348      	bcc.n	800a386 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2f4:	4b35      	ldr	r3, [pc, #212]	; (800a3cc <xTaskIncrementTick+0x14c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d104      	bne.n	800a308 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fe:	4b36      	ldr	r3, [pc, #216]	; (800a3d8 <xTaskIncrementTick+0x158>)
 800a300:	f04f 32ff 	mov.w	r2, #4294967295
 800a304:	601a      	str	r2, [r3, #0]
					break;
 800a306:	e03e      	b.n	800a386 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a308:	4b30      	ldr	r3, [pc, #192]	; (800a3cc <xTaskIncrementTick+0x14c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d203      	bcs.n	800a328 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a320:	4a2d      	ldr	r2, [pc, #180]	; (800a3d8 <xTaskIncrementTick+0x158>)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a326:	e02e      	b.n	800a386 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	3304      	adds	r3, #4
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe fda3 	bl	8008e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a336:	2b00      	cmp	r3, #0
 800a338:	d004      	beq.n	800a344 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	3318      	adds	r3, #24
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe fd9a 	bl	8008e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a348:	2201      	movs	r2, #1
 800a34a:	409a      	lsls	r2, r3
 800a34c:	4b23      	ldr	r3, [pc, #140]	; (800a3dc <xTaskIncrementTick+0x15c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4313      	orrs	r3, r2
 800a352:	4a22      	ldr	r2, [pc, #136]	; (800a3dc <xTaskIncrementTick+0x15c>)
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35a:	4613      	mov	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4a1f      	ldr	r2, [pc, #124]	; (800a3e0 <xTaskIncrementTick+0x160>)
 800a364:	441a      	add	r2, r3
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	3304      	adds	r3, #4
 800a36a:	4619      	mov	r1, r3
 800a36c:	4610      	mov	r0, r2
 800a36e:	f7fe fd26 	bl	8008dbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a376:	4b1b      	ldr	r3, [pc, #108]	; (800a3e4 <xTaskIncrementTick+0x164>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d3b9      	bcc.n	800a2f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a380:	2301      	movs	r3, #1
 800a382:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a384:	e7b6      	b.n	800a2f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a386:	4b17      	ldr	r3, [pc, #92]	; (800a3e4 <xTaskIncrementTick+0x164>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38c:	4914      	ldr	r1, [pc, #80]	; (800a3e0 <xTaskIncrementTick+0x160>)
 800a38e:	4613      	mov	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	440b      	add	r3, r1
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d901      	bls.n	800a3a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a3a2:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <xTaskIncrementTick+0x168>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d007      	beq.n	800a3ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	617b      	str	r3, [r7, #20]
 800a3ae:	e004      	b.n	800a3ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a3b0:	4b0e      	ldr	r3, [pc, #56]	; (800a3ec <xTaskIncrementTick+0x16c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	4a0d      	ldr	r2, [pc, #52]	; (800a3ec <xTaskIncrementTick+0x16c>)
 800a3b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a3ba:	697b      	ldr	r3, [r7, #20]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	20000478 	.word	0x20000478
 800a3c8:	20000454 	.word	0x20000454
 800a3cc:	20000408 	.word	0x20000408
 800a3d0:	2000040c 	.word	0x2000040c
 800a3d4:	20000468 	.word	0x20000468
 800a3d8:	20000470 	.word	0x20000470
 800a3dc:	20000458 	.word	0x20000458
 800a3e0:	20000354 	.word	0x20000354
 800a3e4:	20000350 	.word	0x20000350
 800a3e8:	20000464 	.word	0x20000464
 800a3ec:	20000460 	.word	0x20000460

0800a3f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3f6:	4b27      	ldr	r3, [pc, #156]	; (800a494 <vTaskSwitchContext+0xa4>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3fe:	4b26      	ldr	r3, [pc, #152]	; (800a498 <vTaskSwitchContext+0xa8>)
 800a400:	2201      	movs	r2, #1
 800a402:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a404:	e03f      	b.n	800a486 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a406:	4b24      	ldr	r3, [pc, #144]	; (800a498 <vTaskSwitchContext+0xa8>)
 800a408:	2200      	movs	r2, #0
 800a40a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a40c:	4b23      	ldr	r3, [pc, #140]	; (800a49c <vTaskSwitchContext+0xac>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	fab3 f383 	clz	r3, r3
 800a418:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	f1c3 031f 	rsb	r3, r3, #31
 800a420:	617b      	str	r3, [r7, #20]
 800a422:	491f      	ldr	r1, [pc, #124]	; (800a4a0 <vTaskSwitchContext+0xb0>)
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	440b      	add	r3, r1
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10a      	bne.n	800a44c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	607b      	str	r3, [r7, #4]
}
 800a448:	bf00      	nop
 800a44a:	e7fe      	b.n	800a44a <vTaskSwitchContext+0x5a>
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	4613      	mov	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4413      	add	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4a12      	ldr	r2, [pc, #72]	; (800a4a0 <vTaskSwitchContext+0xb0>)
 800a458:	4413      	add	r3, r2
 800a45a:	613b      	str	r3, [r7, #16]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	605a      	str	r2, [r3, #4]
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	3308      	adds	r3, #8
 800a46e:	429a      	cmp	r2, r3
 800a470:	d104      	bne.n	800a47c <vTaskSwitchContext+0x8c>
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	605a      	str	r2, [r3, #4]
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	4a08      	ldr	r2, [pc, #32]	; (800a4a4 <vTaskSwitchContext+0xb4>)
 800a484:	6013      	str	r3, [r2, #0]
}
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000478 	.word	0x20000478
 800a498:	20000464 	.word	0x20000464
 800a49c:	20000458 	.word	0x20000458
 800a4a0:	20000354 	.word	0x20000354
 800a4a4:	20000350 	.word	0x20000350

0800a4a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10a      	bne.n	800a4ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	60fb      	str	r3, [r7, #12]
}
 800a4ca:	bf00      	nop
 800a4cc:	e7fe      	b.n	800a4cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4ce:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <vTaskPlaceOnEventList+0x44>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3318      	adds	r3, #24
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7fe fc95 	bl	8008e06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4dc:	2101      	movs	r1, #1
 800a4de:	6838      	ldr	r0, [r7, #0]
 800a4e0:	f000 fb7e 	bl	800abe0 <prvAddCurrentTaskToDelayedList>
}
 800a4e4:	bf00      	nop
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20000350 	.word	0x20000350

0800a4f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10a      	bne.n	800a51c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60fb      	str	r3, [r7, #12]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	3318      	adds	r3, #24
 800a520:	4618      	mov	r0, r3
 800a522:	f7fe fca9 	bl	8008e78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a526:	4b1d      	ldr	r3, [pc, #116]	; (800a59c <xTaskRemoveFromEventList+0xac>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d11c      	bne.n	800a568 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3304      	adds	r3, #4
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fca0 	bl	8008e78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	2201      	movs	r2, #1
 800a53e:	409a      	lsls	r2, r3
 800a540:	4b17      	ldr	r3, [pc, #92]	; (800a5a0 <xTaskRemoveFromEventList+0xb0>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4313      	orrs	r3, r2
 800a546:	4a16      	ldr	r2, [pc, #88]	; (800a5a0 <xTaskRemoveFromEventList+0xb0>)
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54e:	4613      	mov	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4a13      	ldr	r2, [pc, #76]	; (800a5a4 <xTaskRemoveFromEventList+0xb4>)
 800a558:	441a      	add	r2, r3
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4619      	mov	r1, r3
 800a560:	4610      	mov	r0, r2
 800a562:	f7fe fc2c 	bl	8008dbe <vListInsertEnd>
 800a566:	e005      	b.n	800a574 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3318      	adds	r3, #24
 800a56c:	4619      	mov	r1, r3
 800a56e:	480e      	ldr	r0, [pc, #56]	; (800a5a8 <xTaskRemoveFromEventList+0xb8>)
 800a570:	f7fe fc25 	bl	8008dbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a578:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <xTaskRemoveFromEventList+0xbc>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57e:	429a      	cmp	r2, r3
 800a580:	d905      	bls.n	800a58e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a582:	2301      	movs	r3, #1
 800a584:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a586:	4b0a      	ldr	r3, [pc, #40]	; (800a5b0 <xTaskRemoveFromEventList+0xc0>)
 800a588:	2201      	movs	r2, #1
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	e001      	b.n	800a592 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a58e:	2300      	movs	r3, #0
 800a590:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a592:	697b      	ldr	r3, [r7, #20]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	20000478 	.word	0x20000478
 800a5a0:	20000458 	.word	0x20000458
 800a5a4:	20000354 	.word	0x20000354
 800a5a8:	20000410 	.word	0x20000410
 800a5ac:	20000350 	.word	0x20000350
 800a5b0:	20000464 	.word	0x20000464

0800a5b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5bc:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <vTaskInternalSetTimeOutState+0x24>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5c4:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <vTaskInternalSetTimeOutState+0x28>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	605a      	str	r2, [r3, #4]
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	20000468 	.word	0x20000468
 800a5dc:	20000454 	.word	0x20000454

0800a5e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10a      	bne.n	800a606 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	613b      	str	r3, [r7, #16]
}
 800a602:	bf00      	nop
 800a604:	e7fe      	b.n	800a604 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	60fb      	str	r3, [r7, #12]
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a622:	f000 fc6f 	bl	800af04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a626:	4b1d      	ldr	r3, [pc, #116]	; (800a69c <xTaskCheckForTimeOut+0xbc>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	69ba      	ldr	r2, [r7, #24]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63e:	d102      	bne.n	800a646 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a640:	2300      	movs	r3, #0
 800a642:	61fb      	str	r3, [r7, #28]
 800a644:	e023      	b.n	800a68e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4b15      	ldr	r3, [pc, #84]	; (800a6a0 <xTaskCheckForTimeOut+0xc0>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d007      	beq.n	800a662 <xTaskCheckForTimeOut+0x82>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	69ba      	ldr	r2, [r7, #24]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d302      	bcc.n	800a662 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a65c:	2301      	movs	r3, #1
 800a65e:	61fb      	str	r3, [r7, #28]
 800a660:	e015      	b.n	800a68e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d20b      	bcs.n	800a684 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	1ad2      	subs	r2, r2, r3
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7ff ff9b 	bl	800a5b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a67e:	2300      	movs	r3, #0
 800a680:	61fb      	str	r3, [r7, #28]
 800a682:	e004      	b.n	800a68e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	2200      	movs	r2, #0
 800a688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a68a:	2301      	movs	r3, #1
 800a68c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a68e:	f000 fc69 	bl	800af64 <vPortExitCritical>

	return xReturn;
 800a692:	69fb      	ldr	r3, [r7, #28]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3720      	adds	r7, #32
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000454 	.word	0x20000454
 800a6a0:	20000468 	.word	0x20000468

0800a6a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6a8:	4b03      	ldr	r3, [pc, #12]	; (800a6b8 <vTaskMissedYield+0x14>)
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]
}
 800a6ae:	bf00      	nop
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	20000464 	.word	0x20000464

0800a6bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6c4:	f000 f852 	bl	800a76c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6c8:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <prvIdleTask+0x28>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d9f9      	bls.n	800a6c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6d0:	4b05      	ldr	r3, [pc, #20]	; (800a6e8 <prvIdleTask+0x2c>)
 800a6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6e0:	e7f0      	b.n	800a6c4 <prvIdleTask+0x8>
 800a6e2:	bf00      	nop
 800a6e4:	20000354 	.word	0x20000354
 800a6e8:	e000ed04 	.word	0xe000ed04

0800a6ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	607b      	str	r3, [r7, #4]
 800a6f6:	e00c      	b.n	800a712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4a12      	ldr	r2, [pc, #72]	; (800a74c <prvInitialiseTaskLists+0x60>)
 800a704:	4413      	add	r3, r2
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fb2c 	bl	8008d64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3301      	adds	r3, #1
 800a710:	607b      	str	r3, [r7, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b06      	cmp	r3, #6
 800a716:	d9ef      	bls.n	800a6f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a718:	480d      	ldr	r0, [pc, #52]	; (800a750 <prvInitialiseTaskLists+0x64>)
 800a71a:	f7fe fb23 	bl	8008d64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a71e:	480d      	ldr	r0, [pc, #52]	; (800a754 <prvInitialiseTaskLists+0x68>)
 800a720:	f7fe fb20 	bl	8008d64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a724:	480c      	ldr	r0, [pc, #48]	; (800a758 <prvInitialiseTaskLists+0x6c>)
 800a726:	f7fe fb1d 	bl	8008d64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a72a:	480c      	ldr	r0, [pc, #48]	; (800a75c <prvInitialiseTaskLists+0x70>)
 800a72c:	f7fe fb1a 	bl	8008d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a730:	480b      	ldr	r0, [pc, #44]	; (800a760 <prvInitialiseTaskLists+0x74>)
 800a732:	f7fe fb17 	bl	8008d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a736:	4b0b      	ldr	r3, [pc, #44]	; (800a764 <prvInitialiseTaskLists+0x78>)
 800a738:	4a05      	ldr	r2, [pc, #20]	; (800a750 <prvInitialiseTaskLists+0x64>)
 800a73a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a73c:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <prvInitialiseTaskLists+0x7c>)
 800a73e:	4a05      	ldr	r2, [pc, #20]	; (800a754 <prvInitialiseTaskLists+0x68>)
 800a740:	601a      	str	r2, [r3, #0]
}
 800a742:	bf00      	nop
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	20000354 	.word	0x20000354
 800a750:	200003e0 	.word	0x200003e0
 800a754:	200003f4 	.word	0x200003f4
 800a758:	20000410 	.word	0x20000410
 800a75c:	20000424 	.word	0x20000424
 800a760:	2000043c 	.word	0x2000043c
 800a764:	20000408 	.word	0x20000408
 800a768:	2000040c 	.word	0x2000040c

0800a76c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a772:	e019      	b.n	800a7a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a774:	f000 fbc6 	bl	800af04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a778:	4b10      	ldr	r3, [pc, #64]	; (800a7bc <prvCheckTasksWaitingTermination+0x50>)
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	3304      	adds	r3, #4
 800a784:	4618      	mov	r0, r3
 800a786:	f7fe fb77 	bl	8008e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a78a:	4b0d      	ldr	r3, [pc, #52]	; (800a7c0 <prvCheckTasksWaitingTermination+0x54>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3b01      	subs	r3, #1
 800a790:	4a0b      	ldr	r2, [pc, #44]	; (800a7c0 <prvCheckTasksWaitingTermination+0x54>)
 800a792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a794:	4b0b      	ldr	r3, [pc, #44]	; (800a7c4 <prvCheckTasksWaitingTermination+0x58>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3b01      	subs	r3, #1
 800a79a:	4a0a      	ldr	r2, [pc, #40]	; (800a7c4 <prvCheckTasksWaitingTermination+0x58>)
 800a79c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a79e:	f000 fbe1 	bl	800af64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f810 	bl	800a7c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7a8:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <prvCheckTasksWaitingTermination+0x58>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1e1      	bne.n	800a774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7b0:	bf00      	nop
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000424 	.word	0x20000424
 800a7c0:	20000450 	.word	0x20000450
 800a7c4:	20000438 	.word	0x20000438

0800a7c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d108      	bne.n	800a7ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fd7e 	bl	800b2e0 <vPortFree>
				vPortFree( pxTCB );
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fd7b 	bl	800b2e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7ea:	e018      	b.n	800a81e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d103      	bne.n	800a7fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fd72 	bl	800b2e0 <vPortFree>
	}
 800a7fc:	e00f      	b.n	800a81e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a804:	2b02      	cmp	r3, #2
 800a806:	d00a      	beq.n	800a81e <prvDeleteTCB+0x56>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	60fb      	str	r3, [r7, #12]
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <prvDeleteTCB+0x54>
	}
 800a81e:	bf00      	nop
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a82e:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <prvResetNextTaskUnblockTime+0x38>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d104      	bne.n	800a842 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a838:	4b0a      	ldr	r3, [pc, #40]	; (800a864 <prvResetNextTaskUnblockTime+0x3c>)
 800a83a:	f04f 32ff 	mov.w	r2, #4294967295
 800a83e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a840:	e008      	b.n	800a854 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a842:	4b07      	ldr	r3, [pc, #28]	; (800a860 <prvResetNextTaskUnblockTime+0x38>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	4a04      	ldr	r2, [pc, #16]	; (800a864 <prvResetNextTaskUnblockTime+0x3c>)
 800a852:	6013      	str	r3, [r2, #0]
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	20000408 	.word	0x20000408
 800a864:	20000470 	.word	0x20000470

0800a868 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a86e:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <xTaskGetSchedulerState+0x34>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a876:	2301      	movs	r3, #1
 800a878:	607b      	str	r3, [r7, #4]
 800a87a:	e008      	b.n	800a88e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a87c:	4b08      	ldr	r3, [pc, #32]	; (800a8a0 <xTaskGetSchedulerState+0x38>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d102      	bne.n	800a88a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a884:	2302      	movs	r3, #2
 800a886:	607b      	str	r3, [r7, #4]
 800a888:	e001      	b.n	800a88e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a88a:	2300      	movs	r3, #0
 800a88c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a88e:	687b      	ldr	r3, [r7, #4]
	}
 800a890:	4618      	mov	r0, r3
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	2000045c 	.word	0x2000045c
 800a8a0:	20000478 	.word	0x20000478

0800a8a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d05e      	beq.n	800a978 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8be:	4b31      	ldr	r3, [pc, #196]	; (800a984 <xTaskPriorityInherit+0xe0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d24e      	bcs.n	800a966 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	db06      	blt.n	800a8de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d0:	4b2c      	ldr	r3, [pc, #176]	; (800a984 <xTaskPriorityInherit+0xe0>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d6:	f1c3 0207 	rsb	r2, r3, #7
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	6959      	ldr	r1, [r3, #20]
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4a26      	ldr	r2, [pc, #152]	; (800a988 <xTaskPriorityInherit+0xe4>)
 800a8f0:	4413      	add	r3, r2
 800a8f2:	4299      	cmp	r1, r3
 800a8f4:	d12f      	bne.n	800a956 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe fabc 	bl	8008e78 <uxListRemove>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90a:	2201      	movs	r2, #1
 800a90c:	fa02 f303 	lsl.w	r3, r2, r3
 800a910:	43da      	mvns	r2, r3
 800a912:	4b1e      	ldr	r3, [pc, #120]	; (800a98c <xTaskPriorityInherit+0xe8>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4013      	ands	r3, r2
 800a918:	4a1c      	ldr	r2, [pc, #112]	; (800a98c <xTaskPriorityInherit+0xe8>)
 800a91a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a91c:	4b19      	ldr	r3, [pc, #100]	; (800a984 <xTaskPriorityInherit+0xe0>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92a:	2201      	movs	r2, #1
 800a92c:	409a      	lsls	r2, r3
 800a92e:	4b17      	ldr	r3, [pc, #92]	; (800a98c <xTaskPriorityInherit+0xe8>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4313      	orrs	r3, r2
 800a934:	4a15      	ldr	r2, [pc, #84]	; (800a98c <xTaskPriorityInherit+0xe8>)
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4a10      	ldr	r2, [pc, #64]	; (800a988 <xTaskPriorityInherit+0xe4>)
 800a946:	441a      	add	r2, r3
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4619      	mov	r1, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	f7fe fa35 	bl	8008dbe <vListInsertEnd>
 800a954:	e004      	b.n	800a960 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a956:	4b0b      	ldr	r3, [pc, #44]	; (800a984 <xTaskPriorityInherit+0xe0>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a960:	2301      	movs	r3, #1
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	e008      	b.n	800a978 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a96a:	4b06      	ldr	r3, [pc, #24]	; (800a984 <xTaskPriorityInherit+0xe0>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	429a      	cmp	r2, r3
 800a972:	d201      	bcs.n	800a978 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a974:	2301      	movs	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a978:	68fb      	ldr	r3, [r7, #12]
	}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20000350 	.word	0x20000350
 800a988:	20000354 	.word	0x20000354
 800a98c:	20000458 	.word	0x20000458

0800a990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a99c:	2300      	movs	r3, #0
 800a99e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d06e      	beq.n	800aa84 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9a6:	4b3a      	ldr	r3, [pc, #232]	; (800aa90 <xTaskPriorityDisinherit+0x100>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d00a      	beq.n	800a9c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	60fb      	str	r3, [r7, #12]
}
 800a9c2:	bf00      	nop
 800a9c4:	e7fe      	b.n	800a9c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10a      	bne.n	800a9e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	60bb      	str	r3, [r7, #8]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9e8:	1e5a      	subs	r2, r3, #1
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d044      	beq.n	800aa84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d140      	bne.n	800aa84 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	3304      	adds	r3, #4
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe fa36 	bl	8008e78 <uxListRemove>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d115      	bne.n	800aa3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa16:	491f      	ldr	r1, [pc, #124]	; (800aa94 <xTaskPriorityDisinherit+0x104>)
 800aa18:	4613      	mov	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	440b      	add	r3, r1
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10a      	bne.n	800aa3e <xTaskPriorityDisinherit+0xae>
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa32:	43da      	mvns	r2, r3
 800aa34:	4b18      	ldr	r3, [pc, #96]	; (800aa98 <xTaskPriorityDisinherit+0x108>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	4a17      	ldr	r2, [pc, #92]	; (800aa98 <xTaskPriorityDisinherit+0x108>)
 800aa3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4a:	f1c3 0207 	rsb	r2, r3, #7
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	2201      	movs	r2, #1
 800aa58:	409a      	lsls	r2, r3
 800aa5a:	4b0f      	ldr	r3, [pc, #60]	; (800aa98 <xTaskPriorityDisinherit+0x108>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	4a0d      	ldr	r2, [pc, #52]	; (800aa98 <xTaskPriorityDisinherit+0x108>)
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa68:	4613      	mov	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4a08      	ldr	r2, [pc, #32]	; (800aa94 <xTaskPriorityDisinherit+0x104>)
 800aa72:	441a      	add	r2, r3
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	3304      	adds	r3, #4
 800aa78:	4619      	mov	r1, r3
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	f7fe f99f 	bl	8008dbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa80:	2301      	movs	r3, #1
 800aa82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa84:	697b      	ldr	r3, [r7, #20]
	}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000350 	.word	0x20000350
 800aa94:	20000354 	.word	0x20000354
 800aa98:	20000458 	.word	0x20000458

0800aa9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d077      	beq.n	800aba4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10a      	bne.n	800aad2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	60fb      	str	r3, [r7, #12]
}
 800aace:	bf00      	nop
 800aad0:	e7fe      	b.n	800aad0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d902      	bls.n	800aae2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	61fb      	str	r3, [r7, #28]
 800aae0:	e002      	b.n	800aae8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d058      	beq.n	800aba4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d153      	bne.n	800aba4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aafc:	4b2b      	ldr	r3, [pc, #172]	; (800abac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d10a      	bne.n	800ab1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	60bb      	str	r3, [r7, #8]
}
 800ab18:	bf00      	nop
 800ab1a:	e7fe      	b.n	800ab1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	69fa      	ldr	r2, [r7, #28]
 800ab26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	db04      	blt.n	800ab3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	f1c3 0207 	rsb	r2, r3, #7
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	6959      	ldr	r1, [r3, #20]
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4a19      	ldr	r2, [pc, #100]	; (800abb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ab4a:	4413      	add	r3, r2
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	d129      	bne.n	800aba4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fe f98f 	bl	8008e78 <uxListRemove>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10a      	bne.n	800ab76 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	2201      	movs	r2, #1
 800ab66:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6a:	43da      	mvns	r2, r3
 800ab6c:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4013      	ands	r3, r2
 800ab72:	4a10      	ldr	r2, [pc, #64]	; (800abb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ab74:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	409a      	lsls	r2, r3
 800ab7e:	4b0d      	ldr	r3, [pc, #52]	; (800abb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	4a0b      	ldr	r2, [pc, #44]	; (800abb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4a06      	ldr	r2, [pc, #24]	; (800abb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ab96:	441a      	add	r2, r3
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f7fe f90d 	bl	8008dbe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aba4:	bf00      	nop
 800aba6:	3720      	adds	r7, #32
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	20000350 	.word	0x20000350
 800abb0:	20000354 	.word	0x20000354
 800abb4:	20000458 	.word	0x20000458

0800abb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800abb8:	b480      	push	{r7}
 800abba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800abbc:	4b07      	ldr	r3, [pc, #28]	; (800abdc <pvTaskIncrementMutexHeldCount+0x24>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d004      	beq.n	800abce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800abc4:	4b05      	ldr	r3, [pc, #20]	; (800abdc <pvTaskIncrementMutexHeldCount+0x24>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abca:	3201      	adds	r2, #1
 800abcc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800abce:	4b03      	ldr	r3, [pc, #12]	; (800abdc <pvTaskIncrementMutexHeldCount+0x24>)
 800abd0:	681b      	ldr	r3, [r3, #0]
	}
 800abd2:	4618      	mov	r0, r3
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	20000350 	.word	0x20000350

0800abe0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abea:	4b29      	ldr	r3, [pc, #164]	; (800ac90 <prvAddCurrentTaskToDelayedList+0xb0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abf0:	4b28      	ldr	r3, [pc, #160]	; (800ac94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3304      	adds	r3, #4
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe f93e 	bl	8008e78 <uxListRemove>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10b      	bne.n	800ac1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ac02:	4b24      	ldr	r3, [pc, #144]	; (800ac94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	2201      	movs	r2, #1
 800ac0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac0e:	43da      	mvns	r2, r3
 800ac10:	4b21      	ldr	r3, [pc, #132]	; (800ac98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4013      	ands	r3, r2
 800ac16:	4a20      	ldr	r2, [pc, #128]	; (800ac98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ac18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac20:	d10a      	bne.n	800ac38 <prvAddCurrentTaskToDelayedList+0x58>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d007      	beq.n	800ac38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac28:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	4619      	mov	r1, r3
 800ac30:	481a      	ldr	r0, [pc, #104]	; (800ac9c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ac32:	f7fe f8c4 	bl	8008dbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac36:	e026      	b.n	800ac86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac40:	4b14      	ldr	r3, [pc, #80]	; (800ac94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d209      	bcs.n	800ac64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac50:	4b13      	ldr	r3, [pc, #76]	; (800aca0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	4b0f      	ldr	r3, [pc, #60]	; (800ac94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f7fe f8d2 	bl	8008e06 <vListInsert>
}
 800ac62:	e010      	b.n	800ac86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac64:	4b0f      	ldr	r3, [pc, #60]	; (800aca4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7fe f8c8 	bl	8008e06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac76:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d202      	bcs.n	800ac86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ac80:	4a09      	ldr	r2, [pc, #36]	; (800aca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	6013      	str	r3, [r2, #0]
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000454 	.word	0x20000454
 800ac94:	20000350 	.word	0x20000350
 800ac98:	20000458 	.word	0x20000458
 800ac9c:	2000043c 	.word	0x2000043c
 800aca0:	2000040c 	.word	0x2000040c
 800aca4:	20000408 	.word	0x20000408
 800aca8:	20000470 	.word	0x20000470

0800acac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3b04      	subs	r3, #4
 800acbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800acc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3b04      	subs	r3, #4
 800acca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	f023 0201 	bic.w	r2, r3, #1
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	3b04      	subs	r3, #4
 800acda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800acdc:	4a0c      	ldr	r2, [pc, #48]	; (800ad10 <pxPortInitialiseStack+0x64>)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3b14      	subs	r3, #20
 800ace6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	3b04      	subs	r3, #4
 800acf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f06f 0202 	mvn.w	r2, #2
 800acfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3b20      	subs	r3, #32
 800ad00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad02:	68fb      	ldr	r3, [r7, #12]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	0800ad15 	.word	0x0800ad15

0800ad14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad1e:	4b12      	ldr	r3, [pc, #72]	; (800ad68 <prvTaskExitError+0x54>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad26:	d00a      	beq.n	800ad3e <prvTaskExitError+0x2a>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	60fb      	str	r3, [r7, #12]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <prvTaskExitError+0x28>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	60bb      	str	r3, [r7, #8]
}
 800ad50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad52:	bf00      	nop
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d0fc      	beq.n	800ad54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad5a:	bf00      	nop
 800ad5c:	bf00      	nop
 800ad5e:	3714      	adds	r7, #20
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	20000020 	.word	0x20000020
 800ad6c:	00000000 	.word	0x00000000

0800ad70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad70:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <pxCurrentTCBConst2>)
 800ad72:	6819      	ldr	r1, [r3, #0]
 800ad74:	6808      	ldr	r0, [r1, #0]
 800ad76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7a:	f380 8809 	msr	PSP, r0
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f04f 0000 	mov.w	r0, #0
 800ad86:	f380 8811 	msr	BASEPRI, r0
 800ad8a:	4770      	bx	lr
 800ad8c:	f3af 8000 	nop.w

0800ad90 <pxCurrentTCBConst2>:
 800ad90:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop

0800ad98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad98:	4808      	ldr	r0, [pc, #32]	; (800adbc <prvPortStartFirstTask+0x24>)
 800ad9a:	6800      	ldr	r0, [r0, #0]
 800ad9c:	6800      	ldr	r0, [r0, #0]
 800ad9e:	f380 8808 	msr	MSP, r0
 800ada2:	f04f 0000 	mov.w	r0, #0
 800ada6:	f380 8814 	msr	CONTROL, r0
 800adaa:	b662      	cpsie	i
 800adac:	b661      	cpsie	f
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	df00      	svc	0
 800adb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adba:	bf00      	nop
 800adbc:	e000ed08 	.word	0xe000ed08

0800adc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800adc6:	4b46      	ldr	r3, [pc, #280]	; (800aee0 <xPortStartScheduler+0x120>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a46      	ldr	r2, [pc, #280]	; (800aee4 <xPortStartScheduler+0x124>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d10a      	bne.n	800ade6 <xPortStartScheduler+0x26>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	613b      	str	r3, [r7, #16]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ade6:	4b3e      	ldr	r3, [pc, #248]	; (800aee0 <xPortStartScheduler+0x120>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a3f      	ldr	r2, [pc, #252]	; (800aee8 <xPortStartScheduler+0x128>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d10a      	bne.n	800ae06 <xPortStartScheduler+0x46>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	60fb      	str	r3, [r7, #12]
}
 800ae02:	bf00      	nop
 800ae04:	e7fe      	b.n	800ae04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae06:	4b39      	ldr	r3, [pc, #228]	; (800aeec <xPortStartScheduler+0x12c>)
 800ae08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	22ff      	movs	r2, #255	; 0xff
 800ae16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	4b31      	ldr	r3, [pc, #196]	; (800aef0 <xPortStartScheduler+0x130>)
 800ae2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae2e:	4b31      	ldr	r3, [pc, #196]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae30:	2207      	movs	r2, #7
 800ae32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae34:	e009      	b.n	800ae4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae36:	4b2f      	ldr	r3, [pc, #188]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	4a2d      	ldr	r2, [pc, #180]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae40:	78fb      	ldrb	r3, [r7, #3]
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae4a:	78fb      	ldrb	r3, [r7, #3]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae52:	2b80      	cmp	r3, #128	; 0x80
 800ae54:	d0ef      	beq.n	800ae36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae56:	4b27      	ldr	r3, [pc, #156]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f1c3 0307 	rsb	r3, r3, #7
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d00a      	beq.n	800ae78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	60bb      	str	r3, [r7, #8]
}
 800ae74:	bf00      	nop
 800ae76:	e7fe      	b.n	800ae76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae78:	4b1e      	ldr	r3, [pc, #120]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	021b      	lsls	r3, r3, #8
 800ae7e:	4a1d      	ldr	r2, [pc, #116]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae82:	4b1c      	ldr	r3, [pc, #112]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae8a:	4a1a      	ldr	r2, [pc, #104]	; (800aef4 <xPortStartScheduler+0x134>)
 800ae8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae96:	4b18      	ldr	r3, [pc, #96]	; (800aef8 <xPortStartScheduler+0x138>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <xPortStartScheduler+0x138>)
 800ae9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aea2:	4b15      	ldr	r3, [pc, #84]	; (800aef8 <xPortStartScheduler+0x138>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a14      	ldr	r2, [pc, #80]	; (800aef8 <xPortStartScheduler+0x138>)
 800aea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aeac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aeae:	f000 f8dd 	bl	800b06c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aeb2:	4b12      	ldr	r3, [pc, #72]	; (800aefc <xPortStartScheduler+0x13c>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aeb8:	f000 f8fc 	bl	800b0b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aebc:	4b10      	ldr	r3, [pc, #64]	; (800af00 <xPortStartScheduler+0x140>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a0f      	ldr	r2, [pc, #60]	; (800af00 <xPortStartScheduler+0x140>)
 800aec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aec8:	f7ff ff66 	bl	800ad98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aecc:	f7ff fa90 	bl	800a3f0 <vTaskSwitchContext>
	prvTaskExitError();
 800aed0:	f7ff ff20 	bl	800ad14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	e000ed00 	.word	0xe000ed00
 800aee4:	410fc271 	.word	0x410fc271
 800aee8:	410fc270 	.word	0x410fc270
 800aeec:	e000e400 	.word	0xe000e400
 800aef0:	2000047c 	.word	0x2000047c
 800aef4:	20000480 	.word	0x20000480
 800aef8:	e000ed20 	.word	0xe000ed20
 800aefc:	20000020 	.word	0x20000020
 800af00:	e000ef34 	.word	0xe000ef34

0800af04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	607b      	str	r3, [r7, #4]
}
 800af1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af1e:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <vPortEnterCritical+0x58>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3301      	adds	r3, #1
 800af24:	4a0d      	ldr	r2, [pc, #52]	; (800af5c <vPortEnterCritical+0x58>)
 800af26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af28:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <vPortEnterCritical+0x58>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d10f      	bne.n	800af50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <vPortEnterCritical+0x5c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <vPortEnterCritical+0x4c>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	603b      	str	r3, [r7, #0]
}
 800af4c:	bf00      	nop
 800af4e:	e7fe      	b.n	800af4e <vPortEnterCritical+0x4a>
	}
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20000020 	.word	0x20000020
 800af60:	e000ed04 	.word	0xe000ed04

0800af64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af6a:	4b12      	ldr	r3, [pc, #72]	; (800afb4 <vPortExitCritical+0x50>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10a      	bne.n	800af88 <vPortExitCritical+0x24>
	__asm volatile
 800af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	607b      	str	r3, [r7, #4]
}
 800af84:	bf00      	nop
 800af86:	e7fe      	b.n	800af86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af88:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <vPortExitCritical+0x50>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	4a09      	ldr	r2, [pc, #36]	; (800afb4 <vPortExitCritical+0x50>)
 800af90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af92:	4b08      	ldr	r3, [pc, #32]	; (800afb4 <vPortExitCritical+0x50>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d105      	bne.n	800afa6 <vPortExitCritical+0x42>
 800af9a:	2300      	movs	r3, #0
 800af9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	f383 8811 	msr	BASEPRI, r3
}
 800afa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800afa6:	bf00      	nop
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	20000020 	.word	0x20000020
	...

0800afc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800afc0:	f3ef 8009 	mrs	r0, PSP
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	4b15      	ldr	r3, [pc, #84]	; (800b020 <pxCurrentTCBConst>)
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	f01e 0f10 	tst.w	lr, #16
 800afd0:	bf08      	it	eq
 800afd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afda:	6010      	str	r0, [r2, #0]
 800afdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afe4:	f380 8811 	msr	BASEPRI, r0
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f7ff f9fe 	bl	800a3f0 <vTaskSwitchContext>
 800aff4:	f04f 0000 	mov.w	r0, #0
 800aff8:	f380 8811 	msr	BASEPRI, r0
 800affc:	bc09      	pop	{r0, r3}
 800affe:	6819      	ldr	r1, [r3, #0]
 800b000:	6808      	ldr	r0, [r1, #0]
 800b002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b006:	f01e 0f10 	tst.w	lr, #16
 800b00a:	bf08      	it	eq
 800b00c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b010:	f380 8809 	msr	PSP, r0
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	f3af 8000 	nop.w

0800b020 <pxCurrentTCBConst>:
 800b020:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b024:	bf00      	nop
 800b026:	bf00      	nop

0800b028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	607b      	str	r3, [r7, #4]
}
 800b040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b042:	f7ff f91d 	bl	800a280 <xTaskIncrementTick>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <SysTick_Handler+0x40>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	2300      	movs	r3, #0
 800b056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	f383 8811 	msr	BASEPRI, r3
}
 800b05e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	e000ed04 	.word	0xe000ed04

0800b06c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b06c:	b480      	push	{r7}
 800b06e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b070:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <vPortSetupTimerInterrupt+0x34>)
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b076:	4b0b      	ldr	r3, [pc, #44]	; (800b0a4 <vPortSetupTimerInterrupt+0x38>)
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b07c:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <vPortSetupTimerInterrupt+0x3c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a0a      	ldr	r2, [pc, #40]	; (800b0ac <vPortSetupTimerInterrupt+0x40>)
 800b082:	fba2 2303 	umull	r2, r3, r2, r3
 800b086:	099b      	lsrs	r3, r3, #6
 800b088:	4a09      	ldr	r2, [pc, #36]	; (800b0b0 <vPortSetupTimerInterrupt+0x44>)
 800b08a:	3b01      	subs	r3, #1
 800b08c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b08e:	4b04      	ldr	r3, [pc, #16]	; (800b0a0 <vPortSetupTimerInterrupt+0x34>)
 800b090:	2207      	movs	r2, #7
 800b092:	601a      	str	r2, [r3, #0]
}
 800b094:	bf00      	nop
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	e000e010 	.word	0xe000e010
 800b0a4:	e000e018 	.word	0xe000e018
 800b0a8:	20000014 	.word	0x20000014
 800b0ac:	10624dd3 	.word	0x10624dd3
 800b0b0:	e000e014 	.word	0xe000e014

0800b0b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0c4 <vPortEnableVFP+0x10>
 800b0b8:	6801      	ldr	r1, [r0, #0]
 800b0ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0be:	6001      	str	r1, [r0, #0]
 800b0c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0c2:	bf00      	nop
 800b0c4:	e000ed88 	.word	0xe000ed88

0800b0c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0ce:	f3ef 8305 	mrs	r3, IPSR
 800b0d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b0f      	cmp	r3, #15
 800b0d8:	d914      	bls.n	800b104 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0da:	4a17      	ldr	r2, [pc, #92]	; (800b138 <vPortValidateInterruptPriority+0x70>)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4413      	add	r3, r2
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0e4:	4b15      	ldr	r3, [pc, #84]	; (800b13c <vPortValidateInterruptPriority+0x74>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	7afa      	ldrb	r2, [r7, #11]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d20a      	bcs.n	800b104 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	607b      	str	r3, [r7, #4]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b104:	4b0e      	ldr	r3, [pc, #56]	; (800b140 <vPortValidateInterruptPriority+0x78>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b10c:	4b0d      	ldr	r3, [pc, #52]	; (800b144 <vPortValidateInterruptPriority+0x7c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d90a      	bls.n	800b12a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	603b      	str	r3, [r7, #0]
}
 800b126:	bf00      	nop
 800b128:	e7fe      	b.n	800b128 <vPortValidateInterruptPriority+0x60>
	}
 800b12a:	bf00      	nop
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	e000e3f0 	.word	0xe000e3f0
 800b13c:	2000047c 	.word	0x2000047c
 800b140:	e000ed0c 	.word	0xe000ed0c
 800b144:	20000480 	.word	0x20000480

0800b148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08a      	sub	sp, #40	; 0x28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b150:	2300      	movs	r3, #0
 800b152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b154:	f7fe ffc8 	bl	800a0e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b158:	4b5b      	ldr	r3, [pc, #364]	; (800b2c8 <pvPortMalloc+0x180>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d101      	bne.n	800b164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b160:	f000 f920 	bl	800b3a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b164:	4b59      	ldr	r3, [pc, #356]	; (800b2cc <pvPortMalloc+0x184>)
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4013      	ands	r3, r2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f040 8093 	bne.w	800b298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d01d      	beq.n	800b1b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b178:	2208      	movs	r2, #8
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4413      	add	r3, r2
 800b17e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f003 0307 	and.w	r3, r3, #7
 800b186:	2b00      	cmp	r3, #0
 800b188:	d014      	beq.n	800b1b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f023 0307 	bic.w	r3, r3, #7
 800b190:	3308      	adds	r3, #8
 800b192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <pvPortMalloc+0x6c>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	617b      	str	r3, [r7, #20]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d06e      	beq.n	800b298 <pvPortMalloc+0x150>
 800b1ba:	4b45      	ldr	r3, [pc, #276]	; (800b2d0 <pvPortMalloc+0x188>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d869      	bhi.n	800b298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1c4:	4b43      	ldr	r3, [pc, #268]	; (800b2d4 <pvPortMalloc+0x18c>)
 800b1c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1c8:	4b42      	ldr	r3, [pc, #264]	; (800b2d4 <pvPortMalloc+0x18c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ce:	e004      	b.n	800b1da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d903      	bls.n	800b1ec <pvPortMalloc+0xa4>
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1f1      	bne.n	800b1d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1ec:	4b36      	ldr	r3, [pc, #216]	; (800b2c8 <pvPortMalloc+0x180>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d050      	beq.n	800b298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2208      	movs	r2, #8
 800b1fc:	4413      	add	r3, r2
 800b1fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	1ad2      	subs	r2, r2, r3
 800b210:	2308      	movs	r3, #8
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	429a      	cmp	r2, r3
 800b216:	d91f      	bls.n	800b258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4413      	add	r3, r2
 800b21e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <pvPortMalloc+0xf8>
	__asm volatile
 800b22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22e:	f383 8811 	msr	BASEPRI, r3
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	613b      	str	r3, [r7, #16]
}
 800b23c:	bf00      	nop
 800b23e:	e7fe      	b.n	800b23e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	1ad2      	subs	r2, r2, r3
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b252:	69b8      	ldr	r0, [r7, #24]
 800b254:	f000 f908 	bl	800b468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b258:	4b1d      	ldr	r3, [pc, #116]	; (800b2d0 <pvPortMalloc+0x188>)
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	4a1b      	ldr	r2, [pc, #108]	; (800b2d0 <pvPortMalloc+0x188>)
 800b264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b266:	4b1a      	ldr	r3, [pc, #104]	; (800b2d0 <pvPortMalloc+0x188>)
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	4b1b      	ldr	r3, [pc, #108]	; (800b2d8 <pvPortMalloc+0x190>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d203      	bcs.n	800b27a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b272:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <pvPortMalloc+0x188>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a18      	ldr	r2, [pc, #96]	; (800b2d8 <pvPortMalloc+0x190>)
 800b278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <pvPortMalloc+0x184>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	431a      	orrs	r2, r3
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b28e:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <pvPortMalloc+0x194>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3301      	adds	r3, #1
 800b294:	4a11      	ldr	r2, [pc, #68]	; (800b2dc <pvPortMalloc+0x194>)
 800b296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b298:	f7fe ff34 	bl	800a104 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00a      	beq.n	800b2bc <pvPortMalloc+0x174>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	60fb      	str	r3, [r7, #12]
}
 800b2b8:	bf00      	nop
 800b2ba:	e7fe      	b.n	800b2ba <pvPortMalloc+0x172>
	return pvReturn;
 800b2bc:	69fb      	ldr	r3, [r7, #28]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3728      	adds	r7, #40	; 0x28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	2000408c 	.word	0x2000408c
 800b2cc:	200040a0 	.word	0x200040a0
 800b2d0:	20004090 	.word	0x20004090
 800b2d4:	20004084 	.word	0x20004084
 800b2d8:	20004094 	.word	0x20004094
 800b2dc:	20004098 	.word	0x20004098

0800b2e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d04d      	beq.n	800b38e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2f2:	2308      	movs	r3, #8
 800b2f4:	425b      	negs	r3, r3
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	685a      	ldr	r2, [r3, #4]
 800b304:	4b24      	ldr	r3, [pc, #144]	; (800b398 <vPortFree+0xb8>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4013      	ands	r3, r2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10a      	bne.n	800b324 <vPortFree+0x44>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	60fb      	str	r3, [r7, #12]
}
 800b320:	bf00      	nop
 800b322:	e7fe      	b.n	800b322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00a      	beq.n	800b342 <vPortFree+0x62>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	60bb      	str	r3, [r7, #8]
}
 800b33e:	bf00      	nop
 800b340:	e7fe      	b.n	800b340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	4b14      	ldr	r3, [pc, #80]	; (800b398 <vPortFree+0xb8>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4013      	ands	r3, r2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01e      	beq.n	800b38e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d11a      	bne.n	800b38e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	4b0e      	ldr	r3, [pc, #56]	; (800b398 <vPortFree+0xb8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	43db      	mvns	r3, r3
 800b362:	401a      	ands	r2, r3
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b368:	f7fe febe 	bl	800a0e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <vPortFree+0xbc>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4413      	add	r3, r2
 800b376:	4a09      	ldr	r2, [pc, #36]	; (800b39c <vPortFree+0xbc>)
 800b378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b37a:	6938      	ldr	r0, [r7, #16]
 800b37c:	f000 f874 	bl	800b468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b380:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <vPortFree+0xc0>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	4a06      	ldr	r2, [pc, #24]	; (800b3a0 <vPortFree+0xc0>)
 800b388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b38a:	f7fe febb 	bl	800a104 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b38e:	bf00      	nop
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	200040a0 	.word	0x200040a0
 800b39c:	20004090 	.word	0x20004090
 800b3a0:	2000409c 	.word	0x2000409c

0800b3a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b3aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b3ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b3b0:	4b27      	ldr	r3, [pc, #156]	; (800b450 <prvHeapInit+0xac>)
 800b3b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f003 0307 	and.w	r3, r3, #7
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00c      	beq.n	800b3d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3307      	adds	r3, #7
 800b3c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 0307 	bic.w	r3, r3, #7
 800b3ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	4a1f      	ldr	r2, [pc, #124]	; (800b450 <prvHeapInit+0xac>)
 800b3d4:	4413      	add	r3, r2
 800b3d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3dc:	4a1d      	ldr	r2, [pc, #116]	; (800b454 <prvHeapInit+0xb0>)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3e2:	4b1c      	ldr	r3, [pc, #112]	; (800b454 <prvHeapInit+0xb0>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3f0:	2208      	movs	r2, #8
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f023 0307 	bic.w	r3, r3, #7
 800b3fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4a15      	ldr	r2, [pc, #84]	; (800b458 <prvHeapInit+0xb4>)
 800b404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b406:	4b14      	ldr	r3, [pc, #80]	; (800b458 <prvHeapInit+0xb4>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2200      	movs	r2, #0
 800b40c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b40e:	4b12      	ldr	r3, [pc, #72]	; (800b458 <prvHeapInit+0xb4>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	1ad2      	subs	r2, r2, r3
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b424:	4b0c      	ldr	r3, [pc, #48]	; (800b458 <prvHeapInit+0xb4>)
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	4a0a      	ldr	r2, [pc, #40]	; (800b45c <prvHeapInit+0xb8>)
 800b432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	4a09      	ldr	r2, [pc, #36]	; (800b460 <prvHeapInit+0xbc>)
 800b43a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b43c:	4b09      	ldr	r3, [pc, #36]	; (800b464 <prvHeapInit+0xc0>)
 800b43e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b442:	601a      	str	r2, [r3, #0]
}
 800b444:	bf00      	nop
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	20000484 	.word	0x20000484
 800b454:	20004084 	.word	0x20004084
 800b458:	2000408c 	.word	0x2000408c
 800b45c:	20004094 	.word	0x20004094
 800b460:	20004090 	.word	0x20004090
 800b464:	200040a0 	.word	0x200040a0

0800b468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b470:	4b28      	ldr	r3, [pc, #160]	; (800b514 <prvInsertBlockIntoFreeList+0xac>)
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	e002      	b.n	800b47c <prvInsertBlockIntoFreeList+0x14>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	429a      	cmp	r2, r3
 800b484:	d8f7      	bhi.n	800b476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	4413      	add	r3, r2
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	429a      	cmp	r2, r3
 800b496:	d108      	bne.n	800b4aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	441a      	add	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	441a      	add	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d118      	bne.n	800b4f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	4b15      	ldr	r3, [pc, #84]	; (800b518 <prvInsertBlockIntoFreeList+0xb0>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d00d      	beq.n	800b4e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	441a      	add	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	e008      	b.n	800b4f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4e6:	4b0c      	ldr	r3, [pc, #48]	; (800b518 <prvInsertBlockIntoFreeList+0xb0>)
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	e003      	b.n	800b4f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d002      	beq.n	800b506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b506:	bf00      	nop
 800b508:	3714      	adds	r7, #20
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	20004084 	.word	0x20004084
 800b518:	2000408c 	.word	0x2000408c

0800b51c <__errno>:
 800b51c:	4b01      	ldr	r3, [pc, #4]	; (800b524 <__errno+0x8>)
 800b51e:	6818      	ldr	r0, [r3, #0]
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	20000024 	.word	0x20000024

0800b528 <__libc_init_array>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	4d0d      	ldr	r5, [pc, #52]	; (800b560 <__libc_init_array+0x38>)
 800b52c:	4c0d      	ldr	r4, [pc, #52]	; (800b564 <__libc_init_array+0x3c>)
 800b52e:	1b64      	subs	r4, r4, r5
 800b530:	10a4      	asrs	r4, r4, #2
 800b532:	2600      	movs	r6, #0
 800b534:	42a6      	cmp	r6, r4
 800b536:	d109      	bne.n	800b54c <__libc_init_array+0x24>
 800b538:	4d0b      	ldr	r5, [pc, #44]	; (800b568 <__libc_init_array+0x40>)
 800b53a:	4c0c      	ldr	r4, [pc, #48]	; (800b56c <__libc_init_array+0x44>)
 800b53c:	f000 fffa 	bl	800c534 <_init>
 800b540:	1b64      	subs	r4, r4, r5
 800b542:	10a4      	asrs	r4, r4, #2
 800b544:	2600      	movs	r6, #0
 800b546:	42a6      	cmp	r6, r4
 800b548:	d105      	bne.n	800b556 <__libc_init_array+0x2e>
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b550:	4798      	blx	r3
 800b552:	3601      	adds	r6, #1
 800b554:	e7ee      	b.n	800b534 <__libc_init_array+0xc>
 800b556:	f855 3b04 	ldr.w	r3, [r5], #4
 800b55a:	4798      	blx	r3
 800b55c:	3601      	adds	r6, #1
 800b55e:	e7f2      	b.n	800b546 <__libc_init_array+0x1e>
 800b560:	0800c848 	.word	0x0800c848
 800b564:	0800c848 	.word	0x0800c848
 800b568:	0800c848 	.word	0x0800c848
 800b56c:	0800c84c 	.word	0x0800c84c

0800b570 <memcpy>:
 800b570:	440a      	add	r2, r1
 800b572:	4291      	cmp	r1, r2
 800b574:	f100 33ff 	add.w	r3, r0, #4294967295
 800b578:	d100      	bne.n	800b57c <memcpy+0xc>
 800b57a:	4770      	bx	lr
 800b57c:	b510      	push	{r4, lr}
 800b57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b582:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b586:	4291      	cmp	r1, r2
 800b588:	d1f9      	bne.n	800b57e <memcpy+0xe>
 800b58a:	bd10      	pop	{r4, pc}

0800b58c <memset>:
 800b58c:	4402      	add	r2, r0
 800b58e:	4603      	mov	r3, r0
 800b590:	4293      	cmp	r3, r2
 800b592:	d100      	bne.n	800b596 <memset+0xa>
 800b594:	4770      	bx	lr
 800b596:	f803 1b01 	strb.w	r1, [r3], #1
 800b59a:	e7f9      	b.n	800b590 <memset+0x4>

0800b59c <iprintf>:
 800b59c:	b40f      	push	{r0, r1, r2, r3}
 800b59e:	4b0a      	ldr	r3, [pc, #40]	; (800b5c8 <iprintf+0x2c>)
 800b5a0:	b513      	push	{r0, r1, r4, lr}
 800b5a2:	681c      	ldr	r4, [r3, #0]
 800b5a4:	b124      	cbz	r4, 800b5b0 <iprintf+0x14>
 800b5a6:	69a3      	ldr	r3, [r4, #24]
 800b5a8:	b913      	cbnz	r3, 800b5b0 <iprintf+0x14>
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 fa5e 	bl	800ba6c <__sinit>
 800b5b0:	ab05      	add	r3, sp, #20
 800b5b2:	9a04      	ldr	r2, [sp, #16]
 800b5b4:	68a1      	ldr	r1, [r4, #8]
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 fc2f 	bl	800be1c <_vfiprintf_r>
 800b5be:	b002      	add	sp, #8
 800b5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5c4:	b004      	add	sp, #16
 800b5c6:	4770      	bx	lr
 800b5c8:	20000024 	.word	0x20000024

0800b5cc <_puts_r>:
 800b5cc:	b570      	push	{r4, r5, r6, lr}
 800b5ce:	460e      	mov	r6, r1
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	b118      	cbz	r0, 800b5dc <_puts_r+0x10>
 800b5d4:	6983      	ldr	r3, [r0, #24]
 800b5d6:	b90b      	cbnz	r3, 800b5dc <_puts_r+0x10>
 800b5d8:	f000 fa48 	bl	800ba6c <__sinit>
 800b5dc:	69ab      	ldr	r3, [r5, #24]
 800b5de:	68ac      	ldr	r4, [r5, #8]
 800b5e0:	b913      	cbnz	r3, 800b5e8 <_puts_r+0x1c>
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 fa42 	bl	800ba6c <__sinit>
 800b5e8:	4b2c      	ldr	r3, [pc, #176]	; (800b69c <_puts_r+0xd0>)
 800b5ea:	429c      	cmp	r4, r3
 800b5ec:	d120      	bne.n	800b630 <_puts_r+0x64>
 800b5ee:	686c      	ldr	r4, [r5, #4]
 800b5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5f2:	07db      	lsls	r3, r3, #31
 800b5f4:	d405      	bmi.n	800b602 <_puts_r+0x36>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	0598      	lsls	r0, r3, #22
 800b5fa:	d402      	bmi.n	800b602 <_puts_r+0x36>
 800b5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5fe:	f000 fad3 	bl	800bba8 <__retarget_lock_acquire_recursive>
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	0719      	lsls	r1, r3, #28
 800b606:	d51d      	bpl.n	800b644 <_puts_r+0x78>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	b1db      	cbz	r3, 800b644 <_puts_r+0x78>
 800b60c:	3e01      	subs	r6, #1
 800b60e:	68a3      	ldr	r3, [r4, #8]
 800b610:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b614:	3b01      	subs	r3, #1
 800b616:	60a3      	str	r3, [r4, #8]
 800b618:	bb39      	cbnz	r1, 800b66a <_puts_r+0x9e>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	da38      	bge.n	800b690 <_puts_r+0xc4>
 800b61e:	4622      	mov	r2, r4
 800b620:	210a      	movs	r1, #10
 800b622:	4628      	mov	r0, r5
 800b624:	f000 f848 	bl	800b6b8 <__swbuf_r>
 800b628:	3001      	adds	r0, #1
 800b62a:	d011      	beq.n	800b650 <_puts_r+0x84>
 800b62c:	250a      	movs	r5, #10
 800b62e:	e011      	b.n	800b654 <_puts_r+0x88>
 800b630:	4b1b      	ldr	r3, [pc, #108]	; (800b6a0 <_puts_r+0xd4>)
 800b632:	429c      	cmp	r4, r3
 800b634:	d101      	bne.n	800b63a <_puts_r+0x6e>
 800b636:	68ac      	ldr	r4, [r5, #8]
 800b638:	e7da      	b.n	800b5f0 <_puts_r+0x24>
 800b63a:	4b1a      	ldr	r3, [pc, #104]	; (800b6a4 <_puts_r+0xd8>)
 800b63c:	429c      	cmp	r4, r3
 800b63e:	bf08      	it	eq
 800b640:	68ec      	ldreq	r4, [r5, #12]
 800b642:	e7d5      	b.n	800b5f0 <_puts_r+0x24>
 800b644:	4621      	mov	r1, r4
 800b646:	4628      	mov	r0, r5
 800b648:	f000 f888 	bl	800b75c <__swsetup_r>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d0dd      	beq.n	800b60c <_puts_r+0x40>
 800b650:	f04f 35ff 	mov.w	r5, #4294967295
 800b654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b656:	07da      	lsls	r2, r3, #31
 800b658:	d405      	bmi.n	800b666 <_puts_r+0x9a>
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	059b      	lsls	r3, r3, #22
 800b65e:	d402      	bmi.n	800b666 <_puts_r+0x9a>
 800b660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b662:	f000 faa2 	bl	800bbaa <__retarget_lock_release_recursive>
 800b666:	4628      	mov	r0, r5
 800b668:	bd70      	pop	{r4, r5, r6, pc}
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	da04      	bge.n	800b678 <_puts_r+0xac>
 800b66e:	69a2      	ldr	r2, [r4, #24]
 800b670:	429a      	cmp	r2, r3
 800b672:	dc06      	bgt.n	800b682 <_puts_r+0xb6>
 800b674:	290a      	cmp	r1, #10
 800b676:	d004      	beq.n	800b682 <_puts_r+0xb6>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	1c5a      	adds	r2, r3, #1
 800b67c:	6022      	str	r2, [r4, #0]
 800b67e:	7019      	strb	r1, [r3, #0]
 800b680:	e7c5      	b.n	800b60e <_puts_r+0x42>
 800b682:	4622      	mov	r2, r4
 800b684:	4628      	mov	r0, r5
 800b686:	f000 f817 	bl	800b6b8 <__swbuf_r>
 800b68a:	3001      	adds	r0, #1
 800b68c:	d1bf      	bne.n	800b60e <_puts_r+0x42>
 800b68e:	e7df      	b.n	800b650 <_puts_r+0x84>
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	250a      	movs	r5, #10
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	6022      	str	r2, [r4, #0]
 800b698:	701d      	strb	r5, [r3, #0]
 800b69a:	e7db      	b.n	800b654 <_puts_r+0x88>
 800b69c:	0800c7cc 	.word	0x0800c7cc
 800b6a0:	0800c7ec 	.word	0x0800c7ec
 800b6a4:	0800c7ac 	.word	0x0800c7ac

0800b6a8 <puts>:
 800b6a8:	4b02      	ldr	r3, [pc, #8]	; (800b6b4 <puts+0xc>)
 800b6aa:	4601      	mov	r1, r0
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	f7ff bf8d 	b.w	800b5cc <_puts_r>
 800b6b2:	bf00      	nop
 800b6b4:	20000024 	.word	0x20000024

0800b6b8 <__swbuf_r>:
 800b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ba:	460e      	mov	r6, r1
 800b6bc:	4614      	mov	r4, r2
 800b6be:	4605      	mov	r5, r0
 800b6c0:	b118      	cbz	r0, 800b6ca <__swbuf_r+0x12>
 800b6c2:	6983      	ldr	r3, [r0, #24]
 800b6c4:	b90b      	cbnz	r3, 800b6ca <__swbuf_r+0x12>
 800b6c6:	f000 f9d1 	bl	800ba6c <__sinit>
 800b6ca:	4b21      	ldr	r3, [pc, #132]	; (800b750 <__swbuf_r+0x98>)
 800b6cc:	429c      	cmp	r4, r3
 800b6ce:	d12b      	bne.n	800b728 <__swbuf_r+0x70>
 800b6d0:	686c      	ldr	r4, [r5, #4]
 800b6d2:	69a3      	ldr	r3, [r4, #24]
 800b6d4:	60a3      	str	r3, [r4, #8]
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	071a      	lsls	r2, r3, #28
 800b6da:	d52f      	bpl.n	800b73c <__swbuf_r+0x84>
 800b6dc:	6923      	ldr	r3, [r4, #16]
 800b6de:	b36b      	cbz	r3, 800b73c <__swbuf_r+0x84>
 800b6e0:	6923      	ldr	r3, [r4, #16]
 800b6e2:	6820      	ldr	r0, [r4, #0]
 800b6e4:	1ac0      	subs	r0, r0, r3
 800b6e6:	6963      	ldr	r3, [r4, #20]
 800b6e8:	b2f6      	uxtb	r6, r6
 800b6ea:	4283      	cmp	r3, r0
 800b6ec:	4637      	mov	r7, r6
 800b6ee:	dc04      	bgt.n	800b6fa <__swbuf_r+0x42>
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f000 f926 	bl	800b944 <_fflush_r>
 800b6f8:	bb30      	cbnz	r0, 800b748 <__swbuf_r+0x90>
 800b6fa:	68a3      	ldr	r3, [r4, #8]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	60a3      	str	r3, [r4, #8]
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	6022      	str	r2, [r4, #0]
 800b706:	701e      	strb	r6, [r3, #0]
 800b708:	6963      	ldr	r3, [r4, #20]
 800b70a:	3001      	adds	r0, #1
 800b70c:	4283      	cmp	r3, r0
 800b70e:	d004      	beq.n	800b71a <__swbuf_r+0x62>
 800b710:	89a3      	ldrh	r3, [r4, #12]
 800b712:	07db      	lsls	r3, r3, #31
 800b714:	d506      	bpl.n	800b724 <__swbuf_r+0x6c>
 800b716:	2e0a      	cmp	r6, #10
 800b718:	d104      	bne.n	800b724 <__swbuf_r+0x6c>
 800b71a:	4621      	mov	r1, r4
 800b71c:	4628      	mov	r0, r5
 800b71e:	f000 f911 	bl	800b944 <_fflush_r>
 800b722:	b988      	cbnz	r0, 800b748 <__swbuf_r+0x90>
 800b724:	4638      	mov	r0, r7
 800b726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b728:	4b0a      	ldr	r3, [pc, #40]	; (800b754 <__swbuf_r+0x9c>)
 800b72a:	429c      	cmp	r4, r3
 800b72c:	d101      	bne.n	800b732 <__swbuf_r+0x7a>
 800b72e:	68ac      	ldr	r4, [r5, #8]
 800b730:	e7cf      	b.n	800b6d2 <__swbuf_r+0x1a>
 800b732:	4b09      	ldr	r3, [pc, #36]	; (800b758 <__swbuf_r+0xa0>)
 800b734:	429c      	cmp	r4, r3
 800b736:	bf08      	it	eq
 800b738:	68ec      	ldreq	r4, [r5, #12]
 800b73a:	e7ca      	b.n	800b6d2 <__swbuf_r+0x1a>
 800b73c:	4621      	mov	r1, r4
 800b73e:	4628      	mov	r0, r5
 800b740:	f000 f80c 	bl	800b75c <__swsetup_r>
 800b744:	2800      	cmp	r0, #0
 800b746:	d0cb      	beq.n	800b6e0 <__swbuf_r+0x28>
 800b748:	f04f 37ff 	mov.w	r7, #4294967295
 800b74c:	e7ea      	b.n	800b724 <__swbuf_r+0x6c>
 800b74e:	bf00      	nop
 800b750:	0800c7cc 	.word	0x0800c7cc
 800b754:	0800c7ec 	.word	0x0800c7ec
 800b758:	0800c7ac 	.word	0x0800c7ac

0800b75c <__swsetup_r>:
 800b75c:	4b32      	ldr	r3, [pc, #200]	; (800b828 <__swsetup_r+0xcc>)
 800b75e:	b570      	push	{r4, r5, r6, lr}
 800b760:	681d      	ldr	r5, [r3, #0]
 800b762:	4606      	mov	r6, r0
 800b764:	460c      	mov	r4, r1
 800b766:	b125      	cbz	r5, 800b772 <__swsetup_r+0x16>
 800b768:	69ab      	ldr	r3, [r5, #24]
 800b76a:	b913      	cbnz	r3, 800b772 <__swsetup_r+0x16>
 800b76c:	4628      	mov	r0, r5
 800b76e:	f000 f97d 	bl	800ba6c <__sinit>
 800b772:	4b2e      	ldr	r3, [pc, #184]	; (800b82c <__swsetup_r+0xd0>)
 800b774:	429c      	cmp	r4, r3
 800b776:	d10f      	bne.n	800b798 <__swsetup_r+0x3c>
 800b778:	686c      	ldr	r4, [r5, #4]
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b780:	0719      	lsls	r1, r3, #28
 800b782:	d42c      	bmi.n	800b7de <__swsetup_r+0x82>
 800b784:	06dd      	lsls	r5, r3, #27
 800b786:	d411      	bmi.n	800b7ac <__swsetup_r+0x50>
 800b788:	2309      	movs	r3, #9
 800b78a:	6033      	str	r3, [r6, #0]
 800b78c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	f04f 30ff 	mov.w	r0, #4294967295
 800b796:	e03e      	b.n	800b816 <__swsetup_r+0xba>
 800b798:	4b25      	ldr	r3, [pc, #148]	; (800b830 <__swsetup_r+0xd4>)
 800b79a:	429c      	cmp	r4, r3
 800b79c:	d101      	bne.n	800b7a2 <__swsetup_r+0x46>
 800b79e:	68ac      	ldr	r4, [r5, #8]
 800b7a0:	e7eb      	b.n	800b77a <__swsetup_r+0x1e>
 800b7a2:	4b24      	ldr	r3, [pc, #144]	; (800b834 <__swsetup_r+0xd8>)
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	bf08      	it	eq
 800b7a8:	68ec      	ldreq	r4, [r5, #12]
 800b7aa:	e7e6      	b.n	800b77a <__swsetup_r+0x1e>
 800b7ac:	0758      	lsls	r0, r3, #29
 800b7ae:	d512      	bpl.n	800b7d6 <__swsetup_r+0x7a>
 800b7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7b2:	b141      	cbz	r1, 800b7c6 <__swsetup_r+0x6a>
 800b7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7b8:	4299      	cmp	r1, r3
 800b7ba:	d002      	beq.n	800b7c2 <__swsetup_r+0x66>
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f000 fa59 	bl	800bc74 <_free_r>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	6063      	str	r3, [r4, #4]
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	f043 0308 	orr.w	r3, r3, #8
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	6923      	ldr	r3, [r4, #16]
 800b7e0:	b94b      	cbnz	r3, 800b7f6 <__swsetup_r+0x9a>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ec:	d003      	beq.n	800b7f6 <__swsetup_r+0x9a>
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f000 f9ff 	bl	800bbf4 <__smakebuf_r>
 800b7f6:	89a0      	ldrh	r0, [r4, #12]
 800b7f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7fc:	f010 0301 	ands.w	r3, r0, #1
 800b800:	d00a      	beq.n	800b818 <__swsetup_r+0xbc>
 800b802:	2300      	movs	r3, #0
 800b804:	60a3      	str	r3, [r4, #8]
 800b806:	6963      	ldr	r3, [r4, #20]
 800b808:	425b      	negs	r3, r3
 800b80a:	61a3      	str	r3, [r4, #24]
 800b80c:	6923      	ldr	r3, [r4, #16]
 800b80e:	b943      	cbnz	r3, 800b822 <__swsetup_r+0xc6>
 800b810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b814:	d1ba      	bne.n	800b78c <__swsetup_r+0x30>
 800b816:	bd70      	pop	{r4, r5, r6, pc}
 800b818:	0781      	lsls	r1, r0, #30
 800b81a:	bf58      	it	pl
 800b81c:	6963      	ldrpl	r3, [r4, #20]
 800b81e:	60a3      	str	r3, [r4, #8]
 800b820:	e7f4      	b.n	800b80c <__swsetup_r+0xb0>
 800b822:	2000      	movs	r0, #0
 800b824:	e7f7      	b.n	800b816 <__swsetup_r+0xba>
 800b826:	bf00      	nop
 800b828:	20000024 	.word	0x20000024
 800b82c:	0800c7cc 	.word	0x0800c7cc
 800b830:	0800c7ec 	.word	0x0800c7ec
 800b834:	0800c7ac 	.word	0x0800c7ac

0800b838 <__sflush_r>:
 800b838:	898a      	ldrh	r2, [r1, #12]
 800b83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b83e:	4605      	mov	r5, r0
 800b840:	0710      	lsls	r0, r2, #28
 800b842:	460c      	mov	r4, r1
 800b844:	d458      	bmi.n	800b8f8 <__sflush_r+0xc0>
 800b846:	684b      	ldr	r3, [r1, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	dc05      	bgt.n	800b858 <__sflush_r+0x20>
 800b84c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b84e:	2b00      	cmp	r3, #0
 800b850:	dc02      	bgt.n	800b858 <__sflush_r+0x20>
 800b852:	2000      	movs	r0, #0
 800b854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b85a:	2e00      	cmp	r6, #0
 800b85c:	d0f9      	beq.n	800b852 <__sflush_r+0x1a>
 800b85e:	2300      	movs	r3, #0
 800b860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b864:	682f      	ldr	r7, [r5, #0]
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	d032      	beq.n	800b8d0 <__sflush_r+0x98>
 800b86a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	075a      	lsls	r2, r3, #29
 800b870:	d505      	bpl.n	800b87e <__sflush_r+0x46>
 800b872:	6863      	ldr	r3, [r4, #4]
 800b874:	1ac0      	subs	r0, r0, r3
 800b876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b878:	b10b      	cbz	r3, 800b87e <__sflush_r+0x46>
 800b87a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b87c:	1ac0      	subs	r0, r0, r3
 800b87e:	2300      	movs	r3, #0
 800b880:	4602      	mov	r2, r0
 800b882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b884:	6a21      	ldr	r1, [r4, #32]
 800b886:	4628      	mov	r0, r5
 800b888:	47b0      	blx	r6
 800b88a:	1c43      	adds	r3, r0, #1
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	d106      	bne.n	800b89e <__sflush_r+0x66>
 800b890:	6829      	ldr	r1, [r5, #0]
 800b892:	291d      	cmp	r1, #29
 800b894:	d82c      	bhi.n	800b8f0 <__sflush_r+0xb8>
 800b896:	4a2a      	ldr	r2, [pc, #168]	; (800b940 <__sflush_r+0x108>)
 800b898:	40ca      	lsrs	r2, r1
 800b89a:	07d6      	lsls	r6, r2, #31
 800b89c:	d528      	bpl.n	800b8f0 <__sflush_r+0xb8>
 800b89e:	2200      	movs	r2, #0
 800b8a0:	6062      	str	r2, [r4, #4]
 800b8a2:	04d9      	lsls	r1, r3, #19
 800b8a4:	6922      	ldr	r2, [r4, #16]
 800b8a6:	6022      	str	r2, [r4, #0]
 800b8a8:	d504      	bpl.n	800b8b4 <__sflush_r+0x7c>
 800b8aa:	1c42      	adds	r2, r0, #1
 800b8ac:	d101      	bne.n	800b8b2 <__sflush_r+0x7a>
 800b8ae:	682b      	ldr	r3, [r5, #0]
 800b8b0:	b903      	cbnz	r3, 800b8b4 <__sflush_r+0x7c>
 800b8b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b8b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8b6:	602f      	str	r7, [r5, #0]
 800b8b8:	2900      	cmp	r1, #0
 800b8ba:	d0ca      	beq.n	800b852 <__sflush_r+0x1a>
 800b8bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8c0:	4299      	cmp	r1, r3
 800b8c2:	d002      	beq.n	800b8ca <__sflush_r+0x92>
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	f000 f9d5 	bl	800bc74 <_free_r>
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	6360      	str	r0, [r4, #52]	; 0x34
 800b8ce:	e7c1      	b.n	800b854 <__sflush_r+0x1c>
 800b8d0:	6a21      	ldr	r1, [r4, #32]
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	47b0      	blx	r6
 800b8d8:	1c41      	adds	r1, r0, #1
 800b8da:	d1c7      	bne.n	800b86c <__sflush_r+0x34>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0c4      	beq.n	800b86c <__sflush_r+0x34>
 800b8e2:	2b1d      	cmp	r3, #29
 800b8e4:	d001      	beq.n	800b8ea <__sflush_r+0xb2>
 800b8e6:	2b16      	cmp	r3, #22
 800b8e8:	d101      	bne.n	800b8ee <__sflush_r+0xb6>
 800b8ea:	602f      	str	r7, [r5, #0]
 800b8ec:	e7b1      	b.n	800b852 <__sflush_r+0x1a>
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	e7ad      	b.n	800b854 <__sflush_r+0x1c>
 800b8f8:	690f      	ldr	r7, [r1, #16]
 800b8fa:	2f00      	cmp	r7, #0
 800b8fc:	d0a9      	beq.n	800b852 <__sflush_r+0x1a>
 800b8fe:	0793      	lsls	r3, r2, #30
 800b900:	680e      	ldr	r6, [r1, #0]
 800b902:	bf08      	it	eq
 800b904:	694b      	ldreq	r3, [r1, #20]
 800b906:	600f      	str	r7, [r1, #0]
 800b908:	bf18      	it	ne
 800b90a:	2300      	movne	r3, #0
 800b90c:	eba6 0807 	sub.w	r8, r6, r7
 800b910:	608b      	str	r3, [r1, #8]
 800b912:	f1b8 0f00 	cmp.w	r8, #0
 800b916:	dd9c      	ble.n	800b852 <__sflush_r+0x1a>
 800b918:	6a21      	ldr	r1, [r4, #32]
 800b91a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b91c:	4643      	mov	r3, r8
 800b91e:	463a      	mov	r2, r7
 800b920:	4628      	mov	r0, r5
 800b922:	47b0      	blx	r6
 800b924:	2800      	cmp	r0, #0
 800b926:	dc06      	bgt.n	800b936 <__sflush_r+0xfe>
 800b928:	89a3      	ldrh	r3, [r4, #12]
 800b92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b92e:	81a3      	strh	r3, [r4, #12]
 800b930:	f04f 30ff 	mov.w	r0, #4294967295
 800b934:	e78e      	b.n	800b854 <__sflush_r+0x1c>
 800b936:	4407      	add	r7, r0
 800b938:	eba8 0800 	sub.w	r8, r8, r0
 800b93c:	e7e9      	b.n	800b912 <__sflush_r+0xda>
 800b93e:	bf00      	nop
 800b940:	20400001 	.word	0x20400001

0800b944 <_fflush_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	690b      	ldr	r3, [r1, #16]
 800b948:	4605      	mov	r5, r0
 800b94a:	460c      	mov	r4, r1
 800b94c:	b913      	cbnz	r3, 800b954 <_fflush_r+0x10>
 800b94e:	2500      	movs	r5, #0
 800b950:	4628      	mov	r0, r5
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	b118      	cbz	r0, 800b95e <_fflush_r+0x1a>
 800b956:	6983      	ldr	r3, [r0, #24]
 800b958:	b90b      	cbnz	r3, 800b95e <_fflush_r+0x1a>
 800b95a:	f000 f887 	bl	800ba6c <__sinit>
 800b95e:	4b14      	ldr	r3, [pc, #80]	; (800b9b0 <_fflush_r+0x6c>)
 800b960:	429c      	cmp	r4, r3
 800b962:	d11b      	bne.n	800b99c <_fflush_r+0x58>
 800b964:	686c      	ldr	r4, [r5, #4]
 800b966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0ef      	beq.n	800b94e <_fflush_r+0xa>
 800b96e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b970:	07d0      	lsls	r0, r2, #31
 800b972:	d404      	bmi.n	800b97e <_fflush_r+0x3a>
 800b974:	0599      	lsls	r1, r3, #22
 800b976:	d402      	bmi.n	800b97e <_fflush_r+0x3a>
 800b978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b97a:	f000 f915 	bl	800bba8 <__retarget_lock_acquire_recursive>
 800b97e:	4628      	mov	r0, r5
 800b980:	4621      	mov	r1, r4
 800b982:	f7ff ff59 	bl	800b838 <__sflush_r>
 800b986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b988:	07da      	lsls	r2, r3, #31
 800b98a:	4605      	mov	r5, r0
 800b98c:	d4e0      	bmi.n	800b950 <_fflush_r+0xc>
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	059b      	lsls	r3, r3, #22
 800b992:	d4dd      	bmi.n	800b950 <_fflush_r+0xc>
 800b994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b996:	f000 f908 	bl	800bbaa <__retarget_lock_release_recursive>
 800b99a:	e7d9      	b.n	800b950 <_fflush_r+0xc>
 800b99c:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <_fflush_r+0x70>)
 800b99e:	429c      	cmp	r4, r3
 800b9a0:	d101      	bne.n	800b9a6 <_fflush_r+0x62>
 800b9a2:	68ac      	ldr	r4, [r5, #8]
 800b9a4:	e7df      	b.n	800b966 <_fflush_r+0x22>
 800b9a6:	4b04      	ldr	r3, [pc, #16]	; (800b9b8 <_fflush_r+0x74>)
 800b9a8:	429c      	cmp	r4, r3
 800b9aa:	bf08      	it	eq
 800b9ac:	68ec      	ldreq	r4, [r5, #12]
 800b9ae:	e7da      	b.n	800b966 <_fflush_r+0x22>
 800b9b0:	0800c7cc 	.word	0x0800c7cc
 800b9b4:	0800c7ec 	.word	0x0800c7ec
 800b9b8:	0800c7ac 	.word	0x0800c7ac

0800b9bc <std>:
 800b9bc:	2300      	movs	r3, #0
 800b9be:	b510      	push	{r4, lr}
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b9c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9ca:	6083      	str	r3, [r0, #8]
 800b9cc:	8181      	strh	r1, [r0, #12]
 800b9ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b9d0:	81c2      	strh	r2, [r0, #14]
 800b9d2:	6183      	str	r3, [r0, #24]
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	2208      	movs	r2, #8
 800b9d8:	305c      	adds	r0, #92	; 0x5c
 800b9da:	f7ff fdd7 	bl	800b58c <memset>
 800b9de:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <std+0x38>)
 800b9e0:	6263      	str	r3, [r4, #36]	; 0x24
 800b9e2:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <std+0x3c>)
 800b9e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9e6:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <std+0x40>)
 800b9e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9ea:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <std+0x44>)
 800b9ec:	6224      	str	r4, [r4, #32]
 800b9ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b9f0:	bd10      	pop	{r4, pc}
 800b9f2:	bf00      	nop
 800b9f4:	0800c3c5 	.word	0x0800c3c5
 800b9f8:	0800c3e7 	.word	0x0800c3e7
 800b9fc:	0800c41f 	.word	0x0800c41f
 800ba00:	0800c443 	.word	0x0800c443

0800ba04 <_cleanup_r>:
 800ba04:	4901      	ldr	r1, [pc, #4]	; (800ba0c <_cleanup_r+0x8>)
 800ba06:	f000 b8af 	b.w	800bb68 <_fwalk_reent>
 800ba0a:	bf00      	nop
 800ba0c:	0800b945 	.word	0x0800b945

0800ba10 <__sfmoreglue>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	1e4a      	subs	r2, r1, #1
 800ba14:	2568      	movs	r5, #104	; 0x68
 800ba16:	4355      	muls	r5, r2
 800ba18:	460e      	mov	r6, r1
 800ba1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba1e:	f000 f979 	bl	800bd14 <_malloc_r>
 800ba22:	4604      	mov	r4, r0
 800ba24:	b140      	cbz	r0, 800ba38 <__sfmoreglue+0x28>
 800ba26:	2100      	movs	r1, #0
 800ba28:	e9c0 1600 	strd	r1, r6, [r0]
 800ba2c:	300c      	adds	r0, #12
 800ba2e:	60a0      	str	r0, [r4, #8]
 800ba30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba34:	f7ff fdaa 	bl	800b58c <memset>
 800ba38:	4620      	mov	r0, r4
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}

0800ba3c <__sfp_lock_acquire>:
 800ba3c:	4801      	ldr	r0, [pc, #4]	; (800ba44 <__sfp_lock_acquire+0x8>)
 800ba3e:	f000 b8b3 	b.w	800bba8 <__retarget_lock_acquire_recursive>
 800ba42:	bf00      	nop
 800ba44:	2000443c 	.word	0x2000443c

0800ba48 <__sfp_lock_release>:
 800ba48:	4801      	ldr	r0, [pc, #4]	; (800ba50 <__sfp_lock_release+0x8>)
 800ba4a:	f000 b8ae 	b.w	800bbaa <__retarget_lock_release_recursive>
 800ba4e:	bf00      	nop
 800ba50:	2000443c 	.word	0x2000443c

0800ba54 <__sinit_lock_acquire>:
 800ba54:	4801      	ldr	r0, [pc, #4]	; (800ba5c <__sinit_lock_acquire+0x8>)
 800ba56:	f000 b8a7 	b.w	800bba8 <__retarget_lock_acquire_recursive>
 800ba5a:	bf00      	nop
 800ba5c:	20004437 	.word	0x20004437

0800ba60 <__sinit_lock_release>:
 800ba60:	4801      	ldr	r0, [pc, #4]	; (800ba68 <__sinit_lock_release+0x8>)
 800ba62:	f000 b8a2 	b.w	800bbaa <__retarget_lock_release_recursive>
 800ba66:	bf00      	nop
 800ba68:	20004437 	.word	0x20004437

0800ba6c <__sinit>:
 800ba6c:	b510      	push	{r4, lr}
 800ba6e:	4604      	mov	r4, r0
 800ba70:	f7ff fff0 	bl	800ba54 <__sinit_lock_acquire>
 800ba74:	69a3      	ldr	r3, [r4, #24]
 800ba76:	b11b      	cbz	r3, 800ba80 <__sinit+0x14>
 800ba78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba7c:	f7ff bff0 	b.w	800ba60 <__sinit_lock_release>
 800ba80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba84:	6523      	str	r3, [r4, #80]	; 0x50
 800ba86:	4b13      	ldr	r3, [pc, #76]	; (800bad4 <__sinit+0x68>)
 800ba88:	4a13      	ldr	r2, [pc, #76]	; (800bad8 <__sinit+0x6c>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba8e:	42a3      	cmp	r3, r4
 800ba90:	bf04      	itt	eq
 800ba92:	2301      	moveq	r3, #1
 800ba94:	61a3      	streq	r3, [r4, #24]
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 f820 	bl	800badc <__sfp>
 800ba9c:	6060      	str	r0, [r4, #4]
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 f81c 	bl	800badc <__sfp>
 800baa4:	60a0      	str	r0, [r4, #8]
 800baa6:	4620      	mov	r0, r4
 800baa8:	f000 f818 	bl	800badc <__sfp>
 800baac:	2200      	movs	r2, #0
 800baae:	60e0      	str	r0, [r4, #12]
 800bab0:	2104      	movs	r1, #4
 800bab2:	6860      	ldr	r0, [r4, #4]
 800bab4:	f7ff ff82 	bl	800b9bc <std>
 800bab8:	68a0      	ldr	r0, [r4, #8]
 800baba:	2201      	movs	r2, #1
 800babc:	2109      	movs	r1, #9
 800babe:	f7ff ff7d 	bl	800b9bc <std>
 800bac2:	68e0      	ldr	r0, [r4, #12]
 800bac4:	2202      	movs	r2, #2
 800bac6:	2112      	movs	r1, #18
 800bac8:	f7ff ff78 	bl	800b9bc <std>
 800bacc:	2301      	movs	r3, #1
 800bace:	61a3      	str	r3, [r4, #24]
 800bad0:	e7d2      	b.n	800ba78 <__sinit+0xc>
 800bad2:	bf00      	nop
 800bad4:	0800c7a8 	.word	0x0800c7a8
 800bad8:	0800ba05 	.word	0x0800ba05

0800badc <__sfp>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	4607      	mov	r7, r0
 800bae0:	f7ff ffac 	bl	800ba3c <__sfp_lock_acquire>
 800bae4:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <__sfp+0x84>)
 800bae6:	681e      	ldr	r6, [r3, #0]
 800bae8:	69b3      	ldr	r3, [r6, #24]
 800baea:	b913      	cbnz	r3, 800baf2 <__sfp+0x16>
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff ffbd 	bl	800ba6c <__sinit>
 800baf2:	3648      	adds	r6, #72	; 0x48
 800baf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	d503      	bpl.n	800bb04 <__sfp+0x28>
 800bafc:	6833      	ldr	r3, [r6, #0]
 800bafe:	b30b      	cbz	r3, 800bb44 <__sfp+0x68>
 800bb00:	6836      	ldr	r6, [r6, #0]
 800bb02:	e7f7      	b.n	800baf4 <__sfp+0x18>
 800bb04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb08:	b9d5      	cbnz	r5, 800bb40 <__sfp+0x64>
 800bb0a:	4b16      	ldr	r3, [pc, #88]	; (800bb64 <__sfp+0x88>)
 800bb0c:	60e3      	str	r3, [r4, #12]
 800bb0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb12:	6665      	str	r5, [r4, #100]	; 0x64
 800bb14:	f000 f847 	bl	800bba6 <__retarget_lock_init_recursive>
 800bb18:	f7ff ff96 	bl	800ba48 <__sfp_lock_release>
 800bb1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb24:	6025      	str	r5, [r4, #0]
 800bb26:	61a5      	str	r5, [r4, #24]
 800bb28:	2208      	movs	r2, #8
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb30:	f7ff fd2c 	bl	800b58c <memset>
 800bb34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb40:	3468      	adds	r4, #104	; 0x68
 800bb42:	e7d9      	b.n	800baf8 <__sfp+0x1c>
 800bb44:	2104      	movs	r1, #4
 800bb46:	4638      	mov	r0, r7
 800bb48:	f7ff ff62 	bl	800ba10 <__sfmoreglue>
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	6030      	str	r0, [r6, #0]
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d1d5      	bne.n	800bb00 <__sfp+0x24>
 800bb54:	f7ff ff78 	bl	800ba48 <__sfp_lock_release>
 800bb58:	230c      	movs	r3, #12
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	e7ee      	b.n	800bb3c <__sfp+0x60>
 800bb5e:	bf00      	nop
 800bb60:	0800c7a8 	.word	0x0800c7a8
 800bb64:	ffff0001 	.word	0xffff0001

0800bb68 <_fwalk_reent>:
 800bb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	4688      	mov	r8, r1
 800bb70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb74:	2700      	movs	r7, #0
 800bb76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb7a:	f1b9 0901 	subs.w	r9, r9, #1
 800bb7e:	d505      	bpl.n	800bb8c <_fwalk_reent+0x24>
 800bb80:	6824      	ldr	r4, [r4, #0]
 800bb82:	2c00      	cmp	r4, #0
 800bb84:	d1f7      	bne.n	800bb76 <_fwalk_reent+0xe>
 800bb86:	4638      	mov	r0, r7
 800bb88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb8c:	89ab      	ldrh	r3, [r5, #12]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d907      	bls.n	800bba2 <_fwalk_reent+0x3a>
 800bb92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb96:	3301      	adds	r3, #1
 800bb98:	d003      	beq.n	800bba2 <_fwalk_reent+0x3a>
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	47c0      	blx	r8
 800bba0:	4307      	orrs	r7, r0
 800bba2:	3568      	adds	r5, #104	; 0x68
 800bba4:	e7e9      	b.n	800bb7a <_fwalk_reent+0x12>

0800bba6 <__retarget_lock_init_recursive>:
 800bba6:	4770      	bx	lr

0800bba8 <__retarget_lock_acquire_recursive>:
 800bba8:	4770      	bx	lr

0800bbaa <__retarget_lock_release_recursive>:
 800bbaa:	4770      	bx	lr

0800bbac <__swhatbuf_r>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	460e      	mov	r6, r1
 800bbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb4:	2900      	cmp	r1, #0
 800bbb6:	b096      	sub	sp, #88	; 0x58
 800bbb8:	4614      	mov	r4, r2
 800bbba:	461d      	mov	r5, r3
 800bbbc:	da07      	bge.n	800bbce <__swhatbuf_r+0x22>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	602b      	str	r3, [r5, #0]
 800bbc2:	89b3      	ldrh	r3, [r6, #12]
 800bbc4:	061a      	lsls	r2, r3, #24
 800bbc6:	d410      	bmi.n	800bbea <__swhatbuf_r+0x3e>
 800bbc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbcc:	e00e      	b.n	800bbec <__swhatbuf_r+0x40>
 800bbce:	466a      	mov	r2, sp
 800bbd0:	f000 fc5e 	bl	800c490 <_fstat_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	dbf2      	blt.n	800bbbe <__swhatbuf_r+0x12>
 800bbd8:	9a01      	ldr	r2, [sp, #4]
 800bbda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bbde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bbe2:	425a      	negs	r2, r3
 800bbe4:	415a      	adcs	r2, r3
 800bbe6:	602a      	str	r2, [r5, #0]
 800bbe8:	e7ee      	b.n	800bbc8 <__swhatbuf_r+0x1c>
 800bbea:	2340      	movs	r3, #64	; 0x40
 800bbec:	2000      	movs	r0, #0
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	b016      	add	sp, #88	; 0x58
 800bbf2:	bd70      	pop	{r4, r5, r6, pc}

0800bbf4 <__smakebuf_r>:
 800bbf4:	898b      	ldrh	r3, [r1, #12]
 800bbf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbf8:	079d      	lsls	r5, r3, #30
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	d507      	bpl.n	800bc10 <__smakebuf_r+0x1c>
 800bc00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	6123      	str	r3, [r4, #16]
 800bc08:	2301      	movs	r3, #1
 800bc0a:	6163      	str	r3, [r4, #20]
 800bc0c:	b002      	add	sp, #8
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}
 800bc10:	ab01      	add	r3, sp, #4
 800bc12:	466a      	mov	r2, sp
 800bc14:	f7ff ffca 	bl	800bbac <__swhatbuf_r>
 800bc18:	9900      	ldr	r1, [sp, #0]
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f000 f879 	bl	800bd14 <_malloc_r>
 800bc22:	b948      	cbnz	r0, 800bc38 <__smakebuf_r+0x44>
 800bc24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc28:	059a      	lsls	r2, r3, #22
 800bc2a:	d4ef      	bmi.n	800bc0c <__smakebuf_r+0x18>
 800bc2c:	f023 0303 	bic.w	r3, r3, #3
 800bc30:	f043 0302 	orr.w	r3, r3, #2
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	e7e3      	b.n	800bc00 <__smakebuf_r+0xc>
 800bc38:	4b0d      	ldr	r3, [pc, #52]	; (800bc70 <__smakebuf_r+0x7c>)
 800bc3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	6020      	str	r0, [r4, #0]
 800bc40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc44:	81a3      	strh	r3, [r4, #12]
 800bc46:	9b00      	ldr	r3, [sp, #0]
 800bc48:	6163      	str	r3, [r4, #20]
 800bc4a:	9b01      	ldr	r3, [sp, #4]
 800bc4c:	6120      	str	r0, [r4, #16]
 800bc4e:	b15b      	cbz	r3, 800bc68 <__smakebuf_r+0x74>
 800bc50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc54:	4630      	mov	r0, r6
 800bc56:	f000 fc2d 	bl	800c4b4 <_isatty_r>
 800bc5a:	b128      	cbz	r0, 800bc68 <__smakebuf_r+0x74>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	f023 0303 	bic.w	r3, r3, #3
 800bc62:	f043 0301 	orr.w	r3, r3, #1
 800bc66:	81a3      	strh	r3, [r4, #12]
 800bc68:	89a0      	ldrh	r0, [r4, #12]
 800bc6a:	4305      	orrs	r5, r0
 800bc6c:	81a5      	strh	r5, [r4, #12]
 800bc6e:	e7cd      	b.n	800bc0c <__smakebuf_r+0x18>
 800bc70:	0800ba05 	.word	0x0800ba05

0800bc74 <_free_r>:
 800bc74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc76:	2900      	cmp	r1, #0
 800bc78:	d048      	beq.n	800bd0c <_free_r+0x98>
 800bc7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc7e:	9001      	str	r0, [sp, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f1a1 0404 	sub.w	r4, r1, #4
 800bc86:	bfb8      	it	lt
 800bc88:	18e4      	addlt	r4, r4, r3
 800bc8a:	f000 fc35 	bl	800c4f8 <__malloc_lock>
 800bc8e:	4a20      	ldr	r2, [pc, #128]	; (800bd10 <_free_r+0x9c>)
 800bc90:	9801      	ldr	r0, [sp, #4]
 800bc92:	6813      	ldr	r3, [r2, #0]
 800bc94:	4615      	mov	r5, r2
 800bc96:	b933      	cbnz	r3, 800bca6 <_free_r+0x32>
 800bc98:	6063      	str	r3, [r4, #4]
 800bc9a:	6014      	str	r4, [r2, #0]
 800bc9c:	b003      	add	sp, #12
 800bc9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bca2:	f000 bc2f 	b.w	800c504 <__malloc_unlock>
 800bca6:	42a3      	cmp	r3, r4
 800bca8:	d90b      	bls.n	800bcc2 <_free_r+0x4e>
 800bcaa:	6821      	ldr	r1, [r4, #0]
 800bcac:	1862      	adds	r2, r4, r1
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	bf04      	itt	eq
 800bcb2:	681a      	ldreq	r2, [r3, #0]
 800bcb4:	685b      	ldreq	r3, [r3, #4]
 800bcb6:	6063      	str	r3, [r4, #4]
 800bcb8:	bf04      	itt	eq
 800bcba:	1852      	addeq	r2, r2, r1
 800bcbc:	6022      	streq	r2, [r4, #0]
 800bcbe:	602c      	str	r4, [r5, #0]
 800bcc0:	e7ec      	b.n	800bc9c <_free_r+0x28>
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	b10b      	cbz	r3, 800bccc <_free_r+0x58>
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	d9fa      	bls.n	800bcc2 <_free_r+0x4e>
 800bccc:	6811      	ldr	r1, [r2, #0]
 800bcce:	1855      	adds	r5, r2, r1
 800bcd0:	42a5      	cmp	r5, r4
 800bcd2:	d10b      	bne.n	800bcec <_free_r+0x78>
 800bcd4:	6824      	ldr	r4, [r4, #0]
 800bcd6:	4421      	add	r1, r4
 800bcd8:	1854      	adds	r4, r2, r1
 800bcda:	42a3      	cmp	r3, r4
 800bcdc:	6011      	str	r1, [r2, #0]
 800bcde:	d1dd      	bne.n	800bc9c <_free_r+0x28>
 800bce0:	681c      	ldr	r4, [r3, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	6053      	str	r3, [r2, #4]
 800bce6:	4421      	add	r1, r4
 800bce8:	6011      	str	r1, [r2, #0]
 800bcea:	e7d7      	b.n	800bc9c <_free_r+0x28>
 800bcec:	d902      	bls.n	800bcf4 <_free_r+0x80>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	e7d3      	b.n	800bc9c <_free_r+0x28>
 800bcf4:	6825      	ldr	r5, [r4, #0]
 800bcf6:	1961      	adds	r1, r4, r5
 800bcf8:	428b      	cmp	r3, r1
 800bcfa:	bf04      	itt	eq
 800bcfc:	6819      	ldreq	r1, [r3, #0]
 800bcfe:	685b      	ldreq	r3, [r3, #4]
 800bd00:	6063      	str	r3, [r4, #4]
 800bd02:	bf04      	itt	eq
 800bd04:	1949      	addeq	r1, r1, r5
 800bd06:	6021      	streq	r1, [r4, #0]
 800bd08:	6054      	str	r4, [r2, #4]
 800bd0a:	e7c7      	b.n	800bc9c <_free_r+0x28>
 800bd0c:	b003      	add	sp, #12
 800bd0e:	bd30      	pop	{r4, r5, pc}
 800bd10:	200040a4 	.word	0x200040a4

0800bd14 <_malloc_r>:
 800bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd16:	1ccd      	adds	r5, r1, #3
 800bd18:	f025 0503 	bic.w	r5, r5, #3
 800bd1c:	3508      	adds	r5, #8
 800bd1e:	2d0c      	cmp	r5, #12
 800bd20:	bf38      	it	cc
 800bd22:	250c      	movcc	r5, #12
 800bd24:	2d00      	cmp	r5, #0
 800bd26:	4606      	mov	r6, r0
 800bd28:	db01      	blt.n	800bd2e <_malloc_r+0x1a>
 800bd2a:	42a9      	cmp	r1, r5
 800bd2c:	d903      	bls.n	800bd36 <_malloc_r+0x22>
 800bd2e:	230c      	movs	r3, #12
 800bd30:	6033      	str	r3, [r6, #0]
 800bd32:	2000      	movs	r0, #0
 800bd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd36:	f000 fbdf 	bl	800c4f8 <__malloc_lock>
 800bd3a:	4921      	ldr	r1, [pc, #132]	; (800bdc0 <_malloc_r+0xac>)
 800bd3c:	680a      	ldr	r2, [r1, #0]
 800bd3e:	4614      	mov	r4, r2
 800bd40:	b99c      	cbnz	r4, 800bd6a <_malloc_r+0x56>
 800bd42:	4f20      	ldr	r7, [pc, #128]	; (800bdc4 <_malloc_r+0xb0>)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	b923      	cbnz	r3, 800bd52 <_malloc_r+0x3e>
 800bd48:	4621      	mov	r1, r4
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f000 fb2a 	bl	800c3a4 <_sbrk_r>
 800bd50:	6038      	str	r0, [r7, #0]
 800bd52:	4629      	mov	r1, r5
 800bd54:	4630      	mov	r0, r6
 800bd56:	f000 fb25 	bl	800c3a4 <_sbrk_r>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	d123      	bne.n	800bda6 <_malloc_r+0x92>
 800bd5e:	230c      	movs	r3, #12
 800bd60:	6033      	str	r3, [r6, #0]
 800bd62:	4630      	mov	r0, r6
 800bd64:	f000 fbce 	bl	800c504 <__malloc_unlock>
 800bd68:	e7e3      	b.n	800bd32 <_malloc_r+0x1e>
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	1b5b      	subs	r3, r3, r5
 800bd6e:	d417      	bmi.n	800bda0 <_malloc_r+0x8c>
 800bd70:	2b0b      	cmp	r3, #11
 800bd72:	d903      	bls.n	800bd7c <_malloc_r+0x68>
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	441c      	add	r4, r3
 800bd78:	6025      	str	r5, [r4, #0]
 800bd7a:	e004      	b.n	800bd86 <_malloc_r+0x72>
 800bd7c:	6863      	ldr	r3, [r4, #4]
 800bd7e:	42a2      	cmp	r2, r4
 800bd80:	bf0c      	ite	eq
 800bd82:	600b      	streq	r3, [r1, #0]
 800bd84:	6053      	strne	r3, [r2, #4]
 800bd86:	4630      	mov	r0, r6
 800bd88:	f000 fbbc 	bl	800c504 <__malloc_unlock>
 800bd8c:	f104 000b 	add.w	r0, r4, #11
 800bd90:	1d23      	adds	r3, r4, #4
 800bd92:	f020 0007 	bic.w	r0, r0, #7
 800bd96:	1ac2      	subs	r2, r0, r3
 800bd98:	d0cc      	beq.n	800bd34 <_malloc_r+0x20>
 800bd9a:	1a1b      	subs	r3, r3, r0
 800bd9c:	50a3      	str	r3, [r4, r2]
 800bd9e:	e7c9      	b.n	800bd34 <_malloc_r+0x20>
 800bda0:	4622      	mov	r2, r4
 800bda2:	6864      	ldr	r4, [r4, #4]
 800bda4:	e7cc      	b.n	800bd40 <_malloc_r+0x2c>
 800bda6:	1cc4      	adds	r4, r0, #3
 800bda8:	f024 0403 	bic.w	r4, r4, #3
 800bdac:	42a0      	cmp	r0, r4
 800bdae:	d0e3      	beq.n	800bd78 <_malloc_r+0x64>
 800bdb0:	1a21      	subs	r1, r4, r0
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f000 faf6 	bl	800c3a4 <_sbrk_r>
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d1dd      	bne.n	800bd78 <_malloc_r+0x64>
 800bdbc:	e7cf      	b.n	800bd5e <_malloc_r+0x4a>
 800bdbe:	bf00      	nop
 800bdc0:	200040a4 	.word	0x200040a4
 800bdc4:	200040a8 	.word	0x200040a8

0800bdc8 <__sfputc_r>:
 800bdc8:	6893      	ldr	r3, [r2, #8]
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	b410      	push	{r4}
 800bdd0:	6093      	str	r3, [r2, #8]
 800bdd2:	da08      	bge.n	800bde6 <__sfputc_r+0x1e>
 800bdd4:	6994      	ldr	r4, [r2, #24]
 800bdd6:	42a3      	cmp	r3, r4
 800bdd8:	db01      	blt.n	800bdde <__sfputc_r+0x16>
 800bdda:	290a      	cmp	r1, #10
 800bddc:	d103      	bne.n	800bde6 <__sfputc_r+0x1e>
 800bdde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bde2:	f7ff bc69 	b.w	800b6b8 <__swbuf_r>
 800bde6:	6813      	ldr	r3, [r2, #0]
 800bde8:	1c58      	adds	r0, r3, #1
 800bdea:	6010      	str	r0, [r2, #0]
 800bdec:	7019      	strb	r1, [r3, #0]
 800bdee:	4608      	mov	r0, r1
 800bdf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <__sfputs_r>:
 800bdf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	460f      	mov	r7, r1
 800bdfc:	4614      	mov	r4, r2
 800bdfe:	18d5      	adds	r5, r2, r3
 800be00:	42ac      	cmp	r4, r5
 800be02:	d101      	bne.n	800be08 <__sfputs_r+0x12>
 800be04:	2000      	movs	r0, #0
 800be06:	e007      	b.n	800be18 <__sfputs_r+0x22>
 800be08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be0c:	463a      	mov	r2, r7
 800be0e:	4630      	mov	r0, r6
 800be10:	f7ff ffda 	bl	800bdc8 <__sfputc_r>
 800be14:	1c43      	adds	r3, r0, #1
 800be16:	d1f3      	bne.n	800be00 <__sfputs_r+0xa>
 800be18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be1c <_vfiprintf_r>:
 800be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be20:	460d      	mov	r5, r1
 800be22:	b09d      	sub	sp, #116	; 0x74
 800be24:	4614      	mov	r4, r2
 800be26:	4698      	mov	r8, r3
 800be28:	4606      	mov	r6, r0
 800be2a:	b118      	cbz	r0, 800be34 <_vfiprintf_r+0x18>
 800be2c:	6983      	ldr	r3, [r0, #24]
 800be2e:	b90b      	cbnz	r3, 800be34 <_vfiprintf_r+0x18>
 800be30:	f7ff fe1c 	bl	800ba6c <__sinit>
 800be34:	4b89      	ldr	r3, [pc, #548]	; (800c05c <_vfiprintf_r+0x240>)
 800be36:	429d      	cmp	r5, r3
 800be38:	d11b      	bne.n	800be72 <_vfiprintf_r+0x56>
 800be3a:	6875      	ldr	r5, [r6, #4]
 800be3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be3e:	07d9      	lsls	r1, r3, #31
 800be40:	d405      	bmi.n	800be4e <_vfiprintf_r+0x32>
 800be42:	89ab      	ldrh	r3, [r5, #12]
 800be44:	059a      	lsls	r2, r3, #22
 800be46:	d402      	bmi.n	800be4e <_vfiprintf_r+0x32>
 800be48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be4a:	f7ff fead 	bl	800bba8 <__retarget_lock_acquire_recursive>
 800be4e:	89ab      	ldrh	r3, [r5, #12]
 800be50:	071b      	lsls	r3, r3, #28
 800be52:	d501      	bpl.n	800be58 <_vfiprintf_r+0x3c>
 800be54:	692b      	ldr	r3, [r5, #16]
 800be56:	b9eb      	cbnz	r3, 800be94 <_vfiprintf_r+0x78>
 800be58:	4629      	mov	r1, r5
 800be5a:	4630      	mov	r0, r6
 800be5c:	f7ff fc7e 	bl	800b75c <__swsetup_r>
 800be60:	b1c0      	cbz	r0, 800be94 <_vfiprintf_r+0x78>
 800be62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be64:	07dc      	lsls	r4, r3, #31
 800be66:	d50e      	bpl.n	800be86 <_vfiprintf_r+0x6a>
 800be68:	f04f 30ff 	mov.w	r0, #4294967295
 800be6c:	b01d      	add	sp, #116	; 0x74
 800be6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be72:	4b7b      	ldr	r3, [pc, #492]	; (800c060 <_vfiprintf_r+0x244>)
 800be74:	429d      	cmp	r5, r3
 800be76:	d101      	bne.n	800be7c <_vfiprintf_r+0x60>
 800be78:	68b5      	ldr	r5, [r6, #8]
 800be7a:	e7df      	b.n	800be3c <_vfiprintf_r+0x20>
 800be7c:	4b79      	ldr	r3, [pc, #484]	; (800c064 <_vfiprintf_r+0x248>)
 800be7e:	429d      	cmp	r5, r3
 800be80:	bf08      	it	eq
 800be82:	68f5      	ldreq	r5, [r6, #12]
 800be84:	e7da      	b.n	800be3c <_vfiprintf_r+0x20>
 800be86:	89ab      	ldrh	r3, [r5, #12]
 800be88:	0598      	lsls	r0, r3, #22
 800be8a:	d4ed      	bmi.n	800be68 <_vfiprintf_r+0x4c>
 800be8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be8e:	f7ff fe8c 	bl	800bbaa <__retarget_lock_release_recursive>
 800be92:	e7e9      	b.n	800be68 <_vfiprintf_r+0x4c>
 800be94:	2300      	movs	r3, #0
 800be96:	9309      	str	r3, [sp, #36]	; 0x24
 800be98:	2320      	movs	r3, #32
 800be9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bea2:	2330      	movs	r3, #48	; 0x30
 800bea4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c068 <_vfiprintf_r+0x24c>
 800bea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beac:	f04f 0901 	mov.w	r9, #1
 800beb0:	4623      	mov	r3, r4
 800beb2:	469a      	mov	sl, r3
 800beb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beb8:	b10a      	cbz	r2, 800bebe <_vfiprintf_r+0xa2>
 800beba:	2a25      	cmp	r2, #37	; 0x25
 800bebc:	d1f9      	bne.n	800beb2 <_vfiprintf_r+0x96>
 800bebe:	ebba 0b04 	subs.w	fp, sl, r4
 800bec2:	d00b      	beq.n	800bedc <_vfiprintf_r+0xc0>
 800bec4:	465b      	mov	r3, fp
 800bec6:	4622      	mov	r2, r4
 800bec8:	4629      	mov	r1, r5
 800beca:	4630      	mov	r0, r6
 800becc:	f7ff ff93 	bl	800bdf6 <__sfputs_r>
 800bed0:	3001      	adds	r0, #1
 800bed2:	f000 80aa 	beq.w	800c02a <_vfiprintf_r+0x20e>
 800bed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bed8:	445a      	add	r2, fp
 800beda:	9209      	str	r2, [sp, #36]	; 0x24
 800bedc:	f89a 3000 	ldrb.w	r3, [sl]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 80a2 	beq.w	800c02a <_vfiprintf_r+0x20e>
 800bee6:	2300      	movs	r3, #0
 800bee8:	f04f 32ff 	mov.w	r2, #4294967295
 800beec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bef0:	f10a 0a01 	add.w	sl, sl, #1
 800bef4:	9304      	str	r3, [sp, #16]
 800bef6:	9307      	str	r3, [sp, #28]
 800bef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800befc:	931a      	str	r3, [sp, #104]	; 0x68
 800befe:	4654      	mov	r4, sl
 800bf00:	2205      	movs	r2, #5
 800bf02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf06:	4858      	ldr	r0, [pc, #352]	; (800c068 <_vfiprintf_r+0x24c>)
 800bf08:	f7f4 f962 	bl	80001d0 <memchr>
 800bf0c:	9a04      	ldr	r2, [sp, #16]
 800bf0e:	b9d8      	cbnz	r0, 800bf48 <_vfiprintf_r+0x12c>
 800bf10:	06d1      	lsls	r1, r2, #27
 800bf12:	bf44      	itt	mi
 800bf14:	2320      	movmi	r3, #32
 800bf16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf1a:	0713      	lsls	r3, r2, #28
 800bf1c:	bf44      	itt	mi
 800bf1e:	232b      	movmi	r3, #43	; 0x2b
 800bf20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf24:	f89a 3000 	ldrb.w	r3, [sl]
 800bf28:	2b2a      	cmp	r3, #42	; 0x2a
 800bf2a:	d015      	beq.n	800bf58 <_vfiprintf_r+0x13c>
 800bf2c:	9a07      	ldr	r2, [sp, #28]
 800bf2e:	4654      	mov	r4, sl
 800bf30:	2000      	movs	r0, #0
 800bf32:	f04f 0c0a 	mov.w	ip, #10
 800bf36:	4621      	mov	r1, r4
 800bf38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf3c:	3b30      	subs	r3, #48	; 0x30
 800bf3e:	2b09      	cmp	r3, #9
 800bf40:	d94e      	bls.n	800bfe0 <_vfiprintf_r+0x1c4>
 800bf42:	b1b0      	cbz	r0, 800bf72 <_vfiprintf_r+0x156>
 800bf44:	9207      	str	r2, [sp, #28]
 800bf46:	e014      	b.n	800bf72 <_vfiprintf_r+0x156>
 800bf48:	eba0 0308 	sub.w	r3, r0, r8
 800bf4c:	fa09 f303 	lsl.w	r3, r9, r3
 800bf50:	4313      	orrs	r3, r2
 800bf52:	9304      	str	r3, [sp, #16]
 800bf54:	46a2      	mov	sl, r4
 800bf56:	e7d2      	b.n	800befe <_vfiprintf_r+0xe2>
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	1d19      	adds	r1, r3, #4
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	9103      	str	r1, [sp, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	bfbb      	ittet	lt
 800bf64:	425b      	neglt	r3, r3
 800bf66:	f042 0202 	orrlt.w	r2, r2, #2
 800bf6a:	9307      	strge	r3, [sp, #28]
 800bf6c:	9307      	strlt	r3, [sp, #28]
 800bf6e:	bfb8      	it	lt
 800bf70:	9204      	strlt	r2, [sp, #16]
 800bf72:	7823      	ldrb	r3, [r4, #0]
 800bf74:	2b2e      	cmp	r3, #46	; 0x2e
 800bf76:	d10c      	bne.n	800bf92 <_vfiprintf_r+0x176>
 800bf78:	7863      	ldrb	r3, [r4, #1]
 800bf7a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf7c:	d135      	bne.n	800bfea <_vfiprintf_r+0x1ce>
 800bf7e:	9b03      	ldr	r3, [sp, #12]
 800bf80:	1d1a      	adds	r2, r3, #4
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	9203      	str	r2, [sp, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	bfb8      	it	lt
 800bf8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf8e:	3402      	adds	r4, #2
 800bf90:	9305      	str	r3, [sp, #20]
 800bf92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c078 <_vfiprintf_r+0x25c>
 800bf96:	7821      	ldrb	r1, [r4, #0]
 800bf98:	2203      	movs	r2, #3
 800bf9a:	4650      	mov	r0, sl
 800bf9c:	f7f4 f918 	bl	80001d0 <memchr>
 800bfa0:	b140      	cbz	r0, 800bfb4 <_vfiprintf_r+0x198>
 800bfa2:	2340      	movs	r3, #64	; 0x40
 800bfa4:	eba0 000a 	sub.w	r0, r0, sl
 800bfa8:	fa03 f000 	lsl.w	r0, r3, r0
 800bfac:	9b04      	ldr	r3, [sp, #16]
 800bfae:	4303      	orrs	r3, r0
 800bfb0:	3401      	adds	r4, #1
 800bfb2:	9304      	str	r3, [sp, #16]
 800bfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb8:	482c      	ldr	r0, [pc, #176]	; (800c06c <_vfiprintf_r+0x250>)
 800bfba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfbe:	2206      	movs	r2, #6
 800bfc0:	f7f4 f906 	bl	80001d0 <memchr>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d03f      	beq.n	800c048 <_vfiprintf_r+0x22c>
 800bfc8:	4b29      	ldr	r3, [pc, #164]	; (800c070 <_vfiprintf_r+0x254>)
 800bfca:	bb1b      	cbnz	r3, 800c014 <_vfiprintf_r+0x1f8>
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	3307      	adds	r3, #7
 800bfd0:	f023 0307 	bic.w	r3, r3, #7
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	9303      	str	r3, [sp, #12]
 800bfd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfda:	443b      	add	r3, r7
 800bfdc:	9309      	str	r3, [sp, #36]	; 0x24
 800bfde:	e767      	b.n	800beb0 <_vfiprintf_r+0x94>
 800bfe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	e7a5      	b.n	800bf36 <_vfiprintf_r+0x11a>
 800bfea:	2300      	movs	r3, #0
 800bfec:	3401      	adds	r4, #1
 800bfee:	9305      	str	r3, [sp, #20]
 800bff0:	4619      	mov	r1, r3
 800bff2:	f04f 0c0a 	mov.w	ip, #10
 800bff6:	4620      	mov	r0, r4
 800bff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bffc:	3a30      	subs	r2, #48	; 0x30
 800bffe:	2a09      	cmp	r2, #9
 800c000:	d903      	bls.n	800c00a <_vfiprintf_r+0x1ee>
 800c002:	2b00      	cmp	r3, #0
 800c004:	d0c5      	beq.n	800bf92 <_vfiprintf_r+0x176>
 800c006:	9105      	str	r1, [sp, #20]
 800c008:	e7c3      	b.n	800bf92 <_vfiprintf_r+0x176>
 800c00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c00e:	4604      	mov	r4, r0
 800c010:	2301      	movs	r3, #1
 800c012:	e7f0      	b.n	800bff6 <_vfiprintf_r+0x1da>
 800c014:	ab03      	add	r3, sp, #12
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	462a      	mov	r2, r5
 800c01a:	4b16      	ldr	r3, [pc, #88]	; (800c074 <_vfiprintf_r+0x258>)
 800c01c:	a904      	add	r1, sp, #16
 800c01e:	4630      	mov	r0, r6
 800c020:	f3af 8000 	nop.w
 800c024:	4607      	mov	r7, r0
 800c026:	1c78      	adds	r0, r7, #1
 800c028:	d1d6      	bne.n	800bfd8 <_vfiprintf_r+0x1bc>
 800c02a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c02c:	07d9      	lsls	r1, r3, #31
 800c02e:	d405      	bmi.n	800c03c <_vfiprintf_r+0x220>
 800c030:	89ab      	ldrh	r3, [r5, #12]
 800c032:	059a      	lsls	r2, r3, #22
 800c034:	d402      	bmi.n	800c03c <_vfiprintf_r+0x220>
 800c036:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c038:	f7ff fdb7 	bl	800bbaa <__retarget_lock_release_recursive>
 800c03c:	89ab      	ldrh	r3, [r5, #12]
 800c03e:	065b      	lsls	r3, r3, #25
 800c040:	f53f af12 	bmi.w	800be68 <_vfiprintf_r+0x4c>
 800c044:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c046:	e711      	b.n	800be6c <_vfiprintf_r+0x50>
 800c048:	ab03      	add	r3, sp, #12
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	462a      	mov	r2, r5
 800c04e:	4b09      	ldr	r3, [pc, #36]	; (800c074 <_vfiprintf_r+0x258>)
 800c050:	a904      	add	r1, sp, #16
 800c052:	4630      	mov	r0, r6
 800c054:	f000 f880 	bl	800c158 <_printf_i>
 800c058:	e7e4      	b.n	800c024 <_vfiprintf_r+0x208>
 800c05a:	bf00      	nop
 800c05c:	0800c7cc 	.word	0x0800c7cc
 800c060:	0800c7ec 	.word	0x0800c7ec
 800c064:	0800c7ac 	.word	0x0800c7ac
 800c068:	0800c80c 	.word	0x0800c80c
 800c06c:	0800c816 	.word	0x0800c816
 800c070:	00000000 	.word	0x00000000
 800c074:	0800bdf7 	.word	0x0800bdf7
 800c078:	0800c812 	.word	0x0800c812

0800c07c <_printf_common>:
 800c07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c080:	4616      	mov	r6, r2
 800c082:	4699      	mov	r9, r3
 800c084:	688a      	ldr	r2, [r1, #8]
 800c086:	690b      	ldr	r3, [r1, #16]
 800c088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c08c:	4293      	cmp	r3, r2
 800c08e:	bfb8      	it	lt
 800c090:	4613      	movlt	r3, r2
 800c092:	6033      	str	r3, [r6, #0]
 800c094:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c098:	4607      	mov	r7, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	b10a      	cbz	r2, 800c0a2 <_printf_common+0x26>
 800c09e:	3301      	adds	r3, #1
 800c0a0:	6033      	str	r3, [r6, #0]
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	0699      	lsls	r1, r3, #26
 800c0a6:	bf42      	ittt	mi
 800c0a8:	6833      	ldrmi	r3, [r6, #0]
 800c0aa:	3302      	addmi	r3, #2
 800c0ac:	6033      	strmi	r3, [r6, #0]
 800c0ae:	6825      	ldr	r5, [r4, #0]
 800c0b0:	f015 0506 	ands.w	r5, r5, #6
 800c0b4:	d106      	bne.n	800c0c4 <_printf_common+0x48>
 800c0b6:	f104 0a19 	add.w	sl, r4, #25
 800c0ba:	68e3      	ldr	r3, [r4, #12]
 800c0bc:	6832      	ldr	r2, [r6, #0]
 800c0be:	1a9b      	subs	r3, r3, r2
 800c0c0:	42ab      	cmp	r3, r5
 800c0c2:	dc26      	bgt.n	800c112 <_printf_common+0x96>
 800c0c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0c8:	1e13      	subs	r3, r2, #0
 800c0ca:	6822      	ldr	r2, [r4, #0]
 800c0cc:	bf18      	it	ne
 800c0ce:	2301      	movne	r3, #1
 800c0d0:	0692      	lsls	r2, r2, #26
 800c0d2:	d42b      	bmi.n	800c12c <_printf_common+0xb0>
 800c0d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0d8:	4649      	mov	r1, r9
 800c0da:	4638      	mov	r0, r7
 800c0dc:	47c0      	blx	r8
 800c0de:	3001      	adds	r0, #1
 800c0e0:	d01e      	beq.n	800c120 <_printf_common+0xa4>
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	68e5      	ldr	r5, [r4, #12]
 800c0e6:	6832      	ldr	r2, [r6, #0]
 800c0e8:	f003 0306 	and.w	r3, r3, #6
 800c0ec:	2b04      	cmp	r3, #4
 800c0ee:	bf08      	it	eq
 800c0f0:	1aad      	subeq	r5, r5, r2
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	6922      	ldr	r2, [r4, #16]
 800c0f6:	bf0c      	ite	eq
 800c0f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0fc:	2500      	movne	r5, #0
 800c0fe:	4293      	cmp	r3, r2
 800c100:	bfc4      	itt	gt
 800c102:	1a9b      	subgt	r3, r3, r2
 800c104:	18ed      	addgt	r5, r5, r3
 800c106:	2600      	movs	r6, #0
 800c108:	341a      	adds	r4, #26
 800c10a:	42b5      	cmp	r5, r6
 800c10c:	d11a      	bne.n	800c144 <_printf_common+0xc8>
 800c10e:	2000      	movs	r0, #0
 800c110:	e008      	b.n	800c124 <_printf_common+0xa8>
 800c112:	2301      	movs	r3, #1
 800c114:	4652      	mov	r2, sl
 800c116:	4649      	mov	r1, r9
 800c118:	4638      	mov	r0, r7
 800c11a:	47c0      	blx	r8
 800c11c:	3001      	adds	r0, #1
 800c11e:	d103      	bne.n	800c128 <_printf_common+0xac>
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c128:	3501      	adds	r5, #1
 800c12a:	e7c6      	b.n	800c0ba <_printf_common+0x3e>
 800c12c:	18e1      	adds	r1, r4, r3
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	2030      	movs	r0, #48	; 0x30
 800c132:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c136:	4422      	add	r2, r4
 800c138:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c13c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c140:	3302      	adds	r3, #2
 800c142:	e7c7      	b.n	800c0d4 <_printf_common+0x58>
 800c144:	2301      	movs	r3, #1
 800c146:	4622      	mov	r2, r4
 800c148:	4649      	mov	r1, r9
 800c14a:	4638      	mov	r0, r7
 800c14c:	47c0      	blx	r8
 800c14e:	3001      	adds	r0, #1
 800c150:	d0e6      	beq.n	800c120 <_printf_common+0xa4>
 800c152:	3601      	adds	r6, #1
 800c154:	e7d9      	b.n	800c10a <_printf_common+0x8e>
	...

0800c158 <_printf_i>:
 800c158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c15c:	460c      	mov	r4, r1
 800c15e:	4691      	mov	r9, r2
 800c160:	7e27      	ldrb	r7, [r4, #24]
 800c162:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c164:	2f78      	cmp	r7, #120	; 0x78
 800c166:	4680      	mov	r8, r0
 800c168:	469a      	mov	sl, r3
 800c16a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c16e:	d807      	bhi.n	800c180 <_printf_i+0x28>
 800c170:	2f62      	cmp	r7, #98	; 0x62
 800c172:	d80a      	bhi.n	800c18a <_printf_i+0x32>
 800c174:	2f00      	cmp	r7, #0
 800c176:	f000 80d8 	beq.w	800c32a <_printf_i+0x1d2>
 800c17a:	2f58      	cmp	r7, #88	; 0x58
 800c17c:	f000 80a3 	beq.w	800c2c6 <_printf_i+0x16e>
 800c180:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c188:	e03a      	b.n	800c200 <_printf_i+0xa8>
 800c18a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c18e:	2b15      	cmp	r3, #21
 800c190:	d8f6      	bhi.n	800c180 <_printf_i+0x28>
 800c192:	a001      	add	r0, pc, #4	; (adr r0, 800c198 <_printf_i+0x40>)
 800c194:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c198:	0800c1f1 	.word	0x0800c1f1
 800c19c:	0800c205 	.word	0x0800c205
 800c1a0:	0800c181 	.word	0x0800c181
 800c1a4:	0800c181 	.word	0x0800c181
 800c1a8:	0800c181 	.word	0x0800c181
 800c1ac:	0800c181 	.word	0x0800c181
 800c1b0:	0800c205 	.word	0x0800c205
 800c1b4:	0800c181 	.word	0x0800c181
 800c1b8:	0800c181 	.word	0x0800c181
 800c1bc:	0800c181 	.word	0x0800c181
 800c1c0:	0800c181 	.word	0x0800c181
 800c1c4:	0800c311 	.word	0x0800c311
 800c1c8:	0800c235 	.word	0x0800c235
 800c1cc:	0800c2f3 	.word	0x0800c2f3
 800c1d0:	0800c181 	.word	0x0800c181
 800c1d4:	0800c181 	.word	0x0800c181
 800c1d8:	0800c333 	.word	0x0800c333
 800c1dc:	0800c181 	.word	0x0800c181
 800c1e0:	0800c235 	.word	0x0800c235
 800c1e4:	0800c181 	.word	0x0800c181
 800c1e8:	0800c181 	.word	0x0800c181
 800c1ec:	0800c2fb 	.word	0x0800c2fb
 800c1f0:	680b      	ldr	r3, [r1, #0]
 800c1f2:	1d1a      	adds	r2, r3, #4
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	600a      	str	r2, [r1, #0]
 800c1f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c1fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c200:	2301      	movs	r3, #1
 800c202:	e0a3      	b.n	800c34c <_printf_i+0x1f4>
 800c204:	6825      	ldr	r5, [r4, #0]
 800c206:	6808      	ldr	r0, [r1, #0]
 800c208:	062e      	lsls	r6, r5, #24
 800c20a:	f100 0304 	add.w	r3, r0, #4
 800c20e:	d50a      	bpl.n	800c226 <_printf_i+0xce>
 800c210:	6805      	ldr	r5, [r0, #0]
 800c212:	600b      	str	r3, [r1, #0]
 800c214:	2d00      	cmp	r5, #0
 800c216:	da03      	bge.n	800c220 <_printf_i+0xc8>
 800c218:	232d      	movs	r3, #45	; 0x2d
 800c21a:	426d      	negs	r5, r5
 800c21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c220:	485e      	ldr	r0, [pc, #376]	; (800c39c <_printf_i+0x244>)
 800c222:	230a      	movs	r3, #10
 800c224:	e019      	b.n	800c25a <_printf_i+0x102>
 800c226:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c22a:	6805      	ldr	r5, [r0, #0]
 800c22c:	600b      	str	r3, [r1, #0]
 800c22e:	bf18      	it	ne
 800c230:	b22d      	sxthne	r5, r5
 800c232:	e7ef      	b.n	800c214 <_printf_i+0xbc>
 800c234:	680b      	ldr	r3, [r1, #0]
 800c236:	6825      	ldr	r5, [r4, #0]
 800c238:	1d18      	adds	r0, r3, #4
 800c23a:	6008      	str	r0, [r1, #0]
 800c23c:	0628      	lsls	r0, r5, #24
 800c23e:	d501      	bpl.n	800c244 <_printf_i+0xec>
 800c240:	681d      	ldr	r5, [r3, #0]
 800c242:	e002      	b.n	800c24a <_printf_i+0xf2>
 800c244:	0669      	lsls	r1, r5, #25
 800c246:	d5fb      	bpl.n	800c240 <_printf_i+0xe8>
 800c248:	881d      	ldrh	r5, [r3, #0]
 800c24a:	4854      	ldr	r0, [pc, #336]	; (800c39c <_printf_i+0x244>)
 800c24c:	2f6f      	cmp	r7, #111	; 0x6f
 800c24e:	bf0c      	ite	eq
 800c250:	2308      	moveq	r3, #8
 800c252:	230a      	movne	r3, #10
 800c254:	2100      	movs	r1, #0
 800c256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c25a:	6866      	ldr	r6, [r4, #4]
 800c25c:	60a6      	str	r6, [r4, #8]
 800c25e:	2e00      	cmp	r6, #0
 800c260:	bfa2      	ittt	ge
 800c262:	6821      	ldrge	r1, [r4, #0]
 800c264:	f021 0104 	bicge.w	r1, r1, #4
 800c268:	6021      	strge	r1, [r4, #0]
 800c26a:	b90d      	cbnz	r5, 800c270 <_printf_i+0x118>
 800c26c:	2e00      	cmp	r6, #0
 800c26e:	d04d      	beq.n	800c30c <_printf_i+0x1b4>
 800c270:	4616      	mov	r6, r2
 800c272:	fbb5 f1f3 	udiv	r1, r5, r3
 800c276:	fb03 5711 	mls	r7, r3, r1, r5
 800c27a:	5dc7      	ldrb	r7, [r0, r7]
 800c27c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c280:	462f      	mov	r7, r5
 800c282:	42bb      	cmp	r3, r7
 800c284:	460d      	mov	r5, r1
 800c286:	d9f4      	bls.n	800c272 <_printf_i+0x11a>
 800c288:	2b08      	cmp	r3, #8
 800c28a:	d10b      	bne.n	800c2a4 <_printf_i+0x14c>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	07df      	lsls	r7, r3, #31
 800c290:	d508      	bpl.n	800c2a4 <_printf_i+0x14c>
 800c292:	6923      	ldr	r3, [r4, #16]
 800c294:	6861      	ldr	r1, [r4, #4]
 800c296:	4299      	cmp	r1, r3
 800c298:	bfde      	ittt	le
 800c29a:	2330      	movle	r3, #48	; 0x30
 800c29c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2a4:	1b92      	subs	r2, r2, r6
 800c2a6:	6122      	str	r2, [r4, #16]
 800c2a8:	f8cd a000 	str.w	sl, [sp]
 800c2ac:	464b      	mov	r3, r9
 800c2ae:	aa03      	add	r2, sp, #12
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	f7ff fee2 	bl	800c07c <_printf_common>
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	d14c      	bne.n	800c356 <_printf_i+0x1fe>
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c0:	b004      	add	sp, #16
 800c2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c6:	4835      	ldr	r0, [pc, #212]	; (800c39c <_printf_i+0x244>)
 800c2c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	680e      	ldr	r6, [r1, #0]
 800c2d0:	061f      	lsls	r7, r3, #24
 800c2d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c2d6:	600e      	str	r6, [r1, #0]
 800c2d8:	d514      	bpl.n	800c304 <_printf_i+0x1ac>
 800c2da:	07d9      	lsls	r1, r3, #31
 800c2dc:	bf44      	itt	mi
 800c2de:	f043 0320 	orrmi.w	r3, r3, #32
 800c2e2:	6023      	strmi	r3, [r4, #0]
 800c2e4:	b91d      	cbnz	r5, 800c2ee <_printf_i+0x196>
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	f023 0320 	bic.w	r3, r3, #32
 800c2ec:	6023      	str	r3, [r4, #0]
 800c2ee:	2310      	movs	r3, #16
 800c2f0:	e7b0      	b.n	800c254 <_printf_i+0xfc>
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	f043 0320 	orr.w	r3, r3, #32
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	2378      	movs	r3, #120	; 0x78
 800c2fc:	4828      	ldr	r0, [pc, #160]	; (800c3a0 <_printf_i+0x248>)
 800c2fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c302:	e7e3      	b.n	800c2cc <_printf_i+0x174>
 800c304:	065e      	lsls	r6, r3, #25
 800c306:	bf48      	it	mi
 800c308:	b2ad      	uxthmi	r5, r5
 800c30a:	e7e6      	b.n	800c2da <_printf_i+0x182>
 800c30c:	4616      	mov	r6, r2
 800c30e:	e7bb      	b.n	800c288 <_printf_i+0x130>
 800c310:	680b      	ldr	r3, [r1, #0]
 800c312:	6826      	ldr	r6, [r4, #0]
 800c314:	6960      	ldr	r0, [r4, #20]
 800c316:	1d1d      	adds	r5, r3, #4
 800c318:	600d      	str	r5, [r1, #0]
 800c31a:	0635      	lsls	r5, r6, #24
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	d501      	bpl.n	800c324 <_printf_i+0x1cc>
 800c320:	6018      	str	r0, [r3, #0]
 800c322:	e002      	b.n	800c32a <_printf_i+0x1d2>
 800c324:	0671      	lsls	r1, r6, #25
 800c326:	d5fb      	bpl.n	800c320 <_printf_i+0x1c8>
 800c328:	8018      	strh	r0, [r3, #0]
 800c32a:	2300      	movs	r3, #0
 800c32c:	6123      	str	r3, [r4, #16]
 800c32e:	4616      	mov	r6, r2
 800c330:	e7ba      	b.n	800c2a8 <_printf_i+0x150>
 800c332:	680b      	ldr	r3, [r1, #0]
 800c334:	1d1a      	adds	r2, r3, #4
 800c336:	600a      	str	r2, [r1, #0]
 800c338:	681e      	ldr	r6, [r3, #0]
 800c33a:	6862      	ldr	r2, [r4, #4]
 800c33c:	2100      	movs	r1, #0
 800c33e:	4630      	mov	r0, r6
 800c340:	f7f3 ff46 	bl	80001d0 <memchr>
 800c344:	b108      	cbz	r0, 800c34a <_printf_i+0x1f2>
 800c346:	1b80      	subs	r0, r0, r6
 800c348:	6060      	str	r0, [r4, #4]
 800c34a:	6863      	ldr	r3, [r4, #4]
 800c34c:	6123      	str	r3, [r4, #16]
 800c34e:	2300      	movs	r3, #0
 800c350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c354:	e7a8      	b.n	800c2a8 <_printf_i+0x150>
 800c356:	6923      	ldr	r3, [r4, #16]
 800c358:	4632      	mov	r2, r6
 800c35a:	4649      	mov	r1, r9
 800c35c:	4640      	mov	r0, r8
 800c35e:	47d0      	blx	sl
 800c360:	3001      	adds	r0, #1
 800c362:	d0ab      	beq.n	800c2bc <_printf_i+0x164>
 800c364:	6823      	ldr	r3, [r4, #0]
 800c366:	079b      	lsls	r3, r3, #30
 800c368:	d413      	bmi.n	800c392 <_printf_i+0x23a>
 800c36a:	68e0      	ldr	r0, [r4, #12]
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	4298      	cmp	r0, r3
 800c370:	bfb8      	it	lt
 800c372:	4618      	movlt	r0, r3
 800c374:	e7a4      	b.n	800c2c0 <_printf_i+0x168>
 800c376:	2301      	movs	r3, #1
 800c378:	4632      	mov	r2, r6
 800c37a:	4649      	mov	r1, r9
 800c37c:	4640      	mov	r0, r8
 800c37e:	47d0      	blx	sl
 800c380:	3001      	adds	r0, #1
 800c382:	d09b      	beq.n	800c2bc <_printf_i+0x164>
 800c384:	3501      	adds	r5, #1
 800c386:	68e3      	ldr	r3, [r4, #12]
 800c388:	9903      	ldr	r1, [sp, #12]
 800c38a:	1a5b      	subs	r3, r3, r1
 800c38c:	42ab      	cmp	r3, r5
 800c38e:	dcf2      	bgt.n	800c376 <_printf_i+0x21e>
 800c390:	e7eb      	b.n	800c36a <_printf_i+0x212>
 800c392:	2500      	movs	r5, #0
 800c394:	f104 0619 	add.w	r6, r4, #25
 800c398:	e7f5      	b.n	800c386 <_printf_i+0x22e>
 800c39a:	bf00      	nop
 800c39c:	0800c81d 	.word	0x0800c81d
 800c3a0:	0800c82e 	.word	0x0800c82e

0800c3a4 <_sbrk_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4d06      	ldr	r5, [pc, #24]	; (800c3c0 <_sbrk_r+0x1c>)
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	602b      	str	r3, [r5, #0]
 800c3b0:	f7f8 fe3c 	bl	800502c <_sbrk>
 800c3b4:	1c43      	adds	r3, r0, #1
 800c3b6:	d102      	bne.n	800c3be <_sbrk_r+0x1a>
 800c3b8:	682b      	ldr	r3, [r5, #0]
 800c3ba:	b103      	cbz	r3, 800c3be <_sbrk_r+0x1a>
 800c3bc:	6023      	str	r3, [r4, #0]
 800c3be:	bd38      	pop	{r3, r4, r5, pc}
 800c3c0:	20004440 	.word	0x20004440

0800c3c4 <__sread>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3cc:	f000 f8a0 	bl	800c510 <_read_r>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	bfab      	itete	ge
 800c3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c3d8:	181b      	addge	r3, r3, r0
 800c3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3de:	bfac      	ite	ge
 800c3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3e2:	81a3      	strhlt	r3, [r4, #12]
 800c3e4:	bd10      	pop	{r4, pc}

0800c3e6 <__swrite>:
 800c3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ea:	461f      	mov	r7, r3
 800c3ec:	898b      	ldrh	r3, [r1, #12]
 800c3ee:	05db      	lsls	r3, r3, #23
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	4616      	mov	r6, r2
 800c3f6:	d505      	bpl.n	800c404 <__swrite+0x1e>
 800c3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	2200      	movs	r2, #0
 800c400:	f000 f868 	bl	800c4d4 <_lseek_r>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c40a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	4632      	mov	r2, r6
 800c412:	463b      	mov	r3, r7
 800c414:	4628      	mov	r0, r5
 800c416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c41a:	f000 b817 	b.w	800c44c <_write_r>

0800c41e <__sseek>:
 800c41e:	b510      	push	{r4, lr}
 800c420:	460c      	mov	r4, r1
 800c422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c426:	f000 f855 	bl	800c4d4 <_lseek_r>
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	bf15      	itete	ne
 800c430:	6560      	strne	r0, [r4, #84]	; 0x54
 800c432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c43a:	81a3      	strheq	r3, [r4, #12]
 800c43c:	bf18      	it	ne
 800c43e:	81a3      	strhne	r3, [r4, #12]
 800c440:	bd10      	pop	{r4, pc}

0800c442 <__sclose>:
 800c442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c446:	f000 b813 	b.w	800c470 <_close_r>
	...

0800c44c <_write_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4d07      	ldr	r5, [pc, #28]	; (800c46c <_write_r+0x20>)
 800c450:	4604      	mov	r4, r0
 800c452:	4608      	mov	r0, r1
 800c454:	4611      	mov	r1, r2
 800c456:	2200      	movs	r2, #0
 800c458:	602a      	str	r2, [r5, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	f7f8 fd95 	bl	8004f8a <_write>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_write_r+0x1e>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_write_r+0x1e>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20004440 	.word	0x20004440

0800c470 <_close_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4d06      	ldr	r5, [pc, #24]	; (800c48c <_close_r+0x1c>)
 800c474:	2300      	movs	r3, #0
 800c476:	4604      	mov	r4, r0
 800c478:	4608      	mov	r0, r1
 800c47a:	602b      	str	r3, [r5, #0]
 800c47c:	f7f8 fda1 	bl	8004fc2 <_close>
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	d102      	bne.n	800c48a <_close_r+0x1a>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	b103      	cbz	r3, 800c48a <_close_r+0x1a>
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	bd38      	pop	{r3, r4, r5, pc}
 800c48c:	20004440 	.word	0x20004440

0800c490 <_fstat_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4d07      	ldr	r5, [pc, #28]	; (800c4b0 <_fstat_r+0x20>)
 800c494:	2300      	movs	r3, #0
 800c496:	4604      	mov	r4, r0
 800c498:	4608      	mov	r0, r1
 800c49a:	4611      	mov	r1, r2
 800c49c:	602b      	str	r3, [r5, #0]
 800c49e:	f7f8 fd9c 	bl	8004fda <_fstat>
 800c4a2:	1c43      	adds	r3, r0, #1
 800c4a4:	d102      	bne.n	800c4ac <_fstat_r+0x1c>
 800c4a6:	682b      	ldr	r3, [r5, #0]
 800c4a8:	b103      	cbz	r3, 800c4ac <_fstat_r+0x1c>
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20004440 	.word	0x20004440

0800c4b4 <_isatty_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d06      	ldr	r5, [pc, #24]	; (800c4d0 <_isatty_r+0x1c>)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	602b      	str	r3, [r5, #0]
 800c4c0:	f7f8 fd9b 	bl	8004ffa <_isatty>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_isatty_r+0x1a>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_isatty_r+0x1a>
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	20004440 	.word	0x20004440

0800c4d4 <_lseek_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	4d07      	ldr	r5, [pc, #28]	; (800c4f4 <_lseek_r+0x20>)
 800c4d8:	4604      	mov	r4, r0
 800c4da:	4608      	mov	r0, r1
 800c4dc:	4611      	mov	r1, r2
 800c4de:	2200      	movs	r2, #0
 800c4e0:	602a      	str	r2, [r5, #0]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	f7f8 fd94 	bl	8005010 <_lseek>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d102      	bne.n	800c4f2 <_lseek_r+0x1e>
 800c4ec:	682b      	ldr	r3, [r5, #0]
 800c4ee:	b103      	cbz	r3, 800c4f2 <_lseek_r+0x1e>
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	20004440 	.word	0x20004440

0800c4f8 <__malloc_lock>:
 800c4f8:	4801      	ldr	r0, [pc, #4]	; (800c500 <__malloc_lock+0x8>)
 800c4fa:	f7ff bb55 	b.w	800bba8 <__retarget_lock_acquire_recursive>
 800c4fe:	bf00      	nop
 800c500:	20004438 	.word	0x20004438

0800c504 <__malloc_unlock>:
 800c504:	4801      	ldr	r0, [pc, #4]	; (800c50c <__malloc_unlock+0x8>)
 800c506:	f7ff bb50 	b.w	800bbaa <__retarget_lock_release_recursive>
 800c50a:	bf00      	nop
 800c50c:	20004438 	.word	0x20004438

0800c510 <_read_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d07      	ldr	r5, [pc, #28]	; (800c530 <_read_r+0x20>)
 800c514:	4604      	mov	r4, r0
 800c516:	4608      	mov	r0, r1
 800c518:	4611      	mov	r1, r2
 800c51a:	2200      	movs	r2, #0
 800c51c:	602a      	str	r2, [r5, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	f7f8 fd16 	bl	8004f50 <_read>
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d102      	bne.n	800c52e <_read_r+0x1e>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	b103      	cbz	r3, 800c52e <_read_r+0x1e>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	20004440 	.word	0x20004440

0800c534 <_init>:
 800c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c536:	bf00      	nop
 800c538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53a:	bc08      	pop	{r3}
 800c53c:	469e      	mov	lr, r3
 800c53e:	4770      	bx	lr

0800c540 <_fini>:
 800c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c542:	bf00      	nop
 800c544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c546:	bc08      	pop	{r3}
 800c548:	469e      	mov	lr, r3
 800c54a:	4770      	bx	lr

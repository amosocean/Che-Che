
os2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000697c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba0  08006ba0  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ba8  08006ba8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000418c  20000020  08006bd0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041ac  08006bd0  000241ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139c1  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c83  00000000  00000000  00033a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00036698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00037808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d7d  00000000  00000000  00038870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001207d  00000000  00000000  0005a5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2702  00000000  00000000  0006c66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ed6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  0013edc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006af4 	.word	0x08006af4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	08006af4 	.word	0x08006af4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96e 	b.w	8000d00 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468c      	mov	ip, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8083 	bne.w	8000b52 <__udivmoddi4+0x116>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d947      	bls.n	8000ae2 <__udivmoddi4+0xa6>
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	b142      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	f1c2 0020 	rsb	r0, r2, #32
 8000a5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a60:	4091      	lsls	r1, r2
 8000a62:	4097      	lsls	r7, r2
 8000a64:	ea40 0c01 	orr.w	ip, r0, r1
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbbc f6f8 	udiv	r6, ip, r8
 8000a74:	fa1f fe87 	uxth.w	lr, r7
 8000a78:	fb08 c116 	mls	r1, r8, r6, ip
 8000a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a80:	fb06 f10e 	mul.w	r1, r6, lr
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8e:	f080 8119 	bcs.w	8000cc4 <__udivmoddi4+0x288>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8116 	bls.w	8000cc4 <__udivmoddi4+0x288>
 8000a98:	3e02      	subs	r6, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa4:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	193c      	adds	r4, r7, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8105 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	f240 8102 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000acc:	eba4 040e 	sub.w	r4, r4, lr
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	b11d      	cbz	r5, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c5 4300 	strd	r4, r3, [r5]
 8000adc:	4631      	mov	r1, r6
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b902      	cbnz	r2, 8000ae6 <__udivmoddi4+0xaa>
 8000ae4:	deff      	udf	#255	; 0xff
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d150      	bne.n	8000b90 <__udivmoddi4+0x154>
 8000aee:	1bcb      	subs	r3, r1, r7
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	fa1f f887 	uxth.w	r8, r7
 8000af8:	2601      	movs	r6, #1
 8000afa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b08:	fb08 f30c 	mul.w	r3, r8, ip
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000b10:	1879      	adds	r1, r7, r1
 8000b12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0xe2>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	f200 80e9 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b1e:	4684      	mov	ip, r0
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	b2a3      	uxth	r3, r4
 8000b24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b30:	fb08 f800 	mul.w	r8, r8, r0
 8000b34:	45a0      	cmp	r8, r4
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x10c>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x10a>
 8000b40:	45a0      	cmp	r8, r4
 8000b42:	f200 80d9 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b46:	4618      	mov	r0, r3
 8000b48:	eba4 0408 	sub.w	r4, r4, r8
 8000b4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b50:	e7bf      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x12e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <__udivmoddi4+0x282>
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b62:	4630      	mov	r0, r6
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f683 	clz	r6, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d14a      	bne.n	8000c08 <__udivmoddi4+0x1cc>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0x140>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80b8 	bhi.w	8000cec <__udivmoddi4+0x2b0>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	468c      	mov	ip, r1
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d0a8      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f603 	lsr.w	r6, r0, r3
 8000b98:	4097      	lsls	r7, r2
 8000b9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	4330      	orrs	r0, r6
 8000ba6:	0c03      	lsrs	r3, r0, #16
 8000ba8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f108 	mul.w	r1, r6, r8
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x19c>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bca:	f080 808d 	bcs.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 808a 	bls.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b281      	uxth	r1, r0
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb00 f308 	mul.w	r3, r0, r8
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x1c4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bf6:	d273      	bcs.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d971      	bls.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4439      	add	r1, r7
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c06:	e778      	b.n	8000afa <__udivmoddi4+0xbe>
 8000c08:	f1c6 0c20 	rsb	ip, r6, #32
 8000c0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c14:	431c      	orrs	r4, r3
 8000c16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c26:	431f      	orrs	r7, r3
 8000c28:	0c3b      	lsrs	r3, r7, #16
 8000c2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c2e:	fa1f f884 	uxth.w	r8, r4
 8000c32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3e:	458a      	cmp	sl, r1
 8000c40:	fa02 f206 	lsl.w	r2, r2, r6
 8000c44:	fa00 f306 	lsl.w	r3, r0, r6
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x220>
 8000c4a:	1861      	adds	r1, r4, r1
 8000c4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c50:	d248      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c52:	458a      	cmp	sl, r1
 8000c54:	d946      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4421      	add	r1, r4
 8000c5c:	eba1 010a 	sub.w	r1, r1, sl
 8000c60:	b2bf      	uxth	r7, r7
 8000c62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c6e:	fb00 f808 	mul.w	r8, r0, r8
 8000c72:	45b8      	cmp	r8, r7
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x24a>
 8000c76:	19e7      	adds	r7, r4, r7
 8000c78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7c:	d22e      	bcs.n	8000cdc <__udivmoddi4+0x2a0>
 8000c7e:	45b8      	cmp	r8, r7
 8000c80:	d92c      	bls.n	8000cdc <__udivmoddi4+0x2a0>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4427      	add	r7, r4
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	eba7 0708 	sub.w	r7, r7, r8
 8000c8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c92:	454f      	cmp	r7, r9
 8000c94:	46c6      	mov	lr, r8
 8000c96:	4649      	mov	r1, r9
 8000c98:	d31a      	bcc.n	8000cd0 <__udivmoddi4+0x294>
 8000c9a:	d017      	beq.n	8000ccc <__udivmoddi4+0x290>
 8000c9c:	b15d      	cbz	r5, 8000cb6 <__udivmoddi4+0x27a>
 8000c9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ca2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ca6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000caa:	40f2      	lsrs	r2, r6
 8000cac:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb0:	40f7      	lsrs	r7, r6
 8000cb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e70b      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e9      	b.n	8000a9c <__udivmoddi4+0x60>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6fd      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000ccc:	4543      	cmp	r3, r8
 8000cce:	d2e5      	bcs.n	8000c9c <__udivmoddi4+0x260>
 8000cd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7df      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e7d2      	b.n	8000c86 <__udivmoddi4+0x24a>
 8000ce0:	4660      	mov	r0, ip
 8000ce2:	e78d      	b.n	8000c00 <__udivmoddi4+0x1c4>
 8000ce4:	4681      	mov	r9, r0
 8000ce6:	e7b9      	b.n	8000c5c <__udivmoddi4+0x220>
 8000ce8:	4666      	mov	r6, ip
 8000cea:	e775      	b.n	8000bd8 <__udivmoddi4+0x19c>
 8000cec:	4630      	mov	r0, r6
 8000cee:	e74a      	b.n	8000b86 <__udivmoddi4+0x14a>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	4439      	add	r1, r7
 8000cf6:	e713      	b.n	8000b20 <__udivmoddi4+0xe4>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	e724      	b.n	8000b48 <__udivmoddi4+0x10c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <vApplicationGetIdleTaskMemory+0x30>)
 8000d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	2000003c 	.word	0x2000003c
 8000d34:	20000090 	.word	0x20000090

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	b096      	sub	sp, #88	; 0x58
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f001 fadb 	bl	80022f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f85b 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 fa2f 	bl	80011a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d4a:	f000 f9af 	bl	80010ac <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d4e:	f000 f8c1 	bl	8000ed4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d52:	f000 f935 	bl	8000fc0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 f9d3 	bl	8001100 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d5a:	f000 f9fb 	bl	8001154 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8000d5e:	2202      	movs	r2, #2
 8000d60:	491e      	ldr	r1, [pc, #120]	; (8000ddc <main+0xa4>)
 8000d62:	481f      	ldr	r0, [pc, #124]	; (8000de0 <main+0xa8>)
 8000d64:	f003 fccf 	bl	8004706 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Stream */
  osThreadDef(Stream, StreamTask, osPriorityNormal, 0, 128);
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <main+0xac>)
 8000d6a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000d6e:	461d      	mov	r5, r3
 8000d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StreamHandle = osThreadCreate(osThread(Stream), NULL);
 8000d7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f004 fa89 	bl	800529a <osThreadCreate>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <main+0xb0>)
 8000d8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of PIDCamera */
  osThreadDef(PIDCamera, PIDCameraTask, osPriorityNormal, 0, 128);
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <main+0xb4>)
 8000d90:	f107 0420 	add.w	r4, r7, #32
 8000d94:	461d      	mov	r5, r3
 8000d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PIDCameraHandle = osThreadCreate(osThread(PIDCamera), NULL);
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fa76 	bl	800529a <osThreadCreate>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <main+0xb8>)
 8000db2:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReceive */
  osThreadDef(GyroReceive, GyroReceiveTask, osPriorityNormal, 0, 128);
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <main+0xbc>)
 8000db6:	1d3c      	adds	r4, r7, #4
 8000db8:	461d      	mov	r5, r3
 8000dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GyroReceiveHandle = osThreadCreate(osThread(GyroReceive), NULL);
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f004 fa65 	bl	800529a <osThreadCreate>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <main+0xc0>)
 8000dd4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dd6:	f004 fa49 	bl	800526c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <main+0xa2>
 8000ddc:	20000290 	.word	0x20000290
 8000de0:	20004118 	.word	0x20004118
 8000de4:	08006b2c 	.word	0x08006b2c
 8000de8:	20004114 	.word	0x20004114
 8000dec:	08006b48 	.word	0x08006b48
 8000df0:	20004080 	.word	0x20004080
 8000df4:	08006b64 	.word	0x08006b64
 8000df8:	2000415c 	.word	0x2000415c

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	; 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fe6a 	bl	8006ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <SystemClock_Config+0xd0>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a28      	ldr	r2, [pc, #160]	; (8000ecc <SystemClock_Config+0xd0>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <SystemClock_Config+0xd0>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <SystemClock_Config+0xd4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <SystemClock_Config+0xd4>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <SystemClock_Config+0xd4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e70:	23a8      	movs	r3, #168	; 0xa8
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fdbf 	bl	8002a04 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e8c:	f000 ffd8 	bl	8001e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2105      	movs	r1, #5
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 f820 	bl	8002ef4 <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eba:	f000 ffc1 	bl	8001e40 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ebe:	f002 f8ff 	bl	80030c0 <HAL_RCC_EnableCSS>
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	; 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]
 8000f02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f06:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <MX_TIM3_Init+0xe8>)
 8000f08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 61-1;
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f0c:	223c      	movs	r2, #60	; 0x3c
 8000f0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000f16:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f2a:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f2c:	f002 fa37 	bl	800339e <HAL_TIM_Base_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f36:	f000 ff83 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f44:	4619      	mov	r1, r3
 8000f46:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f48:	f002 fdd0 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f52:	f000 ff75 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f56:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f58:	f002 fae0 	bl	800351c <HAL_TIM_PWM_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f62:	f000 ff6d 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	4619      	mov	r1, r3
 8000f74:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f76:	f003 f9b5 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f80:	f000 ff5e 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f84:	2360      	movs	r3, #96	; 0x60
 8000f86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000f9c:	f002 fce8 	bl	8003970 <HAL_TIM_PWM_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000fa6:	f000 ff4b 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM3_Init+0xe4>)
 8000fac:	f000 ffb2 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 8000fb0:	bf00      	nop
 8000fb2:	3738      	adds	r7, #56	; 0x38
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20004084 	.word	0x20004084
 8000fbc:	40000400 	.word	0x40000400

08000fc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]
 8000fee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8000ff2:	4a2d      	ldr	r2, [pc, #180]	; (80010a8 <MX_TIM4_Init+0xe8>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 61-1;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8000ff8:	223c      	movs	r2, #60	; 0x3c
 8000ffa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8001004:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001008:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_TIM4_Init+0xe4>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001016:	4823      	ldr	r0, [pc, #140]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8001018:	f002 f9c1 	bl	800339e <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001022:	f000 ff0d 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800102c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001030:	4619      	mov	r1, r3
 8001032:	481c      	ldr	r0, [pc, #112]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8001034:	f002 fd5a 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800103e:	f000 feff 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001042:	4818      	ldr	r0, [pc, #96]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8001044:	f002 fa6a 	bl	800351c <HAL_TIM_PWM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800104e:	f000 fef7 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8001062:	f003 f93f 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800106c:	f000 fee8 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001070:	2360      	movs	r3, #96	; 0x60
 8001072:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8001088:	f002 fc72 	bl	8003970 <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001092:	f000 fed5 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM4_Init+0xe4>)
 8001098:	f000 ff3c 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 800109c:	bf00      	nop
 800109e:	3738      	adds	r7, #56	; 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20003ff4 	.word	0x20003ff4
 80010a8:	40000800 	.word	0x40000800

080010ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_USART1_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f003 f98e 	bl	8004404 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 fea7 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200040d0 	.word	0x200040d0
 80010fc:	40011000 	.word	0x40011000

08001100 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_USART2_UART_Init+0x50>)
 8001108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_USART2_UART_Init+0x4c>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART2_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001138:	f003 f964 	bl	8004404 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001142:	f000 fe7d 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20004118 	.word	0x20004118
 8001150:	40004400 	.word	0x40004400

08001154 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART3_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART3_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART3_UART_Init+0x4c>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART3_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART3_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART3_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART3_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART3_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART3_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART3_UART_Init+0x4c>)
 800118c:	f003 f93a 	bl	8004404 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001196:	f000 fe53 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000403c 	.word	0x2000403c
 80011a4:	40004800 	.word	0x40004800

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <MX_GPIO_Init+0x128>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a42      	ldr	r2, [pc, #264]	; (80012d0 <MX_GPIO_Init+0x128>)
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <MX_GPIO_Init+0x128>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <MX_GPIO_Init+0x128>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a3b      	ldr	r2, [pc, #236]	; (80012d0 <MX_GPIO_Init+0x128>)
 80011e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <MX_GPIO_Init+0x128>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <MX_GPIO_Init+0x128>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a34      	ldr	r2, [pc, #208]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <MX_GPIO_Init+0x128>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <MX_GPIO_Init+0x128>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LEDBlue_Pin|LEDGreen_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001250:	4820      	ldr	r0, [pc, #128]	; (80012d4 <MX_GPIO_Init+0x12c>)
 8001252:	f001 fba3 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rightPWMGND_GPIO_Port, rightPWMGND_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125c:	481e      	ldr	r0, [pc, #120]	; (80012d8 <MX_GPIO_Init+0x130>)
 800125e:	f001 fb9d 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(leftPWMGND_GPIO_Port, leftPWMGND_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001268:	481c      	ldr	r0, [pc, #112]	; (80012dc <MX_GPIO_Init+0x134>)
 800126a:	f001 fb97 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDBlue_Pin LEDGreen_Pin */
  GPIO_InitStruct.Pin = LEDBlue_Pin|LEDGreen_Pin;
 800126e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4813      	ldr	r0, [pc, #76]	; (80012d4 <MX_GPIO_Init+0x12c>)
 8001288:	f001 f9ec 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : rightPWMGND_Pin */
  GPIO_InitStruct.Pin = rightPWMGND_Pin;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001296:	2302      	movs	r3, #2
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(rightPWMGND_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <MX_GPIO_Init+0x130>)
 80012a6:	f001 f9dd 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftPWMGND_Pin */
  GPIO_InitStruct.Pin = leftPWMGND_Pin;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(leftPWMGND_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_GPIO_Init+0x134>)
 80012c4:	f001 f9ce 	bl	8002664 <HAL_GPIO_Init>

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40020000 	.word	0x40020000

080012e0 <Car_Initial>:

/* USER CODE BEGIN 4 */
void Car_Initial(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 80012e4:	f005 f8ce 	bl	8006484 <vPortEnterCritical>
	state=Initial;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <Car_Initial+0x28>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);//�???????????????????????????????启左侧PWM
 80012ee:	2100      	movs	r1, #0
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <Car_Initial+0x2c>)
 80012f2:	f002 f96d 	bl	80035d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);//�???????????????????????????????启右侧PWM
 80012f6:	2100      	movs	r1, #0
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <Car_Initial+0x30>)
 80012fa:	f002 f969 	bl	80035d0 <HAL_TIM_PWM_Start>
	taskEXIT_CRITICAL();
 80012fe:	f005 f8f1 	bl	80064e4 <vPortExitCritical>
	//vTaskSuspend(UART_RTHandle);//Suspend UART R and T
	//vTaskSuspend(PIDCameraHandle);//Suspend PID module
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200040cc 	.word	0x200040cc
 800130c:	20004084 	.word	0x20004084
 8001310:	20003ff4 	.word	0x20003ff4

08001314 <Car_Stop>:

void Car_Stop(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	PWM_SET_LEFT(1);
 8001318:	2001      	movs	r0, #1
 800131a:	f000 fa73 	bl	8001804 <PWM_SET_LEFT>
	PWM_SET_RIGHT(1);
 800131e:	2001      	movs	r0, #1
 8001320:	f000 faa8 	bl	8001874 <PWM_SET_RIGHT>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <delay>:

void delay(uint32_t time_ms)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	uint32_t PreviousWakeTime=osKernelSysTick();
 8001330:	f003 ffa3 	bl	800527a <osKernelSysTick>
 8001334:	4603      	mov	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
	osDelayUntil(&PreviousWakeTime, time_ms);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fff7 	bl	8005332 <osDelayUntil>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <Angle_Diff>:

float Angle_Diff(float target, float input)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	ed87 0a01 	vstr	s0, [r7, #4]
 8001356:	edc7 0a00 	vstr	s1, [r7]
	float Error;
	if(target > 180)
 800135a:	edd7 7a01 	vldr	s15, [r7, #4]
 800135e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800140c <Angle_Diff+0xc0>
 8001362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	dd08      	ble.n	800137e <Angle_Diff+0x32>
		target=-360+target;
 800136c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001370:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001410 <Angle_Diff+0xc4>
 8001374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001378:	edc7 7a01 	vstr	s15, [r7, #4]
 800137c:	e010      	b.n	80013a0 <Angle_Diff+0x54>
	else if(target <-180)
 800137e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001382:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001414 <Angle_Diff+0xc8>
 8001386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	d507      	bpl.n	80013a0 <Angle_Diff+0x54>
		target=360+target;
 8001390:	edd7 7a01 	vldr	s15, [r7, #4]
 8001394:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001410 <Angle_Diff+0xc4>
 8001398:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139c:	edc7 7a01 	vstr	s15, [r7, #4]
	Error = target - input;
 80013a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80013a4:	edd7 7a00 	vldr	s15, [r7]
 80013a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ac:	edc7 7a03 	vstr	s15, [r7, #12]
		if(Error >= 180)
 80013b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800140c <Angle_Diff+0xc0>
 80013b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	db08      	blt.n	80013d4 <Angle_Diff+0x88>
			Error=Error-360;
 80013c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001410 <Angle_Diff+0xc4>
 80013ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ce:	edc7 7a03 	vstr	s15, [r7, #12]
 80013d2:	e010      	b.n	80013f6 <Angle_Diff+0xaa>
		else if(Error <= -180)
 80013d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001414 <Angle_Diff+0xc8>
 80013dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	d807      	bhi.n	80013f6 <Angle_Diff+0xaa>
			Error=Error+360;
 80013e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001410 <Angle_Diff+0xc4>
 80013ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013f2:	edc7 7a03 	vstr	s15, [r7, #12]
	return Error;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	ee07 3a90 	vmov	s15, r3
}
 80013fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	43340000 	.word	0x43340000
 8001410:	43b40000 	.word	0x43b40000
 8001414:	c3340000 	.word	0xc3340000

08001418 <PID_Turning>:
// 		}
// 	 }
//}

int PID_Turning(float increment_angle,float Accept_Error)//If we want to turn right, parameter is negative
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b090      	sub	sp, #64	; 0x40
 800141c:	af00      	add	r7, sp, #0
 800141e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001422:	edc7 0a00 	vstr	s1, [r7]
			float PID_target=0;
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
			float PID_Error_Last=0;
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
			float initial_yaw=0;
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
			float PID_Output=0,PID_Input=0;;
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
			float Error = 0, Error_Total=0;
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
			float KP=15, KI=0.1, KD=0;
 8001450:	4ba5      	ldr	r3, [pc, #660]	; (80016e8 <PID_Turning+0x2d0>)
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	4ba5      	ldr	r3, [pc, #660]	; (80016ec <PID_Turning+0x2d4>)
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
			int t=0;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
			uint8_t Flag=0; //Indicate that if verifying process begin.
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(int i=0;i<10;i++)			//Get average initial direction
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
 800146c:	e00e      	b.n	800148c <PID_Turning+0x74>
			{
				initial_yaw+=angle.z;
 800146e:	4ba0      	ldr	r3, [pc, #640]	; (80016f0 <PID_Turning+0x2d8>)
 8001470:	edd3 7a02 	vldr	s15, [r3, #8]
 8001474:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				delay(50);
 8001480:	2032      	movs	r0, #50	; 0x32
 8001482:	f7ff ff51 	bl	8001328 <delay>
			for(int i=0;i<10;i++)			//Get average initial direction
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	3301      	adds	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	2b09      	cmp	r3, #9
 8001490:	dded      	ble.n	800146e <PID_Turning+0x56>
			}
			initial_yaw=initial_yaw/10;
 8001492:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001496:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			PID_target=initial_yaw + increment_angle;
 80014a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			if(PID_target > 180)
 80014b2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014b6:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80016f4 <PID_Turning+0x2dc>
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	dd07      	ble.n	80014d4 <PID_Turning+0xbc>
				PID_target=-360+PID_target;
 80014c4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014c8:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80016f8 <PID_Turning+0x2e0>
 80014cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			if(PID_target <-180)
 80014d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014d8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80016fc <PID_Turning+0x2e4>
 80014dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	d507      	bpl.n	80014f6 <PID_Turning+0xde>
				PID_target=360+PID_target;
 80014e6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014ea:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80016f8 <PID_Turning+0x2e0>
 80014ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);
 80014f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fa:	4881      	ldr	r0, [pc, #516]	; (8001700 <PID_Turning+0x2e8>)
 80014fc:	f001 fa67 	bl	80029ce <HAL_GPIO_TogglePin>

		  for(;;)
		  {
			  if(state == Idle)
 8001500:	4b80      	ldr	r3, [pc, #512]	; (8001704 <PID_Turning+0x2ec>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d101      	bne.n	800150c <PID_Turning+0xf4>
			  		  {
			  			  return 1;
 8001508:	2301      	movs	r3, #1
 800150a:	e0e9      	b.n	80016e0 <PID_Turning+0x2c8>
			  		  }
			  	 PID_Input = angle.z;
 800150c:	4b78      	ldr	r3, [pc, #480]	; (80016f0 <PID_Turning+0x2d8>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	61fb      	str	r3, [r7, #28]
			  	 Error=Angle_Diff(PID_target, PID_Input);
 8001512:	edd7 0a07 	vldr	s1, [r7, #28]
 8001516:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800151a:	f7ff ff17 	bl	800134c <Angle_Diff>
 800151e:	ed87 0a06 	vstr	s0, [r7, #24]
			  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 8001522:	edd7 7a00 	vldr	s15, [r7]
 8001526:	eef1 7a67 	vneg.f32	s15, s15
 800152a:	ed97 7a06 	vldr	s14, [r7, #24]
 800152e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001536:	dd17      	ble.n	8001568 <PID_Turning+0x150>
 8001538:	ed97 7a06 	vldr	s14, [r7, #24]
 800153c:	edd7 7a00 	vldr	s15, [r7]
 8001540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d50e      	bpl.n	8001568 <PID_Turning+0x150>
 800154a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <PID_Turning+0x150>
			  	 {
			  		 t++;
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	3301      	adds	r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
			  		if(t>2)
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	2b02      	cmp	r3, #2
 800155c:	dd04      	ble.n	8001568 <PID_Turning+0x150>
			  		{
			  			Flag = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  			t=0;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
			  		}
			  	 }
			  	 if(Flag)
 8001568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800156c:	2b00      	cmp	r3, #0
 800156e:	d027      	beq.n	80015c0 <PID_Turning+0x1a8>
			  	 {
			  		if(t>Angle_stable_cycles)
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	4a65      	ldr	r2, [pc, #404]	; (8001708 <PID_Turning+0x2f0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	dd06      	ble.n	8001586 <PID_Turning+0x16e>
			  		{
			  			Flag=0;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  			t=0;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
			  			return 0;
 8001582:	2300      	movs	r3, #0
 8001584:	e0ac      	b.n	80016e0 <PID_Turning+0x2c8>
			  		}
			  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 8001586:	edd7 7a00 	vldr	s15, [r7]
 800158a:	eef1 7a67 	vneg.f32	s15, s15
 800158e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	dd0c      	ble.n	80015b6 <PID_Turning+0x19e>
 800159c:	ed97 7a06 	vldr	s14, [r7, #24]
 80015a0:	edd7 7a00 	vldr	s15, [r7]
 80015a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d503      	bpl.n	80015b6 <PID_Turning+0x19e>
			  		{
			  			t++;
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	3301      	adds	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b4:	e004      	b.n	80015c0 <PID_Turning+0x1a8>
			  		}
			  		else
			  		{
			  			Flag=0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  			t=0;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
			  		}
			  	 }
			     PID_Output = KP * Error  +
 80015c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80015c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c8:	ee27 7a27 	vmul.f32	s14, s14, s15
			 				  KD * (Error - PID_Error_Last ) +
 80015cc:	edd7 6a06 	vldr	s13, [r7, #24]
 80015d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80015d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
			     PID_Output = KP * Error  +
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
							  Error_Total;
			     Error_Total=Error_Total+KI*Error;
 80015f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80015f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			     PID_Error_Last = Error;
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	63bb      	str	r3, [r7, #56]	; 0x38
			     if(PID_Output >= 0)
 800160c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001610:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	db2b      	blt.n	8001672 <PID_Turning+0x25a>
			     {
			    	 if(PID_Output > PWM_Higest)
 800161a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800161e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800170c <PID_Turning+0x2f4>
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	dd01      	ble.n	8001630 <PID_Turning+0x218>
			    		 PID_Output=PWM_Higest;
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <PID_Turning+0x2f8>)
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
			    	 if(PID_Output < PWM_Lowest)
 8001630:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001634:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001714 <PID_Turning+0x2fc>
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d501      	bpl.n	8001646 <PID_Turning+0x22e>
			    		 PID_Output=PWM_Lowest;
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <PID_Turning+0x300>)
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
			    	 taskENTER_CRITICAL();
 8001646:	f004 ff1d 	bl	8006484 <vPortEnterCritical>
			    	 PWM_SET_RIGHT ((int32_t) PID_Output);
 800164a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800164e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001652:	ee17 0a90 	vmov	r0, s15
 8001656:	f000 f90d 	bl	8001874 <PWM_SET_RIGHT>
			    	 PWM_SET_LEFT((int32_t) (-PID_Output));
 800165a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800165e:	eef1 7a67 	vneg.f32	s15, s15
 8001662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001666:	ee17 0a90 	vmov	r0, s15
 800166a:	f000 f8cb 	bl	8001804 <PWM_SET_LEFT>
			    	 taskEXIT_CRITICAL();
 800166e:	f004 ff39 	bl	80064e4 <vPortExitCritical>
			     }
			     if(PID_Output <0)
 8001672:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001676:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	d52b      	bpl.n	80016d8 <PID_Turning+0x2c0>
			     {
			    	 if(-PID_Output > PWM_Higest)
 8001680:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001684:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800171c <PID_Turning+0x304>
 8001688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	d501      	bpl.n	8001696 <PID_Turning+0x27e>
			    		 PID_Output=-PWM_Higest;
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <PID_Turning+0x308>)
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
			    	 if(-PID_Output < PWM_Lowest)
 8001696:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800169a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001724 <PID_Turning+0x30c>
 800169e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a6:	dd01      	ble.n	80016ac <PID_Turning+0x294>
			    	 	 PID_Output=-PWM_Lowest;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <PID_Turning+0x310>)
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
			    	 taskENTER_CRITICAL();
 80016ac:	f004 feea 	bl	8006484 <vPortEnterCritical>
			    	 PWM_SET_RIGHT ((int32_t) PID_Output);
 80016b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b8:	ee17 0a90 	vmov	r0, s15
 80016bc:	f000 f8da 	bl	8001874 <PWM_SET_RIGHT>
			    	 PWM_SET_LEFT((int32_t)(-PID_Output));
 80016c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016c4:	eef1 7a67 	vneg.f32	s15, s15
 80016c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016cc:	ee17 0a90 	vmov	r0, s15
 80016d0:	f000 f898 	bl	8001804 <PWM_SET_LEFT>
			    	 taskEXIT_CRITICAL();
 80016d4:	f004 ff06 	bl	80064e4 <vPortExitCritical>
			     }
			     delay(2);
 80016d8:	2002      	movs	r0, #2
 80016da:	f7ff fe25 	bl	8001328 <delay>
			  if(state == Idle)
 80016de:	e70f      	b.n	8001500 <PID_Turning+0xe8>
		  }
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3740      	adds	r7, #64	; 0x40
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	41700000 	.word	0x41700000
 80016ec:	3dcccccd 	.word	0x3dcccccd
 80016f0:	20000294 	.word	0x20000294
 80016f4:	43340000 	.word	0x43340000
 80016f8:	43b40000 	.word	0x43b40000
 80016fc:	c3340000 	.word	0xc3340000
 8001700:	40021400 	.word	0x40021400
 8001704:	200040cc 	.word	0x200040cc
 8001708:	000186a0 	.word	0x000186a0
 800170c:	447a0000 	.word	0x447a0000
 8001710:	447a0000 	.word	0x447a0000
 8001714:	43c80000 	.word	0x43c80000
 8001718:	43c80000 	.word	0x43c80000
 800171c:	c47a0000 	.word	0xc47a0000
 8001720:	c47a0000 	.word	0xc47a0000
 8001724:	c3c80000 	.word	0xc3c80000
 8001728:	c3c80000 	.word	0xc3c80000

0800172c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  	if (huart->Instance==USART2){
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_UART_RxCpltCallback+0x68>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d126      	bne.n	800178c <HAL_UART_RxCpltCallback+0x60>
  		Camera_Data=0x0000;
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_UART_RxCpltCallback+0x6c>)
 8001740:	2200      	movs	r2, #0
 8001742:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data | (((uint16_t) (Rx_Buf[0]))<<8);
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_UART_RxCpltCallback+0x70>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_UART_RxCpltCallback+0x6c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b21b      	sxth	r3, r3
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_UART_RxCpltCallback+0x6c>)
 800175e:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data|((uint16_t) (Rx_Buf[1]));
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_UART_RxCpltCallback+0x70>)
 8001762:	785b      	ldrb	r3, [r3, #1]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_UART_RxCpltCallback+0x6c>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_UART_RxCpltCallback+0x6c>)
 8001774:	801a      	strh	r2, [r3, #0]
  		//Data=Data & (0x07F0);
  		//HAL_UART_Transmit(&huart1, (uint8_t*) &Data,2,10);
  		//HAL_UART_AbortReceive_IT(&huart1);
  		Rx_Buf[0]=0;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_UART_RxCpltCallback+0x70>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
  		Rx_Buf[1]=0;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_UART_RxCpltCallback+0x70>)
 800177e:	2200      	movs	r2, #0
 8001780:	705a      	strb	r2, [r3, #1]
  		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001782:	2202      	movs	r2, #2
 8001784:	4905      	ldr	r1, [pc, #20]	; (800179c <HAL_UART_RxCpltCallback+0x70>)
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <HAL_UART_RxCpltCallback+0x74>)
 8001788:	f002 ffbd 	bl	8004706 <HAL_UART_Receive_IT>

  		//HAL_UART_Receive_IT(&huart1,Rx_Buf[++Rx_Cnt],1);
  		/*if (Rx_Cnt>20)
  			Rx_Cnt=0;*/
  	}
  }
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40004400 	.word	0x40004400
 8001798:	20000292 	.word	0x20000292
 800179c:	20000290 	.word	0x20000290
 80017a0:	20004118 	.word	0x20004118

080017a4 <State_Transition>:

uint8_t State_Transition(State* current_state)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	State next_state = Unknow;
 80017ac:	2305      	movs	r3, #5
 80017ae:	73fb      	strb	r3, [r7, #15]
	switch(state)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <State_Transition+0x5c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d00c      	beq.n	80017d2 <State_Transition+0x2e>
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	dc0d      	bgt.n	80017d8 <State_Transition+0x34>
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d002      	beq.n	80017c6 <State_Transition+0x22>
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d003      	beq.n	80017cc <State_Transition+0x28>
 80017c4:	e008      	b.n	80017d8 <State_Transition+0x34>
	{
		case Initial:
					next_state = TurnRight;
 80017c6:	2303      	movs	r3, #3
 80017c8:	73fb      	strb	r3, [r7, #15]
					break;
 80017ca:	e007      	b.n	80017dc <State_Transition+0x38>
		case Line_Search:
					next_state = Line_Search;
 80017cc:	2302      	movs	r3, #2
 80017ce:	73fb      	strb	r3, [r7, #15]
					break;
 80017d0:	e004      	b.n	80017dc <State_Transition+0x38>
		case TurnRight:
					next_state = TurnRight;
 80017d2:	2303      	movs	r3, #3
 80017d4:	73fb      	strb	r3, [r7, #15]
					break;
 80017d6:	e001      	b.n	80017dc <State_Transition+0x38>
		default:
					next_state = Initial;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
	}
	if (next_state == *current_state)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d101      	bne.n	80017ea <State_Transition+0x46>
		return 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e003      	b.n	80017f2 <State_Transition+0x4e>
	else
	{

		*current_state=next_state;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	701a      	strb	r2, [r3, #0]
		return 0;
 80017f0:	2300      	movs	r3, #0
	}
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200040cc 	.word	0x200040cc

08001804 <PWM_SET_LEFT>:

void PWM_SET_LEFT(int32_t duty)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da11      	bge.n	8001836 <PWM_SET_LEFT+0x32>
		{
		if (duty <= -2000)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8001818:	dc02      	bgt.n	8001820 <PWM_SET_LEFT+0x1c>
			duty = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e003      	b.n	8001828 <PWM_SET_LEFT+0x24>
		else
			duty = 2000 + duty;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001826:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182e:	480f      	ldr	r0, [pc, #60]	; (800186c <PWM_SET_LEFT+0x68>)
 8001830:	f001 f8b4 	bl	800299c <HAL_GPIO_WritePin>
 8001834:	e00a      	b.n	800184c <PWM_SET_LEFT+0x48>
		}
	else
		{
			if (duty == 0)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <PWM_SET_LEFT+0x3c>
				duty = 1;
 800183c:	2301      	movs	r3, #1
 800183e:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001846:	4809      	ldr	r0, [pc, #36]	; (800186c <PWM_SET_LEFT+0x68>)
 8001848:	f001 f8a8 	bl	800299c <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001852:	dd02      	ble.n	800185a <PWM_SET_LEFT+0x56>
		duty = 2000;
 8001854:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001858:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,duty);
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <PWM_SET_LEFT+0x6c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40020000 	.word	0x40020000
 8001870:	20004084 	.word	0x20004084

08001874 <PWM_SET_RIGHT>:

void PWM_SET_RIGHT(int32_t duty)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	da11      	bge.n	80018a6 <PWM_SET_RIGHT+0x32>
		{
		if (duty <= -2000)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8001888:	dc02      	bgt.n	8001890 <PWM_SET_RIGHT+0x1c>
			duty = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	e003      	b.n	8001898 <PWM_SET_RIGHT+0x24>
		else
			duty = 2000 + duty;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001896:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189e:	480f      	ldr	r0, [pc, #60]	; (80018dc <PWM_SET_RIGHT+0x68>)
 80018a0:	f001 f87c 	bl	800299c <HAL_GPIO_WritePin>
 80018a4:	e00a      	b.n	80018bc <PWM_SET_RIGHT+0x48>
		}
	else
		{
			if (duty == 0)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <PWM_SET_RIGHT+0x3c>
				duty = 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <PWM_SET_RIGHT+0x68>)
 80018b8:	f001 f870 	bl	800299c <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018c2:	dd02      	ble.n	80018ca <PWM_SET_RIGHT+0x56>
		duty = 2000;
 80018c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018c8:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,duty);
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <PWM_SET_RIGHT+0x6c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	20003ff4 	.word	0x20003ff4

080018e4 <StreamTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StreamTask */
void StreamTask(void const * argument)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t Same_State_Flag=0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
	Car_Initial();
 80018f0:	f7ff fcf6 	bl	80012e0 <Car_Initial>
	delay(1000);
 80018f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f8:	f7ff fd16 	bl	8001328 <delay>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 80018fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001900:	482b      	ldr	r0, [pc, #172]	; (80019b0 <StreamTask+0xcc>)
 8001902:	f001 f864 	bl	80029ce <HAL_GPIO_TogglePin>
	  delay(50);
 8001906:	2032      	movs	r0, #50	; 0x32
 8001908:	f7ff fd0e 	bl	8001328 <delay>
	  //PreviousWakeTime = osKernelSysTick()
	  //osDelayUntil(&PreviousWakeTime = osKernelSysTick(), 500);
	  Same_State_Flag = State_Transition(&state);
 800190c:	4829      	ldr	r0, [pc, #164]	; (80019b4 <StreamTask+0xd0>)
 800190e:	f7ff ff49 	bl	80017a4 <State_Transition>
 8001912:	4603      	mov	r3, r0
 8001914:	73fb      	strb	r3, [r7, #15]
	  if(Same_State_Flag)
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d147      	bne.n	80019ac <StreamTask+0xc8>
		  continue;
	  switch(state)
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <StreamTask+0xd0>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d028      	beq.n	8001976 <StreamTask+0x92>
 8001924:	2b03      	cmp	r3, #3
 8001926:	dc3e      	bgt.n	80019a6 <StreamTask+0xc2>
 8001928:	2b01      	cmp	r3, #1
 800192a:	d002      	beq.n	8001932 <StreamTask+0x4e>
 800192c:	2b02      	cmp	r3, #2
 800192e:	d00d      	beq.n	800194c <StreamTask+0x68>
 8001930:	e039      	b.n	80019a6 <StreamTask+0xc2>
	  {
	  case Initial:
		  	  	  	  	  state= Idle;
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <StreamTask+0xd0>)
 8001934:	2204      	movs	r2, #4
 8001936:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8001938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800193c:	f7ff fcf4 	bl	8001328 <delay>
		  	  	  	      state= Initial;
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <StreamTask+0xd0>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  Car_Initial();
 8001946:	f7ff fccb 	bl	80012e0 <Car_Initial>
		  	  	  	  	  break;
 800194a:	e030      	b.n	80019ae <StreamTask+0xca>
	  case Line_Search:
		  	  	  	  	  state= Idle;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <StreamTask+0xd0>)
 800194e:	2204      	movs	r2, #4
 8001950:	701a      	strb	r2, [r3, #0]
		  		  	  	  delay(500);
 8001952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001956:	f7ff fce7 	bl	8001328 <delay>
		  		  	  	  state= Line_Search;
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <StreamTask+0xd0>)
 800195c:	2202      	movs	r2, #2
 800195e:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  vTaskResume(PIDCameraHandle);
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <StreamTask+0xd4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f004 f883 	bl	8005a70 <vTaskResume>
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <StreamTask+0xd8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f004 f87e 	bl	8005a70 <vTaskResume>
		  	  	  	  	  break;
 8001974:	e01b      	b.n	80019ae <StreamTask+0xca>
	  case TurnRight:
	  	  	  	  	  	  state= Idle;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <StreamTask+0xd0>)
 8001978:	2204      	movs	r2, #4
 800197a:	701a      	strb	r2, [r3, #0]
	  	  	  	  	  	  delay(500);
 800197c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001980:	f7ff fcd2 	bl	8001328 <delay>
	  	  	  	  	  	  state= TurnRight;
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <StreamTask+0xd0>)
 8001986:	2203      	movs	r2, #3
 8001988:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <StreamTask+0xd8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f004 f86e 	bl	8005a70 <vTaskResume>
		  	  	  	  	  PID_Turning(-90,2);
 8001994:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001998:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80019c0 <StreamTask+0xdc>
 800199c:	f7ff fd3c 	bl	8001418 <PID_Turning>
		  	  	  	  	  Car_Stop();
 80019a0:	f7ff fcb8 	bl	8001314 <Car_Stop>
		  		  	  	  break;
 80019a4:	e003      	b.n	80019ae <StreamTask+0xca>
	  default :
		  	  	  	  	  Car_Initial();
 80019a6:	f7ff fc9b 	bl	80012e0 <Car_Initial>
 80019aa:	e7a7      	b.n	80018fc <StreamTask+0x18>
		  continue;
 80019ac:	bf00      	nop
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 80019ae:	e7a5      	b.n	80018fc <StreamTask+0x18>
 80019b0:	40021400 	.word	0x40021400
 80019b4:	200040cc 	.word	0x200040cc
 80019b8:	20004080 	.word	0x20004080
 80019bc:	2000415c 	.word	0x2000415c
 80019c0:	c2b40000 	.word	0xc2b40000

080019c4 <PIDCameraTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PIDCameraTask */
void PIDCameraTask(void const * argument)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PIDCameraTask */
		vTaskSuspend(PIDCameraHandle);
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <PIDCameraTask+0x158>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 ff89 	bl	80058e8 <vTaskSuspend>
		float PID_Error_Last=0;
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
		float PID_Output=1000;                    // PWM输出占空
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <PIDCameraTask+0x15c>)
 80019de:	61bb      	str	r3, [r7, #24]
		float PWM_Add=0;
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
		float Error = 0, Error_Total=0;
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
		int32_t PID_Input=0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
	  /* Infinite loop */
	  for(;;)
	  {
		  if(state == Idle)
 80019f6:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <PIDCameraTask+0x160>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d105      	bne.n	8001a0a <PIDCameraTask+0x46>
		  {
			  vTaskSuspend(PIDCameraHandle);
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <PIDCameraTask+0x158>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 ff70 	bl	80058e8 <vTaskSuspend>
			  continue;
 8001a08:	e087      	b.n	8001b1a <PIDCameraTask+0x156>
		  }
		     HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);
 8001a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a0e:	4846      	ldr	r0, [pc, #280]	; (8001b28 <PIDCameraTask+0x164>)
 8001a10:	f000 ffdd 	bl	80029ce <HAL_GPIO_TogglePin>
		  	 delay(10);
 8001a14:	200a      	movs	r0, #10
 8001a16:	f7ff fc87 	bl	8001328 <delay>
		  	 //Data=0x03E8;
		  	 PID_Input = (Camera_Data & (0x07FF));
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <PIDCameraTask+0x168>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a24:	60bb      	str	r3, [r7, #8]
		  	 if (PID_Input == 0)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d075      	beq.n	8001b18 <PIDCameraTask+0x154>
		  		 continue;
		  	 Error = PID_Target - PID_Input;		  // 偏差 = 目标 - 实际
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <PIDCameraTask+0x16c>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a40:	edc7 7a03 	vstr	s15, [r7, #12]
		  	 PID_Output = Kp * Error  +
 8001a44:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <PIDCameraTask+0x170>)
 8001a46:	ed93 7a00 	vldr	s14, [r3]
 8001a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
		  				  Kd * (Error - PID_Error_Last ) +
 8001a52:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a56:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a5e:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <PIDCameraTask+0x174>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
		  	 PID_Output = Kp * Error  +
 8001a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	edc7 7a06 	vstr	s15, [r7, #24]
		  				  Error_Total;
		  	 Error_Total=Error_Total+Ki*Error;
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <PIDCameraTask+0x178>)
 8001a7a:	ed93 7a00 	vldr	s14, [r3]
 8001a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a86:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8e:	edc7 7a05 	vstr	s15, [r7, #20]
		  	 PID_Error_Last = Error;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	61fb      	str	r3, [r7, #28]
		     if(PID_Output > 2000) PID_Output =2000;	    // 限幅
 8001a96:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a9a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001b40 <PIDCameraTask+0x17c>
 8001a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa6:	dd01      	ble.n	8001aac <PIDCameraTask+0xe8>
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <PIDCameraTask+0x180>)
 8001aaa:	61bb      	str	r3, [r7, #24]
		     if(PID_Output <1) PID_Output = 1;
 8001aac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	d502      	bpl.n	8001ac4 <PIDCameraTask+0x100>
 8001abe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ac2:	61bb      	str	r3, [r7, #24]
		     PWM_Add = PID_Output - 1000;
 8001ac4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ac8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001b48 <PIDCameraTask+0x184>
 8001acc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ad0:	edc7 7a04 	vstr	s15, [r7, #16]
		     taskENTER_CRITICAL();
 8001ad4:	f004 fcd6 	bl	8006484 <vPortEnterCritical>
		     PWM_SET_RIGHT ((PWM_Mid + (int32_t)PWM_Add / 2));
 8001ad8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae0:	ee17 2a90 	vmov	r2, s15
 8001ae4:	0fd3      	lsrs	r3, r2, #31
 8001ae6:	4413      	add	r3, r2
 8001ae8:	105b      	asrs	r3, r3, #1
 8001aea:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fec0 	bl	8001874 <PWM_SET_RIGHT>
		     PWM_SET_LEFT ((PWM_Mid - (int32_t)PWM_Add / 2));
 8001af4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afc:	ee17 2a90 	vmov	r2, s15
 8001b00:	0fd3      	lsrs	r3, r2, #31
 8001b02:	4413      	add	r3, r2
 8001b04:	105b      	asrs	r3, r3, #1
 8001b06:	425b      	negs	r3, r3
 8001b08:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fe79 	bl	8001804 <PWM_SET_LEFT>
		     taskEXIT_CRITICAL();
 8001b12:	f004 fce7 	bl	80064e4 <vPortExitCritical>
 8001b16:	e76e      	b.n	80019f6 <PIDCameraTask+0x32>
		  		 continue;
 8001b18:	bf00      	nop
		  if(state == Idle)
 8001b1a:	e76c      	b.n	80019f6 <PIDCameraTask+0x32>
 8001b1c:	20004080 	.word	0x20004080
 8001b20:	447a0000 	.word	0x447a0000
 8001b24:	200040cc 	.word	0x200040cc
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	20000292 	.word	0x20000292
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	44fa0000 	.word	0x44fa0000
 8001b44:	44fa0000 	.word	0x44fa0000
 8001b48:	447a0000 	.word	0x447a0000

08001b4c <GyroReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroReceiveTask */
void GyroReceiveTask(void const * argument)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroReceiveTask */
	vTaskSuspend(GyroReceiveHandle);
 8001b54:	4baa      	ldr	r3, [pc, #680]	; (8001e00 <GyroReceiveTask+0x2b4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fec5 	bl	80058e8 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  if(state == Idle)
 8001b5e:	4ba9      	ldr	r3, [pc, #676]	; (8001e04 <GyroReceiveTask+0x2b8>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d105      	bne.n	8001b72 <GyroReceiveTask+0x26>
	  		  {
	  			  vTaskSuspend(GyroReceiveHandle);
 8001b66:	4ba6      	ldr	r3, [pc, #664]	; (8001e00 <GyroReceiveTask+0x2b4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 febc 	bl	80058e8 <vTaskSuspend>
	  			  continue;
 8001b70:	e145      	b.n	8001dfe <GyroReceiveTask+0x2b2>
	  		  }
	  delay(10);
 8001b72:	200a      	movs	r0, #10
 8001b74:	f7ff fbd8 	bl	8001328 <delay>
	  uint8_t AxH=0, AxL=0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  int16_t Ax=0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	853b      	strh	r3, [r7, #40]	; 0x28

	  uint8_t AyH=0,AyL=0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  int16_t Ay=0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	84bb      	strh	r3, [r7, #36]	; 0x24

	  uint8_t YawH=0,YawL=0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  int16_t Yaw=0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	843b      	strh	r3, [r7, #32]

	  uint8_t sum=0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int i=0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
	  int h=0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint8_t GyroData[21]={0};
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	741a      	strb	r2, [r3, #16]
	  taskENTER_CRITICAL();
 8001bca:	f004 fc5b 	bl	8006484 <vPortEnterCritical>
	  HAL_UART_Receive(&huart3, (uint8_t *) &GyroData, sizeof(GyroData), 0xFFFF);
 8001bce:	f107 0108 	add.w	r1, r7, #8
 8001bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd6:	2215      	movs	r2, #21
 8001bd8:	488b      	ldr	r0, [pc, #556]	; (8001e08 <GyroReceiveTask+0x2bc>)
 8001bda:	f002 fcf2 	bl	80045c2 <HAL_UART_Receive>
	  taskEXIT_CRITICAL();
 8001bde:	f004 fc81 	bl	80064e4 <vPortExitCritical>
	  while(h<14)
 8001be2:	e009      	b.n	8001bf8 <GyroReceiveTask+0xac>
	  {
		  if(GyroData[h]==0x55)
 8001be4:	f107 0208 	add.w	r2, r7, #8
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b55      	cmp	r3, #85	; 0x55
 8001bf0:	d006      	beq.n	8001c00 <GyroReceiveTask+0xb4>
			  break;
		  h++;
 8001bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while(h<14)
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	2b0d      	cmp	r3, #13
 8001bfc:	ddf2      	ble.n	8001be4 <GyroReceiveTask+0x98>
 8001bfe:	e000      	b.n	8001c02 <GyroReceiveTask+0xb6>
			  break;
 8001c00:	bf00      	nop
	  }
	  if(GyroData[h]!=0x55)
 8001c02:	f107 0208 	add.w	r2, r7, #8
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b55      	cmp	r3, #85	; 0x55
 8001c0e:	f040 80f1 	bne.w	8001df4 <GyroReceiveTask+0x2a8>
		  continue;
	  if(GyroData[h+1]!=0x53)
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	3301      	adds	r3, #1
 8001c16:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001c20:	2b53      	cmp	r3, #83	; 0x53
 8001c22:	f040 80e9 	bne.w	8001df8 <GyroReceiveTask+0x2ac>
		  continue;
	  i=0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
	  sum=0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  while(i<10)
 8001c30:	e00f      	b.n	8001c52 <GyroReceiveTask+0x106>
	  {
		  sum=sum+GyroData[h+i];
 8001c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c36:	4413      	add	r3, r2
 8001c38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8001c42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c46:	4413      	add	r3, r2
 8001c48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  i++;
 8001c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4e:	3301      	adds	r3, #1
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
	  while(i<10)
 8001c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	ddec      	ble.n	8001c32 <GyroReceiveTask+0xe6>
	  }
	  	  if (sum!=GyroData[h+10])
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	330a      	adds	r3, #10
 8001c5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c60:	4413      	add	r3, r2
 8001c62:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001c66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	f040 80c6 	bne.w	8001dfc <GyroReceiveTask+0x2b0>
	  		  continue;
	  AxL=GyroData[h+2];
 8001c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c72:	3302      	adds	r3, #2
 8001c74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c78:	4413      	add	r3, r2
 8001c7a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001c7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  AxH=GyroData[h+3];
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	3303      	adds	r3, #3
 8001c86:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  AyL=GyroData[h+4];
 8001c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c96:	3304      	adds	r3, #4
 8001c98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001ca2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  AyH=GyroData[h+5];
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	3305      	adds	r3, #5
 8001caa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cae:	4413      	add	r3, r2
 8001cb0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  YawL=GyroData[h+6];
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	3306      	adds	r3, #6
 8001cbc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001cc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  YawH=GyroData[h+7];
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	3307      	adds	r3, #7
 8001cce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  Ax=((((int16_t) AxH)<<8) | AxL);
 8001cdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	853b      	strh	r3, [r7, #40]	; 0x28
	  Ay=((((int16_t) AyH)<<8) | AyL);
 8001cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	84bb      	strh	r3, [r7, #36]	; 0x24
	  Yaw=((((int16_t) YawH)<<8) | YawL);
 8001d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	843b      	strh	r3, [r7, #32]

	  taskENTER_CRITICAL();
 8001d14:	f004 fbb6 	bl	8006484 <vPortEnterCritical>
	  HAL_UART_Transmit(&huart1, (uint8_t *) &Yaw, sizeof(Yaw), 0xFFFF);
 8001d18:	f107 0120 	add.w	r1, r7, #32
 8001d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d20:	2202      	movs	r2, #2
 8001d22:	483a      	ldr	r0, [pc, #232]	; (8001e0c <GyroReceiveTask+0x2c0>)
 8001d24:	f002 fbbb 	bl	800449e <HAL_UART_Transmit>
	  taskEXIT_CRITICAL();
 8001d28:	f004 fbdc 	bl	80064e4 <vPortExitCritical>
	  angle.x=(((float)Ax) / 32768.0 * 180.0);
 8001d2c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d38:	ee17 0a90 	vmov	r0, s15
 8001d3c:	f7fe fbac 	bl	8000498 <__aeabi_f2d>
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <GyroReceiveTask+0x2c4>)
 8001d46:	f7fe fd29 	bl	800079c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <GyroReceiveTask+0x2c8>)
 8001d58:	f7fe fbf6 	bl	8000548 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe fe02 	bl	800096c <__aeabi_d2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <GyroReceiveTask+0x2cc>)
 8001d6c:	6013      	str	r3, [r2, #0]
	  angle.y=(((float)Ay) / 32768.0 * 180.0);
 8001d6e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d72:	ee07 3a90 	vmov	s15, r3
 8001d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7a:	ee17 0a90 	vmov	r0, s15
 8001d7e:	f7fe fb8b 	bl	8000498 <__aeabi_f2d>
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <GyroReceiveTask+0x2c4>)
 8001d88:	f7fe fd08 	bl	800079c <__aeabi_ddiv>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <GyroReceiveTask+0x2c8>)
 8001d9a:	f7fe fbd5 	bl	8000548 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fde1 	bl	800096c <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <GyroReceiveTask+0x2cc>)
 8001dae:	6053      	str	r3, [r2, #4]
	  angle.z=(((float)Yaw) / 32768.0 * 180.0);
 8001db0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ee17 0a90 	vmov	r0, s15
 8001dc0:	f7fe fb6a 	bl	8000498 <__aeabi_f2d>
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <GyroReceiveTask+0x2c4>)
 8001dca:	f7fe fce7 	bl	800079c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <GyroReceiveTask+0x2c8>)
 8001ddc:	f7fe fbb4 	bl	8000548 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fdc0 	bl	800096c <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <GyroReceiveTask+0x2cc>)
 8001df0:	6093      	str	r3, [r2, #8]
 8001df2:	e6b4      	b.n	8001b5e <GyroReceiveTask+0x12>
		  continue;
 8001df4:	bf00      	nop
 8001df6:	e6b2      	b.n	8001b5e <GyroReceiveTask+0x12>
		  continue;
 8001df8:	bf00      	nop
 8001dfa:	e6b0      	b.n	8001b5e <GyroReceiveTask+0x12>
	  		  continue;
 8001dfc:	bf00      	nop
  {
 8001dfe:	e6ae      	b.n	8001b5e <GyroReceiveTask+0x12>
 8001e00:	2000415c 	.word	0x2000415c
 8001e04:	200040cc 	.word	0x200040cc
 8001e08:	2000403c 	.word	0x2000403c
 8001e0c:	200040d0 	.word	0x200040d0
 8001e10:	40e00000 	.word	0x40e00000
 8001e14:	40668000 	.word	0x40668000
 8001e18:	20000294 	.word	0x20000294

08001e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e2e:	f000 fa85 	bl	800233c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40010000 	.word	0x40010000

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <Error_Handler+0x8>
	...

08001e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_MspInit+0x54>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <HAL_MspInit+0x54>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_MspInit+0x54>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_MspInit+0x54>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_MspInit+0x54>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_MspInit+0x54>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	210f      	movs	r1, #15
 8001e8e:	f06f 0001 	mvn.w	r0, #1
 8001e92:	f000 fb2b 	bl	80024ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <HAL_TIM_Base_MspInit+0x64>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_TIM_Base_MspInit+0x68>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <HAL_TIM_Base_MspInit+0x68>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_TIM_Base_MspInit+0x68>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ed2:	e012      	b.n	8001efa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_TIM_Base_MspInit+0x6c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10d      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_TIM_Base_MspInit+0x68>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_TIM_Base_MspInit+0x68>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_TIM_Base_MspInit+0x68>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40000800 	.word	0x40000800

08001f14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <HAL_TIM_MspPostInit+0xb0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d11e      	bne.n	8001f74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_TIM_MspPostInit+0xb4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_TIM_MspPostInit+0xb4>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_TIM_MspPostInit+0xb4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = leftPWM_Pin;
 8001f52:	2340      	movs	r3, #64	; 0x40
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f62:	2302      	movs	r3, #2
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftPWM_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4817      	ldr	r0, [pc, #92]	; (8001fcc <HAL_TIM_MspPostInit+0xb8>)
 8001f6e:	f000 fb79 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f72:	e023      	b.n	8001fbc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <HAL_TIM_MspPostInit+0xbc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d11e      	bne.n	8001fbc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_TIM_MspPostInit+0xb4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <HAL_TIM_MspPostInit+0xb4>)
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_TIM_MspPostInit+0xb4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightPWM_Pin;
 8001f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fac:	2302      	movs	r3, #2
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightPWM_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <HAL_TIM_MspPostInit+0xc0>)
 8001fb8:	f000 fb54 	bl	8002664 <HAL_GPIO_Init>
}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40000800 	.word	0x40000800
 8001fd4:	40020c00 	.word	0x40020c00

08001fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08e      	sub	sp, #56	; 0x38
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a54      	ldr	r2, [pc, #336]	; (8002148 <HAL_UART_MspInit+0x170>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d135      	bne.n	8002066 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
 8001ffe:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_UART_MspInit+0x174>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_UART_MspInit+0x174>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_UART_MspInit+0x174>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	4b4c      	ldr	r3, [pc, #304]	; (800214c <HAL_UART_MspInit+0x174>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_UART_MspInit+0x174>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b49      	ldr	r3, [pc, #292]	; (800214c <HAL_UART_MspInit+0x174>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002032:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002044:	2307      	movs	r3, #7
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204c:	4619      	mov	r1, r3
 800204e:	4840      	ldr	r0, [pc, #256]	; (8002150 <HAL_UART_MspInit+0x178>)
 8002050:	f000 fb08 	bl	8002664 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2105      	movs	r1, #5
 8002058:	2025      	movs	r0, #37	; 0x25
 800205a:	f000 fa47 	bl	80024ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800205e:	2025      	movs	r0, #37	; 0x25
 8002060:	f000 fa60 	bl	8002524 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002064:	e06b      	b.n	800213e <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <HAL_UART_MspInit+0x17c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d134      	bne.n	80020da <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_UART_MspInit+0x174>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	4a34      	ldr	r2, [pc, #208]	; (800214c <HAL_UART_MspInit+0x174>)
 800207a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207e:	6413      	str	r3, [r2, #64]	; 0x40
 8002080:	4b32      	ldr	r3, [pc, #200]	; (800214c <HAL_UART_MspInit+0x174>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_UART_MspInit+0x174>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	4a2d      	ldr	r2, [pc, #180]	; (800214c <HAL_UART_MspInit+0x174>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6313      	str	r3, [r2, #48]	; 0x30
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_UART_MspInit+0x174>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a8:	230c      	movs	r3, #12
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b8:	2307      	movs	r3, #7
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c0:	4619      	mov	r1, r3
 80020c2:	4823      	ldr	r0, [pc, #140]	; (8002150 <HAL_UART_MspInit+0x178>)
 80020c4:	f000 face 	bl	8002664 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2105      	movs	r1, #5
 80020cc:	2026      	movs	r0, #38	; 0x26
 80020ce:	f000 fa0d 	bl	80024ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020d2:	2026      	movs	r0, #38	; 0x26
 80020d4:	f000 fa26 	bl	8002524 <HAL_NVIC_EnableIRQ>
}
 80020d8:	e031      	b.n	800213e <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_UART_MspInit+0x180>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d12c      	bne.n	800213e <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_UART_MspInit+0x174>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	4a17      	ldr	r2, [pc, #92]	; (800214c <HAL_UART_MspInit+0x174>)
 80020ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f2:	6413      	str	r3, [r2, #64]	; 0x40
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_UART_MspInit+0x174>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_UART_MspInit+0x174>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_UART_MspInit+0x174>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	6313      	str	r3, [r2, #48]	; 0x30
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_UART_MspInit+0x174>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800211c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800212e:	2307      	movs	r3, #7
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	4619      	mov	r1, r3
 8002138:	4808      	ldr	r0, [pc, #32]	; (800215c <HAL_UART_MspInit+0x184>)
 800213a:	f000 fa93 	bl	8002664 <HAL_GPIO_Init>
}
 800213e:	bf00      	nop
 8002140:	3738      	adds	r7, #56	; 0x38
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40011000 	.word	0x40011000
 800214c:	40023800 	.word	0x40023800
 8002150:	40020000 	.word	0x40020000
 8002154:	40004400 	.word	0x40004400
 8002158:	40004800 	.word	0x40004800
 800215c:	40020400 	.word	0x40020400

08002160 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002170:	2200      	movs	r2, #0
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	2019      	movs	r0, #25
 8002176:	f000 f9b9 	bl	80024ec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800217a:	2019      	movs	r0, #25
 800217c:	f000 f9d2 	bl	8002524 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <HAL_InitTick+0xa4>)
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_InitTick+0xa4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6453      	str	r3, [r2, #68]	; 0x44
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_InitTick+0xa4>)
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800219c:	f107 0210 	add.w	r2, r7, #16
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 f8ac 	bl	8003304 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80021ac:	f001 f896 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 80021b0:	4603      	mov	r3, r0
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	4a13      	ldr	r2, [pc, #76]	; (8002208 <HAL_InitTick+0xa8>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0c9b      	lsrs	r3, r3, #18
 80021c0:	3b01      	subs	r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_InitTick+0xac>)
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <HAL_InitTick+0xb0>)
 80021c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_InitTick+0xac>)
 80021cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <HAL_InitTick+0xac>)
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_InitTick+0xac>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_InitTick+0xac>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80021e4:	4809      	ldr	r0, [pc, #36]	; (800220c <HAL_InitTick+0xac>)
 80021e6:	f001 f8da 	bl	800339e <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d104      	bne.n	80021fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80021f0:	4806      	ldr	r0, [pc, #24]	; (800220c <HAL_InitTick+0xac>)
 80021f2:	f001 f923 	bl	800343c <HAL_TIM_Base_Start_IT>
 80021f6:	4603      	mov	r3, r0
 80021f8:	e000      	b.n	80021fc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3730      	adds	r7, #48	; 0x30
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	431bde83 	.word	0x431bde83
 800220c:	20004160 	.word	0x20004160
 8002210:	40010000 	.word	0x40010000

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002218:	f001 f8a6 	bl	8003368 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	e7fe      	b.n	800221c <NMI_Handler+0x8>

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800224a:	f001 fa89 	bl	8003760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20004160 	.word	0x20004160

08002258 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <USART1_IRQHandler+0x10>)
 800225e:	f002 fa83 	bl	8004768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200040d0 	.word	0x200040d0

0800226c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <USART2_IRQHandler+0x10>)
 8002272:	f002 fa79 	bl	8004768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20004118 	.word	0x20004118

08002280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <SystemInit+0x20>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <SystemInit+0x20>)
 800228c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a8:	480d      	ldr	r0, [pc, #52]	; (80022e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022aa:	490e      	ldr	r1, [pc, #56]	; (80022e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c0:	4c0b      	ldr	r4, [pc, #44]	; (80022f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ce:	f7ff ffd7 	bl	8002280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f004 fbe3 	bl	8006a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d6:	f7fe fd2f 	bl	8000d38 <main>
  bx  lr    
 80022da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80022e8:	08006bb0 	.word	0x08006bb0
  ldr r2, =_sbss
 80022ec:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80022f0:	200041ac 	.word	0x200041ac

080022f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC_IRQHandler>
	...

080022f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <HAL_Init+0x40>)
 8002302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_Init+0x40>)
 800230e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_Init+0x40>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002320:	2003      	movs	r0, #3
 8002322:	f000 f8d8 	bl	80024d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff ff1a 	bl	8002160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232c:	f7ff fd8e 	bl	8001e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023c00 	.word	0x40023c00

0800233c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x20>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x24>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_IncTick+0x24>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000018 	.word	0x20000018
 8002360:	200041a8 	.word	0x200041a8

08002364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200041a8 	.word	0x200041a8

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4907      	ldr	r1, [pc, #28]	; (8002418 <__NVIC_EnableIRQ+0x38>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	; (800246c <__NVIC_SetPriority+0x50>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
         );
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ff4c 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024fe:	f7ff ff61 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002502:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	6978      	ldr	r0, [r7, #20]
 800250a:	f7ff ffb1 	bl	8002470 <NVIC_EncodePriority>
 800250e:	4602      	mov	r2, r0
 8002510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff80 	bl	800241c <__NVIC_SetPriority>
}
 800251c:	bf00      	nop
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff54 	bl	80023e0 <__NVIC_EnableIRQ>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800254e:	f7ff ff09 	bl	8002364 <HAL_GetTick>
 8002552:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d008      	beq.n	8002572 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e052      	b.n	8002618 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0216 	bic.w	r2, r2, #22
 8002580:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002590:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <HAL_DMA_Abort+0x62>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0208 	bic.w	r2, r2, #8
 80025b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c2:	e013      	b.n	80025ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c4:	f7ff fece 	bl	8002364 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d90c      	bls.n	80025ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2203      	movs	r2, #3
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e015      	b.n	8002618 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e4      	bne.n	80025c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	223f      	movs	r2, #63	; 0x3f
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d004      	beq.n	800263e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00c      	b.n	8002658 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2205      	movs	r2, #5
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e16b      	b.n	8002958 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 815a 	bne.w	8002952 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80b4 	beq.w	8002952 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b60      	ldr	r3, [pc, #384]	; (8002970 <HAL_GPIO_Init+0x30c>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a5f      	ldr	r2, [pc, #380]	; (8002970 <HAL_GPIO_Init+0x30c>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <HAL_GPIO_Init+0x30c>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a5b      	ldr	r2, [pc, #364]	; (8002974 <HAL_GPIO_Init+0x310>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_GPIO_Init+0x314>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02b      	beq.n	800288a <HAL_GPIO_Init+0x226>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a51      	ldr	r2, [pc, #324]	; (800297c <HAL_GPIO_Init+0x318>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d025      	beq.n	8002886 <HAL_GPIO_Init+0x222>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a50      	ldr	r2, [pc, #320]	; (8002980 <HAL_GPIO_Init+0x31c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01f      	beq.n	8002882 <HAL_GPIO_Init+0x21e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <HAL_GPIO_Init+0x320>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d019      	beq.n	800287e <HAL_GPIO_Init+0x21a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4e      	ldr	r2, [pc, #312]	; (8002988 <HAL_GPIO_Init+0x324>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0x216>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4d      	ldr	r2, [pc, #308]	; (800298c <HAL_GPIO_Init+0x328>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_Init+0x212>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <HAL_GPIO_Init+0x32c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x20e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_GPIO_Init+0x330>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_Init+0x20a>
 800286a:	2307      	movs	r3, #7
 800286c:	e00e      	b.n	800288c <HAL_GPIO_Init+0x228>
 800286e:	2308      	movs	r3, #8
 8002870:	e00c      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002872:	2306      	movs	r3, #6
 8002874:	e00a      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002876:	2305      	movs	r3, #5
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287a:	2304      	movs	r3, #4
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x228>
 800288a:	2300      	movs	r3, #0
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289c:	4935      	ldr	r1, [pc, #212]	; (8002974 <HAL_GPIO_Init+0x310>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ce:	4a32      	ldr	r2, [pc, #200]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <HAL_GPIO_Init+0x334>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002922:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <HAL_GPIO_Init+0x334>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_GPIO_Init+0x334>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800294c:	4a12      	ldr	r2, [pc, #72]	; (8002998 <HAL_GPIO_Init+0x334>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	f67f ae90 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40013800 	.word	0x40013800
 8002978:	40020000 	.word	0x40020000
 800297c:	40020400 	.word	0x40020400
 8002980:	40020800 	.word	0x40020800
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40021400 	.word	0x40021400
 8002990:	40021800 	.word	0x40021800
 8002994:	40021c00 	.word	0x40021c00
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029e0:	887a      	ldrh	r2, [r7, #2]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4013      	ands	r3, r2
 80029e6:	041a      	lsls	r2, r3, #16
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	400b      	ands	r3, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e264      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d075      	beq.n	8002b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	4ba3      	ldr	r3, [pc, #652]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d00c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4ba0      	ldr	r3, [pc, #640]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d112      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4b9d      	ldr	r3, [pc, #628]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b99      	ldr	r3, [pc, #612]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05b      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d157      	bne.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e23f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x74>
 8002a6a:	4b91      	ldr	r3, [pc, #580]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a90      	ldr	r2, [pc, #576]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x98>
 8002a82:	4b8b      	ldr	r3, [pc, #556]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a8a      	ldr	r2, [pc, #552]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b88      	ldr	r3, [pc, #544]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a87      	ldr	r2, [pc, #540]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	4b84      	ldr	r3, [pc, #528]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a83      	ldr	r2, [pc, #524]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b81      	ldr	r3, [pc, #516]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a80      	ldr	r2, [pc, #512]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7ff fc52 	bl	8002364 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7ff fc4e 	bl	8002364 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e204      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff fc3e 	bl	8002364 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7ff fc3a 	bl	8002364 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1f0      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b6c      	ldr	r3, [pc, #432]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b62      	ldr	r3, [pc, #392]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b5f      	ldr	r3, [pc, #380]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1c4      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4952      	ldr	r1, [pc, #328]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e03a      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <HAL_RCC_OscConfig+0x2b0>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7ff fbf3 	bl	8002364 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b82:	f7ff fbef 	bl	8002364 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1a5      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4940      	ldr	r1, [pc, #256]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_RCC_OscConfig+0x2b0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7ff fbd2 	bl	8002364 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7ff fbce 	bl	8002364 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e184      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d030      	beq.n	8002c50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_RCC_OscConfig+0x2b4>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfc:	f7ff fbb2 	bl	8002364 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c04:	f7ff fbae 	bl	8002364 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e164      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x200>
 8002c22:	e015      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_OscConfig+0x2b4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7ff fb9b 	bl	8002364 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c32:	f7ff fb97 	bl	8002364 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e14d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a0 	beq.w	8002d9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_OscConfig+0x2b8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d121      	bne.n	8002cde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_RCC_OscConfig+0x2b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <HAL_RCC_OscConfig+0x2b8>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7ff fb5d 	bl	8002364 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	e011      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2ce>
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	42470000 	.word	0x42470000
 8002cb8:	42470e80 	.word	0x42470e80
 8002cbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7ff fb50 	bl	8002364 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e106      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x4e4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2f0>
 8002ce6:	4b81      	ldr	r3, [pc, #516]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a80      	ldr	r2, [pc, #512]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	e01c      	b.n	8002d2e <HAL_RCC_OscConfig+0x32a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x312>
 8002cfc:	4b7b      	ldr	r3, [pc, #492]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a7a      	ldr	r2, [pc, #488]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	4b78      	ldr	r3, [pc, #480]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a77      	ldr	r2, [pc, #476]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	e00b      	b.n	8002d2e <HAL_RCC_OscConfig+0x32a>
 8002d16:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a74      	ldr	r2, [pc, #464]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	4b72      	ldr	r3, [pc, #456]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a71      	ldr	r2, [pc, #452]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d015      	beq.n	8002d62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d36:	f7ff fb15 	bl	8002364 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7ff fb11 	bl	8002364 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0c5      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCC_OscConfig+0x33a>
 8002d60:	e014      	b.n	8002d8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7ff faff 	bl	8002364 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7ff fafb 	bl	8002364 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0af      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	4b5a      	ldr	r3, [pc, #360]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b56      	ldr	r3, [pc, #344]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a55      	ldr	r2, [pc, #340]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 809b 	beq.w	8002ede <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da8:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d05c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d141      	bne.n	8002e40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7ff facf 	bl	8002364 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dca:	f7ff facb 	bl	8002364 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e081      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ddc:	4b43      	ldr	r3, [pc, #268]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	019b      	lsls	r3, r3, #6
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	3b01      	subs	r3, #1
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	061b      	lsls	r3, r3, #24
 8002e0c:	4937      	ldr	r1, [pc, #220]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7ff faa4 	bl	8002364 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e20:	f7ff faa0 	bl	8002364 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e056      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e32:	4b2e      	ldr	r3, [pc, #184]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x41c>
 8002e3e:	e04e      	b.n	8002ede <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7ff fa8d 	bl	8002364 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7ff fa89 	bl	8002364 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e03f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x44a>
 8002e6c:	e037      	b.n	8002ede <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e032      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e7a:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d028      	beq.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d121      	bne.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d11a      	bne.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d111      	bne.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	42470060 	.word	0x42470060

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0cc      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b68      	ldr	r3, [pc, #416]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d90c      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b65      	ldr	r3, [pc, #404]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	494d      	ldr	r1, [pc, #308]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d044      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d119      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e067      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4934      	ldr	r1, [pc, #208]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7ff f9be 	bl	8002364 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7ff f9ba 	bl	8002364 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e04f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d20c      	bcs.n	800303c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e032      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4916      	ldr	r1, [pc, #88]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	490e      	ldr	r1, [pc, #56]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307a:	f000 f82d 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	490a      	ldr	r1, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	5ccb      	ldrb	r3, [r1, r3]
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f860 	bl	8002160 <HAL_InitTick>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00
 80030b0:	40023800 	.word	0x40023800
 80030b4:	08006b88 	.word	0x08006b88
 80030b8:	20000010 	.word	0x20000010
 80030bc:	20000014 	.word	0x20000014

080030c0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_EnableCSS+0x14>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	4247004c 	.word	0x4247004c

080030d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	2300      	movs	r3, #0
 80030ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f0:	4b67      	ldr	r3, [pc, #412]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d00d      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x40>
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	f200 80bd 	bhi.w	800327c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x34>
 8003106:	2b04      	cmp	r3, #4
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x3a>
 800310a:	e0b7      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800310e:	60bb      	str	r3, [r7, #8]
       break;
 8003110:	e0b7      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003112:	4b61      	ldr	r3, [pc, #388]	; (8003298 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003114:	60bb      	str	r3, [r7, #8]
      break;
 8003116:	e0b4      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003118:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003120:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04d      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312e:	4b58      	ldr	r3, [pc, #352]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	461a      	mov	r2, r3
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	ea02 0800 	and.w	r8, r2, r0
 8003146:	ea03 0901 	and.w	r9, r3, r1
 800314a:	4640      	mov	r0, r8
 800314c:	4649      	mov	r1, r9
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	014b      	lsls	r3, r1, #5
 8003158:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800315c:	0142      	lsls	r2, r0, #5
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	ebb0 0008 	subs.w	r0, r0, r8
 8003166:	eb61 0109 	sbc.w	r1, r1, r9
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	018b      	lsls	r3, r1, #6
 8003174:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003178:	0182      	lsls	r2, r0, #6
 800317a:	1a12      	subs	r2, r2, r0
 800317c:	eb63 0301 	sbc.w	r3, r3, r1
 8003180:	f04f 0000 	mov.w	r0, #0
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	00d9      	lsls	r1, r3, #3
 800318a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800318e:	00d0      	lsls	r0, r2, #3
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	eb12 0208 	adds.w	r2, r2, r8
 8003198:	eb43 0309 	adc.w	r3, r3, r9
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	0259      	lsls	r1, r3, #9
 80031a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031aa:	0250      	lsls	r0, r2, #9
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	f7fd fc26 	bl	8000a0c <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e04a      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ca:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	099b      	lsrs	r3, r3, #6
 80031d0:	461a      	mov	r2, r3
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	ea02 0400 	and.w	r4, r2, r0
 80031e2:	ea03 0501 	and.w	r5, r3, r1
 80031e6:	4620      	mov	r0, r4
 80031e8:	4629      	mov	r1, r5
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	014b      	lsls	r3, r1, #5
 80031f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031f8:	0142      	lsls	r2, r0, #5
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	1b00      	subs	r0, r0, r4
 8003200:	eb61 0105 	sbc.w	r1, r1, r5
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	018b      	lsls	r3, r1, #6
 800320e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003212:	0182      	lsls	r2, r0, #6
 8003214:	1a12      	subs	r2, r2, r0
 8003216:	eb63 0301 	sbc.w	r3, r3, r1
 800321a:	f04f 0000 	mov.w	r0, #0
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	00d9      	lsls	r1, r3, #3
 8003224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003228:	00d0      	lsls	r0, r2, #3
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	1912      	adds	r2, r2, r4
 8003230:	eb45 0303 	adc.w	r3, r5, r3
 8003234:	f04f 0000 	mov.w	r0, #0
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	0299      	lsls	r1, r3, #10
 800323e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003242:	0290      	lsls	r0, r2, #10
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	f7fd fbda 	bl	8000a0c <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	60bb      	str	r3, [r7, #8]
      break;
 800327a:	e002      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800327e:	60bb      	str	r3, [r7, #8]
      break;
 8003280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003282:	68bb      	ldr	r3, [r7, #8]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	00f42400 	.word	0x00f42400
 8003298:	007a1200 	.word	0x007a1200

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000010 	.word	0x20000010

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b8:	f7ff fff0 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0a9b      	lsrs	r3, r3, #10
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	08006b98 	.word	0x08006b98

080032dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032e0:	f7ff ffdc 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0b5b      	lsrs	r3, r3, #13
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	08006b98 	.word	0x08006b98

08003304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	220f      	movs	r2, #15
 8003312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCC_GetClockConfig+0x60>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0207 	and.w	r2, r3, #7
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40023c00 	.word	0x40023c00

08003368 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_NMI_IRQHandler+0x20>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b80      	cmp	r3, #128	; 0x80
 8003376:	d104      	bne.n	8003382 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003378:	f000 f80a 	bl	8003390 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_NMI_IRQHandler+0x24>)
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	701a      	strb	r2, [r3, #0]
  }
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	4002380e 	.word	0x4002380e

08003390 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e041      	b.n	8003434 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d106      	bne.n	80033ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fe fd6d 	bl	8001ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f000 fc71 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e04e      	b.n	80034f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_TIM_Base_Start_IT+0xc4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d022      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d01d      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_TIM_Base_Start_IT+0xc8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d018      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <HAL_TIM_Base_Start_IT+0xcc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d013      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_TIM_Base_Start_IT+0xd0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00e      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <HAL_TIM_Base_Start_IT+0xd4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d009      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a19      	ldr	r2, [pc, #100]	; (8003514 <HAL_TIM_Base_Start_IT+0xd8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_TIM_Base_Start_IT+0xdc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d111      	bne.n	80034e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d010      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034de:	e007      	b.n	80034f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40010000 	.word	0x40010000
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	40000c00 	.word	0x40000c00
 8003510:	40010400 	.word	0x40010400
 8003514:	40014000 	.word	0x40014000
 8003518:	40001800 	.word	0x40001800

0800351c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e041      	b.n	80035b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f839 	bl	80035ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f000 fbb2 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_TIM_PWM_Start+0x24>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e022      	b.n	800363a <HAL_TIM_PWM_Start+0x6a>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d109      	bne.n	800360e <HAL_TIM_PWM_Start+0x3e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e015      	b.n	800363a <HAL_TIM_PWM_Start+0x6a>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d109      	bne.n	8003628 <HAL_TIM_PWM_Start+0x58>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e008      	b.n	800363a <HAL_TIM_PWM_Start+0x6a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07c      	b.n	800373c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d104      	bne.n	8003652 <HAL_TIM_PWM_Start+0x82>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003650:	e013      	b.n	800367a <HAL_TIM_PWM_Start+0xaa>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d104      	bne.n	8003662 <HAL_TIM_PWM_Start+0x92>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003660:	e00b      	b.n	800367a <HAL_TIM_PWM_Start+0xaa>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d104      	bne.n	8003672 <HAL_TIM_PWM_Start+0xa2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003670:	e003      	b.n	800367a <HAL_TIM_PWM_Start+0xaa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2201      	movs	r2, #1
 8003680:	6839      	ldr	r1, [r7, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fe08 	bl	8004298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <HAL_TIM_PWM_Start+0x174>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_TIM_PWM_Start+0xcc>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <HAL_TIM_PWM_Start+0x178>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <HAL_TIM_PWM_Start+0xd0>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_TIM_PWM_Start+0xd2>
 80036a0:	2300      	movs	r3, #0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_TIM_PWM_Start+0x174>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d022      	beq.n	8003706 <HAL_TIM_PWM_Start+0x136>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d01d      	beq.n	8003706 <HAL_TIM_PWM_Start+0x136>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_TIM_PWM_Start+0x17c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <HAL_TIM_PWM_Start+0x136>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <HAL_TIM_PWM_Start+0x180>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_TIM_PWM_Start+0x136>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_TIM_PWM_Start+0x184>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00e      	beq.n	8003706 <HAL_TIM_PWM_Start+0x136>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a16      	ldr	r2, [pc, #88]	; (8003748 <HAL_TIM_PWM_Start+0x178>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_TIM_PWM_Start+0x136>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <HAL_TIM_PWM_Start+0x188>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_TIM_PWM_Start+0x136>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_TIM_PWM_Start+0x18c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d111      	bne.n	800372a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b06      	cmp	r3, #6
 8003716:	d010      	beq.n	800373a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	e007      	b.n	800373a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40010000 	.word	0x40010000
 8003748:	40010400 	.word	0x40010400
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40014000 	.word	0x40014000
 800375c:	40001800 	.word	0x40001800

08003760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0202 	mvn.w	r2, #2
 800378c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa70 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa62 	bl	8003c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fa73 	bl	8003c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0204 	mvn.w	r2, #4
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa46 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa38 	bl	8003c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fa49 	bl	8003c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b08      	cmp	r3, #8
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b08      	cmp	r3, #8
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0208 	mvn.w	r2, #8
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa1c 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa0e 	bl	8003c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fa1f 	bl	8003c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b10      	cmp	r3, #16
 8003870:	d122      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b10      	cmp	r3, #16
 800387e:	d11b      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0210 	mvn.w	r2, #16
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2208      	movs	r2, #8
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9f2 	bl	8003c88 <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9e4 	bl	8003c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f9f5 	bl	8003c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0201 	mvn.w	r2, #1
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fa9c 	bl	8001e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d107      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fd70 	bl	80043f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d10e      	bne.n	800393c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	d107      	bne.n	800393c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f9ba 	bl	8003cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b20      	cmp	r3, #32
 8003948:	d10e      	bne.n	8003968 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b20      	cmp	r3, #32
 8003956:	d107      	bne.n	8003968 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0220 	mvn.w	r2, #32
 8003960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fd3a 	bl	80043dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003986:	2302      	movs	r3, #2
 8003988:	e0ac      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b0c      	cmp	r3, #12
 8003996:	f200 809f 	bhi.w	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	08003ad9 	.word	0x08003ad9
 80039a8:	08003ad9 	.word	0x08003ad9
 80039ac:	08003ad9 	.word	0x08003ad9
 80039b0:	08003a15 	.word	0x08003a15
 80039b4:	08003ad9 	.word	0x08003ad9
 80039b8:	08003ad9 	.word	0x08003ad9
 80039bc:	08003ad9 	.word	0x08003ad9
 80039c0:	08003a57 	.word	0x08003a57
 80039c4:	08003ad9 	.word	0x08003ad9
 80039c8:	08003ad9 	.word	0x08003ad9
 80039cc:	08003ad9 	.word	0x08003ad9
 80039d0:	08003a97 	.word	0x08003a97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fa12 	bl	8003e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0208 	orr.w	r2, r2, #8
 80039ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0204 	bic.w	r2, r2, #4
 80039fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6999      	ldr	r1, [r3, #24]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	619a      	str	r2, [r3, #24]
      break;
 8003a12:	e062      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fa62 	bl	8003ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	021a      	lsls	r2, r3, #8
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	619a      	str	r2, [r3, #24]
      break;
 8003a54:	e041      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fab7 	bl	8003fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0208 	orr.w	r2, r2, #8
 8003a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0204 	bic.w	r2, r2, #4
 8003a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69d9      	ldr	r1, [r3, #28]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	61da      	str	r2, [r3, #28]
      break;
 8003a94:	e021      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fb0b 	bl	80040b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	021a      	lsls	r2, r3, #8
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	61da      	str	r2, [r3, #28]
      break;
 8003ad6:	e000      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIM_ConfigClockSource+0x18>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0b3      	b.n	8003c6c <HAL_TIM_ConfigClockSource+0x180>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3c:	d03e      	beq.n	8003bbc <HAL_TIM_ConfigClockSource+0xd0>
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b42:	f200 8087 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x168>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4a:	f000 8085 	beq.w	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	d87f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x168>
 8003b54:	2b70      	cmp	r3, #112	; 0x70
 8003b56:	d01a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0xa2>
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d87b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x168>
 8003b5c:	2b60      	cmp	r3, #96	; 0x60
 8003b5e:	d050      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x116>
 8003b60:	2b60      	cmp	r3, #96	; 0x60
 8003b62:	d877      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x168>
 8003b64:	2b50      	cmp	r3, #80	; 0x50
 8003b66:	d03c      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xf6>
 8003b68:	2b50      	cmp	r3, #80	; 0x50
 8003b6a:	d873      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x168>
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d058      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x136>
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d86f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x168>
 8003b74:	2b30      	cmp	r3, #48	; 0x30
 8003b76:	d064      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x156>
 8003b78:	2b30      	cmp	r3, #48	; 0x30
 8003b7a:	d86b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x168>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d060      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x156>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d867      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x168>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d05c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x156>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d05a      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b8c:	e062      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f000 fb5b 	bl	8004258 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	609a      	str	r2, [r3, #8]
      break;
 8003bba:	e04e      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6899      	ldr	r1, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f000 fb44 	bl	8004258 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bde:	609a      	str	r2, [r3, #8]
      break;
 8003be0:	e03b      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 fab8 	bl	8004164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2150      	movs	r1, #80	; 0x50
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb11 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003c00:	e02b      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f000 fad7 	bl	80041c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2160      	movs	r1, #96	; 0x60
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fb01 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003c20:	e01b      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 fa98 	bl	8004164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2140      	movs	r1, #64	; 0x40
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 faf1 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003c40:	e00b      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f000 fae8 	bl	8004222 <TIM_ITRx_SetConfig>
        break;
 8003c52:	e002      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c54:	bf00      	nop
 8003c56:	e000      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a40      	ldr	r2, [pc, #256]	; (8003dd8 <TIM_Base_SetConfig+0x114>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d00f      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a3d      	ldr	r2, [pc, #244]	; (8003ddc <TIM_Base_SetConfig+0x118>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a3c      	ldr	r2, [pc, #240]	; (8003de0 <TIM_Base_SetConfig+0x11c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a3b      	ldr	r2, [pc, #236]	; (8003de4 <TIM_Base_SetConfig+0x120>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a3a      	ldr	r2, [pc, #232]	; (8003de8 <TIM_Base_SetConfig+0x124>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d108      	bne.n	8003d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2f      	ldr	r2, [pc, #188]	; (8003dd8 <TIM_Base_SetConfig+0x114>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d02b      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d027      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a2c      	ldr	r2, [pc, #176]	; (8003ddc <TIM_Base_SetConfig+0x118>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d023      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a2b      	ldr	r2, [pc, #172]	; (8003de0 <TIM_Base_SetConfig+0x11c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01f      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <TIM_Base_SetConfig+0x120>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01b      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <TIM_Base_SetConfig+0x124>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d017      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a28      	ldr	r2, [pc, #160]	; (8003dec <TIM_Base_SetConfig+0x128>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <TIM_Base_SetConfig+0x12c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00f      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a26      	ldr	r2, [pc, #152]	; (8003df4 <TIM_Base_SetConfig+0x130>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00b      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <TIM_Base_SetConfig+0x134>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <TIM_Base_SetConfig+0x138>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <TIM_Base_SetConfig+0x13c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d108      	bne.n	8003d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <TIM_Base_SetConfig+0x114>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_Base_SetConfig+0xf8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a0c      	ldr	r2, [pc, #48]	; (8003de8 <TIM_Base_SetConfig+0x124>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d103      	bne.n	8003dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	615a      	str	r2, [r3, #20]
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40000c00 	.word	0x40000c00
 8003de8:	40010400 	.word	0x40010400
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800
 8003df8:	40001800 	.word	0x40001800
 8003dfc:	40001c00 	.word	0x40001c00
 8003e00:	40002000 	.word	0x40002000

08003e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f023 0201 	bic.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 0302 	bic.w	r3, r3, #2
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a20      	ldr	r2, [pc, #128]	; (8003edc <TIM_OC1_SetConfig+0xd8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC1_SetConfig+0x64>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <TIM_OC1_SetConfig+0xdc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10c      	bne.n	8003e82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0308 	bic.w	r3, r3, #8
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a15      	ldr	r2, [pc, #84]	; (8003edc <TIM_OC1_SetConfig+0xd8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_OC1_SetConfig+0x8e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <TIM_OC1_SetConfig+0xdc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d111      	bne.n	8003eb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f023 0210 	bic.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0320 	bic.w	r3, r3, #32
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <TIM_OC2_SetConfig+0xe4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_OC2_SetConfig+0x68>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <TIM_OC2_SetConfig+0xe8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10d      	bne.n	8003f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <TIM_OC2_SetConfig+0xe4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC2_SetConfig+0x94>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a16      	ldr	r2, [pc, #88]	; (8003fcc <TIM_OC2_SetConfig+0xe8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d113      	bne.n	8003fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40010400 	.word	0x40010400

08003fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <TIM_OC3_SetConfig+0xe0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_OC3_SetConfig+0x66>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a20      	ldr	r2, [pc, #128]	; (80040b4 <TIM_OC3_SetConfig+0xe4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10d      	bne.n	8004052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800403c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a16      	ldr	r2, [pc, #88]	; (80040b0 <TIM_OC3_SetConfig+0xe0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d003      	beq.n	8004062 <TIM_OC3_SetConfig+0x92>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <TIM_OC3_SetConfig+0xe4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d113      	bne.n	800408a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40010400 	.word	0x40010400

080040b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a12      	ldr	r2, [pc, #72]	; (800415c <TIM_OC4_SetConfig+0xa4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_OC4_SetConfig+0x68>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a11      	ldr	r2, [pc, #68]	; (8004160 <TIM_OC4_SetConfig+0xa8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d109      	bne.n	8004134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40010400 	.word	0x40010400

08004164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 030a 	bic.w	r3, r3, #10
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b087      	sub	sp, #28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f023 0210 	bic.w	r2, r3, #16
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	031b      	lsls	r3, r3, #12
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	f043 0307 	orr.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	431a      	orrs	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2201      	movs	r2, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e05a      	b.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a21      	ldr	r2, [pc, #132]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d022      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d01d      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d018      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00e      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10c      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4313      	orrs	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800
 80043cc:	40000c00 	.word	0x40000c00
 80043d0:	40010400 	.word	0x40010400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40001800 	.word	0x40001800

080043dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e03f      	b.n	8004496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fdd4 	bl	8001fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	; 0x24
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fd1d 	bl	8004e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800447c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b08a      	sub	sp, #40	; 0x28
 80044a2:	af02      	add	r7, sp, #8
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d17c      	bne.n	80045b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_UART_Transmit+0x2c>
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e075      	b.n	80045ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_UART_Transmit+0x3e>
 80044d8:	2302      	movs	r3, #2
 80044da:	e06e      	b.n	80045ba <HAL_UART_Transmit+0x11c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2221      	movs	r2, #33	; 0x21
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f2:	f7fd ff37 	bl	8002364 <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450c:	d108      	bne.n	8004520 <HAL_UART_Transmit+0x82>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e003      	b.n	8004528 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004530:	e02a      	b.n	8004588 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2200      	movs	r2, #0
 800453a:	2180      	movs	r1, #128	; 0x80
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 fadf 	bl	8004b00 <UART_WaitOnFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e036      	b.n	80045ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	3302      	adds	r3, #2
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	e007      	b.n	800457a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3301      	adds	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1cf      	bne.n	8004532 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	2140      	movs	r1, #64	; 0x40
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 faaf 	bl	8004b00 <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e006      	b.n	80045ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e000      	b.n	80045ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b08a      	sub	sp, #40	; 0x28
 80045c6:	af02      	add	r7, sp, #8
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	f040 808c 	bne.w	80046fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_UART_Receive+0x2e>
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e084      	b.n	80046fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Receive+0x40>
 80045fe:	2302      	movs	r3, #2
 8004600:	e07d      	b.n	80046fe <HAL_UART_Receive+0x13c>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2222      	movs	r2, #34	; 0x22
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800461e:	f7fd fea1 	bl	8002364 <HAL_GetTick>
 8004622:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	88fa      	ldrh	r2, [r7, #6]
 800462e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004638:	d108      	bne.n	800464c <HAL_UART_Receive+0x8a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e003      	b.n	8004654 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800465c:	e043      	b.n	80046e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	2120      	movs	r1, #32
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fa49 	bl	8004b00 <UART_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e042      	b.n	80046fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	b29a      	uxth	r2, r3
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	3302      	adds	r3, #2
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e01f      	b.n	80046d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d007      	beq.n	80046b2 <HAL_UART_Receive+0xf0>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <HAL_UART_Receive+0xfe>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e008      	b.n	80046d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1b6      	bne.n	800465e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e000      	b.n	80046fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	4613      	mov	r3, r2
 8004712:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b20      	cmp	r3, #32
 800471e:	d11d      	bne.n	800475c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_UART_Receive_IT+0x26>
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e016      	b.n	800475e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_UART_Receive_IT+0x38>
 800473a:	2302      	movs	r3, #2
 800473c:	e00f      	b.n	800475e <HAL_UART_Receive_IT+0x58>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	461a      	mov	r2, r3
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fa1e 	bl	8004b94 <UART_Start_Receive_IT>
 8004758:	4603      	mov	r3, r0
 800475a:	e000      	b.n	800475e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004788:	2300      	movs	r3, #0
 800478a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10d      	bne.n	80047ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_UART_IRQHandler+0x52>
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fad1 	bl	8004d5a <UART_Receive_IT>
      return;
 80047b8:	e17c      	b.n	8004ab4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80b1 	beq.w	8004924 <HAL_UART_IRQHandler+0x1bc>
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <HAL_UART_IRQHandler+0x70>
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80a6 	beq.w	8004924 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_UART_IRQHandler+0x90>
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	f043 0201 	orr.w	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_UART_IRQHandler+0xb0>
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	f043 0202 	orr.w	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_UART_IRQHandler+0xd0>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	f043 0204 	orr.w	r2, r3, #4
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00f      	beq.n	8004862 <HAL_UART_IRQHandler+0xfa>
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <HAL_UART_IRQHandler+0xee>
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f043 0208 	orr.w	r2, r3, #8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 811f 	beq.w	8004aaa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <HAL_UART_IRQHandler+0x11e>
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fa6a 	bl	8004d5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <HAL_UART_IRQHandler+0x146>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d031      	beq.n	8004912 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f9aa 	bl	8004c08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d123      	bne.n	800490a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d013      	beq.n	8004902 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	4a77      	ldr	r2, [pc, #476]	; (8004abc <HAL_UART_IRQHandler+0x354>)
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fe9a 	bl	8002620 <HAL_DMA_Abort_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	e00e      	b.n	8004920 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f8e6 	bl	8004ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	e00a      	b.n	8004920 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8e2 	bl	8004ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004910:	e006      	b.n	8004920 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f8de 	bl	8004ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800491e:	e0c4      	b.n	8004aaa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	bf00      	nop
    return;
 8004922:	e0c2      	b.n	8004aaa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	2b01      	cmp	r3, #1
 800492a:	f040 80a2 	bne.w	8004a72 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 809c 	beq.w	8004a72 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8096 	beq.w	8004a72 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d14f      	bne.n	8004a0a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004974:	8a3b      	ldrh	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8099 	beq.w	8004aae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004980:	8a3a      	ldrh	r2, [r7, #16]
 8004982:	429a      	cmp	r2, r3
 8004984:	f080 8093 	bcs.w	8004aae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8a3a      	ldrh	r2, [r7, #16]
 800498c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004998:	d02b      	beq.n	80049f2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0210 	bic.w	r2, r2, #16
 80049e6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fd fda7 	bl	8002540 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f870 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a08:	e051      	b.n	8004aae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d047      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004a22:	8a7b      	ldrh	r3, [r7, #18]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d044      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a36:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0210 	bic.w	r2, r2, #16
 8004a64:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a66:	8a7b      	ldrh	r3, [r7, #18]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f83c 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a70:	e01f      	b.n	8004ab2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_UART_IRQHandler+0x326>
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8ff 	bl	8004c8a <UART_Transmit_IT>
    return;
 8004a8c:	e012      	b.n	8004ab4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00d      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x34c>
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f941 	bl	8004d2a <UART_EndTransmit_IT>
    return;
 8004aa8:	e004      	b.n	8004ab4 <HAL_UART_IRQHandler+0x34c>
    return;
 8004aaa:	bf00      	nop
 8004aac:	e002      	b.n	8004ab4 <HAL_UART_IRQHandler+0x34c>
      return;
 8004aae:	bf00      	nop
 8004ab0:	e000      	b.n	8004ab4 <HAL_UART_IRQHandler+0x34c>
      return;
 8004ab2:	bf00      	nop
  }
}
 8004ab4:	3728      	adds	r7, #40	; 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	08004c63 	.word	0x08004c63

08004ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b10:	e02c      	b.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d028      	beq.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b20:	f7fd fc20 	bl	8002364 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d21d      	bcs.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e00f      	b.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4013      	ands	r3, r2
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d0c3      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2222      	movs	r2, #34	; 0x22
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0220 	orr.w	r2, r2, #32
 8004bf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d107      	bne.n	8004c48 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0210 	bic.w	r2, r2, #16
 8004c46:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff ff29 	bl	8004ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b21      	cmp	r3, #33	; 0x21
 8004c9c:	d13e      	bne.n	8004d1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	d114      	bne.n	8004cd2 <UART_Transmit_IT+0x48>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d110      	bne.n	8004cd2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	1c9a      	adds	r2, r3, #2
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	621a      	str	r2, [r3, #32]
 8004cd0:	e008      	b.n	8004ce4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	1c59      	adds	r1, r3, #1
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6211      	str	r1, [r2, #32]
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10f      	bne.n	8004d18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff feb8 	bl	8004ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b22      	cmp	r3, #34	; 0x22
 8004d6c:	f040 8087 	bne.w	8004e7e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d78:	d117      	bne.n	8004daa <UART_Receive_IT+0x50>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d113      	bne.n	8004daa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	1c9a      	adds	r2, r3, #2
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	629a      	str	r2, [r3, #40]	; 0x28
 8004da8:	e026      	b.n	8004df8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbc:	d007      	beq.n	8004dce <UART_Receive_IT+0x74>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <UART_Receive_IT+0x82>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e008      	b.n	8004dee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4619      	mov	r1, r3
 8004e06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d136      	bne.n	8004e7a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0220 	bic.w	r2, r2, #32
 8004e1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d10e      	bne.n	8004e6a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0210 	bic.w	r2, r2, #16
 8004e5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff fe40 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
 8004e68:	e002      	b.n	8004e70 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fc fc5e 	bl	800172c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e002      	b.n	8004e80 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
  }
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8c:	b09f      	sub	sp, #124	; 0x7c
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9e:	68d9      	ldr	r1, [r3, #12]
 8004ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	ea40 0301 	orr.w	r3, r0, r1
 8004ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ecc:	f021 010c 	bic.w	r1, r1, #12
 8004ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee6:	6999      	ldr	r1, [r3, #24]
 8004ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	ea40 0301 	orr.w	r3, r0, r1
 8004ef0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4bc5      	ldr	r3, [pc, #788]	; (800520c <UART_SetConfig+0x384>)
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d004      	beq.n	8004f06 <UART_SetConfig+0x7e>
 8004efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4bc3      	ldr	r3, [pc, #780]	; (8005210 <UART_SetConfig+0x388>)
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d103      	bne.n	8004f0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f06:	f7fe f9e9 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 8004f0a:	6778      	str	r0, [r7, #116]	; 0x74
 8004f0c:	e002      	b.n	8004f14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f0e:	f7fe f9d1 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8004f12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1c:	f040 80b6 	bne.w	800508c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f22:	461c      	mov	r4, r3
 8004f24:	f04f 0500 	mov.w	r5, #0
 8004f28:	4622      	mov	r2, r4
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	1891      	adds	r1, r2, r2
 8004f2e:	6439      	str	r1, [r7, #64]	; 0x40
 8004f30:	415b      	adcs	r3, r3
 8004f32:	647b      	str	r3, [r7, #68]	; 0x44
 8004f34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f38:	1912      	adds	r2, r2, r4
 8004f3a:	eb45 0303 	adc.w	r3, r5, r3
 8004f3e:	f04f 0000 	mov.w	r0, #0
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	00d9      	lsls	r1, r3, #3
 8004f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f4c:	00d0      	lsls	r0, r2, #3
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	1911      	adds	r1, r2, r4
 8004f54:	6639      	str	r1, [r7, #96]	; 0x60
 8004f56:	416b      	adcs	r3, r5
 8004f58:	667b      	str	r3, [r7, #100]	; 0x64
 8004f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	1891      	adds	r1, r2, r2
 8004f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f68:	415b      	adcs	r3, r3
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004f74:	f7fb fd4a 	bl	8000a0c <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4ba5      	ldr	r3, [pc, #660]	; (8005214 <UART_SetConfig+0x38c>)
 8004f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	011e      	lsls	r6, r3, #4
 8004f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f88:	461c      	mov	r4, r3
 8004f8a:	f04f 0500 	mov.w	r5, #0
 8004f8e:	4622      	mov	r2, r4
 8004f90:	462b      	mov	r3, r5
 8004f92:	1891      	adds	r1, r2, r2
 8004f94:	6339      	str	r1, [r7, #48]	; 0x30
 8004f96:	415b      	adcs	r3, r3
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f9e:	1912      	adds	r2, r2, r4
 8004fa0:	eb45 0303 	adc.w	r3, r5, r3
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	f04f 0100 	mov.w	r1, #0
 8004fac:	00d9      	lsls	r1, r3, #3
 8004fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fb2:	00d0      	lsls	r0, r2, #3
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	1911      	adds	r1, r2, r4
 8004fba:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fbc:	416b      	adcs	r3, r5
 8004fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	1891      	adds	r1, r2, r2
 8004fcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fce:	415b      	adcs	r3, r3
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004fda:	f7fb fd17 	bl	8000a0c <__aeabi_uldivmod>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4b8c      	ldr	r3, [pc, #560]	; (8005214 <UART_SetConfig+0x38c>)
 8004fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	2164      	movs	r1, #100	; 0x64
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	3332      	adds	r3, #50	; 0x32
 8004ff6:	4a87      	ldr	r2, [pc, #540]	; (8005214 <UART_SetConfig+0x38c>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005004:	441e      	add	r6, r3
 8005006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005008:	4618      	mov	r0, r3
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	1894      	adds	r4, r2, r2
 8005014:	623c      	str	r4, [r7, #32]
 8005016:	415b      	adcs	r3, r3
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
 800501a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800501e:	1812      	adds	r2, r2, r0
 8005020:	eb41 0303 	adc.w	r3, r1, r3
 8005024:	f04f 0400 	mov.w	r4, #0
 8005028:	f04f 0500 	mov.w	r5, #0
 800502c:	00dd      	lsls	r5, r3, #3
 800502e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005032:	00d4      	lsls	r4, r2, #3
 8005034:	4622      	mov	r2, r4
 8005036:	462b      	mov	r3, r5
 8005038:	1814      	adds	r4, r2, r0
 800503a:	653c      	str	r4, [r7, #80]	; 0x50
 800503c:	414b      	adcs	r3, r1
 800503e:	657b      	str	r3, [r7, #84]	; 0x54
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	461a      	mov	r2, r3
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	1891      	adds	r1, r2, r2
 800504c:	61b9      	str	r1, [r7, #24]
 800504e:	415b      	adcs	r3, r3
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005056:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800505a:	f7fb fcd7 	bl	8000a0c <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b6c      	ldr	r3, [pc, #432]	; (8005214 <UART_SetConfig+0x38c>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	; 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a67      	ldr	r2, [pc, #412]	; (8005214 <UART_SetConfig+0x38c>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f003 0207 	and.w	r2, r3, #7
 8005082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4432      	add	r2, r6
 8005088:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800508a:	e0b9      	b.n	8005200 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800508c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800508e:	461c      	mov	r4, r3
 8005090:	f04f 0500 	mov.w	r5, #0
 8005094:	4622      	mov	r2, r4
 8005096:	462b      	mov	r3, r5
 8005098:	1891      	adds	r1, r2, r2
 800509a:	6139      	str	r1, [r7, #16]
 800509c:	415b      	adcs	r3, r3
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050a4:	1912      	adds	r2, r2, r4
 80050a6:	eb45 0303 	adc.w	r3, r5, r3
 80050aa:	f04f 0000 	mov.w	r0, #0
 80050ae:	f04f 0100 	mov.w	r1, #0
 80050b2:	00d9      	lsls	r1, r3, #3
 80050b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050b8:	00d0      	lsls	r0, r2, #3
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	eb12 0804 	adds.w	r8, r2, r4
 80050c2:	eb43 0905 	adc.w	r9, r3, r5
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	008b      	lsls	r3, r1, #2
 80050da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050de:	0082      	lsls	r2, r0, #2
 80050e0:	4640      	mov	r0, r8
 80050e2:	4649      	mov	r1, r9
 80050e4:	f7fb fc92 	bl	8000a0c <__aeabi_uldivmod>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4b49      	ldr	r3, [pc, #292]	; (8005214 <UART_SetConfig+0x38c>)
 80050ee:	fba3 2302 	umull	r2, r3, r3, r2
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	011e      	lsls	r6, r3, #4
 80050f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f8:	4618      	mov	r0, r3
 80050fa:	f04f 0100 	mov.w	r1, #0
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	1894      	adds	r4, r2, r2
 8005104:	60bc      	str	r4, [r7, #8]
 8005106:	415b      	adcs	r3, r3
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800510e:	1812      	adds	r2, r2, r0
 8005110:	eb41 0303 	adc.w	r3, r1, r3
 8005114:	f04f 0400 	mov.w	r4, #0
 8005118:	f04f 0500 	mov.w	r5, #0
 800511c:	00dd      	lsls	r5, r3, #3
 800511e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005122:	00d4      	lsls	r4, r2, #3
 8005124:	4622      	mov	r2, r4
 8005126:	462b      	mov	r3, r5
 8005128:	1814      	adds	r4, r2, r0
 800512a:	64bc      	str	r4, [r7, #72]	; 0x48
 800512c:	414b      	adcs	r3, r1
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4618      	mov	r0, r3
 8005136:	f04f 0100 	mov.w	r1, #0
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	008b      	lsls	r3, r1, #2
 8005144:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005148:	0082      	lsls	r2, r0, #2
 800514a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800514e:	f7fb fc5d 	bl	8000a0c <__aeabi_uldivmod>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <UART_SetConfig+0x38c>)
 8005158:	fba3 1302 	umull	r1, r3, r3, r2
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	2164      	movs	r1, #100	; 0x64
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	3332      	adds	r3, #50	; 0x32
 800516a:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <UART_SetConfig+0x38c>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005176:	441e      	add	r6, r3
 8005178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800517a:	4618      	mov	r0, r3
 800517c:	f04f 0100 	mov.w	r1, #0
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	1894      	adds	r4, r2, r2
 8005186:	603c      	str	r4, [r7, #0]
 8005188:	415b      	adcs	r3, r3
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005190:	1812      	adds	r2, r2, r0
 8005192:	eb41 0303 	adc.w	r3, r1, r3
 8005196:	f04f 0400 	mov.w	r4, #0
 800519a:	f04f 0500 	mov.w	r5, #0
 800519e:	00dd      	lsls	r5, r3, #3
 80051a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051a4:	00d4      	lsls	r4, r2, #3
 80051a6:	4622      	mov	r2, r4
 80051a8:	462b      	mov	r3, r5
 80051aa:	eb12 0a00 	adds.w	sl, r2, r0
 80051ae:	eb43 0b01 	adc.w	fp, r3, r1
 80051b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f04f 0100 	mov.w	r1, #0
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	008b      	lsls	r3, r1, #2
 80051c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051ca:	0082      	lsls	r2, r0, #2
 80051cc:	4650      	mov	r0, sl
 80051ce:	4659      	mov	r1, fp
 80051d0:	f7fb fc1c 	bl	8000a0c <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <UART_SetConfig+0x38c>)
 80051da:	fba3 1302 	umull	r1, r3, r3, r2
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2164      	movs	r1, #100	; 0x64
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	3332      	adds	r3, #50	; 0x32
 80051ec:	4a09      	ldr	r2, [pc, #36]	; (8005214 <UART_SetConfig+0x38c>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4432      	add	r2, r6
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	377c      	adds	r7, #124	; 0x7c
 8005204:	46bd      	mov	sp, r7
 8005206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520a:	bf00      	nop
 800520c:	40011000 	.word	0x40011000
 8005210:	40011400 	.word	0x40011400
 8005214:	51eb851f 	.word	0x51eb851f

08005218 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800522a:	2b84      	cmp	r3, #132	; 0x84
 800522c:	d005      	beq.n	800523a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800522e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	3303      	adds	r3, #3
 8005238:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800523a:	68fb      	ldr	r3, [r7, #12]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800524e:	f3ef 8305 	mrs	r3, IPSR
 8005252:	607b      	str	r3, [r7, #4]
  return(result);
 8005254:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf14      	ite	ne
 800525a:	2301      	movne	r3, #1
 800525c:	2300      	moveq	r3, #0
 800525e:	b2db      	uxtb	r3, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005270:	f000 fc5c 	bl	8005b2c <vTaskStartScheduler>
  
  return osOK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	bd80      	pop	{r7, pc}

0800527a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800527e:	f7ff ffe3 	bl	8005248 <inHandlerMode>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005288:	f000 fd6a 	bl	8005d60 <xTaskGetTickCountFromISR>
 800528c:	4603      	mov	r3, r0
 800528e:	e002      	b.n	8005296 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005290:	f000 fd56 	bl	8005d40 <xTaskGetTickCount>
 8005294:	4603      	mov	r3, r0
  }
}
 8005296:	4618      	mov	r0, r3
 8005298:	bd80      	pop	{r7, pc}

0800529a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800529a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529c:	b089      	sub	sp, #36	; 0x24
 800529e:	af04      	add	r7, sp, #16
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d020      	beq.n	80052ee <osThreadCreate+0x54>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01c      	beq.n	80052ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685c      	ldr	r4, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681d      	ldr	r5, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691e      	ldr	r6, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ffa6 	bl	8005218 <makeFreeRtosPriority>
 80052cc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052d6:	9202      	str	r2, [sp, #8]
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	9100      	str	r1, [sp, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	4632      	mov	r2, r6
 80052e0:	4629      	mov	r1, r5
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 f8ef 	bl	80054c6 <xTaskCreateStatic>
 80052e8:	4603      	mov	r3, r0
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e01c      	b.n	8005328 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685c      	ldr	r4, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052fa:	b29e      	uxth	r6, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff ff88 	bl	8005218 <makeFreeRtosPriority>
 8005308:	4602      	mov	r2, r0
 800530a:	f107 030c 	add.w	r3, r7, #12
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	9200      	str	r2, [sp, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	4632      	mov	r2, r6
 8005316:	4629      	mov	r1, r5
 8005318:	4620      	mov	r0, r4
 800531a:	f000 f931 	bl	8005580 <xTaskCreate>
 800531e:	4603      	mov	r3, r0
 8005320:	2b01      	cmp	r3, #1
 8005322:	d001      	beq.n	8005328 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005328:	68fb      	ldr	r3, [r7, #12]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005332 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <osDelayUntil+0x18>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	e000      	b.n	800534c <osDelayUntil+0x1a>
 800534a:	2301      	movs	r3, #1
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa4c 	bl	80057ec <vTaskDelayUntil>
  
  return osOK;
 8005354:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f103 0208 	add.w	r2, r3, #8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f04f 32ff 	mov.w	r2, #4294967295
 8005376:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 0208 	add.w	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f103 0208 	add.w	r2, r3, #8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d103      	bne.n	8005420 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e00c      	b.n	800543a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3308      	adds	r3, #8
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e002      	b.n	800542e <vListInsert+0x2e>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	d2f6      	bcs.n	8005428 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6892      	ldr	r2, [r2, #8]
 8005488:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6852      	ldr	r2, [r2, #4]
 8005492:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d103      	bne.n	80054a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	1e5a      	subs	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b08e      	sub	sp, #56	; 0x38
 80054ca:	af04      	add	r7, sp, #16
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <xTaskCreateStatic+0x46>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	61fb      	str	r3, [r7, #28]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800550c:	2354      	movs	r3, #84	; 0x54
 800550e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b54      	cmp	r3, #84	; 0x54
 8005514:	d00a      	beq.n	800552c <xTaskCreateStatic+0x66>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	61bb      	str	r3, [r7, #24]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800552c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01e      	beq.n	8005572 <xTaskCreateStatic+0xac>
 8005534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01b      	beq.n	8005572 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005542:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800554c:	2300      	movs	r3, #0
 800554e:	9303      	str	r3, [sp, #12]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	9302      	str	r3, [sp, #8]
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f850 	bl	800560a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800556a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800556c:	f000 f8d4 	bl	8005718 <prvAddNewTaskToReadyList>
 8005570:	e001      	b.n	8005576 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005576:	697b      	ldr	r3, [r7, #20]
	}
 8005578:	4618      	mov	r0, r3
 800557a:	3728      	adds	r7, #40	; 0x28
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	; 0x30
 8005584:	af04      	add	r7, sp, #16
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4618      	mov	r0, r3
 8005596:	f001 f897 	bl	80066c8 <pvPortMalloc>
 800559a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00e      	beq.n	80055c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055a2:	2054      	movs	r0, #84	; 0x54
 80055a4:	f001 f890 	bl	80066c8 <pvPortMalloc>
 80055a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
 80055b6:	e005      	b.n	80055c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055b8:	6978      	ldr	r0, [r7, #20]
 80055ba:	f001 f951 	bl	8006860 <vPortFree>
 80055be:	e001      	b.n	80055c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d017      	beq.n	80055fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	2300      	movs	r3, #0
 80055d6:	9303      	str	r3, [sp, #12]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	9302      	str	r3, [sp, #8]
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f80e 	bl	800560a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055ee:	69f8      	ldr	r0, [r7, #28]
 80055f0:	f000 f892 	bl	8005718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055f4:	2301      	movs	r3, #1
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	e002      	b.n	8005600 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005600:	69bb      	ldr	r3, [r7, #24]
	}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b088      	sub	sp, #32
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005622:	3b01      	subs	r3, #1
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	f023 0307 	bic.w	r3, r3, #7
 8005630:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <prvInitialiseNewTask+0x48>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	617b      	str	r3, [r7, #20]
}
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01f      	beq.n	8005698 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005658:	2300      	movs	r3, #0
 800565a:	61fb      	str	r3, [r7, #28]
 800565c:	e012      	b.n	8005684 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	4413      	add	r3, r2
 8005664:	7819      	ldrb	r1, [r3, #0]
 8005666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	3334      	adds	r3, #52	; 0x34
 800566e:	460a      	mov	r2, r1
 8005670:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d006      	beq.n	800568c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3301      	adds	r3, #1
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b0f      	cmp	r3, #15
 8005688:	d9e9      	bls.n	800565e <prvInitialiseNewTask+0x54>
 800568a:	e000      	b.n	800568e <prvInitialiseNewTask+0x84>
			{
				break;
 800568c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005696:	e003      	b.n	80056a0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	2b06      	cmp	r3, #6
 80056a4:	d901      	bls.n	80056aa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056a6:	2306      	movs	r3, #6
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	2200      	movs	r2, #0
 80056ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	3304      	adds	r3, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fe6c 	bl	800539e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	3318      	adds	r3, #24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fe67 	bl	800539e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	f1c3 0207 	rsb	r2, r3, #7
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	2200      	movs	r2, #0
 80056ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	69b8      	ldr	r0, [r7, #24]
 80056fa:	f000 fd93 	bl	8006224 <pxPortInitialiseStack>
 80056fe:	4602      	mov	r2, r0
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800570e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005710:	bf00      	nop
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005720:	f000 feb0 	bl	8006484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005724:	4b2a      	ldr	r3, [pc, #168]	; (80057d0 <prvAddNewTaskToReadyList+0xb8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	4a29      	ldr	r2, [pc, #164]	; (80057d0 <prvAddNewTaskToReadyList+0xb8>)
 800572c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800572e:	4b29      	ldr	r3, [pc, #164]	; (80057d4 <prvAddNewTaskToReadyList+0xbc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005736:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <prvAddNewTaskToReadyList+0xbc>)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800573c:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <prvAddNewTaskToReadyList+0xb8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d110      	bne.n	8005766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005744:	f000 fc4a 	bl	8005fdc <prvInitialiseTaskLists>
 8005748:	e00d      	b.n	8005766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800574a:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <prvAddNewTaskToReadyList+0xc0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <prvAddNewTaskToReadyList+0xbc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	429a      	cmp	r2, r3
 800575e:	d802      	bhi.n	8005766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005760:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <prvAddNewTaskToReadyList+0xbc>)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005766:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <prvAddNewTaskToReadyList+0xc4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <prvAddNewTaskToReadyList+0xc4>)
 800576e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	2201      	movs	r2, #1
 8005776:	409a      	lsls	r2, r3
 8005778:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <prvAddNewTaskToReadyList+0xc8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4313      	orrs	r3, r2
 800577e:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <prvAddNewTaskToReadyList+0xc8>)
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <prvAddNewTaskToReadyList+0xcc>)
 8005790:	441a      	add	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3304      	adds	r3, #4
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f7ff fe0d 	bl	80053b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800579e:	f000 fea1 	bl	80064e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057a2:	4b0d      	ldr	r3, [pc, #52]	; (80057d8 <prvAddNewTaskToReadyList+0xc0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00e      	beq.n	80057c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <prvAddNewTaskToReadyList+0xbc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d207      	bcs.n	80057c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057b8:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <prvAddNewTaskToReadyList+0xd0>)
 80057ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	200003a0 	.word	0x200003a0
 80057d4:	200002a0 	.word	0x200002a0
 80057d8:	200003ac 	.word	0x200003ac
 80057dc:	200003bc 	.word	0x200003bc
 80057e0:	200003a8 	.word	0x200003a8
 80057e4:	200002a4 	.word	0x200002a4
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <vTaskDelayUntil+0x2a>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	617b      	str	r3, [r7, #20]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <vTaskDelayUntil+0x46>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	613b      	str	r3, [r7, #16]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005832:	4b2a      	ldr	r3, [pc, #168]	; (80058dc <vTaskDelayUntil+0xf0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <vTaskDelayUntil+0x64>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	60fb      	str	r3, [r7, #12]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005850:	f000 f9cc 	bl	8005bec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005854:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <vTaskDelayUntil+0xf4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	4413      	add	r3, r2
 8005862:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a3a      	ldr	r2, [r7, #32]
 800586a:	429a      	cmp	r2, r3
 800586c:	d20b      	bcs.n	8005886 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	429a      	cmp	r2, r3
 8005876:	d211      	bcs.n	800589c <vTaskDelayUntil+0xb0>
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	429a      	cmp	r2, r3
 800587e:	d90d      	bls.n	800589c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005880:	2301      	movs	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
 8005884:	e00a      	b.n	800589c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	429a      	cmp	r2, r3
 800588e:	d303      	bcc.n	8005898 <vTaskDelayUntil+0xac>
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	429a      	cmp	r2, r3
 8005896:	d901      	bls.n	800589c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005898:	2301      	movs	r3, #1
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d006      	beq.n	80058b6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fc51 	bl	8006158 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80058b6:	f000 f9a7 	bl	8005c08 <xTaskResumeAll>
 80058ba:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d107      	bne.n	80058d2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80058c2:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <vTaskDelayUntil+0xf8>)
 80058c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058d2:	bf00      	nop
 80058d4:	3728      	adds	r7, #40	; 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200003c8 	.word	0x200003c8
 80058e0:	200003a4 	.word	0x200003a4
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80058f0:	f000 fdc8 	bl	8006484 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <vTaskSuspend+0x18>
 80058fa:	4b3c      	ldr	r3, [pc, #240]	; (80059ec <vTaskSuspend+0x104>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	e000      	b.n	8005902 <vTaskSuspend+0x1a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3304      	adds	r3, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff fdb2 	bl	8005472 <uxListRemove>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d115      	bne.n	8005940 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005918:	4935      	ldr	r1, [pc, #212]	; (80059f0 <vTaskSuspend+0x108>)
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <vTaskSuspend+0x58>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	2201      	movs	r2, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	43da      	mvns	r2, r3
 8005936:	4b2f      	ldr	r3, [pc, #188]	; (80059f4 <vTaskSuspend+0x10c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4013      	ands	r3, r2
 800593c:	4a2d      	ldr	r2, [pc, #180]	; (80059f4 <vTaskSuspend+0x10c>)
 800593e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	2b00      	cmp	r3, #0
 8005946:	d004      	beq.n	8005952 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3318      	adds	r3, #24
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fd90 	bl	8005472 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4827      	ldr	r0, [pc, #156]	; (80059f8 <vTaskSuspend+0x110>)
 800595a:	f7ff fd2d 	bl	80053b8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d103      	bne.n	8005972 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005972:	f000 fdb7 	bl	80064e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005976:	4b21      	ldr	r3, [pc, #132]	; (80059fc <vTaskSuspend+0x114>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800597e:	f000 fd81 	bl	8006484 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005982:	f000 fbc9 	bl	8006118 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005986:	f000 fdad 	bl	80064e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800598a:	4b18      	ldr	r3, [pc, #96]	; (80059ec <vTaskSuspend+0x104>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	429a      	cmp	r2, r3
 8005992:	d127      	bne.n	80059e4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005994:	4b19      	ldr	r3, [pc, #100]	; (80059fc <vTaskSuspend+0x114>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d017      	beq.n	80059cc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800599c:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <vTaskSuspend+0x118>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <vTaskSuspend+0xd2>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60bb      	str	r3, [r7, #8]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <vTaskSuspend+0x11c>)
 80059bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059ca:	e00b      	b.n	80059e4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <vTaskSuspend+0x110>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <vTaskSuspend+0x120>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d103      	bne.n	80059e0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80059d8:	4b04      	ldr	r3, [pc, #16]	; (80059ec <vTaskSuspend+0x104>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
	}
 80059de:	e001      	b.n	80059e4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80059e0:	f000 fa88 	bl	8005ef4 <vTaskSwitchContext>
	}
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	200002a0 	.word	0x200002a0
 80059f0:	200002a4 	.word	0x200002a4
 80059f4:	200003a8 	.word	0x200003a8
 80059f8:	2000038c 	.word	0x2000038c
 80059fc:	200003ac 	.word	0x200003ac
 8005a00:	200003c8 	.word	0x200003c8
 8005a04:	e000ed04 	.word	0xe000ed04
 8005a08:	200003a0 	.word	0x200003a0

08005a0c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60fb      	str	r3, [r7, #12]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <prvTaskIsTaskSuspended+0x5c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10a      	bne.n	8005a58 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <prvTaskIsTaskSuspended+0x60>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d005      	beq.n	8005a58 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005a54:	2301      	movs	r3, #1
 8005a56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a58:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	2000038c 	.word	0x2000038c
 8005a6c:	20000360 	.word	0x20000360

08005a70 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <vTaskResume+0x28>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60bb      	str	r3, [r7, #8]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005a98:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <vTaskResume+0xac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d037      	beq.n	8005b12 <vTaskResume+0xa2>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d034      	beq.n	8005b12 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8005aa8:	f000 fcec 	bl	8006484 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff ffad 	bl	8005a0c <prvTaskIsTaskSuspended>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d02a      	beq.n	8005b0e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff fcd8 	bl	8005472 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <vTaskResume+0xb0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <vTaskResume+0xb0>)
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4a10      	ldr	r2, [pc, #64]	; (8005b24 <vTaskResume+0xb4>)
 8005ae2:	441a      	add	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f7ff fc64 	bl	80053b8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <vTaskResume+0xac>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d307      	bcc.n	8005b0e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <vTaskResume+0xb8>)
 8005b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005b0e:	f000 fce9 	bl	80064e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200002a0 	.word	0x200002a0
 8005b20:	200003a8 	.word	0x200003a8
 8005b24:	200002a4 	.word	0x200002a4
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b3a:	463a      	mov	r2, r7
 8005b3c:	1d39      	adds	r1, r7, #4
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fb f8de 	bl	8000d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	9202      	str	r2, [sp, #8]
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	460a      	mov	r2, r1
 8005b5a:	491e      	ldr	r1, [pc, #120]	; (8005bd4 <vTaskStartScheduler+0xa8>)
 8005b5c:	481e      	ldr	r0, [pc, #120]	; (8005bd8 <vTaskStartScheduler+0xac>)
 8005b5e:	f7ff fcb2 	bl	80054c6 <xTaskCreateStatic>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <vTaskStartScheduler+0xb0>)
 8005b66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b68:	4b1c      	ldr	r3, [pc, #112]	; (8005bdc <vTaskStartScheduler+0xb0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b70:	2301      	movs	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	e001      	b.n	8005b7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d116      	bne.n	8005bae <vTaskStartScheduler+0x82>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	613b      	str	r3, [r7, #16]
}
 8005b92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b94:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <vTaskStartScheduler+0xb4>)
 8005b96:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b9c:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <vTaskStartScheduler+0xb8>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ba2:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <vTaskStartScheduler+0xbc>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ba8:	f000 fbca 	bl	8006340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bac:	e00e      	b.n	8005bcc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb4:	d10a      	bne.n	8005bcc <vTaskStartScheduler+0xa0>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	60fb      	str	r3, [r7, #12]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <vTaskStartScheduler+0x9e>
}
 8005bcc:	bf00      	nop
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	08006b80 	.word	0x08006b80
 8005bd8:	08005fad 	.word	0x08005fad
 8005bdc:	200003c4 	.word	0x200003c4
 8005be0:	200003c0 	.word	0x200003c0
 8005be4:	200003ac 	.word	0x200003ac
 8005be8:	200003a4 	.word	0x200003a4

08005bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bf0:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <vTaskSuspendAll+0x18>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	4a03      	ldr	r2, [pc, #12]	; (8005c04 <vTaskSuspendAll+0x18>)
 8005bf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bfa:	bf00      	nop
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	200003c8 	.word	0x200003c8

08005c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c16:	4b41      	ldr	r3, [pc, #260]	; (8005d1c <xTaskResumeAll+0x114>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	603b      	str	r3, [r7, #0]
}
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c34:	f000 fc26 	bl	8006484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c38:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <xTaskResumeAll+0x114>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <xTaskResumeAll+0x114>)
 8005c40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c42:	4b36      	ldr	r3, [pc, #216]	; (8005d1c <xTaskResumeAll+0x114>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d161      	bne.n	8005d0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c4a:	4b35      	ldr	r3, [pc, #212]	; (8005d20 <xTaskResumeAll+0x118>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d05d      	beq.n	8005d0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c52:	e02e      	b.n	8005cb2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c54:	4b33      	ldr	r3, [pc, #204]	; (8005d24 <xTaskResumeAll+0x11c>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3318      	adds	r3, #24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff fc06 	bl	8005472 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fc01 	bl	8005472 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	2201      	movs	r2, #1
 8005c76:	409a      	lsls	r2, r3
 8005c78:	4b2b      	ldr	r3, [pc, #172]	; (8005d28 <xTaskResumeAll+0x120>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	4a2a      	ldr	r2, [pc, #168]	; (8005d28 <xTaskResumeAll+0x120>)
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a27      	ldr	r2, [pc, #156]	; (8005d2c <xTaskResumeAll+0x124>)
 8005c90:	441a      	add	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f7ff fb8d 	bl	80053b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	4b23      	ldr	r3, [pc, #140]	; (8005d30 <xTaskResumeAll+0x128>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d302      	bcc.n	8005cb2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005cac:	4b21      	ldr	r3, [pc, #132]	; (8005d34 <xTaskResumeAll+0x12c>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <xTaskResumeAll+0x11c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1cc      	bne.n	8005c54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cc0:	f000 fa2a 	bl	8006118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cc4:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <xTaskResumeAll+0x130>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cd0:	f000 f858 	bl	8005d84 <xTaskIncrementTick>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005cda:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <xTaskResumeAll+0x12c>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f1      	bne.n	8005cd0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005cec:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <xTaskResumeAll+0x130>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cf2:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <xTaskResumeAll+0x12c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <xTaskResumeAll+0x134>)
 8005d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d0e:	f000 fbe9 	bl	80064e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d12:	68bb      	ldr	r3, [r7, #8]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	200003c8 	.word	0x200003c8
 8005d20:	200003a0 	.word	0x200003a0
 8005d24:	20000360 	.word	0x20000360
 8005d28:	200003a8 	.word	0x200003a8
 8005d2c:	200002a4 	.word	0x200002a4
 8005d30:	200002a0 	.word	0x200002a0
 8005d34:	200003b4 	.word	0x200003b4
 8005d38:	200003b0 	.word	0x200003b0
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <xTaskGetTickCount+0x1c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d4c:	687b      	ldr	r3, [r7, #4]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	200003a4 	.word	0x200003a4

08005d60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d66:	f000 fc6f 	bl	8006648 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005d6e:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <xTaskGetTickCountFromISR+0x20>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d74:	683b      	ldr	r3, [r7, #0]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	200003a4 	.word	0x200003a4

08005d84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d8e:	4b4e      	ldr	r3, [pc, #312]	; (8005ec8 <xTaskIncrementTick+0x144>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f040 808e 	bne.w	8005eb4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d98:	4b4c      	ldr	r3, [pc, #304]	; (8005ecc <xTaskIncrementTick+0x148>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005da0:	4a4a      	ldr	r2, [pc, #296]	; (8005ecc <xTaskIncrementTick+0x148>)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d120      	bne.n	8005dee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dac:	4b48      	ldr	r3, [pc, #288]	; (8005ed0 <xTaskIncrementTick+0x14c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <xTaskIncrementTick+0x48>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	603b      	str	r3, [r7, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	e7fe      	b.n	8005dca <xTaskIncrementTick+0x46>
 8005dcc:	4b40      	ldr	r3, [pc, #256]	; (8005ed0 <xTaskIncrementTick+0x14c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	4b40      	ldr	r3, [pc, #256]	; (8005ed4 <xTaskIncrementTick+0x150>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a3e      	ldr	r2, [pc, #248]	; (8005ed0 <xTaskIncrementTick+0x14c>)
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	4a3e      	ldr	r2, [pc, #248]	; (8005ed4 <xTaskIncrementTick+0x150>)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	4b3d      	ldr	r3, [pc, #244]	; (8005ed8 <xTaskIncrementTick+0x154>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	4a3c      	ldr	r2, [pc, #240]	; (8005ed8 <xTaskIncrementTick+0x154>)
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	f000 f995 	bl	8006118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dee:	4b3b      	ldr	r3, [pc, #236]	; (8005edc <xTaskIncrementTick+0x158>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d348      	bcc.n	8005e8a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005df8:	4b35      	ldr	r3, [pc, #212]	; (8005ed0 <xTaskIncrementTick+0x14c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e02:	4b36      	ldr	r3, [pc, #216]	; (8005edc <xTaskIncrementTick+0x158>)
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	601a      	str	r2, [r3, #0]
					break;
 8005e0a:	e03e      	b.n	8005e8a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e0c:	4b30      	ldr	r3, [pc, #192]	; (8005ed0 <xTaskIncrementTick+0x14c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d203      	bcs.n	8005e2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e24:	4a2d      	ldr	r2, [pc, #180]	; (8005edc <xTaskIncrementTick+0x158>)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e2a:	e02e      	b.n	8005e8a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fb1e 	bl	8005472 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	3318      	adds	r3, #24
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fb15 	bl	8005472 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	4b23      	ldr	r3, [pc, #140]	; (8005ee0 <xTaskIncrementTick+0x15c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	4a22      	ldr	r2, [pc, #136]	; (8005ee0 <xTaskIncrementTick+0x15c>)
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4a1f      	ldr	r2, [pc, #124]	; (8005ee4 <xTaskIncrementTick+0x160>)
 8005e68:	441a      	add	r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4610      	mov	r0, r2
 8005e72:	f7ff faa1 	bl	80053b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <xTaskIncrementTick+0x164>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d3b9      	bcc.n	8005df8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e88:	e7b6      	b.n	8005df8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <xTaskIncrementTick+0x164>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e90:	4914      	ldr	r1, [pc, #80]	; (8005ee4 <xTaskIncrementTick+0x160>)
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d901      	bls.n	8005ea6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ea6:	4b11      	ldr	r3, [pc, #68]	; (8005eec <xTaskIncrementTick+0x168>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d007      	beq.n	8005ebe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e004      	b.n	8005ebe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <xTaskIncrementTick+0x16c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <xTaskIncrementTick+0x16c>)
 8005ebc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ebe:	697b      	ldr	r3, [r7, #20]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200003c8 	.word	0x200003c8
 8005ecc:	200003a4 	.word	0x200003a4
 8005ed0:	20000358 	.word	0x20000358
 8005ed4:	2000035c 	.word	0x2000035c
 8005ed8:	200003b8 	.word	0x200003b8
 8005edc:	200003c0 	.word	0x200003c0
 8005ee0:	200003a8 	.word	0x200003a8
 8005ee4:	200002a4 	.word	0x200002a4
 8005ee8:	200002a0 	.word	0x200002a0
 8005eec:	200003b4 	.word	0x200003b4
 8005ef0:	200003b0 	.word	0x200003b0

08005ef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005efa:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <vTaskSwitchContext+0xa4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f02:	4b26      	ldr	r3, [pc, #152]	; (8005f9c <vTaskSwitchContext+0xa8>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f08:	e03f      	b.n	8005f8a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005f0a:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <vTaskSwitchContext+0xa8>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f10:	4b23      	ldr	r3, [pc, #140]	; (8005fa0 <vTaskSwitchContext+0xac>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	fab3 f383 	clz	r3, r3
 8005f1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f1e:	7afb      	ldrb	r3, [r7, #11]
 8005f20:	f1c3 031f 	rsb	r3, r3, #31
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	491f      	ldr	r1, [pc, #124]	; (8005fa4 <vTaskSwitchContext+0xb0>)
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	607b      	str	r3, [r7, #4]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <vTaskSwitchContext+0x5a>
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4a12      	ldr	r2, [pc, #72]	; (8005fa4 <vTaskSwitchContext+0xb0>)
 8005f5c:	4413      	add	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	605a      	str	r2, [r3, #4]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3308      	adds	r3, #8
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d104      	bne.n	8005f80 <vTaskSwitchContext+0x8c>
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	605a      	str	r2, [r3, #4]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	4a08      	ldr	r2, [pc, #32]	; (8005fa8 <vTaskSwitchContext+0xb4>)
 8005f88:	6013      	str	r3, [r2, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	200003c8 	.word	0x200003c8
 8005f9c:	200003b4 	.word	0x200003b4
 8005fa0:	200003a8 	.word	0x200003a8
 8005fa4:	200002a4 	.word	0x200002a4
 8005fa8:	200002a0 	.word	0x200002a0

08005fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fb4:	f000 f852 	bl	800605c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fb8:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <prvIdleTask+0x28>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d9f9      	bls.n	8005fb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <prvIdleTask+0x2c>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fd0:	e7f0      	b.n	8005fb4 <prvIdleTask+0x8>
 8005fd2:	bf00      	nop
 8005fd4:	200002a4 	.word	0x200002a4
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	607b      	str	r3, [r7, #4]
 8005fe6:	e00c      	b.n	8006002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4a12      	ldr	r2, [pc, #72]	; (800603c <prvInitialiseTaskLists+0x60>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff f9b1 	bl	800535e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3301      	adds	r3, #1
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b06      	cmp	r3, #6
 8006006:	d9ef      	bls.n	8005fe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006008:	480d      	ldr	r0, [pc, #52]	; (8006040 <prvInitialiseTaskLists+0x64>)
 800600a:	f7ff f9a8 	bl	800535e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800600e:	480d      	ldr	r0, [pc, #52]	; (8006044 <prvInitialiseTaskLists+0x68>)
 8006010:	f7ff f9a5 	bl	800535e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006014:	480c      	ldr	r0, [pc, #48]	; (8006048 <prvInitialiseTaskLists+0x6c>)
 8006016:	f7ff f9a2 	bl	800535e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800601a:	480c      	ldr	r0, [pc, #48]	; (800604c <prvInitialiseTaskLists+0x70>)
 800601c:	f7ff f99f 	bl	800535e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006020:	480b      	ldr	r0, [pc, #44]	; (8006050 <prvInitialiseTaskLists+0x74>)
 8006022:	f7ff f99c 	bl	800535e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <prvInitialiseTaskLists+0x78>)
 8006028:	4a05      	ldr	r2, [pc, #20]	; (8006040 <prvInitialiseTaskLists+0x64>)
 800602a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <prvInitialiseTaskLists+0x7c>)
 800602e:	4a05      	ldr	r2, [pc, #20]	; (8006044 <prvInitialiseTaskLists+0x68>)
 8006030:	601a      	str	r2, [r3, #0]
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200002a4 	.word	0x200002a4
 8006040:	20000330 	.word	0x20000330
 8006044:	20000344 	.word	0x20000344
 8006048:	20000360 	.word	0x20000360
 800604c:	20000374 	.word	0x20000374
 8006050:	2000038c 	.word	0x2000038c
 8006054:	20000358 	.word	0x20000358
 8006058:	2000035c 	.word	0x2000035c

0800605c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006062:	e019      	b.n	8006098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006064:	f000 fa0e 	bl	8006484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006068:	4b10      	ldr	r3, [pc, #64]	; (80060ac <prvCheckTasksWaitingTermination+0x50>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff f9fc 	bl	8005472 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800607a:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <prvCheckTasksWaitingTermination+0x54>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3b01      	subs	r3, #1
 8006080:	4a0b      	ldr	r2, [pc, #44]	; (80060b0 <prvCheckTasksWaitingTermination+0x54>)
 8006082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <prvCheckTasksWaitingTermination+0x58>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3b01      	subs	r3, #1
 800608a:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <prvCheckTasksWaitingTermination+0x58>)
 800608c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800608e:	f000 fa29 	bl	80064e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f810 	bl	80060b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <prvCheckTasksWaitingTermination+0x58>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e1      	bne.n	8006064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000374 	.word	0x20000374
 80060b0:	200003a0 	.word	0x200003a0
 80060b4:	20000388 	.word	0x20000388

080060b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d108      	bne.n	80060dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fbc6 	bl	8006860 <vPortFree>
				vPortFree( pxTCB );
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fbc3 	bl	8006860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060da:	e018      	b.n	800610e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d103      	bne.n	80060ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fbba 	bl	8006860 <vPortFree>
	}
 80060ec:	e00f      	b.n	800610e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d00a      	beq.n	800610e <prvDeleteTCB+0x56>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	60fb      	str	r3, [r7, #12]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <prvDeleteTCB+0x54>
	}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800611e:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <prvResetNextTaskUnblockTime+0x38>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d104      	bne.n	8006132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <prvResetNextTaskUnblockTime+0x3c>)
 800612a:	f04f 32ff 	mov.w	r2, #4294967295
 800612e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006130:	e008      	b.n	8006144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006132:	4b07      	ldr	r3, [pc, #28]	; (8006150 <prvResetNextTaskUnblockTime+0x38>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4a04      	ldr	r2, [pc, #16]	; (8006154 <prvResetNextTaskUnblockTime+0x3c>)
 8006142:	6013      	str	r3, [r2, #0]
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	20000358 	.word	0x20000358
 8006154:	200003c0 	.word	0x200003c0

08006158 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006162:	4b29      	ldr	r3, [pc, #164]	; (8006208 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006168:	4b28      	ldr	r3, [pc, #160]	; (800620c <prvAddCurrentTaskToDelayedList+0xb4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3304      	adds	r3, #4
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff f97f 	bl	8005472 <uxListRemove>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800617a:	4b24      	ldr	r3, [pc, #144]	; (800620c <prvAddCurrentTaskToDelayedList+0xb4>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	2201      	movs	r2, #1
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	43da      	mvns	r2, r3
 8006188:	4b21      	ldr	r3, [pc, #132]	; (8006210 <prvAddCurrentTaskToDelayedList+0xb8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4013      	ands	r3, r2
 800618e:	4a20      	ldr	r2, [pc, #128]	; (8006210 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006190:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d10a      	bne.n	80061b0 <prvAddCurrentTaskToDelayedList+0x58>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a0:	4b1a      	ldr	r3, [pc, #104]	; (800620c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4619      	mov	r1, r3
 80061a8:	481a      	ldr	r0, [pc, #104]	; (8006214 <prvAddCurrentTaskToDelayedList+0xbc>)
 80061aa:	f7ff f905 	bl	80053b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061ae:	e026      	b.n	80061fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061b8:	4b14      	ldr	r3, [pc, #80]	; (800620c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d209      	bcs.n	80061dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c8:	4b13      	ldr	r3, [pc, #76]	; (8006218 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7ff f913 	bl	8005400 <vListInsert>
}
 80061da:	e010      	b.n	80061fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <prvAddCurrentTaskToDelayedList+0xc4>)
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	4b0a      	ldr	r3, [pc, #40]	; (800620c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4619      	mov	r1, r3
 80061e8:	4610      	mov	r0, r2
 80061ea:	f7ff f909 	bl	8005400 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061ee:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d202      	bcs.n	80061fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6013      	str	r3, [r2, #0]
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	200003a4 	.word	0x200003a4
 800620c:	200002a0 	.word	0x200002a0
 8006210:	200003a8 	.word	0x200003a8
 8006214:	2000038c 	.word	0x2000038c
 8006218:	2000035c 	.word	0x2000035c
 800621c:	20000358 	.word	0x20000358
 8006220:	200003c0 	.word	0x200003c0

08006224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3b04      	subs	r3, #4
 8006234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800623c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b04      	subs	r3, #4
 8006242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f023 0201 	bic.w	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3b04      	subs	r3, #4
 8006252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006254:	4a0c      	ldr	r2, [pc, #48]	; (8006288 <pxPortInitialiseStack+0x64>)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3b14      	subs	r3, #20
 800625e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b04      	subs	r3, #4
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f06f 0202 	mvn.w	r2, #2
 8006272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3b20      	subs	r3, #32
 8006278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800627a:	68fb      	ldr	r3, [r7, #12]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	0800628d 	.word	0x0800628d

0800628c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006296:	4b12      	ldr	r3, [pc, #72]	; (80062e0 <prvTaskExitError+0x54>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d00a      	beq.n	80062b6 <prvTaskExitError+0x2a>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	60fb      	str	r3, [r7, #12]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <prvTaskExitError+0x28>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	60bb      	str	r3, [r7, #8]
}
 80062c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062ca:	bf00      	nop
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0fc      	beq.n	80062cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	2000001c 	.word	0x2000001c
	...

080062f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <pxCurrentTCBConst2>)
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	6808      	ldr	r0, [r1, #0]
 80062f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	f380 8809 	msr	PSP, r0
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	4770      	bx	lr
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst2>:
 8006310:	200002a0 	.word	0x200002a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006318:	4808      	ldr	r0, [pc, #32]	; (800633c <prvPortStartFirstTask+0x24>)
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	6800      	ldr	r0, [r0, #0]
 800631e:	f380 8808 	msr	MSP, r0
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8814 	msr	CONTROL, r0
 800632a:	b662      	cpsie	i
 800632c:	b661      	cpsie	f
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	df00      	svc	0
 8006338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800633a:	bf00      	nop
 800633c:	e000ed08 	.word	0xe000ed08

08006340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006346:	4b46      	ldr	r3, [pc, #280]	; (8006460 <xPortStartScheduler+0x120>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a46      	ldr	r2, [pc, #280]	; (8006464 <xPortStartScheduler+0x124>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10a      	bne.n	8006366 <xPortStartScheduler+0x26>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	613b      	str	r3, [r7, #16]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006366:	4b3e      	ldr	r3, [pc, #248]	; (8006460 <xPortStartScheduler+0x120>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a3f      	ldr	r2, [pc, #252]	; (8006468 <xPortStartScheduler+0x128>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10a      	bne.n	8006386 <xPortStartScheduler+0x46>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006386:	4b39      	ldr	r3, [pc, #228]	; (800646c <xPortStartScheduler+0x12c>)
 8006388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	22ff      	movs	r2, #255	; 0xff
 8006396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	4b31      	ldr	r3, [pc, #196]	; (8006470 <xPortStartScheduler+0x130>)
 80063ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063ae:	4b31      	ldr	r3, [pc, #196]	; (8006474 <xPortStartScheduler+0x134>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063b4:	e009      	b.n	80063ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80063b6:	4b2f      	ldr	r3, [pc, #188]	; (8006474 <xPortStartScheduler+0x134>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	4a2d      	ldr	r2, [pc, #180]	; (8006474 <xPortStartScheduler+0x134>)
 80063be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b80      	cmp	r3, #128	; 0x80
 80063d4:	d0ef      	beq.n	80063b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063d6:	4b27      	ldr	r3, [pc, #156]	; (8006474 <xPortStartScheduler+0x134>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f1c3 0307 	rsb	r3, r3, #7
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d00a      	beq.n	80063f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60bb      	str	r3, [r7, #8]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063f8:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <xPortStartScheduler+0x134>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <xPortStartScheduler+0x134>)
 8006400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <xPortStartScheduler+0x134>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800640a:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <xPortStartScheduler+0x134>)
 800640c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <xPortStartScheduler+0x138>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a17      	ldr	r2, [pc, #92]	; (8006478 <xPortStartScheduler+0x138>)
 800641c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006422:	4b15      	ldr	r3, [pc, #84]	; (8006478 <xPortStartScheduler+0x138>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a14      	ldr	r2, [pc, #80]	; (8006478 <xPortStartScheduler+0x138>)
 8006428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800642c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800642e:	f000 f8dd 	bl	80065ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <xPortStartScheduler+0x13c>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006438:	f000 f8fc 	bl	8006634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800643c:	4b10      	ldr	r3, [pc, #64]	; (8006480 <xPortStartScheduler+0x140>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0f      	ldr	r2, [pc, #60]	; (8006480 <xPortStartScheduler+0x140>)
 8006442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006448:	f7ff ff66 	bl	8006318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800644c:	f7ff fd52 	bl	8005ef4 <vTaskSwitchContext>
	prvTaskExitError();
 8006450:	f7ff ff1c 	bl	800628c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	e000ed00 	.word	0xe000ed00
 8006464:	410fc271 	.word	0x410fc271
 8006468:	410fc270 	.word	0x410fc270
 800646c:	e000e400 	.word	0xe000e400
 8006470:	200003cc 	.word	0x200003cc
 8006474:	200003d0 	.word	0x200003d0
 8006478:	e000ed20 	.word	0xe000ed20
 800647c:	2000001c 	.word	0x2000001c
 8006480:	e000ef34 	.word	0xe000ef34

08006484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	607b      	str	r3, [r7, #4]
}
 800649c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800649e:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <vPortEnterCritical+0x58>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3301      	adds	r3, #1
 80064a4:	4a0d      	ldr	r2, [pc, #52]	; (80064dc <vPortEnterCritical+0x58>)
 80064a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <vPortEnterCritical+0x58>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d10f      	bne.n	80064d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <vPortEnterCritical+0x5c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	603b      	str	r3, [r7, #0]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <vPortEnterCritical+0x4a>
	}
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	2000001c 	.word	0x2000001c
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064ea:	4b12      	ldr	r3, [pc, #72]	; (8006534 <vPortExitCritical+0x50>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <vPortExitCritical+0x24>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	607b      	str	r3, [r7, #4]
}
 8006504:	bf00      	nop
 8006506:	e7fe      	b.n	8006506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <vPortExitCritical+0x50>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3b01      	subs	r3, #1
 800650e:	4a09      	ldr	r2, [pc, #36]	; (8006534 <vPortExitCritical+0x50>)
 8006510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006512:	4b08      	ldr	r3, [pc, #32]	; (8006534 <vPortExitCritical+0x50>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <vPortExitCritical+0x42>
 800651a:	2300      	movs	r3, #0
 800651c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	2000001c 	.word	0x2000001c
	...

08006540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006540:	f3ef 8009 	mrs	r0, PSP
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <pxCurrentTCBConst>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	f01e 0f10 	tst.w	lr, #16
 8006550:	bf08      	it	eq
 8006552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	6010      	str	r0, [r2, #0]
 800655c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006564:	f380 8811 	msr	BASEPRI, r0
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f7ff fcc0 	bl	8005ef4 <vTaskSwitchContext>
 8006574:	f04f 0000 	mov.w	r0, #0
 8006578:	f380 8811 	msr	BASEPRI, r0
 800657c:	bc09      	pop	{r0, r3}
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	6808      	ldr	r0, [r1, #0]
 8006582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006586:	f01e 0f10 	tst.w	lr, #16
 800658a:	bf08      	it	eq
 800658c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006590:	f380 8809 	msr	PSP, r0
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	f3af 8000 	nop.w

080065a0 <pxCurrentTCBConst>:
 80065a0:	200002a0 	.word	0x200002a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	607b      	str	r3, [r7, #4]
}
 80065c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065c2:	f7ff fbdf 	bl	8005d84 <xTaskIncrementTick>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <SysTick_Handler+0x40>)
 80065ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f383 8811 	msr	BASEPRI, r3
}
 80065de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <vPortSetupTimerInterrupt+0x34>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <vPortSetupTimerInterrupt+0x38>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <vPortSetupTimerInterrupt+0x3c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0a      	ldr	r2, [pc, #40]	; (800662c <vPortSetupTimerInterrupt+0x40>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	099b      	lsrs	r3, r3, #6
 8006608:	4a09      	ldr	r2, [pc, #36]	; (8006630 <vPortSetupTimerInterrupt+0x44>)
 800660a:	3b01      	subs	r3, #1
 800660c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800660e:	4b04      	ldr	r3, [pc, #16]	; (8006620 <vPortSetupTimerInterrupt+0x34>)
 8006610:	2207      	movs	r2, #7
 8006612:	601a      	str	r2, [r3, #0]
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	e000e010 	.word	0xe000e010
 8006624:	e000e018 	.word	0xe000e018
 8006628:	20000010 	.word	0x20000010
 800662c:	10624dd3 	.word	0x10624dd3
 8006630:	e000e014 	.word	0xe000e014

08006634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006644 <vPortEnableVFP+0x10>
 8006638:	6801      	ldr	r1, [r0, #0]
 800663a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800663e:	6001      	str	r1, [r0, #0]
 8006640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006642:	bf00      	nop
 8006644:	e000ed88 	.word	0xe000ed88

08006648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800664e:	f3ef 8305 	mrs	r3, IPSR
 8006652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d914      	bls.n	8006684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <vPortValidateInterruptPriority+0x70>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006664:	4b15      	ldr	r3, [pc, #84]	; (80066bc <vPortValidateInterruptPriority+0x74>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	7afa      	ldrb	r2, [r7, #11]
 800666a:	429a      	cmp	r2, r3
 800666c:	d20a      	bcs.n	8006684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	607b      	str	r3, [r7, #4]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006684:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <vPortValidateInterruptPriority+0x78>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <vPortValidateInterruptPriority+0x7c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d90a      	bls.n	80066aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	603b      	str	r3, [r7, #0]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <vPortValidateInterruptPriority+0x60>
	}
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	e000e3f0 	.word	0xe000e3f0
 80066bc:	200003cc 	.word	0x200003cc
 80066c0:	e000ed0c 	.word	0xe000ed0c
 80066c4:	200003d0 	.word	0x200003d0

080066c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066d4:	f7ff fa8a 	bl	8005bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066d8:	4b5b      	ldr	r3, [pc, #364]	; (8006848 <pvPortMalloc+0x180>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066e0:	f000 f920 	bl	8006924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066e4:	4b59      	ldr	r3, [pc, #356]	; (800684c <pvPortMalloc+0x184>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 8093 	bne.w	8006818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01d      	beq.n	8006734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066f8:	2208      	movs	r2, #8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4413      	add	r3, r2
 80066fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	2b00      	cmp	r3, #0
 8006708:	d014      	beq.n	8006734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f023 0307 	bic.w	r3, r3, #7
 8006710:	3308      	adds	r3, #8
 8006712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <pvPortMalloc+0x6c>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	617b      	str	r3, [r7, #20]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d06e      	beq.n	8006818 <pvPortMalloc+0x150>
 800673a:	4b45      	ldr	r3, [pc, #276]	; (8006850 <pvPortMalloc+0x188>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d869      	bhi.n	8006818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006744:	4b43      	ldr	r3, [pc, #268]	; (8006854 <pvPortMalloc+0x18c>)
 8006746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006748:	4b42      	ldr	r3, [pc, #264]	; (8006854 <pvPortMalloc+0x18c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800674e:	e004      	b.n	800675a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d903      	bls.n	800676c <pvPortMalloc+0xa4>
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1f1      	bne.n	8006750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800676c:	4b36      	ldr	r3, [pc, #216]	; (8006848 <pvPortMalloc+0x180>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006772:	429a      	cmp	r2, r3
 8006774:	d050      	beq.n	8006818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2208      	movs	r2, #8
 800677c:	4413      	add	r3, r2
 800677e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	2308      	movs	r3, #8
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	429a      	cmp	r2, r3
 8006796:	d91f      	bls.n	80067d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <pvPortMalloc+0xf8>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	613b      	str	r3, [r7, #16]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	1ad2      	subs	r2, r2, r3
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067d2:	69b8      	ldr	r0, [r7, #24]
 80067d4:	f000 f908 	bl	80069e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067d8:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <pvPortMalloc+0x188>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	4a1b      	ldr	r2, [pc, #108]	; (8006850 <pvPortMalloc+0x188>)
 80067e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067e6:	4b1a      	ldr	r3, [pc, #104]	; (8006850 <pvPortMalloc+0x188>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b1b      	ldr	r3, [pc, #108]	; (8006858 <pvPortMalloc+0x190>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d203      	bcs.n	80067fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067f2:	4b17      	ldr	r3, [pc, #92]	; (8006850 <pvPortMalloc+0x188>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a18      	ldr	r2, [pc, #96]	; (8006858 <pvPortMalloc+0x190>)
 80067f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	4b13      	ldr	r3, [pc, #76]	; (800684c <pvPortMalloc+0x184>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	431a      	orrs	r2, r3
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <pvPortMalloc+0x194>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3301      	adds	r3, #1
 8006814:	4a11      	ldr	r2, [pc, #68]	; (800685c <pvPortMalloc+0x194>)
 8006816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006818:	f7ff f9f6 	bl	8005c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <pvPortMalloc+0x174>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	60fb      	str	r3, [r7, #12]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <pvPortMalloc+0x172>
	return pvReturn;
 800683c:	69fb      	ldr	r3, [r7, #28]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3728      	adds	r7, #40	; 0x28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20003fdc 	.word	0x20003fdc
 800684c:	20003ff0 	.word	0x20003ff0
 8006850:	20003fe0 	.word	0x20003fe0
 8006854:	20003fd4 	.word	0x20003fd4
 8006858:	20003fe4 	.word	0x20003fe4
 800685c:	20003fe8 	.word	0x20003fe8

08006860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d04d      	beq.n	800690e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006872:	2308      	movs	r3, #8
 8006874:	425b      	negs	r3, r3
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4413      	add	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	4b24      	ldr	r3, [pc, #144]	; (8006918 <vPortFree+0xb8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4013      	ands	r3, r2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <vPortFree+0x44>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	60fb      	str	r3, [r7, #12]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <vPortFree+0x62>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60bb      	str	r3, [r7, #8]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <vPortFree+0xb8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01e      	beq.n	800690e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d11a      	bne.n	800690e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <vPortFree+0xb8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	401a      	ands	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068e8:	f7ff f980 	bl	8005bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	4b0a      	ldr	r3, [pc, #40]	; (800691c <vPortFree+0xbc>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4413      	add	r3, r2
 80068f6:	4a09      	ldr	r2, [pc, #36]	; (800691c <vPortFree+0xbc>)
 80068f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068fa:	6938      	ldr	r0, [r7, #16]
 80068fc:	f000 f874 	bl	80069e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006900:	4b07      	ldr	r3, [pc, #28]	; (8006920 <vPortFree+0xc0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	4a06      	ldr	r2, [pc, #24]	; (8006920 <vPortFree+0xc0>)
 8006908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800690a:	f7ff f97d 	bl	8005c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20003ff0 	.word	0x20003ff0
 800691c:	20003fe0 	.word	0x20003fe0
 8006920:	20003fec 	.word	0x20003fec

08006924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800692a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800692e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006930:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <prvHeapInit+0xac>)
 8006932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00c      	beq.n	8006958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3307      	adds	r3, #7
 8006942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0307 	bic.w	r3, r3, #7
 800694a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <prvHeapInit+0xac>)
 8006954:	4413      	add	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800695c:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <prvHeapInit+0xb0>)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006962:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <prvHeapInit+0xb0>)
 8006964:	2200      	movs	r2, #0
 8006966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4413      	add	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006970:	2208      	movs	r2, #8
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0307 	bic.w	r3, r3, #7
 800697e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4a15      	ldr	r2, [pc, #84]	; (80069d8 <prvHeapInit+0xb4>)
 8006984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006986:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <prvHeapInit+0xb4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800698e:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <prvHeapInit+0xb4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069a4:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <prvHeapInit+0xb4>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <prvHeapInit+0xb8>)
 80069b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4a09      	ldr	r2, [pc, #36]	; (80069e0 <prvHeapInit+0xbc>)
 80069ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069bc:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <prvHeapInit+0xc0>)
 80069be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069c2:	601a      	str	r2, [r3, #0]
}
 80069c4:	bf00      	nop
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	200003d4 	.word	0x200003d4
 80069d4:	20003fd4 	.word	0x20003fd4
 80069d8:	20003fdc 	.word	0x20003fdc
 80069dc:	20003fe4 	.word	0x20003fe4
 80069e0:	20003fe0 	.word	0x20003fe0
 80069e4:	20003ff0 	.word	0x20003ff0

080069e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069f0:	4b28      	ldr	r3, [pc, #160]	; (8006a94 <prvInsertBlockIntoFreeList+0xac>)
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	e002      	b.n	80069fc <prvInsertBlockIntoFreeList+0x14>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d8f7      	bhi.n	80069f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	4413      	add	r3, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d108      	bne.n	8006a2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	441a      	add	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	441a      	add	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d118      	bne.n	8006a70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <prvInsertBlockIntoFreeList+0xb0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d00d      	beq.n	8006a66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	441a      	add	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	e008      	b.n	8006a78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <prvInsertBlockIntoFreeList+0xb0>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	e003      	b.n	8006a78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d002      	beq.n	8006a86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a86:	bf00      	nop
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20003fd4 	.word	0x20003fd4
 8006a98:	20003fdc 	.word	0x20003fdc

08006a9c <__libc_init_array>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	4d0d      	ldr	r5, [pc, #52]	; (8006ad4 <__libc_init_array+0x38>)
 8006aa0:	4c0d      	ldr	r4, [pc, #52]	; (8006ad8 <__libc_init_array+0x3c>)
 8006aa2:	1b64      	subs	r4, r4, r5
 8006aa4:	10a4      	asrs	r4, r4, #2
 8006aa6:	2600      	movs	r6, #0
 8006aa8:	42a6      	cmp	r6, r4
 8006aaa:	d109      	bne.n	8006ac0 <__libc_init_array+0x24>
 8006aac:	4d0b      	ldr	r5, [pc, #44]	; (8006adc <__libc_init_array+0x40>)
 8006aae:	4c0c      	ldr	r4, [pc, #48]	; (8006ae0 <__libc_init_array+0x44>)
 8006ab0:	f000 f820 	bl	8006af4 <_init>
 8006ab4:	1b64      	subs	r4, r4, r5
 8006ab6:	10a4      	asrs	r4, r4, #2
 8006ab8:	2600      	movs	r6, #0
 8006aba:	42a6      	cmp	r6, r4
 8006abc:	d105      	bne.n	8006aca <__libc_init_array+0x2e>
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
 8006ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac4:	4798      	blx	r3
 8006ac6:	3601      	adds	r6, #1
 8006ac8:	e7ee      	b.n	8006aa8 <__libc_init_array+0xc>
 8006aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ace:	4798      	blx	r3
 8006ad0:	3601      	adds	r6, #1
 8006ad2:	e7f2      	b.n	8006aba <__libc_init_array+0x1e>
 8006ad4:	08006ba8 	.word	0x08006ba8
 8006ad8:	08006ba8 	.word	0x08006ba8
 8006adc:	08006ba8 	.word	0x08006ba8
 8006ae0:	08006bac 	.word	0x08006bac

08006ae4 <memset>:
 8006ae4:	4402      	add	r2, r0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d100      	bne.n	8006aee <memset+0xa>
 8006aec:	4770      	bx	lr
 8006aee:	f803 1b01 	strb.w	r1, [r3], #1
 8006af2:	e7f9      	b.n	8006ae8 <memset+0x4>

08006af4 <_init>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	bf00      	nop
 8006af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afa:	bc08      	pop	{r3}
 8006afc:	469e      	mov	lr, r3
 8006afe:	4770      	bx	lr

08006b00 <_fini>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr


os2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800b058  0800b058  0001b058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b190  0800b190  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800b190  0800b190  0001b190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b198  0800b198  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b198  0800b198  0001b198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b19c  0800b19c  0001b19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800b1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004340  20000024  0800b1c4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004364  0800b1c4  00024364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001857a  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339b  00000000  00000000  000385ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d6c  00000000  00000000  0003e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164c9  00000000  00000000  00060eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9019  00000000  00000000  00077375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015038e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d0  00000000  00000000  001503e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000024 	.word	0x20000024
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b040 	.word	0x0800b040

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000028 	.word	0x20000028
 80001cc:	0800b040 	.word	0x0800b040

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <vApplicationGetIdleTaskMemory+0x30>)
 8000d6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000040 	.word	0x20000040
 8000d84:	20000094 	.word	0x20000094

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	b0c2      	sub	sp, #264	; 0x108
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f003 ffe5 	bl	8004d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f941 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d96:	f000 fc89 	bl	80016ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d9a:	f000 fc09 	bl	80015b0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d9e:	f000 fa6d 	bl	800127c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000da2:	f000 fae3 	bl	800136c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000da6:	f000 fc2d 	bl	8001604 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000daa:	f000 fc55 	bl	8001658 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000dae:	f000 fbd5 	bl	800155c <MX_UART5_Init>
  MX_TIM2_Init();
 8000db2:	f000 fa0f 	bl	80011d4 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000db6:	f000 fb51 	bl	800145c <MX_TIM8_Init>
  MX_UART4_Init();
 8000dba:	f000 fba5 	bl	8001508 <MX_UART4_Init>
  MX_RTC_Init();
 8000dbe:	f000 f9af 	bl	8001120 <MX_RTC_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CameraUARTSem */
  osSemaphoreDef(CameraUARTSem);
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  CameraUARTSemHandle = osSemaphoreCreate(osSemaphore(CameraUARTSem), 1);
 8000dce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f007 fc52 	bl	800867e <osSemaphoreCreate>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a78      	ldr	r2, [pc, #480]	; (8000fc0 <main+0x238>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReadySem */
  osSemaphoreDef(GyroReadySem);
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  GyroReadySemHandle = osSemaphoreCreate(osSemaphore(GyroReadySem), 1);
 8000dec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000df0:	2101      	movs	r1, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f007 fc43 	bl	800867e <osSemaphoreCreate>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a72      	ldr	r2, [pc, #456]	; (8000fc4 <main+0x23c>)
 8000dfc:	6013      	str	r3, [r2, #0]

  /* definition and creation of CriticalDistanceSem */
  osSemaphoreDef(CriticalDistanceSem);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  CriticalDistanceSemHandle = osSemaphoreCreate(osSemaphore(CriticalDistanceSem), 1);
 8000e0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f007 fc34 	bl	800867e <osSemaphoreCreate>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a6b      	ldr	r2, [pc, #428]	; (8000fc8 <main+0x240>)
 8000e1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageSem */
  osSemaphoreDef(MileageSem);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MileageSemHandle = osSemaphoreCreate(osSemaphore(MileageSem), 1);
 8000e28:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f007 fc25 	bl	800867e <osSemaphoreCreate>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a65      	ldr	r2, [pc, #404]	; (8000fcc <main+0x244>)
 8000e38:	6013      	str	r3, [r2, #0]

  /* definition and creation of MileageNegSem */
  osSemaphoreDef(MileageNegSem);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  MileageNegSemHandle = osSemaphoreCreate(osSemaphore(MileageNegSem), 1);
 8000e46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f007 fc16 	bl	800867e <osSemaphoreCreate>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4a5e      	ldr	r2, [pc, #376]	; (8000fd0 <main+0x248>)
 8000e56:	6013      	str	r3, [r2, #0]

  /* definition and creation of gomile6Sem */
  osSemaphoreDef(gomile6Sem);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  gomile6SemHandle = osSemaphoreCreate(osSemaphore(gomile6Sem), 1);
 8000e64:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f007 fc07 	bl	800867e <osSemaphoreCreate>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <main+0x24c>)
 8000e74:	6013      	str	r3, [r2, #0]

  /* definition and creation of UltraFrontSem */
  osSemaphoreDef(UltraFrontSem);
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  UltraFrontSemHandle = osSemaphoreCreate(osSemaphore(UltraFrontSem), 1);
 8000e82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e86:	2101      	movs	r1, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f007 fbf8 	bl	800867e <osSemaphoreCreate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <main+0x250>)
 8000e92:	6013      	str	r3, [r2, #0]

  /* definition and creation of ApriltagSem */
  osSemaphoreDef(ApriltagSem);
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  ApriltagSemHandle = osSemaphoreCreate(osSemaphore(ApriltagSem), 1);
 8000ea0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f007 fbe9 	bl	800867e <osSemaphoreCreate>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a4b      	ldr	r2, [pc, #300]	; (8000fdc <main+0x254>)
 8000eb0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Stream */
  osThreadDef(Stream, StreamTask, osPriorityNormal, 0, 128);
 8000eb2:	4b4b      	ldr	r3, [pc, #300]	; (8000fe0 <main+0x258>)
 8000eb4:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000eb8:	461d      	mov	r5, r3
 8000eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ec2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StreamHandle = osThreadCreate(osThread(Stream), NULL);
 8000ec6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f007 fb8a 	bl	80085e6 <osThreadCreate>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a43      	ldr	r2, [pc, #268]	; (8000fe4 <main+0x25c>)
 8000ed6:	6013      	str	r3, [r2, #0]

  /* definition and creation of PIDCamera */
  osThreadDef(PIDCamera, PIDCameraTask, osPriorityNormal, 0, 128);
 8000ed8:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <main+0x260>)
 8000eda:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000ede:	461d      	mov	r5, r3
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PIDCameraHandle = osThreadCreate(osThread(PIDCamera), NULL);
 8000eec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f007 fb77 	bl	80085e6 <osThreadCreate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a3c      	ldr	r2, [pc, #240]	; (8000fec <main+0x264>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* definition and creation of GyroReceive */
  osThreadDef(GyroReceive, GyroReceiveTask, osPriorityNormal, 0, 128);
 8000efe:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <main+0x268>)
 8000f00:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000f04:	461d      	mov	r5, r3
 8000f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GyroReceiveHandle = osThreadCreate(osThread(GyroReceive), NULL);
 8000f12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 fb64 	bl	80085e6 <osThreadCreate>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a34      	ldr	r2, [pc, #208]	; (8000ff4 <main+0x26c>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistanceCheck */
  osThreadDef(DistanceCheck, DistanceCheckTask, osPriorityNormal, 0, 128);
 8000f24:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <main+0x270>)
 8000f26:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DistanceCheckHandle = osThreadCreate(osThread(DistanceCheck), NULL);
 8000f38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f007 fb51 	bl	80085e6 <osThreadCreate>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <main+0x274>)
 8000f48:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mileage */
  osThreadDef(Mileage, MileageTask, osPriorityNormal, 0, 128);
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <main+0x278>)
 8000f4c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f50:	461d      	mov	r5, r3
 8000f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MileageHandle = osThreadCreate(osThread(Mileage), NULL);
 8000f5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f007 fb3e 	bl	80085e6 <osThreadCreate>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a25      	ldr	r2, [pc, #148]	; (8001004 <main+0x27c>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of GoStraight */
  osThreadDef(GoStraight, GoStraightTask, osPriorityNormal, 0, 128);
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <main+0x280>)
 8000f72:	f107 0420 	add.w	r4, r7, #32
 8000f76:	461d      	mov	r5, r3
 8000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GoStraightHandle = osThreadCreate(osThread(GoStraight), NULL);
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f007 fb2b 	bl	80085e6 <osThreadCreate>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a1e      	ldr	r2, [pc, #120]	; (800100c <main+0x284>)
 8000f94:	6013      	str	r3, [r2, #0]

  /* definition and creation of Colorcheck */
  osThreadDef(Colorcheck, ColorcheckTask, osPriorityNormal, 0, 128);
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <main+0x288>)
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	4615      	mov	r5, r2
 8000f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ColorcheckHandle = osThreadCreate(osThread(Colorcheck), NULL);
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f007 fb19 	bl	80085e6 <osThreadCreate>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a17      	ldr	r2, [pc, #92]	; (8001014 <main+0x28c>)
 8000fb8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fba:	f007 fafd 	bl	80085b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <main+0x236>
 8000fc0:	20004124 	.word	0x20004124
 8000fc4:	20004238 	.word	0x20004238
 8000fc8:	2000403c 	.word	0x2000403c
 8000fcc:	2000420c 	.word	0x2000420c
 8000fd0:	20004240 	.word	0x20004240
 8000fd4:	20004040 	.word	0x20004040
 8000fd8:	20004128 	.word	0x20004128
 8000fdc:	2000423c 	.word	0x2000423c
 8000fe0:	0800b0a8 	.word	0x0800b0a8
 8000fe4:	20004208 	.word	0x20004208
 8000fe8:	0800b0c4 	.word	0x0800b0c4
 8000fec:	20004120 	.word	0x20004120
 8000ff0:	0800b0e0 	.word	0x0800b0e0
 8000ff4:	20004314 	.word	0x20004314
 8000ff8:	0800b0fc 	.word	0x0800b0fc
 8000ffc:	2000412c 	.word	0x2000412c
 8001000:	0800b118 	.word	0x0800b118
 8001004:	20004044 	.word	0x20004044
 8001008:	0800b134 	.word	0x0800b134
 800100c:	20004130 	.word	0x20004130
 8001010:	0800b150 	.word	0x0800b150
 8001014:	20004230 	.word	0x20004230

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b098      	sub	sp, #96	; 0x60
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001022:	2230      	movs	r2, #48	; 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f00a f802 	bl	800b030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b32      	ldr	r3, [pc, #200]	; (8001118 <SystemClock_Config+0x100>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a31      	ldr	r2, [pc, #196]	; (8001118 <SystemClock_Config+0x100>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <SystemClock_Config+0x100>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <SystemClock_Config+0x104>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a2b      	ldr	r2, [pc, #172]	; (800111c <SystemClock_Config+0x104>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <SystemClock_Config+0x104>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001082:	2309      	movs	r3, #9
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001090:	2302      	movs	r3, #2
 8001092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001094:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001098:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800109a:	2304      	movs	r3, #4
 800109c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800109e:	23a8      	movs	r3, #168	; 0xa8
 80010a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 f9da 	bl	8005468 <HAL_RCC_OscConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010ba:	f003 fab1 	bl	8004620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2105      	movs	r1, #5
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 fc3b 	bl	8005958 <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010e8:	f003 fa9a 	bl	8004620 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010ec:	2302      	movs	r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fe82 	bl	8005e04 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001106:	f003 fa8b 	bl	8004620 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800110a:	f004 fd0b 	bl	8005b24 <HAL_RCC_EnableCSS>
}
 800110e:	bf00      	nop
 8001110:	3760      	adds	r7, #96	; 0x60
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_RTC_Init+0xac>)
 800113a:	4a25      	ldr	r2, [pc, #148]	; (80011d0 <MX_RTC_Init+0xb0>)
 800113c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <MX_RTC_Init+0xac>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_RTC_Init+0xac>)
 8001146:	227f      	movs	r2, #127	; 0x7f
 8001148:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <MX_RTC_Init+0xac>)
 800114c:	22ff      	movs	r2, #255	; 0xff
 800114e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_RTC_Init+0xac>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_RTC_Init+0xac>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_RTC_Init+0xac>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001162:	481a      	ldr	r0, [pc, #104]	; (80011cc <MX_RTC_Init+0xac>)
 8001164:	f004 ff30 	bl	8005fc8 <HAL_RTC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800116e:	f003 fa57 	bl	8004620 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001172:	2300      	movs	r3, #0
 8001174:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001176:	2300      	movs	r3, #0
 8001178:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800117a:	2300      	movs	r3, #0
 800117c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2201      	movs	r2, #1
 800118a:	4619      	mov	r1, r3
 800118c:	480f      	ldr	r0, [pc, #60]	; (80011cc <MX_RTC_Init+0xac>)
 800118e:	f004 ffac 	bl	80060ea <HAL_RTC_SetTime>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001198:	f003 fa42 	bl	8004620 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800119c:	2301      	movs	r3, #1
 800119e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80011a0:	2301      	movs	r3, #1
 80011a2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_RTC_Init+0xac>)
 80011b4:	f005 f856 	bl	8006264 <HAL_RTC_SetDate>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011be:	f003 fa2f 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20004210 	.word	0x20004210
 80011d0:	40002800 	.word	0x40002800

080011d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	2224      	movs	r2, #36	; 0x24
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f009 ff24 	bl	800b030 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_TIM2_Init+0xa4>)
 80011f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_TIM2_Init+0xa4>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_TIM2_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_TIM2_Init+0xa4>)
 8001206:	f241 3287 	movw	r2, #4999	; 0x1387
 800120a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_TIM2_Init+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_TIM2_Init+0xa4>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001218:	2303      	movs	r3, #3
 800121a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001230:	2301      	movs	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_TIM2_Init+0xa4>)
 8001244:	f005 fb08 	bl	8006858 <HAL_TIM_Encoder_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800124e:	f003 f9e7 	bl	8004620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_TIM2_Init+0xa4>)
 8001260:	f006 f9f0 	bl	8007644 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800126a:	f003 f9d9 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	; 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20004288 	.word	0x20004288

0800127c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <MX_TIM3_Init+0xe8>)
 80012ae:	4a2e      	ldr	r2, [pc, #184]	; (8001368 <MX_TIM3_Init+0xec>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 601-1;
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <MX_TIM3_Init+0xe8>)
 80012b4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80012b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <MX_TIM3_Init+0xe8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <MX_TIM3_Init+0xe8>)
 80012c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <MX_TIM3_Init+0xe8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <MX_TIM3_Init+0xe8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012d4:	4823      	ldr	r0, [pc, #140]	; (8001364 <MX_TIM3_Init+0xe8>)
 80012d6:	f005 f8de 	bl	8006496 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012e0:	f003 f99e 	bl	8004620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <MX_TIM3_Init+0xe8>)
 80012f2:	f005 fdab 	bl	8006e4c <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012fc:	f003 f990 	bl	8004620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <MX_TIM3_Init+0xe8>)
 8001302:	f005 f987 	bl	8006614 <HAL_TIM_PWM_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800130c:	f003 f988 	bl	8004620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4619      	mov	r1, r3
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <MX_TIM3_Init+0xe8>)
 8001320:	f006 f990 	bl	8007644 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800132a:	f003 f979 	bl	8004620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	; 0x60
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	4807      	ldr	r0, [pc, #28]	; (8001364 <MX_TIM3_Init+0xe8>)
 8001346:	f005 fcc3 	bl	8006cd0 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001350:	f003 f966 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <MX_TIM3_Init+0xe8>)
 8001356:	f003 fa67 	bl	8004828 <HAL_TIM_MspPostInit>

}
 800135a:	bf00      	nop
 800135c:	3738      	adds	r7, #56	; 0x38
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20004134 	.word	0x20004134
 8001368:	40000400 	.word	0x40000400

0800136c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <MX_TIM4_Init+0xe8>)
 800139e:	4a2e      	ldr	r2, [pc, #184]	; (8001458 <MX_TIM4_Init+0xec>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 601-1;
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <MX_TIM4_Init+0xe8>)
 80013a4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80013a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <MX_TIM4_Init+0xe8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <MX_TIM4_Init+0xe8>)
 80013b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_TIM4_Init+0xe8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <MX_TIM4_Init+0xe8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013c4:	4823      	ldr	r0, [pc, #140]	; (8001454 <MX_TIM4_Init+0xe8>)
 80013c6:	f005 f866 	bl	8006496 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013d0:	f003 f926 	bl	8004620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013de:	4619      	mov	r1, r3
 80013e0:	481c      	ldr	r0, [pc, #112]	; (8001454 <MX_TIM4_Init+0xe8>)
 80013e2:	f005 fd33 	bl	8006e4c <HAL_TIM_ConfigClockSource>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80013ec:	f003 f918 	bl	8004620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013f0:	4818      	ldr	r0, [pc, #96]	; (8001454 <MX_TIM4_Init+0xe8>)
 80013f2:	f005 f90f 	bl	8006614 <HAL_TIM_PWM_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80013fc:	f003 f910 	bl	8004620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	4619      	mov	r1, r3
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_TIM4_Init+0xe8>)
 8001410:	f006 f918 	bl	8007644 <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800141a:	f003 f901 	bl	8004620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141e:	2360      	movs	r3, #96	; 0x60
 8001420:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_TIM4_Init+0xe8>)
 8001436:	f005 fc4b 	bl	8006cd0 <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001440:	f003 f8ee 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_TIM4_Init+0xe8>)
 8001446:	f003 f9ef 	bl	8004828 <HAL_TIM_MspPostInit>

}
 800144a:	bf00      	nop
 800144c:	3738      	adds	r7, #56	; 0x38
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20004094 	.word	0x20004094
 8001458:	40000800 	.word	0x40000800

0800145c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2224      	movs	r2, #36	; 0x24
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f009 fde0 	bl	800b030 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_TIM8_Init+0xa4>)
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <MX_TIM8_Init+0xa8>)
 800147c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_TIM8_Init+0xa4>)
 8001480:	2203      	movs	r2, #3
 8001482:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_TIM8_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 150;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_TIM8_Init+0xa4>)
 800148c:	2296      	movs	r2, #150	; 0x96
 800148e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_TIM8_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_TIM8_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_TIM8_Init+0xa4>)
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014a2:	2303      	movs	r3, #3
 80014a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014aa:	2301      	movs	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014ba:	2301      	movs	r3, #1
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <MX_TIM8_Init+0xa4>)
 80014ce:	f005 f9c3 	bl	8006858 <HAL_TIM_Encoder_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 80014d8:	f003 f8a2 	bl	8004620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_TIM8_Init+0xa4>)
 80014ea:	f006 f8ab 	bl	8007644 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 80014f4:	f003 f894 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3730      	adds	r7, #48	; 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20004048 	.word	0x20004048
 8001504:	40010400 	.word	0x40010400

08001508 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_UART4_Init+0x4c>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_UART4_Init+0x50>)
 8001510:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_UART4_Init+0x4c>)
 8001514:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001518:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_UART4_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_UART4_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_UART4_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_UART4_Init+0x4c>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_UART4_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_UART4_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_UART4_Init+0x4c>)
 8001540:	f006 f910 	bl	8007764 <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800154a:	f003 f869 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20004244 	.word	0x20004244
 8001558:	40004c00 	.word	0x40004c00

0800155c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_UART5_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <MX_UART5_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_UART5_Init+0x4c>)
 8001568:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800156c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_UART5_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_UART5_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_UART5_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_UART5_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_UART5_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_UART5_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_UART5_Init+0x4c>)
 8001594:	f006 f8e6 	bl	8007764 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800159e:	f003 f83f 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20004180 	.word	0x20004180
 80015ac:	40005000 	.word	0x40005000

080015b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_USART1_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e8:	f006 f8bc 	bl	8007764 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015f2:	f003 f815 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200041c4 	.word	0x200041c4
 8001600:	40011000 	.word	0x40011000

08001604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_USART2_UART_Init+0x50>)
 800160c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800163c:	f006 f892 	bl	8007764 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001646:	f002 ffeb 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200042d0 	.word	0x200042d0
 8001654:	40004400 	.word	0x40004400

08001658 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_USART3_UART_Init+0x50>)
 8001660:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001690:	f006 f868 	bl	8007764 <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800169a:	f002 ffc1 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200040dc 	.word	0x200040dc
 80016a8:	40004800 	.word	0x40004800

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <MX_GPIO_Init+0x160>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a50      	ldr	r2, [pc, #320]	; (800180c <MX_GPIO_Init+0x160>)
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b4e      	ldr	r3, [pc, #312]	; (800180c <MX_GPIO_Init+0x160>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <MX_GPIO_Init+0x160>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a49      	ldr	r2, [pc, #292]	; (800180c <MX_GPIO_Init+0x160>)
 80016e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <MX_GPIO_Init+0x160>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b43      	ldr	r3, [pc, #268]	; (800180c <MX_GPIO_Init+0x160>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a42      	ldr	r2, [pc, #264]	; (800180c <MX_GPIO_Init+0x160>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b40      	ldr	r3, [pc, #256]	; (800180c <MX_GPIO_Init+0x160>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b3c      	ldr	r3, [pc, #240]	; (800180c <MX_GPIO_Init+0x160>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a3b      	ldr	r2, [pc, #236]	; (800180c <MX_GPIO_Init+0x160>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b39      	ldr	r3, [pc, #228]	; (800180c <MX_GPIO_Init+0x160>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <MX_GPIO_Init+0x160>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a34      	ldr	r2, [pc, #208]	; (800180c <MX_GPIO_Init+0x160>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <MX_GPIO_Init+0x160>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b2e      	ldr	r3, [pc, #184]	; (800180c <MX_GPIO_Init+0x160>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a2d      	ldr	r2, [pc, #180]	; (800180c <MX_GPIO_Init+0x160>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <MX_GPIO_Init+0x160>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|LEDBlue_Pin|LEDGreen_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001770:	4827      	ldr	r0, [pc, #156]	; (8001810 <MX_GPIO_Init+0x164>)
 8001772:	f003 fe45 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rightPWMGND_GPIO_Port, rightPWMGND_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177c:	4825      	ldr	r0, [pc, #148]	; (8001814 <MX_GPIO_Init+0x168>)
 800177e:	f003 fe3f 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(leftPWMGND_GPIO_Port, leftPWMGND_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001788:	4823      	ldr	r0, [pc, #140]	; (8001818 <MX_GPIO_Init+0x16c>)
 800178a:	f003 fe39 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800178e:	2310      	movs	r3, #16
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001796:	2302      	movs	r3, #2
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	481a      	ldr	r0, [pc, #104]	; (8001810 <MX_GPIO_Init+0x164>)
 80017a6:	f003 fc8f 	bl	80050c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDBlue_Pin LEDGreen_Pin */
  GPIO_InitStruct.Pin = LEDBlue_Pin|LEDGreen_Pin;
 80017aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	4813      	ldr	r0, [pc, #76]	; (8001810 <MX_GPIO_Init+0x164>)
 80017c4:	f003 fc80 	bl	80050c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : rightPWMGND_Pin */
  GPIO_InitStruct.Pin = rightPWMGND_Pin;
 80017c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017d2:	2302      	movs	r3, #2
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(rightPWMGND_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <MX_GPIO_Init+0x168>)
 80017e2:	f003 fc71 	bl	80050c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftPWMGND_Pin */
  GPIO_InitStruct.Pin = leftPWMGND_Pin;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017f0:	2302      	movs	r3, #2
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftPWMGND_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <MX_GPIO_Init+0x16c>)
 8001800:	f003 fc62 	bl	80050c8 <HAL_GPIO_Init>

}
 8001804:	bf00      	nop
 8001806:	3730      	adds	r7, #48	; 0x30
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	40021400 	.word	0x40021400
 8001814:	40020c00 	.word	0x40020c00
 8001818:	40020000 	.word	0x40020000

0800181c <Car_Initial>:

/* USER CODE BEGIN 4 */
void Car_Initial(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 8001820:	f009 f8c8 	bl	800a9b4 <vPortEnterCritical>
	state=Initial;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <Car_Initial+0x50>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
	temp_state = Unknow;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <Car_Initial+0x54>)
 800182c:	2228      	movs	r2, #40	; 0x28
 800182e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8001830:	2202      	movs	r2, #2
 8001832:	4910      	ldr	r1, [pc, #64]	; (8001874 <Car_Initial+0x58>)
 8001834:	4810      	ldr	r0, [pc, #64]	; (8001878 <Car_Initial+0x5c>)
 8001836:	f006 f916 	bl	8007a66 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);//�???????????????????????????????????????????????????????????????????????启左侧PWM
 800183a:	2100      	movs	r1, #0
 800183c:	480f      	ldr	r0, [pc, #60]	; (800187c <Car_Initial+0x60>)
 800183e:	f004 ff43 	bl	80066c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);//�???????????????????????????????????????????????????????????????????????启右侧PWM
 8001842:	2100      	movs	r1, #0
 8001844:	480e      	ldr	r0, [pc, #56]	; (8001880 <Car_Initial+0x64>)
 8001846:	f004 ff3f 	bl	80066c8 <HAL_TIM_PWM_Start>
	taskEXIT_CRITICAL();
 800184a:	f009 f8e3 	bl	800aa14 <vPortExitCritical>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 800184e:	213c      	movs	r1, #60	; 0x3c
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <Car_Initial+0x68>)
 8001852:	f005 f8a7 	bl	80069a4 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,500);
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <Car_Initial+0x68>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <Car_Initial+0x68>)
 8001862:	f004 fe67 	bl	8006534 <HAL_TIM_Base_Start_IT>
	//vTaskSuspend(UART_RTHandle);//Suspend UART R and T
	//vTaskSuspend(PIDCameraHandle);//Suspend PID module
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000417c 	.word	0x2000417c
 8001870:	20004234 	.word	0x20004234
 8001874:	20000294 	.word	0x20000294
 8001878:	200042d0 	.word	0x200042d0
 800187c:	20004134 	.word	0x20004134
 8001880:	20004094 	.word	0x20004094
 8001884:	20004288 	.word	0x20004288

08001888 <Car_Stop>:

void Car_Stop(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 800188c:	f009 f892 	bl	800a9b4 <vPortEnterCritical>
	PWM_SET_LEFT(1);
 8001890:	2001      	movs	r0, #1
 8001892:	f000 fd3f 	bl	8002314 <PWM_SET_LEFT>
	PWM_SET_RIGHT(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f000 fd76 	bl	8002388 <PWM_SET_RIGHT>
	taskEXIT_CRITICAL();
 800189c:	f009 f8ba 	bl	800aa14 <vPortExitCritical>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <delay>:

void delay(uint32_t time_ms)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	uint32_t PreviousWakeTime=osKernelSysTick();
 80018ac:	f006 fe8b 	bl	80085c6 <osKernelSysTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]
	osDelayUntil(&PreviousWakeTime, time_ms);
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 ff96 	bl	80087ec <osDelayUntil>
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <Angle_Diff>:

float Angle_Diff(float target, float input)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80018d2:	edc7 0a00 	vstr	s1, [r7]
	float Error;
	if(target >= 180)
 80018d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001988 <Angle_Diff+0xc0>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	db08      	blt.n	80018fa <Angle_Diff+0x32>
		target=-360+target;
 80018e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ec:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800198c <Angle_Diff+0xc4>
 80018f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80018f8:	e010      	b.n	800191c <Angle_Diff+0x54>
	else if(target <=-180)
 80018fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fe:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001990 <Angle_Diff+0xc8>
 8001902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	d807      	bhi.n	800191c <Angle_Diff+0x54>
		target=360+target;
 800190c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001910:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800198c <Angle_Diff+0xc4>
 8001914:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001918:	edc7 7a01 	vstr	s15, [r7, #4]
	Error = target - input;
 800191c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001920:	edd7 7a00 	vldr	s15, [r7]
 8001924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001928:	edc7 7a03 	vstr	s15, [r7, #12]
		if(Error >= 180)
 800192c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001930:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001988 <Angle_Diff+0xc0>
 8001934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	db08      	blt.n	8001950 <Angle_Diff+0x88>
			Error=Error-360;
 800193e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001942:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800198c <Angle_Diff+0xc4>
 8001946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800194a:	edc7 7a03 	vstr	s15, [r7, #12]
 800194e:	e010      	b.n	8001972 <Angle_Diff+0xaa>
		else if(Error <= -180)
 8001950:	edd7 7a03 	vldr	s15, [r7, #12]
 8001954:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001990 <Angle_Diff+0xc8>
 8001958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001960:	d807      	bhi.n	8001972 <Angle_Diff+0xaa>
			Error=Error+360;
 8001962:	edd7 7a03 	vldr	s15, [r7, #12]
 8001966:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800198c <Angle_Diff+0xc4>
 800196a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800196e:	edc7 7a03 	vstr	s15, [r7, #12]
	return Error;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	ee07 3a90 	vmov	s15, r3
}
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	43340000 	.word	0x43340000
 800198c:	43b40000 	.word	0x43b40000
 8001990:	c3340000 	.word	0xc3340000

08001994 <PID_Turning>:
// 		}
// 	 }
//}

int PID_Turning(float increment_angle,float Accept_Error)//If we want to turn right, parameter is negative
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b092      	sub	sp, #72	; 0x48
 8001998:	af00      	add	r7, sp, #0
 800199a:	ed87 0a01 	vstr	s0, [r7, #4]
 800199e:	edc7 0a00 	vstr	s1, [r7]

	float PID_target=0;
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44
	float PID_Error_Last=0;
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	643b      	str	r3, [r7, #64]	; 0x40
	float initial_yaw=0;
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	float PID_Output=0,PID_Input=0;;
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
	float Error = 0, Error_Total=0;
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
	float KP=13, KI=2, KD=0;
 80019cc:	4baf      	ldr	r3, [pc, #700]	; (8001c8c <PID_Turning+0x2f8>)
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
	//15 2 0
	int t=0;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
	float pwm_left=0,pwm_right=0;
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
	uint8_t Flag=0; //Indicate that if verifying process begin.
 80019ec:	2300      	movs	r3, #0
 80019ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Car_Stop();
 80019f2:	f7ff ff49 	bl	8001888 <Car_Stop>
	//delay(1500);
	for(int i=0;i<10;i++)			//Get average initial direction
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019fa:	e012      	b.n	8001a22 <PID_Turning+0x8e>
	{
			osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 80019fc:	4ba4      	ldr	r3, [pc, #656]	; (8001c90 <PID_Turning+0x2fc>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	4618      	mov	r0, r3
 8001a06:	f006 fe6d 	bl	80086e4 <osSemaphoreWait>
			initial_yaw+=angle.z;
 8001a0a:	4ba2      	ldr	r3, [pc, #648]	; (8001c94 <PID_Turning+0x300>)
 8001a0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for(int i=0;i<10;i++)			//Get average initial direction
 8001a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1e:	3301      	adds	r3, #1
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	dde9      	ble.n	80019fc <PID_Turning+0x68>
	}
	initial_yaw=initial_yaw/10;
 8001a28:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001a2c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	PID_target=initial_yaw + increment_angle;
 8001a38:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(PID_target > 180)
 8001a48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a4c:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001c98 <PID_Turning+0x304>
 8001a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	dd07      	ble.n	8001a6a <PID_Turning+0xd6>
		PID_target=-360+PID_target;
 8001a5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a5e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001c9c <PID_Turning+0x308>
 8001a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a66:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(PID_target <-180)
 8001a6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a6e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001ca0 <PID_Turning+0x30c>
 8001a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	d507      	bpl.n	8001a8c <PID_Turning+0xf8>
		PID_target=360+PID_target;
 8001a7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a80:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001c9c <PID_Turning+0x308>
 8001a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a88:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for(;;)
  {
	  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001a8c:	4b80      	ldr	r3, [pc, #512]	; (8001c90 <PID_Turning+0x2fc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	4618      	mov	r0, r3
 8001a96:	f006 fe25 	bl	80086e4 <osSemaphoreWait>
	  	 PID_Input = angle.z;
 8001a9a:	4b7e      	ldr	r3, [pc, #504]	; (8001c94 <PID_Turning+0x300>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
	  	 Error=Angle_Diff(PID_target, PID_Input);
 8001aa0:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001aa4:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001aa8:	f7ff ff0e 	bl	80018c8 <Angle_Diff>
 8001aac:	ed87 0a08 	vstr	s0, [r7, #32]
	  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 8001ab0:	edd7 7a00 	vldr	s15, [r7]
 8001ab4:	eef1 7a67 	vneg.f32	s15, s15
 8001ab8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001abc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	dd17      	ble.n	8001af6 <PID_Turning+0x162>
 8001ac6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aca:	edd7 7a00 	vldr	s15, [r7]
 8001ace:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d50e      	bpl.n	8001af6 <PID_Turning+0x162>
 8001ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <PID_Turning+0x162>
	  	 {
	  		 t++;
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
	  		if(t>2)
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	dd04      	ble.n	8001af6 <PID_Turning+0x162>
	  		{
	  			Flag = 1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
	  		}
	  	 }
	  	 if(Flag)
 8001af6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d026      	beq.n	8001b4c <PID_Turning+0x1b8>
	  	 {
	  		if(t>Angle_stable_cycles)
 8001afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	dd06      	ble.n	8001b12 <PID_Turning+0x17e>
	  		{
	  			Flag=0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
	  			return 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e0b7      	b.n	8001c82 <PID_Turning+0x2ee>
	  		}
	  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 8001b12:	edd7 7a00 	vldr	s15, [r7]
 8001b16:	eef1 7a67 	vneg.f32	s15, s15
 8001b1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	dd0c      	ble.n	8001b42 <PID_Turning+0x1ae>
 8001b28:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b2c:	edd7 7a00 	vldr	s15, [r7]
 8001b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	d503      	bpl.n	8001b42 <PID_Turning+0x1ae>
	  		{
	  			t++;
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b40:	e004      	b.n	8001b4c <PID_Turning+0x1b8>
	  		}
	  		else
	  		{
	  			Flag=0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  			t=0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
	  		}
	  	 }
	  	 Error_Total=Error_Total+KI*Error;
 8001b4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b50:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b58:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	     PID_Output = KP * Error  +
 8001b64:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b68:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
	 				  KD * (Error - PID_Error_Last ) +
 8001b70:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b74:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
	     PID_Output = KP * Error  +
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b88:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
					  Error_Total;
	     PID_Error_Last = Error;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	643b      	str	r3, [r7, #64]	; 0x40
	     pwm_right =   PID_Output;
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	60fb      	str	r3, [r7, #12]
	     pwm_left  = - PID_Output;
 8001b9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ba0:	eef1 7a67 	vneg.f32	s15, s15
 8001ba4:	edc7 7a04 	vstr	s15, [r7, #16]
	     pwm_right += pwm_right>0 ?PWM_Lowest:-PWM_Lowest;
 8001ba8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	dd02      	ble.n	8001bbc <PID_Turning+0x228>
 8001bb6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8001ca4 <PID_Turning+0x310>
 8001bba:	e001      	b.n	8001bc0 <PID_Turning+0x22c>
 8001bbc:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8001ca8 <PID_Turning+0x314>
 8001bc0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	edc7 7a03 	vstr	s15, [r7, #12]
	     pwm_left  += pwm_left>0  ?PWM_Lowest:-PWM_Lowest;
 8001bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	dd02      	ble.n	8001be0 <PID_Turning+0x24c>
 8001bda:	eddf 7a32 	vldr	s15, [pc, #200]	; 8001ca4 <PID_Turning+0x310>
 8001bde:	e001      	b.n	8001be4 <PID_Turning+0x250>
 8001be0:	eddf 7a31 	vldr	s15, [pc, #196]	; 8001ca8 <PID_Turning+0x314>
 8001be4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bec:	edc7 7a04 	vstr	s15, [r7, #16]
	     pwm_right =  pwm_right>= PWM_Higest?PWM_Higest:pwm_right;
 8001bf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001cac <PID_Turning+0x318>
 8001bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	db01      	blt.n	8001c06 <PID_Turning+0x272>
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <PID_Turning+0x31c>)
 8001c04:	e000      	b.n	8001c08 <PID_Turning+0x274>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	60fb      	str	r3, [r7, #12]
	     pwm_right =  pwm_right<= -PWM_Higest?-PWM_Higest:pwm_right;
 8001c0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c0e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001cb4 <PID_Turning+0x320>
 8001c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d801      	bhi.n	8001c20 <PID_Turning+0x28c>
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <PID_Turning+0x324>)
 8001c1e:	e000      	b.n	8001c22 <PID_Turning+0x28e>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	60fb      	str	r3, [r7, #12]
	     pwm_left  =  pwm_left >= PWM_Higest?PWM_Higest:pwm_left;
 8001c24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c28:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001cac <PID_Turning+0x318>
 8001c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	db01      	blt.n	8001c3a <PID_Turning+0x2a6>
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <PID_Turning+0x31c>)
 8001c38:	e000      	b.n	8001c3c <PID_Turning+0x2a8>
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	613b      	str	r3, [r7, #16]
	     pwm_left  =  pwm_left <= -PWM_Higest?-PWM_Higest:pwm_left;// 限幅
 8001c3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c42:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001cb4 <PID_Turning+0x320>
 8001c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d801      	bhi.n	8001c54 <PID_Turning+0x2c0>
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <PID_Turning+0x324>)
 8001c52:	e000      	b.n	8001c56 <PID_Turning+0x2c2>
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	613b      	str	r3, [r7, #16]
	    	 taskENTER_CRITICAL();
 8001c58:	f008 feac 	bl	800a9b4 <vPortEnterCritical>
	    	 PWM_SET_RIGHT ((int32_t)   pwm_right);
 8001c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c64:	ee17 0a90 	vmov	r0, s15
 8001c68:	f000 fb8e 	bl	8002388 <PWM_SET_RIGHT>
	    	 PWM_SET_LEFT  ((int32_t)   pwm_left );
 8001c6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c74:	ee17 0a90 	vmov	r0, s15
 8001c78:	f000 fb4c 	bl	8002314 <PWM_SET_LEFT>
	    	 taskEXIT_CRITICAL();
 8001c7c:	f008 feca 	bl	800aa14 <vPortExitCritical>
	  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001c80:	e704      	b.n	8001a8c <PID_Turning+0xf8>
  }

}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3748      	adds	r7, #72	; 0x48
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	41500000 	.word	0x41500000
 8001c90:	20004238 	.word	0x20004238
 8001c94:	200002a0 	.word	0x200002a0
 8001c98:	43340000 	.word	0x43340000
 8001c9c:	43b40000 	.word	0x43b40000
 8001ca0:	c3340000 	.word	0xc3340000
 8001ca4:	43fa0000 	.word	0x43fa0000
 8001ca8:	c3fa0000 	.word	0xc3fa0000
 8001cac:	44af0000 	.word	0x44af0000
 8001cb0:	44af0000 	.word	0x44af0000
 8001cb4:	c4af0000 	.word	0xc4af0000
 8001cb8:	c4af0000 	.word	0xc4af0000

08001cbc <PID_Straight>:
void PID_Straight(float speed)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b092      	sub	sp, #72	; 0x48
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	ed87 0a01 	vstr	s0, [r7, #4]
					float PID_target=0;
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
					float PID_Error_Last=0;
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
					float initial_yaw=0;
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
					float PID_Output=0,PID_Input=0;
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
					float Error = 0, Error_Total=0,Error_Total_Total=0;
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	63bb      	str	r3, [r7, #56]	; 0x38
					float KP=15, KI=6, KD=10, KI2=0.013;
 8001cf6:	4b6d      	ldr	r3, [pc, #436]	; (8001eac <PID_Straight+0x1f0>)
 8001cf8:	623b      	str	r3, [r7, #32]
 8001cfa:	4b6d      	ldr	r3, [pc, #436]	; (8001eb0 <PID_Straight+0x1f4>)
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <PID_Straight+0x1f8>)
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <PID_Straight+0x1fc>)
 8001d04:	617b      	str	r3, [r7, #20]
					int32_t pwm_right=0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
					int32_t pwm_left=0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
					//uint8_t Flag=0; //Indicate that if verifying process begin.
					Car_Stop();
 8001d0e:	f7ff fdbb 	bl	8001888 <Car_Stop>
					if (PID_Straight_Reset_Flag)
 8001d12:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <PID_Straight+0x200>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 80bf 	bne.w	8001e9a <PID_Straight+0x1de>
						return;
					osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001d1c:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <PID_Straight+0x204>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	4618      	mov	r0, r3
 8001d26:	f006 fcdd 	bl	80086e4 <osSemaphoreWait>
					for(int i=0;i<10;i++)			//Get average initial direction
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2e:	e015      	b.n	8001d5c <PID_Straight+0xa0>
					{
							osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001d30:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <PID_Straight+0x204>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f006 fcd3 	bl	80086e4 <osSemaphoreWait>
							initial_yaw+=angle.z;
 8001d3e:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <PID_Straight+0x208>)
 8001d40:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
							delay(10);
 8001d50:	200a      	movs	r0, #10
 8001d52:	f7ff fda7 	bl	80018a4 <delay>
					for(int i=0;i<10;i++)			//Get average initial direction
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	3301      	adds	r3, #1
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	2b09      	cmp	r3, #9
 8001d60:	dde6      	ble.n	8001d30 <PID_Straight+0x74>
					}
					initial_yaw=initial_yaw/10;
 8001d62:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001d66:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d6e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
					PID_target=initial_yaw;
 8001d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
				  for(;;)
				  {
					  	 if (PID_Straight_Reset_Flag)
 8001d76:	4b51      	ldr	r3, [pc, #324]	; (8001ebc <PID_Straight+0x200>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 808f 	bne.w	8001e9e <PID_Straight+0x1e2>
					  		 return;
		  	  	  	  	 //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green
					  	 osSemaphoreWait(GyroReadySemHandle, osWaitForever);
 8001d80:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <PID_Straight+0x204>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 fcab 	bl	80086e4 <osSemaphoreWait>
					  	 PID_Input = angle.z;
 8001d8e:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <PID_Straight+0x208>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
					  	 Error=Angle_Diff(PID_target, PID_Input);
 8001d94:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001d98:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001d9c:	f7ff fd94 	bl	80018c8 <Angle_Diff>
 8001da0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
						 Error_Total=Error_Total+KI*Error;
 8001da4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001da8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					     Error_Total_Total= Error_Total_Total+KI2*Error_Total;
 8001dbc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dc0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					     PID_Output = KP * Error  +
 8001dd4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
					 				  KD * (Error - PID_Error_Last ) +
 8001de0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001de4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
					     PID_Output = KP * Error  +
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
									  Error_Total;
					     PID_Error_Last = Error;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44

					     pwm_right=	speed+	(int32_t) 	PID_Output;
 8001e08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e20:	ee17 3a90 	vmov	r3, s15
 8001e24:	613b      	str	r3, [r7, #16]
					     pwm_left=	speed-	(int32_t)  	PID_Output;
 8001e26:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e32:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3e:	ee17 3a90 	vmov	r3, s15
 8001e42:	60fb      	str	r3, [r7, #12]
					     pwm_right = pwm_right<PWM_Lowest ? PWM_Lowest : pwm_right;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e4a:	bfb8      	it	lt
 8001e4c:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
 8001e50:	613b      	str	r3, [r7, #16]
					     pwm_right = pwm_right>PWM_Higest ? PWM_Higest : pwm_right;
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001e58:	bfa8      	it	ge
 8001e5a:	f44f 63af 	movge.w	r3, #1400	; 0x578
 8001e5e:	613b      	str	r3, [r7, #16]
					     pwm_left = pwm_left<PWM_Lowest ? PWM_Lowest : pwm_left;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e66:	bfb8      	it	lt
 8001e68:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
 8001e6c:	60fb      	str	r3, [r7, #12]
					     pwm_left = pwm_left>PWM_Higest ? PWM_Higest : pwm_left;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001e74:	bfa8      	it	ge
 8001e76:	f44f 63af 	movge.w	r3, #1400	; 0x578
 8001e7a:	60fb      	str	r3, [r7, #12]
					     if (PID_Straight_Reset_Flag)
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <PID_Straight+0x200>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10e      	bne.n	8001ea2 <PID_Straight+0x1e6>
					     	return;
					     taskENTER_CRITICAL();
 8001e84:	f008 fd96 	bl	800a9b4 <vPortEnterCritical>
					     PWM_SET_RIGHT (pwm_right);
 8001e88:	6938      	ldr	r0, [r7, #16]
 8001e8a:	f000 fa7d 	bl	8002388 <PWM_SET_RIGHT>
					     PWM_SET_LEFT(pwm_left);
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fa40 	bl	8002314 <PWM_SET_LEFT>
					     taskEXIT_CRITICAL();
 8001e94:	f008 fdbe 	bl	800aa14 <vPortExitCritical>
					  	 if (PID_Straight_Reset_Flag)
 8001e98:	e76d      	b.n	8001d76 <PID_Straight+0xba>
						return;
 8001e9a:	bf00      	nop
 8001e9c:	e002      	b.n	8001ea4 <PID_Straight+0x1e8>
					  		 return;
 8001e9e:	bf00      	nop
 8001ea0:	e000      	b.n	8001ea4 <PID_Straight+0x1e8>
					     	return;
 8001ea2:	bf00      	nop
					     }
}
 8001ea4:	3748      	adds	r7, #72	; 0x48
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	41700000 	.word	0x41700000
 8001eb0:	40c00000 	.word	0x40c00000
 8001eb4:	41200000 	.word	0x41200000
 8001eb8:	3c54fdf4 	.word	0x3c54fdf4
 8001ebc:	20000008 	.word	0x20000008
 8001ec0:	20004238 	.word	0x20004238
 8001ec4:	200002a0 	.word	0x200002a0

08001ec8 <Ultrasonic_Feedback>:

Distance Ultrasonic_Feedback(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
	uint8_t info=0xA0;
 8001ece:	23a0      	movs	r3, #160	; 0xa0
 8001ed0:	74fb      	strb	r3, [r7, #19]
	uint8_t Rx_Buf[3]={0,0,0};
 8001ed2:	4a2b      	ldr	r2, [pc, #172]	; (8001f80 <Ultrasonic_Feedback+0xb8>)
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	4611      	mov	r1, r2
 8001edc:	8019      	strh	r1, [r3, #0]
 8001ede:	3302      	adds	r3, #2
 8001ee0:	0c12      	lsrs	r2, r2, #16
 8001ee2:	701a      	strb	r2, [r3, #0]
	uint32_t Data=0x00000000;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
	Distance distance={0.0,0.0};
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
	taskENTER_CRITICAL();
 8001ef4:	f008 fd5e 	bl	800a9b4 <vPortEnterCritical>
	HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
 8001ef8:	f107 0113 	add.w	r1, r7, #19
 8001efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f00:	2201      	movs	r2, #1
 8001f02:	4820      	ldr	r0, [pc, #128]	; (8001f84 <Ultrasonic_Feedback+0xbc>)
 8001f04:	f005 fc7b 	bl	80077fe <HAL_UART_Transmit>
	delay(200);
 8001f08:	20c8      	movs	r0, #200	; 0xc8
 8001f0a:	f7ff fccb 	bl	80018a4 <delay>
	HAL_UART_Receive(&huart5,(uint8_t*) &Rx_Buf,3,1000);
 8001f0e:	f107 0110 	add.w	r1, r7, #16
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	2203      	movs	r2, #3
 8001f18:	481a      	ldr	r0, [pc, #104]	; (8001f84 <Ultrasonic_Feedback+0xbc>)
 8001f1a:	f005 fd02 	bl	8007922 <HAL_UART_Receive>
	taskEXIT_CRITICAL();
 8001f1e:	f008 fd79 	bl	800aa14 <vPortExitCritical>
	Data=Data | (((uint32_t) (Rx_Buf[0]))<<16);
 8001f22:	7c3b      	ldrb	r3, [r7, #16]
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61fb      	str	r3, [r7, #28]
	Data=Data | (((uint32_t) (Rx_Buf[1]))<<8);
 8001f2c:	7c7b      	ldrb	r3, [r7, #17]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61fb      	str	r3, [r7, #28]
	Data=Data |((uint32_t) (Rx_Buf[2]));
 8001f36:	7cbb      	ldrb	r3, [r7, #18]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61fb      	str	r3, [r7, #28]
	//HAL_UART_Transmit(&huart1, (uint8_t *) &Data, 4, 0xFFFF);
	distance.front=Data/1000;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <Ultrasonic_Feedback+0xc0>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f52:	edc7 7a02 	vstr	s15, [r7, #8]
	return distance;
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	f107 0208 	add.w	r2, r7, #8
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	ee07 2a10 	vmov	s14, r2
 8001f6e:	ee07 3a90 	vmov	s15, r3
}
 8001f72:	eeb0 0a47 	vmov.f32	s0, s14
 8001f76:	eef0 0a67 	vmov.f32	s1, s15
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	0800b16c 	.word	0x0800b16c
 8001f84:	20004180 	.word	0x20004180
 8001f88:	10624dd3 	.word	0x10624dd3

08001f8c <Ultrasonic_Feedback_front>:

void Ultrasonic_Feedback_front(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Front,3);
 8001f90:	2203      	movs	r2, #3
 8001f92:	4906      	ldr	r1, [pc, #24]	; (8001fac <Ultrasonic_Feedback_front+0x20>)
 8001f94:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <Ultrasonic_Feedback_front+0x24>)
 8001f96:	f005 fd66 	bl	8007a66 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
 8001f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <Ultrasonic_Feedback_front+0x28>)
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <Ultrasonic_Feedback_front+0x24>)
 8001fa4:	f005 fc2b 	bl	80077fe <HAL_UART_Transmit>

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2000029c 	.word	0x2000029c
 8001fb0:	20004180 	.word	0x20004180
 8001fb4:	2000000c 	.word	0x2000000c

08001fb8 <Ultrasonic_Feedback_right>:


}

float Ultrasonic_Feedback_right(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
    float diatance_temp=0;
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]

	HAL_UART_Receive_IT(&huart4,(uint8_t*) &Rx_Buf_Right,3);
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	490e      	ldr	r1, [pc, #56]	; (8002000 <Ultrasonic_Feedback_right+0x48>)
 8001fc8:	480e      	ldr	r0, [pc, #56]	; (8002004 <Ultrasonic_Feedback_right+0x4c>)
 8001fca:	f005 fd4c 	bl	8007a66 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart4,(uint8_t*) &info,1,0xFFFF);
 8001fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <Ultrasonic_Feedback_right+0x50>)
 8001fd6:	480b      	ldr	r0, [pc, #44]	; (8002004 <Ultrasonic_Feedback_right+0x4c>)
 8001fd8:	f005 fc11 	bl	80077fe <HAL_UART_Transmit>
	osSemaphoreWait(gomile6SemHandle, osWaitForever);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <Ultrasonic_Feedback_right+0x54>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f006 fb7d 	bl	80086e4 <osSemaphoreWait>
	diatance_temp=right_distance.right;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <Ultrasonic_Feedback_right+0x58>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	607b      	str	r3, [r7, #4]
	return diatance_temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	ee07 3a90 	vmov	s15, r3

	//delay(200);
}
 8001ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000298 	.word	0x20000298
 8002004:	20004244 	.word	0x20004244
 8002008:	2000000c 	.word	0x2000000c
 800200c:	20004040 	.word	0x20004040
 8002010:	200002b4 	.word	0x200002b4

08002014 <HAL_UART_RxCpltCallback>:
//						     }
//
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  	if (huart->Instance==USART2){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a6c      	ldr	r2, [pc, #432]	; (80021d4 <HAL_UART_RxCpltCallback+0x1c0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d142      	bne.n	80020ac <HAL_UART_RxCpltCallback+0x98>
  		Camera_Data=0x0000;
 8002026:	4b6c      	ldr	r3, [pc, #432]	; (80021d8 <HAL_UART_RxCpltCallback+0x1c4>)
 8002028:	2200      	movs	r2, #0
 800202a:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data | (((uint16_t) (Rx_Buf[0]))<<8);
 800202c:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <HAL_UART_RxCpltCallback+0x1c8>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	b21a      	sxth	r2, r3
 8002036:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <HAL_UART_RxCpltCallback+0x1c4>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	b21b      	sxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	b21b      	sxth	r3, r3
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_UART_RxCpltCallback+0x1c4>)
 8002046:	801a      	strh	r2, [r3, #0]
  		Camera_Data=Camera_Data|((uint16_t) (Rx_Buf[1]));
 8002048:	4b64      	ldr	r3, [pc, #400]	; (80021dc <HAL_UART_RxCpltCallback+0x1c8>)
 800204a:	785b      	ldrb	r3, [r3, #1]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <HAL_UART_RxCpltCallback+0x1c4>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b29a      	uxth	r2, r3
 800205a:	4b5f      	ldr	r3, [pc, #380]	; (80021d8 <HAL_UART_RxCpltCallback+0x1c4>)
 800205c:	801a      	strh	r2, [r3, #0]
  		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 800205e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002062:	485f      	ldr	r0, [pc, #380]	; (80021e0 <HAL_UART_RxCpltCallback+0x1cc>)
 8002064:	f003 f9e5 	bl	8005432 <HAL_GPIO_TogglePin>
  		Rx_Buf[0]=0;
 8002068:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <HAL_UART_RxCpltCallback+0x1c8>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
  		Rx_Buf[1]=0;
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_UART_RxCpltCallback+0x1c8>)
 8002070:	2200      	movs	r2, #0
 8002072:	705a      	strb	r2, [r3, #1]
  		osSemaphoreRelease(CameraUARTSemHandle);
 8002074:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <HAL_UART_RxCpltCallback+0x1d0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f006 fb81 	bl	8008780 <osSemaphoreRelease>
  		if((Camera_Data & 0x4000) != 0)//IF Apriltag is found
 800207e:	4b56      	ldr	r3, [pc, #344]	; (80021d8 <HAL_UART_RxCpltCallback+0x1c4>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_UART_RxCpltCallback+0x82>
  		{
  			osSemaphoreRelease(ApriltagSemHandle);
 800208c:	4b56      	ldr	r3, [pc, #344]	; (80021e8 <HAL_UART_RxCpltCallback+0x1d4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f006 fb75 	bl	8008780 <osSemaphoreRelease>
  		}
  		if(camera_recieve_IT_flag)
 8002096:	4b55      	ldr	r3, [pc, #340]	; (80021ec <HAL_UART_RxCpltCallback+0x1d8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8096 	beq.w	80021cc <HAL_UART_RxCpltCallback+0x1b8>
  			HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 80020a0:	2202      	movs	r2, #2
 80020a2:	494e      	ldr	r1, [pc, #312]	; (80021dc <HAL_UART_RxCpltCallback+0x1c8>)
 80020a4:	4852      	ldr	r0, [pc, #328]	; (80021f0 <HAL_UART_RxCpltCallback+0x1dc>)
 80020a6:	f005 fcde 	bl	8007a66 <HAL_UART_Receive_IT>
  		 		HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
  		 	}
  			//HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Sonic,3);
  			//HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);
  		}
  }
 80020aa:	e08f      	b.n	80021cc <HAL_UART_RxCpltCallback+0x1b8>
  	else if (huart->Instance==UART4)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a50      	ldr	r2, [pc, #320]	; (80021f4 <HAL_UART_RxCpltCallback+0x1e0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d131      	bne.n	800211a <HAL_UART_RxCpltCallback+0x106>
		uint32_t Data=0x00000000;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
	 	Data=Data | (((uint32_t) (Rx_Buf_Right[0]))<<16);
 80020ba:	4b4f      	ldr	r3, [pc, #316]	; (80021f8 <HAL_UART_RxCpltCallback+0x1e4>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
	 	Data=Data | (((uint32_t) (Rx_Buf_Right[1]))<<8);
 80020c8:	4b4b      	ldr	r3, [pc, #300]	; (80021f8 <HAL_UART_RxCpltCallback+0x1e4>)
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60bb      	str	r3, [r7, #8]
	 	Data=Data |((uint32_t) (Rx_Buf_Right[2]));
 80020d6:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <HAL_UART_RxCpltCallback+0x1e4>)
 80020d8:	789b      	ldrb	r3, [r3, #2]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
	 	Rx_Buf_Right[0]=0;
 80020e4:	4b44      	ldr	r3, [pc, #272]	; (80021f8 <HAL_UART_RxCpltCallback+0x1e4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
		Rx_Buf_Right[1]=0;
 80020ea:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_UART_RxCpltCallback+0x1e4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	705a      	strb	r2, [r3, #1]
	    Rx_Buf_Right[2]=0;
 80020f0:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_UART_RxCpltCallback+0x1e4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	709a      	strb	r2, [r3, #2]
	 	right_distance.right=Data/1000;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4a40      	ldr	r2, [pc, #256]	; (80021fc <HAL_UART_RxCpltCallback+0x1e8>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002108:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_UART_RxCpltCallback+0x1ec>)
 800210a:	edc3 7a01 	vstr	s15, [r3, #4]
	 	osSemaphoreRelease(gomile6SemHandle);
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_UART_RxCpltCallback+0x1f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f006 fb34 	bl	8008780 <osSemaphoreRelease>
  }
 8002118:	e058      	b.n	80021cc <HAL_UART_RxCpltCallback+0x1b8>
  	else if (huart->Instance==UART5){
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <HAL_UART_RxCpltCallback+0x1f4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d153      	bne.n	80021cc <HAL_UART_RxCpltCallback+0x1b8>
  			uint32_t Data=0x00000000;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  			Data=Data | (((uint32_t) (Rx_Buf_Front[0]))<<16);
 8002128:	4b38      	ldr	r3, [pc, #224]	; (800220c <HAL_UART_RxCpltCallback+0x1f8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	041b      	lsls	r3, r3, #16
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  			Data=Data | (((uint32_t) (Rx_Buf_Front[1]))<<8);
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_UART_RxCpltCallback+0x1f8>)
 8002138:	785b      	ldrb	r3, [r3, #1]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  			Data=Data |((uint32_t) (Rx_Buf_Front[2]));
 8002144:	4b31      	ldr	r3, [pc, #196]	; (800220c <HAL_UART_RxCpltCallback+0x1f8>)
 8002146:	789b      	ldrb	r3, [r3, #2]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  			front_distance.front=Data/1000;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a29      	ldr	r2, [pc, #164]	; (80021fc <HAL_UART_RxCpltCallback+0x1e8>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_UART_RxCpltCallback+0x1fc>)
 8002166:	edc3 7a00 	vstr	s15, [r3]
  			Rx_Buf_Front[0]=0;
 800216a:	4b28      	ldr	r3, [pc, #160]	; (800220c <HAL_UART_RxCpltCallback+0x1f8>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
  			Rx_Buf_Front[1]=0;
 8002170:	4b26      	ldr	r3, [pc, #152]	; (800220c <HAL_UART_RxCpltCallback+0x1f8>)
 8002172:	2200      	movs	r2, #0
 8002174:	705a      	strb	r2, [r3, #1]
  			Rx_Buf_Front[2]=0;
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_UART_RxCpltCallback+0x1f8>)
 8002178:	2200      	movs	r2, #0
 800217a:	709a      	strb	r2, [r3, #2]
  		 	front_distance.front=Data/1000;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_UART_RxCpltCallback+0x1e8>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_UART_RxCpltCallback+0x1fc>)
 8002190:	edc3 7a00 	vstr	s15, [r3]
  		 	if(front_distance.front<250){
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_UART_RxCpltCallback+0x1fc>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002214 <HAL_UART_RxCpltCallback+0x200>
 800219e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	d505      	bpl.n	80021b4 <HAL_UART_RxCpltCallback+0x1a0>
  	  		 	osSemaphoreRelease(UltraFrontSemHandle);
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_UART_RxCpltCallback+0x204>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f006 fae7 	bl	8008780 <osSemaphoreRelease>
  }
 80021b2:	e00b      	b.n	80021cc <HAL_UART_RxCpltCallback+0x1b8>
  		 		HAL_UART_Receive_IT(&huart5,(uint8_t*) &Rx_Buf_Front,3);
 80021b4:	2203      	movs	r2, #3
 80021b6:	4915      	ldr	r1, [pc, #84]	; (800220c <HAL_UART_RxCpltCallback+0x1f8>)
 80021b8:	4818      	ldr	r0, [pc, #96]	; (800221c <HAL_UART_RxCpltCallback+0x208>)
 80021ba:	f005 fc54 	bl	8007a66 <HAL_UART_Receive_IT>
  		 		HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,0xFFFF);
 80021be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c2:	2201      	movs	r2, #1
 80021c4:	4916      	ldr	r1, [pc, #88]	; (8002220 <HAL_UART_RxCpltCallback+0x20c>)
 80021c6:	4815      	ldr	r0, [pc, #84]	; (800221c <HAL_UART_RxCpltCallback+0x208>)
 80021c8:	f005 fb19 	bl	80077fe <HAL_UART_Transmit>
  }
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40004400 	.word	0x40004400
 80021d8:	20000296 	.word	0x20000296
 80021dc:	20000294 	.word	0x20000294
 80021e0:	40021400 	.word	0x40021400
 80021e4:	20004124 	.word	0x20004124
 80021e8:	2000423c 	.word	0x2000423c
 80021ec:	200002c8 	.word	0x200002c8
 80021f0:	200042d0 	.word	0x200042d0
 80021f4:	40004c00 	.word	0x40004c00
 80021f8:	20000298 	.word	0x20000298
 80021fc:	10624dd3 	.word	0x10624dd3
 8002200:	200002b4 	.word	0x200002b4
 8002204:	20004040 	.word	0x20004040
 8002208:	40005000 	.word	0x40005000
 800220c:	2000029c 	.word	0x2000029c
 8002210:	200002bc 	.word	0x200002bc
 8002214:	437a0000 	.word	0x437a0000
 8002218:	20004128 	.word	0x20004128
 800221c:	20004180 	.word	0x20004180
 8002220:	2000000c 	.word	0x2000000c

08002224 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a16      	ldr	r2, [pc, #88]	; (800228c <HAL_UART_ErrorCallback+0x68>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d110      	bne.n	8002258 <HAL_UART_ErrorCallback+0x34>
	{
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_UART_ErrorCallback+0x6c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_UART_ErrorCallback+0x6c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 800224c:	2202      	movs	r2, #2
 800224e:	4911      	ldr	r1, [pc, #68]	; (8002294 <HAL_UART_ErrorCallback+0x70>)
 8002250:	480f      	ldr	r0, [pc, #60]	; (8002290 <HAL_UART_ErrorCallback+0x6c>)
 8002252:	f005 fc08 	bl	8007a66 <HAL_UART_Receive_IT>
	else if (huart->Instance==UART4)
	{
		__HAL_UART_CLEAR_OREFLAG(&huart4);
		HAL_UART_Receive_IT(&huart4,(uint8_t*) &Rx_Buf,3);
	}
}
 8002256:	e014      	b.n	8002282 <HAL_UART_ErrorCallback+0x5e>
	else if (huart->Instance==UART4)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_UART_ErrorCallback+0x74>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10f      	bne.n	8002282 <HAL_UART_ErrorCallback+0x5e>
		__HAL_UART_CLEAR_OREFLAG(&huart4);
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_UART_ErrorCallback+0x78>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_UART_ErrorCallback+0x78>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
		HAL_UART_Receive_IT(&huart4,(uint8_t*) &Rx_Buf,3);
 8002278:	2203      	movs	r2, #3
 800227a:	4906      	ldr	r1, [pc, #24]	; (8002294 <HAL_UART_ErrorCallback+0x70>)
 800227c:	4807      	ldr	r0, [pc, #28]	; (800229c <HAL_UART_ErrorCallback+0x78>)
 800227e:	f005 fbf2 	bl	8007a66 <HAL_UART_Receive_IT>
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40004400 	.word	0x40004400
 8002290:	200042d0 	.word	0x200042d0
 8002294:	20000294 	.word	0x20000294
 8002298:	40004c00 	.word	0x40004c00
 800229c:	20004244 	.word	0x20004244

080022a0 <color_judge>:

void color_judge(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
	finalcolor=blue>pink? 1:2;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <color_judge+0x64>)
 80022a6:	881a      	ldrh	r2, [r3, #0]
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <color_judge+0x68>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d901      	bls.n	80022b4 <color_judge+0x14>
 80022b0:	2201      	movs	r2, #1
 80022b2:	e000      	b.n	80022b6 <color_judge+0x16>
 80022b4:	2202      	movs	r2, #2
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <color_judge+0x6c>)
 80022b8:	701a      	strb	r2, [r3, #0]
	if(finalcolor==1)
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <color_judge+0x6c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10b      	bne.n	80022da <color_judge+0x3a>
	{
	    finalcolor=blue>yellow? 1:3;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <color_judge+0x64>)
 80022c4:	881a      	ldrh	r2, [r3, #0]
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <color_judge+0x70>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d901      	bls.n	80022d2 <color_judge+0x32>
 80022ce:	2201      	movs	r2, #1
 80022d0:	e000      	b.n	80022d4 <color_judge+0x34>
 80022d2:	2203      	movs	r2, #3
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <color_judge+0x6c>)
 80022d6:	701a      	strb	r2, [r3, #0]
	else if(finalcolor==2)
	{
		finalcolor=pink>yellow? 2:3;
	}

}
 80022d8:	e00e      	b.n	80022f8 <color_judge+0x58>
	else if(finalcolor==2)
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <color_judge+0x6c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d10a      	bne.n	80022f8 <color_judge+0x58>
		finalcolor=pink>yellow? 2:3;
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <color_judge+0x68>)
 80022e4:	881a      	ldrh	r2, [r3, #0]
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <color_judge+0x70>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d901      	bls.n	80022f2 <color_judge+0x52>
 80022ee:	2202      	movs	r2, #2
 80022f0:	e000      	b.n	80022f4 <color_judge+0x54>
 80022f2:	2203      	movs	r2, #3
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <color_judge+0x6c>)
 80022f6:	701a      	strb	r2, [r3, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	200002d8 	.word	0x200002d8
 8002308:	200002da 	.word	0x200002da
 800230c:	20004090 	.word	0x20004090
 8002310:	200002dc 	.word	0x200002dc

08002314 <PWM_SET_LEFT>:

void PWM_SET_LEFT(int32_t duty)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	if ( duty < 0 )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	da11      	bge.n	8002346 <PWM_SET_LEFT+0x32>
		{
		if (duty <= -2000)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002328:	dc02      	bgt.n	8002330 <PWM_SET_LEFT+0x1c>
			duty = 1;
 800232a:	2301      	movs	r3, #1
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	e003      	b.n	8002338 <PWM_SET_LEFT+0x24>
		else
			duty = 2000 + duty;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002336:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800233e:	480f      	ldr	r0, [pc, #60]	; (800237c <PWM_SET_LEFT+0x68>)
 8002340:	f003 f85e 	bl	8005400 <HAL_GPIO_WritePin>
 8002344:	e00a      	b.n	800235c <PWM_SET_LEFT+0x48>
		}
	else
		{
			if (duty == 0)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <PWM_SET_LEFT+0x3c>
				duty = 1;
 800234c:	2301      	movs	r3, #1
 800234e:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002356:	4809      	ldr	r0, [pc, #36]	; (800237c <PWM_SET_LEFT+0x68>)
 8002358:	f003 f852 	bl	8005400 <HAL_GPIO_WritePin>
		}
	if (duty > 2000)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002362:	dd02      	ble.n	800236a <PWM_SET_LEFT+0x56>
		duty = 2000;
 8002364:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002368:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,duty);
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <PWM_SET_LEFT+0x6c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40020000 	.word	0x40020000
 8002380:	20004134 	.word	0x20004134
 8002384:	00000000 	.word	0x00000000

08002388 <PWM_SET_RIGHT>:

void PWM_SET_RIGHT(int32_t duty)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	duty=duty*PWM_Bias;
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7fe f86f 	bl	8000474 <__aeabi_i2d>
 8002396:	a329      	add	r3, pc, #164	; (adr r3, 800243c <PWM_SET_RIGHT+0xb4>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe f8d4 	bl	8000548 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7fe fae0 	bl	800096c <__aeabi_d2iz>
 80023ac:	4603      	mov	r3, r0
 80023ae:	607b      	str	r3, [r7, #4]
	if ( duty < 0 )
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da1d      	bge.n	80023f2 <PWM_SET_RIGHT+0x6a>
		{
		if (duty <= -2000*PWM_Bias)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <PWM_SET_RIGHT+0xa8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	da02      	bge.n	80023c4 <PWM_SET_RIGHT+0x3c>
			duty = 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	e00f      	b.n	80023e4 <PWM_SET_RIGHT+0x5c>
		else
			duty = 2000*PWM_Bias + duty;
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7fe f855 	bl	8000474 <__aeabi_i2d>
 80023ca:	a317      	add	r3, pc, #92	; (adr r3, 8002428 <PWM_SET_RIGHT+0xa0>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fd ff04 	bl	80001dc <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f7fe fac6 	bl	800096c <__aeabi_d2iz>
 80023e0:	4603      	mov	r3, r0
 80023e2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ea:	4812      	ldr	r0, [pc, #72]	; (8002434 <PWM_SET_RIGHT+0xac>)
 80023ec:	f003 f808 	bl	8005400 <HAL_GPIO_WritePin>
 80023f0:	e00a      	b.n	8002408 <PWM_SET_RIGHT+0x80>
		}
	else
		{
			if (duty == 0)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <PWM_SET_RIGHT+0x74>
				duty = 1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002402:	480c      	ldr	r0, [pc, #48]	; (8002434 <PWM_SET_RIGHT+0xac>)
 8002404:	f002 fffc 	bl	8005400 <HAL_GPIO_WritePin>
		}
	if (duty > 2000*PWM_Bias)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f240 724a 	movw	r2, #1866	; 0x74a
 800240e:	4293      	cmp	r3, r2
 8002410:	dd02      	ble.n	8002418 <PWM_SET_RIGHT+0x90>
		duty = 2000*PWM_Bias;
 8002412:	f240 734a 	movw	r3, #1866	; 0x74a
 8002416:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,duty);
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <PWM_SET_RIGHT+0xb0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	cccccccd 	.word	0xcccccccd
 800242c:	409d28cc 	.word	0x409d28cc
 8002430:	fffff8b6 	.word	0xfffff8b6
 8002434:	40020c00 	.word	0x40020c00
 8002438:	20004094 	.word	0x20004094
 800243c:	87fcb924 	.word	0x87fcb924
 8002440:	3feddbf4 	.word	0x3feddbf4

08002444 <PID_Apriltag>:

int PID_Apriltag(float Accept_Error)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	; 0x38
 8002448:	af00      	add	r7, sp, #0
 800244a:	ed87 0a01 	vstr	s0, [r7, #4]

	float PID_target=0;
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	623b      	str	r3, [r7, #32]
	float PID_Error_Last=0;
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
	float PID_Output=0,PID_Input=0;;
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
	float Error = 0, Error_Total=0;
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
	float KP=2, KI=0, KD=0.5;
 8002472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002482:	60fb      	str	r3, [r7, #12]
	int t=0;
 8002484:	2300      	movs	r3, #0
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t Flag=0; //Indicate that if verifying process begin.
 8002488:	2300      	movs	r3, #0
 800248a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Car_Stop();
 800248e:	f7ff f9fb 	bl	8001888 <Car_Stop>
 	osSemaphoreWait(ApriltagSemHandle, 1000);
 8002492:	4b78      	ldr	r3, [pc, #480]	; (8002674 <PID_Apriltag+0x230>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800249a:	4618      	mov	r0, r3
 800249c:	f006 f922 	bl	80086e4 <osSemaphoreWait>
  for(;;)
  {
	  	 osSemaphoreWait(CameraUARTSemHandle, 0);
 80024a0:	4b75      	ldr	r3, [pc, #468]	; (8002678 <PID_Apriltag+0x234>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f006 f91c 	bl	80086e4 <osSemaphoreWait>
	  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 80024ac:	4b72      	ldr	r3, [pc, #456]	; (8002678 <PID_Apriltag+0x234>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	4618      	mov	r0, r3
 80024b6:	f006 f915 	bl	80086e4 <osSemaphoreWait>
	  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 80024ba:	4b70      	ldr	r3, [pc, #448]	; (800267c <PID_Apriltag+0x238>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024c4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	edc7 7a07 	vstr	s15, [r7, #28]
	  	 Error=PID_target - PID_Input;
 80024d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80024d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e0:	edc7 7a06 	vstr	s15, [r7, #24]
	  	 if(( (Error > -Accept_Error) && (Error < Accept_Error) ) && Flag == 0)
 80024e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e8:	eef1 7a67 	vneg.f32	s15, s15
 80024ec:	ed97 7a06 	vldr	s14, [r7, #24]
 80024f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f8:	dd17      	ble.n	800252a <PID_Apriltag+0xe6>
 80024fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80024fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d50e      	bpl.n	800252a <PID_Apriltag+0xe6>
 800250c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <PID_Apriltag+0xe6>
	  	 {
	  		 t++;
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	3301      	adds	r3, #1
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
	  		if(t>2)
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	2b02      	cmp	r3, #2
 800251e:	dd04      	ble.n	800252a <PID_Apriltag+0xe6>
	  		{
	  			Flag = 1;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 8002526:	2300      	movs	r3, #0
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
	  		}
	  	 }
	  	 if(Flag)
 800252a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800252e:	2b00      	cmp	r3, #0
 8002530:	d026      	beq.n	8002580 <PID_Apriltag+0x13c>
	  	 {
	  		if(t>3)
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	2b03      	cmp	r3, #3
 8002536:	dd06      	ble.n	8002546 <PID_Apriltag+0x102>
	  		{
	  			Flag=0;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 800253e:	2300      	movs	r3, #0
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
	  			return 0;
 8002542:	2300      	movs	r3, #0
 8002544:	e092      	b.n	800266c <PID_Apriltag+0x228>
	  		}
	  		else if((Error > -Accept_Error) && (Error < Accept_Error))
 8002546:	edd7 7a01 	vldr	s15, [r7, #4]
 800254a:	eef1 7a67 	vneg.f32	s15, s15
 800254e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	dd0c      	ble.n	8002576 <PID_Apriltag+0x132>
 800255c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002560:	edd7 7a01 	vldr	s15, [r7, #4]
 8002564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	d503      	bpl.n	8002576 <PID_Apriltag+0x132>
	  		{
	  			t++;
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	3301      	adds	r3, #1
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
 8002574:	e004      	b.n	8002580 <PID_Apriltag+0x13c>
	  		}
	  		else
	  		{
	  			Flag=0;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  			t=0;
 800257c:	2300      	movs	r3, #0
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
	  		}
	  	 }
	  	 Error_Total=Error_Total+KI*Error;
 8002580:	ed97 7a04 	vldr	s14, [r7, #16]
 8002584:	edd7 7a06 	vldr	s15, [r7, #24]
 8002588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002594:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	     PID_Output = KP * Error  +
 8002598:	ed97 7a05 	vldr	s14, [r7, #20]
 800259c:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a0:	ee27 7a27 	vmul.f32	s14, s14, s15
	 				  KD * (Error - PID_Error_Last ) +
 80025a4:	edd7 6a06 	vldr	s13, [r7, #24]
 80025a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	     PID_Output = KP * Error  +
 80025b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025bc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80025c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
					  Error_Total;
	     PID_Error_Last = Error;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34
	     if(PID_Output < 0)
 80025cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	d513      	bpl.n	8002602 <PID_Apriltag+0x1be>
	     {
	    	 PID_Output-=PWM_Lowest;
 80025da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025de:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002680 <PID_Apriltag+0x23c>
 80025e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    	 if(-PID_Output > PWM_Higest)
 80025ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025ee:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002684 <PID_Apriltag+0x240>
 80025f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fa:	d520      	bpl.n	800263e <PID_Apriltag+0x1fa>
	    	 	PID_Output=-PWM_Higest;
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <PID_Apriltag+0x244>)
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002600:	e01d      	b.n	800263e <PID_Apriltag+0x1fa>
	     }

	     else if(PID_Output > 0)
 8002602:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	dd13      	ble.n	8002638 <PID_Apriltag+0x1f4>
	     {
	    	 PID_Output+=PWM_Lowest;
 8002610:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002614:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002680 <PID_Apriltag+0x23c>
 8002618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800261c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    	 if(-PID_Output > PWM_Higest)
 8002620:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002624:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002684 <PID_Apriltag+0x240>
 8002628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	d505      	bpl.n	800263e <PID_Apriltag+0x1fa>
	    	 	PID_Output=-PWM_Higest;
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <PID_Apriltag+0x244>)
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
 8002636:	e002      	b.n	800263e <PID_Apriltag+0x1fa>
	     }
	     else
	    	PID_Output=0;
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
	    	 taskENTER_CRITICAL();
 800263e:	f008 f9b9 	bl	800a9b4 <vPortEnterCritical>
	    	 PWM_SET_RIGHT ((int32_t) (-PID_Output));
 8002642:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002646:	eef1 7a67 	vneg.f32	s15, s15
 800264a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800264e:	ee17 0a90 	vmov	r0, s15
 8002652:	f7ff fe99 	bl	8002388 <PWM_SET_RIGHT>
	    	 PWM_SET_LEFT  ((int32_t)   PID_Output );
 8002656:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800265a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800265e:	ee17 0a90 	vmov	r0, s15
 8002662:	f7ff fe57 	bl	8002314 <PWM_SET_LEFT>
	    	 taskEXIT_CRITICAL();
 8002666:	f008 f9d5 	bl	800aa14 <vPortExitCritical>
	  	 osSemaphoreWait(CameraUARTSemHandle, 0);
 800266a:	e719      	b.n	80024a0 <PID_Apriltag+0x5c>
	     }
	     delay(2);

}
 800266c:	4618      	mov	r0, r3
 800266e:	3738      	adds	r7, #56	; 0x38
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	2000423c 	.word	0x2000423c
 8002678:	20004124 	.word	0x20004124
 800267c:	20000296 	.word	0x20000296
 8002680:	43fa0000 	.word	0x43fa0000
 8002684:	c4af0000 	.word	0xc4af0000
 8002688:	c4af0000 	.word	0xc4af0000

0800268c <Apriltag_Verify>:

int Apriltag_Verify(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
	int sem_count=0;
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
	for(int i=0;i<10;i++)
 8002696:	2300      	movs	r3, #0
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	e00f      	b.n	80026bc <Apriltag_Verify+0x30>
	{
		if(osSemaphoreWait(ApriltagSemHandle, 500)==0)
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <Apriltag_Verify+0x4c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026a4:	4618      	mov	r0, r3
 80026a6:	f006 f81d 	bl	80086e4 <osSemaphoreWait>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <Apriltag_Verify+0x2a>
			sem_count++;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3301      	adds	r3, #1
 80026b4:	607b      	str	r3, [r7, #4]
	for(int i=0;i<10;i++)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b09      	cmp	r3, #9
 80026c0:	ddec      	ble.n	800269c <Apriltag_Verify+0x10>
	}
	if(sem_count>8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	dd01      	ble.n	80026cc <Apriltag_Verify+0x40>
		return 1;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <Apriltag_Verify+0x42>
	else
		return 0;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000423c 	.word	0x2000423c

080026dc <stepping>:

void stepping(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
     float Ultra_Input=0, Ultra_Input_last=0;
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
     float error=0;
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
     int32_t pulse_increment=50;
 80026f4:	2332      	movs	r3, #50	; 0x32
 80026f6:	617b      	str	r3, [r7, #20]
     //float pulse_increment_float=0;
     float Kp=15;
 80026f8:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <stepping+0x154>)
 80026fa:	613b      	str	r3, [r7, #16]
     float PWM=0, pwm_left, pwm_right;
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
     vTaskResume(MileageHandle);
 8002702:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <stepping+0x158>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f007 f98a 	bl	8009a20 <vTaskResume>
//	 int32_t pwm_right=0;
//   int32_t pwm_left=0;

     for(int i=0;;i++)
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
     {
    	  if(distance_flag)
 8002710:	4b49      	ldr	r3, [pc, #292]	; (8002838 <stepping+0x15c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 8086 	bne.w	8002826 <stepping+0x14a>
    	  {
    		  return;
    	  }
		  critical_pulses=0;
 800271a:	4b48      	ldr	r3, [pc, #288]	; (800283c <stepping+0x160>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
		  vTaskResume(MileageHandle);
 8002720:	4b44      	ldr	r3, [pc, #272]	; (8002834 <stepping+0x158>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f007 f97b 	bl	8009a20 <vTaskResume>
		  //osSemaphoreWait(MileageSemHandle, osWaitForever);
		  critical_pulses=pulse_increment+number_of_pulses;
 800272a:	4b45      	ldr	r3, [pc, #276]	; (8002840 <stepping+0x164>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	4413      	add	r3, r2
 8002732:	4a42      	ldr	r2, [pc, #264]	; (800283c <stepping+0x160>)
 8002734:	6013      	str	r3, [r2, #0]
	  	  vTaskSuspend(PIDCameraHandle);
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <stepping+0x168>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f007 f8ac 	bl	8009898 <vTaskSuspend>
	  	  //delay(200);
	  	  //PID_Straight_Reset_Flag=0;
	      //osSemaphoreWait(MileageSemHandle, osWaitForever);
	      //PID_Straight_Reset_Flag=1;
	      //vTaskSuspend(GoStraightHandle);
	  	  osSemaphoreRelease(MileageSemHandle);
 8002740:	4b41      	ldr	r3, [pc, #260]	; (8002848 <stepping+0x16c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f006 f81b 	bl	8008780 <osSemaphoreRelease>
	      osSemaphoreWait(MileageSemHandle, 0);
 800274a:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <stepping+0x16c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f005 ffc7 	bl	80086e4 <osSemaphoreWait>
	      taskENTER_CRITICAL();
 8002756:	f008 f92d 	bl	800a9b4 <vPortEnterCritical>
	      PWM_SET_LEFT(1000);
 800275a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800275e:	f7ff fdd9 	bl	8002314 <PWM_SET_LEFT>
	  	  PWM_SET_RIGHT(1000);
 8002762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002766:	f7ff fe0f 	bl	8002388 <PWM_SET_RIGHT>
	      taskEXIT_CRITICAL();
 800276a:	f008 f953 	bl	800aa14 <vPortExitCritical>
	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 800276e:	4b36      	ldr	r3, [pc, #216]	; (8002848 <stepping+0x16c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f04f 31ff 	mov.w	r1, #4294967295
 8002776:	4618      	mov	r0, r3
 8002778:	f005 ffb4 	bl	80086e4 <osSemaphoreWait>
	  	  Car_Stop();
 800277c:	f7ff f884 	bl	8001888 <Car_Stop>
	  	  delay(100);
 8002780:	2064      	movs	r0, #100	; 0x64
 8002782:	f7ff f88f 	bl	80018a4 <delay>
	  	  vTaskSuspend(MileageHandle);
 8002786:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <stepping+0x158>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f007 f884 	bl	8009898 <vTaskSuspend>
	     Ultra_Input = Ultrasonic_Feedback_right();
 8002790:	f7ff fc12 	bl	8001fb8 <Ultrasonic_Feedback_right>
 8002794:	ed87 0a07 	vstr	s0, [r7, #28]
	     error = Ultra_Input - Ultra_Input_last;
 8002798:	ed97 7a07 	vldr	s14, [r7, #28]
 800279c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a4:	edc7 7a06 	vstr	s15, [r7, #24]
	     Ultra_Input_last = Ultra_Input;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
	     if(i==0)
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d034      	beq.n	800281c <stepping+0x140>
	     }
	     else
	     {
//         if(error>0)
//	     {
	    	 PWM=Kp*error;
 80027b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80027ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027be:	edc7 7a03 	vstr	s15, [r7, #12]
	    	 PWM = PWM > 250 ? 250 : PWM;
 80027c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80027c6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800284c <stepping+0x170>
 80027ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d2:	dd01      	ble.n	80027d8 <stepping+0xfc>
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <stepping+0x174>)
 80027d6:	e000      	b.n	80027da <stepping+0xfe>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	60fb      	str	r3, [r7, #12]
	    	 pwm_right = -PWM;
 80027dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80027e0:	eef1 7a67 	vneg.f32	s15, s15
 80027e4:	edc7 7a02 	vstr	s15, [r7, #8]
	    	 pwm_left = PWM;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	607b      	str	r3, [r7, #4]
			 taskENTER_CRITICAL();
 80027ec:	f008 f8e2 	bl	800a9b4 <vPortEnterCritical>
	         PWM_SET_RIGHT (pwm_right);
 80027f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f8:	ee17 0a90 	vmov	r0, s15
 80027fc:	f7ff fdc4 	bl	8002388 <PWM_SET_RIGHT>
	         PWM_SET_LEFT(pwm_left);
 8002800:	edd7 7a01 	vldr	s15, [r7, #4]
 8002804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002808:	ee17 0a90 	vmov	r0, s15
 800280c:	f7ff fd82 	bl	8002314 <PWM_SET_LEFT>
			 taskEXIT_CRITICAL();
 8002810:	f008 f900 	bl	800aa14 <vPortExitCritical>
			 delay(100);
 8002814:	2064      	movs	r0, #100	; 0x64
 8002816:	f7ff f845 	bl	80018a4 <delay>
 800281a:	e000      	b.n	800281e <stepping+0x142>
	    	 continue;
 800281c:	bf00      	nop
     for(int i=0;;i++)
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	3301      	adds	r3, #1
 8002822:	623b      	str	r3, [r7, #32]
    	  if(distance_flag)
 8002824:	e774      	b.n	8002710 <stepping+0x34>
    		  return;
 8002826:	bf00      	nop
	     }
     }
}
 8002828:	3728      	adds	r7, #40	; 0x28
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	41700000 	.word	0x41700000
 8002834:	20004044 	.word	0x20004044
 8002838:	200002c4 	.word	0x200002c4
 800283c:	200002d4 	.word	0x200002d4
 8002840:	200002d0 	.word	0x200002d0
 8002844:	20004120 	.word	0x20004120
 8002848:	2000420c 	.word	0x2000420c
 800284c:	437a0000 	.word	0x437a0000
 8002850:	437a0000 	.word	0x437a0000

08002854 <stepping2>:

void stepping2(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08c      	sub	sp, #48	; 0x30
 8002858:	af00      	add	r7, sp, #0
     float Ultra_Input=0, Ultra_Input_last=0,Ultra_Input_last_last=0;
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	623b      	str	r3, [r7, #32]
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
     float error=0;
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
     float judge=0;
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
     int32_t pulse_increment=50;
 8002878:	2332      	movs	r3, #50	; 0x32
 800287a:	617b      	str	r3, [r7, #20]
     float Kp=15;
 800287c:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <stepping2+0x1a0>)
 800287e:	613b      	str	r3, [r7, #16]
     float PWM=0, pwm_left, pwm_right;
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
     //float pulse_increment_float=0;
     //float Kp=2;
     vTaskResume(MileageHandle);
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <stepping2+0x1a4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f007 f8c8 	bl	8009a20 <vTaskResume>
//	 int32_t pwm_right=0;
//   int32_t pwm_left=0;

     for(int i=0;;i++)
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
     {

		  critical_pulses=0;
 8002894:	4b59      	ldr	r3, [pc, #356]	; (80029fc <stepping2+0x1a8>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
		  vTaskResume(MileageHandle);
 800289a:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <stepping2+0x1a4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f007 f8be 	bl	8009a20 <vTaskResume>
		  //osSemaphoreWait(MileageSemHandle, osWaitForever);
		  critical_pulses=pulse_increment+number_of_pulses;
 80028a4:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <stepping2+0x1ac>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a53      	ldr	r2, [pc, #332]	; (80029fc <stepping2+0x1a8>)
 80028ae:	6013      	str	r3, [r2, #0]
	  	  vTaskSuspend(PIDCameraHandle);
 80028b0:	4b54      	ldr	r3, [pc, #336]	; (8002a04 <stepping2+0x1b0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f006 ffef 	bl	8009898 <vTaskSuspend>
	  	  //delay(200);
	  	  //PID_Straight_Reset_Flag=0;
	      //osSemaphoreWait(MileageSemHandle, osWaitForever);
	      //PID_Straight_Reset_Flag=1;
	      //vTaskSuspend(GoStraightHandle);
	  	  osSemaphoreRelease(MileageSemHandle);
 80028ba:	4b53      	ldr	r3, [pc, #332]	; (8002a08 <stepping2+0x1b4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f005 ff5e 	bl	8008780 <osSemaphoreRelease>
	      osSemaphoreWait(MileageSemHandle, 0);
 80028c4:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <stepping2+0x1b4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f005 ff0a 	bl	80086e4 <osSemaphoreWait>
	      taskENTER_CRITICAL();
 80028d0:	f008 f870 	bl	800a9b4 <vPortEnterCritical>
	      PWM_SET_LEFT(1000);
 80028d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028d8:	f7ff fd1c 	bl	8002314 <PWM_SET_LEFT>
	  	  PWM_SET_RIGHT(1000);
 80028dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028e0:	f7ff fd52 	bl	8002388 <PWM_SET_RIGHT>
	      taskEXIT_CRITICAL();
 80028e4:	f008 f896 	bl	800aa14 <vPortExitCritical>
	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80028e8:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <stepping2+0x1b4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	4618      	mov	r0, r3
 80028f2:	f005 fef7 	bl	80086e4 <osSemaphoreWait>
	  	  Car_Stop();
 80028f6:	f7fe ffc7 	bl	8001888 <Car_Stop>
	  	  delay(100);
 80028fa:	2064      	movs	r0, #100	; 0x64
 80028fc:	f7fe ffd2 	bl	80018a4 <delay>
	  	  vTaskSuspend(MileageHandle);
 8002900:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <stepping2+0x1a4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f006 ffc7 	bl	8009898 <vTaskSuspend>
	     Ultra_Input = Ultrasonic_Feedback_right();
 800290a:	f7ff fb55 	bl	8001fb8 <Ultrasonic_Feedback_right>
 800290e:	ed87 0a08 	vstr	s0, [r7, #32]
	     judge = Ultra_Input<Ultra_Input_last? Ultra_Input:Ultra_Input_last;
 8002912:	ed97 7a08 	vldr	s14, [r7, #32]
 8002916:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800291a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	d501      	bpl.n	8002928 <stepping2+0xd4>
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	e000      	b.n	800292a <stepping2+0xd6>
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	61bb      	str	r3, [r7, #24]
	     judge = judge<Ultra_Input_last_last? judge:Ultra_Input_last_last;
 800292c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002930:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	d501      	bpl.n	8002942 <stepping2+0xee>
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	e000      	b.n	8002944 <stepping2+0xf0>
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	61bb      	str	r3, [r7, #24]
	     if(judge>3000)
 8002946:	edd7 7a06 	vldr	s15, [r7, #24]
 800294a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002a0c <stepping2+0x1b8>
 800294e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002956:	dc48      	bgt.n	80029ea <stepping2+0x196>
	     {
	    	 return;
	     }
	     error = Ultra_Input - Ultra_Input_last;
 8002958:	ed97 7a08 	vldr	s14, [r7, #32]
 800295c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002964:	edc7 7a07 	vstr	s15, [r7, #28]
	     Ultra_Input_last_last = Ultra_Input_last;
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
	     Ultra_Input_last = Ultra_Input;
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
	     if(i==0)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	2b00      	cmp	r3, #0
 8002974:	d034      	beq.n	80029e0 <stepping2+0x18c>
	     {
	    	 continue;
	     }
	     else
	     {
	    	 PWM=Kp*error;
 8002976:	ed97 7a04 	vldr	s14, [r7, #16]
 800297a:	edd7 7a07 	vldr	s15, [r7, #28]
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	edc7 7a03 	vstr	s15, [r7, #12]
	    	 PWM = PWM > 250 ? 250 : PWM;
 8002986:	edd7 7a03 	vldr	s15, [r7, #12]
 800298a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002a10 <stepping2+0x1bc>
 800298e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	dd01      	ble.n	800299c <stepping2+0x148>
 8002998:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <stepping2+0x1c0>)
 800299a:	e000      	b.n	800299e <stepping2+0x14a>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	60fb      	str	r3, [r7, #12]
	    	 pwm_right = -PWM;
 80029a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029a4:	eef1 7a67 	vneg.f32	s15, s15
 80029a8:	edc7 7a02 	vstr	s15, [r7, #8]
	    	 pwm_left = PWM;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	607b      	str	r3, [r7, #4]
			 taskENTER_CRITICAL();
 80029b0:	f008 f800 	bl	800a9b4 <vPortEnterCritical>
	         PWM_SET_RIGHT (pwm_right);
 80029b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029bc:	ee17 0a90 	vmov	r0, s15
 80029c0:	f7ff fce2 	bl	8002388 <PWM_SET_RIGHT>
	         PWM_SET_LEFT(pwm_left);
 80029c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029cc:	ee17 0a90 	vmov	r0, s15
 80029d0:	f7ff fca0 	bl	8002314 <PWM_SET_LEFT>
			 taskEXIT_CRITICAL();
 80029d4:	f008 f81e 	bl	800aa14 <vPortExitCritical>
			 delay(100);
 80029d8:	2064      	movs	r0, #100	; 0x64
 80029da:	f7fe ff63 	bl	80018a4 <delay>
 80029de:	e000      	b.n	80029e2 <stepping2+0x18e>
	    	 continue;
 80029e0:	bf00      	nop
     for(int i=0;;i++)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	3301      	adds	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
		  critical_pulses=0;
 80029e8:	e754      	b.n	8002894 <stepping2+0x40>
	    	 return;
 80029ea:	bf00      	nop
	     }
     }
}
 80029ec:	3730      	adds	r7, #48	; 0x30
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	41700000 	.word	0x41700000
 80029f8:	20004044 	.word	0x20004044
 80029fc:	200002d4 	.word	0x200002d4
 8002a00:	200002d0 	.word	0x200002d0
 8002a04:	20004120 	.word	0x20004120
 8002a08:	2000420c 	.word	0x2000420c
 8002a0c:	453b8000 	.word	0x453b8000
 8002a10:	437a0000 	.word	0x437a0000
 8002a14:	437a0000 	.word	0x437a0000

08002a18 <feeding>:

void feeding(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	e014      	b.n	8002a4e <feeding+0x36>
	{
	   HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	2110      	movs	r1, #16
 8002a28:	480d      	ldr	r0, [pc, #52]	; (8002a60 <feeding+0x48>)
 8002a2a:	f002 fce9 	bl	8005400 <HAL_GPIO_WritePin>
	   delay(500);
 8002a2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a32:	f7fe ff37 	bl	80018a4 <delay>
	   HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2110      	movs	r1, #16
 8002a3a:	4809      	ldr	r0, [pc, #36]	; (8002a60 <feeding+0x48>)
 8002a3c:	f002 fce0 	bl	8005400 <HAL_GPIO_WritePin>
	   delay(1500);
 8002a40:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002a44:	f7fe ff2e 	bl	80018a4 <delay>
	for(int i = 0; i<3; i++)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	dde7      	ble.n	8002a24 <feeding+0xc>
	}
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021400 	.word	0x40021400

08002a64 <State_Transition>:

uint8_t State_Transition(State* current_state)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	State next_state = Unknow;
 8002a6c:	2328      	movs	r3, #40	; 0x28
 8002a6e:	73fb      	strb	r3, [r7, #15]
	switch(state)
 8002a70:	4bbb      	ldr	r3, [pc, #748]	; (8002d60 <State_Transition+0x2fc>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	2b24      	cmp	r3, #36	; 0x24
 8002a78:	f200 819c 	bhi.w	8002db4 <State_Transition+0x350>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <State_Transition+0x20>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002b19 	.word	0x08002b19
 8002a88:	08002b1f 	.word	0x08002b1f
 8002a8c:	08002db5 	.word	0x08002db5
 8002a90:	08002b33 	.word	0x08002b33
 8002a94:	08002b39 	.word	0x08002b39
 8002a98:	08002b3f 	.word	0x08002b3f
 8002a9c:	08002b45 	.word	0x08002b45
 8002aa0:	08002b4b 	.word	0x08002b4b
 8002aa4:	08002b51 	.word	0x08002b51
 8002aa8:	08002b57 	.word	0x08002b57
 8002aac:	08002b5d 	.word	0x08002b5d
 8002ab0:	08002b63 	.word	0x08002b63
 8002ab4:	08002b69 	.word	0x08002b69
 8002ab8:	08002b6f 	.word	0x08002b6f
 8002abc:	08002b75 	.word	0x08002b75
 8002ac0:	08002c65 	.word	0x08002c65
 8002ac4:	08002db5 	.word	0x08002db5
 8002ac8:	08002b7b 	.word	0x08002b7b
 8002acc:	08002bbd 	.word	0x08002bbd
 8002ad0:	08002bd9 	.word	0x08002bd9
 8002ad4:	08002bf5 	.word	0x08002bf5
 8002ad8:	08002c11 	.word	0x08002c11
 8002adc:	08002c2d 	.word	0x08002c2d
 8002ae0:	08002c49 	.word	0x08002c49
 8002ae4:	08002db5 	.word	0x08002db5
 8002ae8:	08002c6b 	.word	0x08002c6b
 8002aec:	08002c71 	.word	0x08002c71
 8002af0:	08002c8d 	.word	0x08002c8d
 8002af4:	08002c93 	.word	0x08002c93
 8002af8:	08002c99 	.word	0x08002c99
 8002afc:	08002db5 	.word	0x08002db5
 8002b00:	08002cd7 	.word	0x08002cd7
 8002b04:	08002cb5 	.word	0x08002cb5
 8002b08:	08002db5 	.word	0x08002db5
 8002b0c:	08002cbb 	.word	0x08002cbb
 8002b10:	08002db5 	.word	0x08002db5
 8002b14:	08002cd1 	.word	0x08002cd1
	{
		case Initial:
					next_state = Go_Mile_8_Until_Apriltag;
 8002b18:	231d      	movs	r3, #29
 8002b1a:	73fb      	strb	r3, [r7, #15]
					break;
 8002b1c:	e14d      	b.n	8002dba <State_Transition+0x356>
		case Line_Search:
					if(distance_flag==0)
 8002b1e:	4b91      	ldr	r3, [pc, #580]	; (8002d64 <State_Transition+0x300>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <State_Transition+0xc8>
						next_state = Line_Search;
 8002b26:	2302      	movs	r3, #2
 8002b28:	73fb      	strb	r3, [r7, #15]
					else
						next_state= TurnRight;
					break;
 8002b2a:	e146      	b.n	8002dba <State_Transition+0x356>
						next_state= TurnRight;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	73fb      	strb	r3, [r7, #15]
					break;
 8002b30:	e143      	b.n	8002dba <State_Transition+0x356>
		/*case TurnRight:
					next_state = Go_Mile_1;
					break;*/
		case TurnRight1_1:
					next_state = Go_Mile_2_1;
 8002b32:	2313      	movs	r3, #19
 8002b34:	73fb      	strb	r3, [r7, #15]
					break;
 8002b36:	e140      	b.n	8002dba <State_Transition+0x356>
		case TurnRight1_2:
					next_state = Go_Mile_2_2;
 8002b38:	2314      	movs	r3, #20
 8002b3a:	73fb      	strb	r3, [r7, #15]
					break;
 8002b3c:	e13d      	b.n	8002dba <State_Transition+0x356>
		case TurnRight1_3:
					next_state = Go_Mile_2_3;
 8002b3e:	2315      	movs	r3, #21
 8002b40:	73fb      	strb	r3, [r7, #15]
					break;
 8002b42:	e13a      	b.n	8002dba <State_Transition+0x356>
		case TurnRight2_1:
					next_state = Go_Mile_3_1;
 8002b44:	2316      	movs	r3, #22
 8002b46:	73fb      	strb	r3, [r7, #15]
					break;
 8002b48:	e137      	b.n	8002dba <State_Transition+0x356>
		case TurnRight2_3:
					next_state = Go_Mile_3_3;
 8002b4a:	2317      	movs	r3, #23
 8002b4c:	73fb      	strb	r3, [r7, #15]
					break;
 8002b4e:	e134      	b.n	8002dba <State_Transition+0x356>
		case TurnRight3_1:
					next_state = Go_Mile_4;
 8002b50:	2318      	movs	r3, #24
 8002b52:	73fb      	strb	r3, [r7, #15]
					break;
 8002b54:	e131      	b.n	8002dba <State_Transition+0x356>
		case TurnRight3_3:
					next_state = Go_Mile_4;
 8002b56:	2318      	movs	r3, #24
 8002b58:	73fb      	strb	r3, [r7, #15]
					break;
 8002b5a:	e12e      	b.n	8002dba <State_Transition+0x356>
		case TurnRight4:
					next_state = GoStraight_Until_Barrier;
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	73fb      	strb	r3, [r7, #15]
					break;
 8002b60:	e12b      	b.n	8002dba <State_Transition+0x356>
		case TurnRight5:
					next_state = Go_Mile_6;
 8002b62:	231a      	movs	r3, #26
 8002b64:	73fb      	strb	r3, [r7, #15]
					break;
 8002b66:	e128      	b.n	8002dba <State_Transition+0x356>
		case TurnRight6:
					next_state = Go_Mile_7;
 8002b68:	231c      	movs	r3, #28
 8002b6a:	73fb      	strb	r3, [r7, #15]
					break;
 8002b6c:	e125      	b.n	8002dba <State_Transition+0x356>
		case TurnRight7:
					next_state = Go_Mile_8_Until_Apriltag;
 8002b6e:	231d      	movs	r3, #29
 8002b70:	73fb      	strb	r3, [r7, #15]
					break;
 8002b72:	e122      	b.n	8002dba <State_Transition+0x356>
		case TurnRight8:
					next_state = Go_Mile_10;
 8002b74:	231f      	movs	r3, #31
 8002b76:	73fb      	strb	r3, [r7, #15]
					break;
 8002b78:	e11f      	b.n	8002dba <State_Transition+0x356>
//					else
//						next_state = TurnRight;
			        //next_state = TurnRight5;
					//break;
		case Go_Mile_1:
					if(*current_state == Mile_Adjust)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d113      	bne.n	8002baa <State_Transition+0x146>
		                switch(finalcolor)
 8002b82:	4b79      	ldr	r3, [pc, #484]	; (8002d68 <State_Transition+0x304>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d00c      	beq.n	8002ba4 <State_Transition+0x140>
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	dc14      	bgt.n	8002bb8 <State_Transition+0x154>
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d002      	beq.n	8002b98 <State_Transition+0x134>
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d003      	beq.n	8002b9e <State_Transition+0x13a>
		                	break;
		                case 3:
		                	next_state = TurnRight1_2;
		                	break;
		                default:
		                	break;
 8002b96:	e00f      	b.n	8002bb8 <State_Transition+0x154>
		                	next_state = TurnRight1_3;
 8002b98:	2306      	movs	r3, #6
 8002b9a:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002b9c:	e00d      	b.n	8002bba <State_Transition+0x156>
		                	next_state = TurnRight1_1;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002ba2:	e00a      	b.n	8002bba <State_Transition+0x156>
		                	next_state = TurnRight1_2;
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002ba8:	e007      	b.n	8002bba <State_Transition+0x156>
		                }


					else
						{
						temp_state = *current_state;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	4b6f      	ldr	r3, [pc, #444]	; (8002d6c <State_Transition+0x308>)
 8002bb0:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	73fb      	strb	r3, [r7, #15]
						}
					break;
 8002bb6:	e100      	b.n	8002dba <State_Transition+0x356>
		                	break;
 8002bb8:	bf00      	nop
					break;
 8002bba:	e0fe      	b.n	8002dba <State_Transition+0x356>
		case Go_Mile_2_1:
					if(*current_state == Mile_Adjust)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d102      	bne.n	8002bca <State_Transition+0x166>
						next_state = TurnRight2_1;
 8002bc4:	2307      	movs	r3, #7
 8002bc6:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002bc8:	e0f7      	b.n	8002dba <State_Transition+0x356>
						temp_state = *current_state;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	4b67      	ldr	r3, [pc, #412]	; (8002d6c <State_Transition+0x308>)
 8002bd0:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	73fb      	strb	r3, [r7, #15]
					break;
 8002bd6:	e0f0      	b.n	8002dba <State_Transition+0x356>
		case Go_Mile_2_2:
					if(*current_state == Mile_Adjust)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d102      	bne.n	8002be6 <State_Transition+0x182>
						next_state = Go_Mile_4;
 8002be0:	2318      	movs	r3, #24
 8002be2:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002be4:	e0e9      	b.n	8002dba <State_Transition+0x356>
						temp_state = *current_state;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	4b60      	ldr	r3, [pc, #384]	; (8002d6c <State_Transition+0x308>)
 8002bec:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	73fb      	strb	r3, [r7, #15]
					break;
 8002bf2:	e0e2      	b.n	8002dba <State_Transition+0x356>
		case Go_Mile_2_3:
					if(*current_state == Mile_Adjust)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d102      	bne.n	8002c02 <State_Transition+0x19e>
						next_state = TurnRight2_3;
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002c00:	e0db      	b.n	8002dba <State_Transition+0x356>
						temp_state = *current_state;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	4b59      	ldr	r3, [pc, #356]	; (8002d6c <State_Transition+0x308>)
 8002c08:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	73fb      	strb	r3, [r7, #15]
					break;
 8002c0e:	e0d4      	b.n	8002dba <State_Transition+0x356>

		case Go_Mile_3_1:
					if(*current_state == Mile_Adjust)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d102      	bne.n	8002c1e <State_Transition+0x1ba>
						next_state = TurnRight3_1;
 8002c18:	2309      	movs	r3, #9
 8002c1a:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002c1c:	e0cd      	b.n	8002dba <State_Transition+0x356>
						temp_state = *current_state;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	4b52      	ldr	r3, [pc, #328]	; (8002d6c <State_Transition+0x308>)
 8002c24:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002c26:	2320      	movs	r3, #32
 8002c28:	73fb      	strb	r3, [r7, #15]
					break;
 8002c2a:	e0c6      	b.n	8002dba <State_Transition+0x356>

		case Go_Mile_3_3:
					if(*current_state == Mile_Adjust)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d102      	bne.n	8002c3a <State_Transition+0x1d6>
						next_state = TurnRight3_3;
 8002c34:	230a      	movs	r3, #10
 8002c36:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002c38:	e0bf      	b.n	8002dba <State_Transition+0x356>
						temp_state = *current_state;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <State_Transition+0x308>)
 8002c40:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002c42:	2320      	movs	r3, #32
 8002c44:	73fb      	strb	r3, [r7, #15]
					break;
 8002c46:	e0b8      	b.n	8002dba <State_Transition+0x356>

		case Go_Mile_4:
					if(*current_state == Mile_Adjust)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d102      	bne.n	8002c56 <State_Transition+0x1f2>
						next_state = TurnRight4;
 8002c50:	230b      	movs	r3, #11
 8002c52:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002c54:	e0b1      	b.n	8002dba <State_Transition+0x356>
						temp_state = *current_state;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <State_Transition+0x308>)
 8002c5c:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	73fb      	strb	r3, [r7, #15]
					break;
 8002c62:	e0aa      	b.n	8002dba <State_Transition+0x356>
		case GoStraight_Until_Barrier:
					//if(*current_state == Mile_Adjust)
						next_state = TurnRight5;
 8002c64:	230c      	movs	r3, #12
 8002c66:	73fb      	strb	r3, [r7, #15]
//					else
//						{
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
					break;
 8002c68:	e0a7      	b.n	8002dba <State_Transition+0x356>
		case Go_Mile_6:
					//if(*current_state == Mile_Adjust)
						next_state = Go_Mile_6_7;
 8002c6a:	231b      	movs	r3, #27
 8002c6c:	73fb      	strb	r3, [r7, #15]
					/*else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}*/
					 break;
 8002c6e:	e0a4      	b.n	8002dba <State_Transition+0x356>
		case Go_Mile_6_7:
					if(*current_state == Mile_Adjust)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d102      	bne.n	8002c7e <State_Transition+0x21a>
						next_state = TurnRight6;
 8002c78:	230d      	movs	r3, #13
 8002c7a:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002c7c:	e09d      	b.n	8002dba <State_Transition+0x356>
						temp_state = *current_state;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	4b3a      	ldr	r3, [pc, #232]	; (8002d6c <State_Transition+0x308>)
 8002c84:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002c86:	2320      	movs	r3, #32
 8002c88:	73fb      	strb	r3, [r7, #15]
					break;
 8002c8a:	e096      	b.n	8002dba <State_Transition+0x356>
		case Go_Mile_7:
//					if(*current_state == Mile_Adjust)
						next_state = TurnRight7;
 8002c8c:	230e      	movs	r3, #14
 8002c8e:	73fb      	strb	r3, [r7, #15]
//					else
//						{
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
					break;
 8002c90:	e093      	b.n	8002dba <State_Transition+0x356>
		case Go_Mile_8_Until_Apriltag:
					next_state=Apriltag_Check;
 8002c92:	2323      	movs	r3, #35	; 0x23
 8002c94:	73fb      	strb	r3, [r7, #15]
					break;
 8002c96:	e090      	b.n	8002dba <State_Transition+0x356>
		case Go_Mile_9:
					if(*current_state == Mile_Adjust)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d102      	bne.n	8002ca6 <State_Transition+0x242>
						next_state = TurnRight8;
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	73fb      	strb	r3, [r7, #15]
					else
						{
						temp_state = *current_state;
						next_state = Mile_Adjust;
						}
					break;
 8002ca4:	e089      	b.n	8002dba <State_Transition+0x356>
						temp_state = *current_state;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <State_Transition+0x308>)
 8002cac:	701a      	strb	r2, [r3, #0]
						next_state = Mile_Adjust;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	73fb      	strb	r3, [r7, #15]
					break;
 8002cb2:	e082      	b.n	8002dba <State_Transition+0x356>
//						temp_state = *current_state;
//						next_state = Mile_Adjust;
//						}
//					break;
		case Apriltag_Adjust1:
					next_state = Feeding;
 8002cb4:	2325      	movs	r3, #37	; 0x25
 8002cb6:	73fb      	strb	r3, [r7, #15]
					break;
 8002cb8:	e07f      	b.n	8002dba <State_Transition+0x356>
		case Apriltag_Check:
					if(Apriltag_Verify())
 8002cba:	f7ff fce7 	bl	800268c <Apriltag_Verify>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <State_Transition+0x266>
						next_state = Apriltag_Adjust1;
 8002cc4:	2321      	movs	r3, #33	; 0x21
 8002cc6:	73fb      	strb	r3, [r7, #15]
					else
						next_state=Go_Mile_8_Until_Apriltag;
					break;
 8002cc8:	e077      	b.n	8002dba <State_Transition+0x356>
						next_state=Go_Mile_8_Until_Apriltag;
 8002cca:	231d      	movs	r3, #29
 8002ccc:	73fb      	strb	r3, [r7, #15]
					break;
 8002cce:	e074      	b.n	8002dba <State_Transition+0x356>
		case Feeding:
					next_state=Go_Mile_9;
 8002cd0:	231e      	movs	r3, #30
 8002cd2:	73fb      	strb	r3, [r7, #15]
					break;
 8002cd4:	e071      	b.n	8002dba <State_Transition+0x356>
		case Mile_Adjust:
					switch (temp_state)
 8002cd6:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <State_Transition+0x308>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	3b10      	subs	r3, #16
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d865      	bhi.n	8002dac <State_Transition+0x348>
 8002ce0:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <State_Transition+0x284>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002d89 	.word	0x08002d89
 8002cec:	08002dad 	.word	0x08002dad
 8002cf0:	08002d29 	.word	0x08002d29
 8002cf4:	08002d55 	.word	0x08002d55
 8002cf8:	08002d5b 	.word	0x08002d5b
 8002cfc:	08002d71 	.word	0x08002d71
 8002d00:	08002d77 	.word	0x08002d77
 8002d04:	08002d7d 	.word	0x08002d7d
 8002d08:	08002d83 	.word	0x08002d83
 8002d0c:	08002dad 	.word	0x08002dad
 8002d10:	08002d8f 	.word	0x08002d8f
 8002d14:	08002d95 	.word	0x08002d95
 8002d18:	08002d9b 	.word	0x08002d9b
 8002d1c:	08002dad 	.word	0x08002dad
 8002d20:	08002da1 	.word	0x08002da1
 8002d24:	08002da7 	.word	0x08002da7
					{
					case Go_Mile_1:
		                switch(finalcolor)
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <State_Transition+0x304>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d00c      	beq.n	8002d4a <State_Transition+0x2e6>
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	dc0d      	bgt.n	8002d50 <State_Transition+0x2ec>
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d002      	beq.n	8002d3e <State_Transition+0x2da>
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d003      	beq.n	8002d44 <State_Transition+0x2e0>
		                	break;
		                case 3:
		                	next_state = TurnRight1_2;
		                	break;
		                default:
		                	break;
 8002d3c:	e008      	b.n	8002d50 <State_Transition+0x2ec>
		                	next_state = TurnRight1_3;
 8002d3e:	2306      	movs	r3, #6
 8002d40:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002d42:	e006      	b.n	8002d52 <State_Transition+0x2ee>
		                	next_state = TurnRight1_1;
 8002d44:	2304      	movs	r3, #4
 8002d46:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002d48:	e003      	b.n	8002d52 <State_Transition+0x2ee>
		                	next_state = TurnRight1_2;
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	73fb      	strb	r3, [r7, #15]
		                	break;
 8002d4e:	e000      	b.n	8002d52 <State_Transition+0x2ee>
		                	break;
 8002d50:	bf00      	nop
		                }
						break;
 8002d52:	e02e      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_2_1:
						next_state = TurnRight2_1;
 8002d54:	2307      	movs	r3, #7
 8002d56:	73fb      	strb	r3, [r7, #15]
						break;
 8002d58:	e02b      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_2_2:
						next_state = Go_Mile_4;
 8002d5a:	2318      	movs	r3, #24
 8002d5c:	73fb      	strb	r3, [r7, #15]
						break;
 8002d5e:	e028      	b.n	8002db2 <State_Transition+0x34e>
 8002d60:	2000417c 	.word	0x2000417c
 8002d64:	200002c4 	.word	0x200002c4
 8002d68:	20004090 	.word	0x20004090
 8002d6c:	20004234 	.word	0x20004234
					case Go_Mile_2_3:
						next_state = TurnRight2_3;
 8002d70:	2308      	movs	r3, #8
 8002d72:	73fb      	strb	r3, [r7, #15]
						break;
 8002d74:	e01d      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_3_1:
						next_state = TurnRight3_1;
 8002d76:	2309      	movs	r3, #9
 8002d78:	73fb      	strb	r3, [r7, #15]
						break;
 8002d7a:	e01a      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_3_3:
						next_state = TurnRight3_3;
 8002d7c:	230a      	movs	r3, #10
 8002d7e:	73fb      	strb	r3, [r7, #15]
						break;
 8002d80:	e017      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_4:
						next_state = TurnRight4;
 8002d82:	230b      	movs	r3, #11
 8002d84:	73fb      	strb	r3, [r7, #15]
						break;
 8002d86:	e014      	b.n	8002db2 <State_Transition+0x34e>
					case GoStraight_Until_Barrier:
						next_state = TurnRight5;
 8002d88:	230c      	movs	r3, #12
 8002d8a:	73fb      	strb	r3, [r7, #15]
						break;
 8002d8c:	e011      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_6:
						next_state = Go_Mile_6_7;
 8002d8e:	231b      	movs	r3, #27
 8002d90:	73fb      	strb	r3, [r7, #15]
						break;
 8002d92:	e00e      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_6_7:
						next_state = TurnRight6;
 8002d94:	230d      	movs	r3, #13
 8002d96:	73fb      	strb	r3, [r7, #15]
						break;
 8002d98:	e00b      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_7:
						next_state = TurnRight7;
 8002d9a:	230e      	movs	r3, #14
 8002d9c:	73fb      	strb	r3, [r7, #15]
						break;
 8002d9e:	e008      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_9:
						next_state = TurnRight8;
 8002da0:	230f      	movs	r3, #15
 8002da2:	73fb      	strb	r3, [r7, #15]
						break;
 8002da4:	e005      	b.n	8002db2 <State_Transition+0x34e>
					case Go_Mile_10:
						next_state = Idle;
 8002da6:	2327      	movs	r3, #39	; 0x27
 8002da8:	73fb      	strb	r3, [r7, #15]
						break;
 8002daa:	e002      	b.n	8002db2 <State_Transition+0x34e>
					default:
						next_state = Initial;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
						break;
 8002db0:	bf00      	nop
					}
					//temp_state = Mile_Adjust;
					break;
 8002db2:	e002      	b.n	8002dba <State_Transition+0x356>
		default:
					next_state = Initial;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
					break;
 8002db8:	bf00      	nop
	}
	if (next_state == *current_state)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d101      	bne.n	8002dc8 <State_Transition+0x364>
		return 1;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e003      	b.n	8002dd0 <State_Transition+0x36c>
	else
	{

		*current_state=next_state;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	701a      	strb	r2, [r3, #0]
		return 0;
 8002dce:	2300      	movs	r3, #0
	}
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <StreamTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StreamTask */
void StreamTask(void const * argument)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t Same_State_Flag=0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
	uint32_t pulse_incremnet=0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
	Car_Initial();
 8002de8:	f7fe fd18 	bl	800181c <Car_Initial>
	delay(1000);
 8002dec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002df0:	f7fe fd58 	bl	80018a4 <delay>
  /* Infinite loop */
  for(;;)
  {

	  delay(50);
 8002df4:	2032      	movs	r0, #50	; 0x32
 8002df6:	f7fe fd55 	bl	80018a4 <delay>
	  //delay(10);
	  //PreviousWakeTime = osKernelSysTick()
	  //osDelayUntil(&PreviousWakeTime = osKernelSysTick(), 500);
	  //HAL_UART_Transmit(&huart5,(uint8_t*) &info,1,1000);

	  Same_State_Flag = State_Transition(&state);
 8002dfa:	48b8      	ldr	r0, [pc, #736]	; (80030dc <StreamTask+0x304>)
 8002dfc:	f7ff fe32 	bl	8002a64 <State_Transition>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
	  if(Same_State_Flag)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f041 8062 	bne.w	8003ed0 <StreamTask+0x10f8>
		  continue;
	  switch(state)
 8002e0c:	4bb3      	ldr	r3, [pc, #716]	; (80030dc <StreamTask+0x304>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	2b26      	cmp	r3, #38	; 0x26
 8002e14:	f201 8059 	bhi.w	8003eca <StreamTask+0x10f2>
 8002e18:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <StreamTask+0x48>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002ebd 	.word	0x08002ebd
 8002e24:	08002ed9 	.word	0x08002ed9
 8002e28:	08002efb 	.word	0x08002efb
 8002e2c:	08002f5b 	.word	0x08002f5b
 8002e30:	08002fbb 	.word	0x08002fbb
 8002e34:	0800301b 	.word	0x0800301b
 8002e38:	0800307b 	.word	0x0800307b
 8002e3c:	0800310d 	.word	0x0800310d
 8002e40:	0800316d 	.word	0x0800316d
 8002e44:	080031cd 	.word	0x080031cd
 8002e48:	0800322d 	.word	0x0800322d
 8002e4c:	0800328d 	.word	0x0800328d
 8002e50:	080032ed 	.word	0x080032ed
 8002e54:	0800334d 	.word	0x0800334d
 8002e58:	080033ad 	.word	0x080033ad
 8002e5c:	08003435 	.word	0x08003435
 8002e60:	0800349b 	.word	0x0800349b
 8002e64:	08003541 	.word	0x08003541
 8002e68:	08003609 	.word	0x08003609
 8002e6c:	080036f1 	.word	0x080036f1
 8002e70:	08003795 	.word	0x08003795
 8002e74:	08003839 	.word	0x08003839
 8002e78:	080038dd 	.word	0x080038dd
 8002e7c:	080039a9 	.word	0x080039a9
 8002e80:	08003a4b 	.word	0x08003a4b
 8002e84:	08003ab5 	.word	0x08003ab5
 8002e88:	08003b01 	.word	0x08003b01
 8002e8c:	08003ba3 	.word	0x08003ba3
 8002e90:	08003c41 	.word	0x08003c41
 8002e94:	08003ce7 	.word	0x08003ce7
 8002e98:	08003d91 	.word	0x08003d91
 8002e9c:	08003e85 	.word	0x08003e85
 8002ea0:	08003e3b 	.word	0x08003e3b
 8002ea4:	08003ecb 	.word	0x08003ecb
 8002ea8:	08003e35 	.word	0x08003e35
 8002eac:	08003ecb 	.word	0x08003ecb
 8002eb0:	08003e7b 	.word	0x08003e7b
 8002eb4:	08003ecb 	.word	0x08003ecb
 8002eb8:	08003ec5 	.word	0x08003ec5
	  {
	  case Initial:
		  	  	  	  	  state= Idle;
 8002ebc:	4b87      	ldr	r3, [pc, #540]	; (80030dc <StreamTask+0x304>)
 8002ebe:	2227      	movs	r2, #39	; 0x27
 8002ec0:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8002ec2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ec6:	f7fe fced 	bl	80018a4 <delay>
		  	  	  	      state= Initial;
 8002eca:	4b84      	ldr	r3, [pc, #528]	; (80030dc <StreamTask+0x304>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  Car_Initial();
 8002ed0:	f7fe fca4 	bl	800181c <Car_Initial>
		  	  	  	  	  break;
 8002ed4:	f000 bffd 	b.w	8003ed2 <StreamTask+0x10fa>
	  case Line_Search:
		  	  	  	  	  state= Idle;
 8002ed8:	4b80      	ldr	r3, [pc, #512]	; (80030dc <StreamTask+0x304>)
 8002eda:	2227      	movs	r2, #39	; 0x27
 8002edc:	701a      	strb	r2, [r3, #0]
		  		  	  	  delay(500);
 8002ede:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ee2:	f7fe fcdf 	bl	80018a4 <delay>
		  		  	  	  state= Line_Search;
 8002ee6:	4b7d      	ldr	r3, [pc, #500]	; (80030dc <StreamTask+0x304>)
 8002ee8:	2202      	movs	r2, #2
 8002eea:	701a      	strb	r2, [r3, #0]
		  	  	  	  	  vTaskResume(PIDCameraHandle);
 8002eec:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <StreamTask+0x308>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f006 fd95 	bl	8009a20 <vTaskResume>
		  	  	  	  	  //vTaskResume(GyroReceiveHandle);
		  	  	  	  	  break;
 8002ef6:	f000 bfec 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 8002efa:	4b7a      	ldr	r3, [pc, #488]	; (80030e4 <StreamTask+0x30c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f006 fcca 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8002f04:	4b78      	ldr	r3, [pc, #480]	; (80030e8 <StreamTask+0x310>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f006 fcc5 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8002f0e:	4b77      	ldr	r3, [pc, #476]	; (80030ec <StreamTask+0x314>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f006 fcc0 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8002f18:	f7fe fcb6 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8002f1c:	2032      	movs	r0, #50	; 0x32
 8002f1e:	f7fe fcc1 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 8002f22:	4b73      	ldr	r3, [pc, #460]	; (80030f0 <StreamTask+0x318>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8002f28:	4b72      	ldr	r3, [pc, #456]	; (80030f4 <StreamTask+0x31c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002f2e:	4b72      	ldr	r3, [pc, #456]	; (80030f8 <StreamTask+0x320>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f006 fd74 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 8002f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f3c:	f7fe fcb2 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(-90,2);
 8002f40:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002f44:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80030fc <StreamTask+0x324>
 8002f48:	f7fe fd24 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8002f4c:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <StreamTask+0x31c>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8002f52:	f7fe fc99 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 8002f56:	f000 bfbc 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight1_1:
						  vTaskSuspend(DistanceCheckHandle);
 8002f5a:	4b62      	ldr	r3, [pc, #392]	; (80030e4 <StreamTask+0x30c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f006 fc9a 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8002f64:	4b60      	ldr	r3, [pc, #384]	; (80030e8 <StreamTask+0x310>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f006 fc95 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	; (80030ec <StreamTask+0x314>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f006 fc90 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8002f78:	f7fe fc86 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8002f7c:	2032      	movs	r0, #50	; 0x32
 8002f7e:	f7fe fc91 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 8002f82:	4b5b      	ldr	r3, [pc, #364]	; (80030f0 <StreamTask+0x318>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8002f88:	4b5a      	ldr	r3, [pc, #360]	; (80030f4 <StreamTask+0x31c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002f8e:	4b5a      	ldr	r3, [pc, #360]	; (80030f8 <StreamTask+0x320>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f006 fd44 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 8002f98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f9c:	f7fe fc82 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(45,2);
 8002fa0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002fa4:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8003100 <StreamTask+0x328>
 8002fa8:	f7fe fcf4 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 8002fac:	4b51      	ldr	r3, [pc, #324]	; (80030f4 <StreamTask+0x31c>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8002fb2:	f7fe fc69 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 8002fb6:	f000 bf8c 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight1_2:
						  vTaskSuspend(DistanceCheckHandle);
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <StreamTask+0x30c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f006 fc6a 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8002fc4:	4b48      	ldr	r3, [pc, #288]	; (80030e8 <StreamTask+0x310>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f006 fc65 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <StreamTask+0x314>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f006 fc60 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8002fd8:	f7fe fc56 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 8002fdc:	2032      	movs	r0, #50	; 0x32
 8002fde:	f7fe fc61 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 8002fe2:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <StreamTask+0x318>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8002fe8:	4b42      	ldr	r3, [pc, #264]	; (80030f4 <StreamTask+0x31c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8002fee:	4b42      	ldr	r3, [pc, #264]	; (80030f8 <StreamTask+0x320>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f006 fd14 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 8002ff8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ffc:	f7fe fc52 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(90,2);
 8003000:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003004:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8003104 <StreamTask+0x32c>
 8003008:	f7fe fcc4 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <StreamTask+0x31c>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003012:	f7fe fc39 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 8003016:	f000 bf5c 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight1_3:
						  vTaskSuspend(DistanceCheckHandle);
 800301a:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <StreamTask+0x30c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f006 fc3a 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <StreamTask+0x310>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f006 fc35 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <StreamTask+0x314>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f006 fc30 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8003038:	f7fe fc26 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 800303c:	2032      	movs	r0, #50	; 0x32
 800303e:	f7fe fc31 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003042:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <StreamTask+0x318>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 8003048:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <StreamTask+0x31c>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <StreamTask+0x320>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f006 fce4 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 8003058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800305c:	f7fe fc22 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(135,2);
 8003060:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003064:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003108 <StreamTask+0x330>
 8003068:	f7fe fc94 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <StreamTask+0x31c>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003072:	f7fe fc09 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 8003076:	f000 bf2c 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight2_1:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <StreamTask+0x30c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f006 fc0a 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003084:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <StreamTask+0x310>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f006 fc05 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <StreamTask+0x314>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f006 fc00 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 8003098:	f7fe fbf6 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 800309c:	2032      	movs	r0, #50	; 0x32
 800309e:	f7fe fc01 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <StreamTask+0x318>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <StreamTask+0x31c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <StreamTask+0x320>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f006 fcb4 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 80030b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030bc:	f7fe fbf2 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(90,2);
 80030c0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80030c4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003104 <StreamTask+0x32c>
 80030c8:	f7fe fc64 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <StreamTask+0x31c>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80030d2:	f7fe fbd9 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 80030d6:	f000 befc 	b.w	8003ed2 <StreamTask+0x10fa>
 80030da:	bf00      	nop
 80030dc:	2000417c 	.word	0x2000417c
 80030e0:	20004120 	.word	0x20004120
 80030e4:	2000412c 	.word	0x2000412c
 80030e8:	20004130 	.word	0x20004130
 80030ec:	20004044 	.word	0x20004044
 80030f0:	200002c4 	.word	0x200002c4
 80030f4:	200002cc 	.word	0x200002cc
 80030f8:	20004314 	.word	0x20004314
 80030fc:	c2b40000 	.word	0xc2b40000
 8003100:	42340000 	.word	0x42340000
 8003104:	42b40000 	.word	0x42b40000
 8003108:	43070000 	.word	0x43070000
	  case TurnRight2_3:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 800310c:	4bbf      	ldr	r3, [pc, #764]	; (800340c <StreamTask+0x634>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f006 fbc1 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003116:	4bbe      	ldr	r3, [pc, #760]	; (8003410 <StreamTask+0x638>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f006 fbbc 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003120:	4bbc      	ldr	r3, [pc, #752]	; (8003414 <StreamTask+0x63c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f006 fbb7 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800312a:	f7fe fbad 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 800312e:	2032      	movs	r0, #50	; 0x32
 8003130:	f7fe fbb8 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003134:	4bb8      	ldr	r3, [pc, #736]	; (8003418 <StreamTask+0x640>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800313a:	4bb8      	ldr	r3, [pc, #736]	; (800341c <StreamTask+0x644>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003140:	4bb7      	ldr	r3, [pc, #732]	; (8003420 <StreamTask+0x648>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f006 fc6b 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 800314a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800314e:	f7fe fba9 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(-90,2);
 8003152:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003156:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8003424 <StreamTask+0x64c>
 800315a:	f7fe fc1b 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 800315e:	4baf      	ldr	r3, [pc, #700]	; (800341c <StreamTask+0x644>)
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003164:	f7fe fb90 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 8003168:	f000 beb3 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight3_1:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 800316c:	4ba7      	ldr	r3, [pc, #668]	; (800340c <StreamTask+0x634>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f006 fb91 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003176:	4ba6      	ldr	r3, [pc, #664]	; (8003410 <StreamTask+0x638>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f006 fb8c 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003180:	4ba4      	ldr	r3, [pc, #656]	; (8003414 <StreamTask+0x63c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f006 fb87 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800318a:	f7fe fb7d 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 800318e:	2032      	movs	r0, #50	; 0x32
 8003190:	f7fe fb88 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003194:	4ba0      	ldr	r3, [pc, #640]	; (8003418 <StreamTask+0x640>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800319a:	4ba0      	ldr	r3, [pc, #640]	; (800341c <StreamTask+0x644>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80031a0:	4b9f      	ldr	r3, [pc, #636]	; (8003420 <StreamTask+0x648>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f006 fc3b 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 80031aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031ae:	f7fe fb79 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(-45,2);
 80031b2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80031b6:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8003428 <StreamTask+0x650>
 80031ba:	f7fe fbeb 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80031be:	4b97      	ldr	r3, [pc, #604]	; (800341c <StreamTask+0x644>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80031c4:	f7fe fb60 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 80031c8:	f000 be83 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight3_3:
	  	  	  	  	  	  vTaskSuspend(DistanceCheckHandle);
 80031cc:	4b8f      	ldr	r3, [pc, #572]	; (800340c <StreamTask+0x634>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f006 fb61 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80031d6:	4b8e      	ldr	r3, [pc, #568]	; (8003410 <StreamTask+0x638>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f006 fb5c 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80031e0:	4b8c      	ldr	r3, [pc, #560]	; (8003414 <StreamTask+0x63c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f006 fb57 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80031ea:	f7fe fb4d 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 80031ee:	2032      	movs	r0, #50	; 0x32
 80031f0:	f7fe fb58 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 80031f4:	4b88      	ldr	r3, [pc, #544]	; (8003418 <StreamTask+0x640>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80031fa:	4b88      	ldr	r3, [pc, #544]	; (800341c <StreamTask+0x644>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003200:	4b87      	ldr	r3, [pc, #540]	; (8003420 <StreamTask+0x648>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f006 fc0b 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 800320a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800320e:	f7fe fb49 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(45,2);
 8003212:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003216:	ed9f 0a85 	vldr	s0, [pc, #532]	; 800342c <StreamTask+0x654>
 800321a:	f7fe fbbb 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 800321e:	4b7f      	ldr	r3, [pc, #508]	; (800341c <StreamTask+0x644>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003224:	f7fe fb30 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 8003228:	f000 be53 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight4:
						  vTaskSuspend(DistanceCheckHandle);
 800322c:	4b77      	ldr	r3, [pc, #476]	; (800340c <StreamTask+0x634>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f006 fb31 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003236:	4b76      	ldr	r3, [pc, #472]	; (8003410 <StreamTask+0x638>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f006 fb2c 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003240:	4b74      	ldr	r3, [pc, #464]	; (8003414 <StreamTask+0x63c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f006 fb27 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800324a:	f7fe fb1d 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 800324e:	2032      	movs	r0, #50	; 0x32
 8003250:	f7fe fb28 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003254:	4b70      	ldr	r3, [pc, #448]	; (8003418 <StreamTask+0x640>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800325a:	4b70      	ldr	r3, [pc, #448]	; (800341c <StreamTask+0x644>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003260:	4b6f      	ldr	r3, [pc, #444]	; (8003420 <StreamTask+0x648>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f006 fbdb 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 800326a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800326e:	f7fe fb19 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(-90,2);
 8003272:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003276:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8003424 <StreamTask+0x64c>
 800327a:	f7fe fb8b 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <StreamTask+0x644>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003284:	f7fe fb00 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 8003288:	f000 be23 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight5:
						  vTaskSuspend(DistanceCheckHandle);
 800328c:	4b5f      	ldr	r3, [pc, #380]	; (800340c <StreamTask+0x634>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f006 fb01 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003296:	4b5e      	ldr	r3, [pc, #376]	; (8003410 <StreamTask+0x638>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f006 fafc 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80032a0:	4b5c      	ldr	r3, [pc, #368]	; (8003414 <StreamTask+0x63c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f006 faf7 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80032aa:	f7fe faed 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 80032ae:	2032      	movs	r0, #50	; 0x32
 80032b0:	f7fe faf8 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 80032b4:	4b58      	ldr	r3, [pc, #352]	; (8003418 <StreamTask+0x640>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80032ba:	4b58      	ldr	r3, [pc, #352]	; (800341c <StreamTask+0x644>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80032c0:	4b57      	ldr	r3, [pc, #348]	; (8003420 <StreamTask+0x648>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f006 fbab 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 80032ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032ce:	f7fe fae9 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(90,2);
 80032d2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80032d6:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8003430 <StreamTask+0x658>
 80032da:	f7fe fb5b 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80032de:	4b4f      	ldr	r3, [pc, #316]	; (800341c <StreamTask+0x644>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80032e4:	f7fe fad0 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 80032e8:	f000 bdf3 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight6:
						  vTaskSuspend(DistanceCheckHandle);
 80032ec:	4b47      	ldr	r3, [pc, #284]	; (800340c <StreamTask+0x634>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f006 fad1 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80032f6:	4b46      	ldr	r3, [pc, #280]	; (8003410 <StreamTask+0x638>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f006 facc 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003300:	4b44      	ldr	r3, [pc, #272]	; (8003414 <StreamTask+0x63c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f006 fac7 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800330a:	f7fe fabd 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 800330e:	2032      	movs	r0, #50	; 0x32
 8003310:	f7fe fac8 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003314:	4b40      	ldr	r3, [pc, #256]	; (8003418 <StreamTask+0x640>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800331a:	4b40      	ldr	r3, [pc, #256]	; (800341c <StreamTask+0x644>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003320:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <StreamTask+0x648>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f006 fb7b 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 800332a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800332e:	f7fe fab9 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(-90,2);
 8003332:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003336:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8003424 <StreamTask+0x64c>
 800333a:	f7fe fb2b 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <StreamTask+0x644>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003344:	f7fe faa0 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 8003348:	f000 bdc3 	b.w	8003ed2 <StreamTask+0x10fa>
	  case TurnRight7:
						  vTaskSuspend(DistanceCheckHandle);
 800334c:	4b2f      	ldr	r3, [pc, #188]	; (800340c <StreamTask+0x634>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f006 faa1 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 8003356:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <StreamTask+0x638>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f006 fa9c 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 8003360:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <StreamTask+0x63c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f006 fa97 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 800336a:	f7fe fa8d 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 800336e:	2032      	movs	r0, #50	; 0x32
 8003370:	f7fe fa98 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <StreamTask+0x640>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <StreamTask+0x644>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 8003380:	4b27      	ldr	r3, [pc, #156]	; (8003420 <StreamTask+0x648>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f006 fb4b 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 800338a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800338e:	f7fe fa89 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(90,2);
 8003392:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003396:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8003430 <StreamTask+0x658>
 800339a:	f7fe fafb 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 800339e:	4b1f      	ldr	r3, [pc, #124]	; (800341c <StreamTask+0x644>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 80033a4:	f7fe fa70 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 80033a8:	f000 bd93 	b.w	8003ed2 <StreamTask+0x10fa>

	  case TurnRight8:
						  vTaskSuspend(DistanceCheckHandle);
 80033ac:	4b17      	ldr	r3, [pc, #92]	; (800340c <StreamTask+0x634>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f006 fa71 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(GoStraightHandle);
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <StreamTask+0x638>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f006 fa6c 	bl	8009898 <vTaskSuspend>
		  		  	  	  vTaskSuspend(MileageHandle);
 80033c0:	4b14      	ldr	r3, [pc, #80]	; (8003414 <StreamTask+0x63c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f006 fa67 	bl	8009898 <vTaskSuspend>
	  	  	  	  	  	  Car_Stop();
 80033ca:	f7fe fa5d 	bl	8001888 <Car_Stop>
	  	  	  	  	  	  delay(50);
 80033ce:	2032      	movs	r0, #50	; 0x32
 80033d0:	f7fe fa68 	bl	80018a4 <delay>
	  	  	  	  	  	  distance_flag=0;
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <StreamTask+0x640>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  gyro_reset_flag=0;
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <StreamTask+0x644>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GyroReceiveHandle);
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <StreamTask+0x648>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f006 fb1b 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(500);
 80033ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033ee:	f7fe fa59 	bl	80018a4 <delay>
		  	  	  	  	  PID_Turning(90,2);
 80033f2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80033f6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003430 <StreamTask+0x658>
 80033fa:	f7fe facb 	bl	8001994 <PID_Turning>
		  	  	  	  	  gyro_reset_flag=1;
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <StreamTask+0x644>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]
		  	  	  	  	  Car_Stop();
 8003404:	f7fe fa40 	bl	8001888 <Car_Stop>
		  		  	  	  break;
 8003408:	f000 bd63 	b.w	8003ed2 <StreamTask+0x10fa>
 800340c:	2000412c 	.word	0x2000412c
 8003410:	20004130 	.word	0x20004130
 8003414:	20004044 	.word	0x20004044
 8003418:	200002c4 	.word	0x200002c4
 800341c:	200002cc 	.word	0x200002cc
 8003420:	20004314 	.word	0x20004314
 8003424:	c2b40000 	.word	0xc2b40000
 8003428:	c2340000 	.word	0xc2340000
 800342c:	42340000 	.word	0x42340000
 8003430:	42b40000 	.word	0x42b40000

	  case GoStraight_Until_Barrier:
		  	  	  	  	  //state= Idle;
		  	  	  	  	  vTaskSuspend(PIDCameraHandle);
 8003434:	4b9e      	ldr	r3, [pc, #632]	; (80036b0 <StreamTask+0x8d8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f006 fa2d 	bl	8009898 <vTaskSuspend>
		  	  	  	  	  vTaskSuspend(GyroReceiveHandle);
 800343e:	4b9d      	ldr	r3, [pc, #628]	; (80036b4 <StreamTask+0x8dc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f006 fa28 	bl	8009898 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003448:	4b9b      	ldr	r3, [pc, #620]	; (80036b8 <StreamTask+0x8e0>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 800344e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003452:	f7fe fa27 	bl	80018a4 <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  critical_distance.front=350;
 8003456:	4b99      	ldr	r3, [pc, #612]	; (80036bc <StreamTask+0x8e4>)
 8003458:	4a99      	ldr	r2, [pc, #612]	; (80036c0 <StreamTask+0x8e8>)
 800345a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 800345c:	4b99      	ldr	r3, [pc, #612]	; (80036c4 <StreamTask+0x8ec>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f006 fadd 	bl	8009a20 <vTaskResume>
		  	  	  	  	  PWM_SET_LEFT(PWM_Mid);
 8003466:	f44f 7048 	mov.w	r0, #800	; 0x320
 800346a:	f7fe ff53 	bl	8002314 <PWM_SET_LEFT>
		  	  	  	  	  PWM_SET_RIGHT(PWM_Mid);
 800346e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003472:	f7fe ff89 	bl	8002388 <PWM_SET_RIGHT>
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 8003476:	4b94      	ldr	r3, [pc, #592]	; (80036c8 <StreamTask+0x8f0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f04f 31ff 	mov.w	r1, #4294967295
 800347e:	4618      	mov	r0, r3
 8003480:	f005 f930 	bl	80086e4 <osSemaphoreWait>
		  	  	  	  	  osSemaphoreWait(CriticalDistanceSemHandle, osWaitForever);
 8003484:	4b90      	ldr	r3, [pc, #576]	; (80036c8 <StreamTask+0x8f0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f04f 31ff 	mov.w	r1, #4294967295
 800348c:	4618      	mov	r0, r3
 800348e:	f005 f929 	bl	80086e4 <osSemaphoreWait>
		  	  	  	  	  Car_Stop();
 8003492:	f7fe f9f9 	bl	8001888 <Car_Stop>
		  	  	  	      //vTaskSuspend(DistanceCheckHandle);
		  	  	  	  	  break;
 8003496:	f000 bd1c 	b.w	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile:
	  					  vTaskSuspend(DistanceCheckHandle);
 800349a:	4b8a      	ldr	r3, [pc, #552]	; (80036c4 <StreamTask+0x8ec>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f006 f9fa 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=33000;//室外
 80034a4:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80034a8:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80034aa:	4b88      	ldr	r3, [pc, #544]	; (80036cc <StreamTask+0x8f4>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 80034b0:	4b80      	ldr	r3, [pc, #512]	; (80036b4 <StreamTask+0x8dc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f006 fab3 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 80034ba:	4b85      	ldr	r3, [pc, #532]	; (80036d0 <StreamTask+0x8f8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 80034c0:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <StreamTask+0x8fc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f006 faab 	bl	8009a20 <vTaskResume>
						  delay(500);
 80034ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034ce:	f7fe f9e9 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 80034d2:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <StreamTask+0x900>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f04f 31ff 	mov.w	r1, #4294967295
 80034da:	4618      	mov	r0, r3
 80034dc:	f005 f902 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 80034e0:	4b7e      	ldr	r3, [pc, #504]	; (80036dc <StreamTask+0x904>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4413      	add	r3, r2
 80034ea:	461a      	mov	r2, r3
 80034ec:	4b78      	ldr	r3, [pc, #480]	; (80036d0 <StreamTask+0x8f8>)
 80034ee:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 80034f0:	4b7b      	ldr	r3, [pc, #492]	; (80036e0 <StreamTask+0x908>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 80034f6:	4b7b      	ldr	r3, [pc, #492]	; (80036e4 <StreamTask+0x90c>)
 80034f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80034fc:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 80034fe:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <StreamTask+0x910>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f006 fa8c 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 8003508:	20c8      	movs	r0, #200	; 0xc8
 800350a:	f7fe f9cb 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 800350e:	4b74      	ldr	r3, [pc, #464]	; (80036e0 <StreamTask+0x908>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003514:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <StreamTask+0x900>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f04f 31ff 	mov.w	r1, #4294967295
 800351c:	4618      	mov	r0, r3
 800351e:	f005 f8e1 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003522:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <StreamTask+0x908>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003528:	4b6f      	ldr	r3, [pc, #444]	; (80036e8 <StreamTask+0x910>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f006 f9b3 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003532:	f7fe f9a9 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003536:	4b65      	ldr	r3, [pc, #404]	; (80036cc <StreamTask+0x8f4>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 800353c:	f000 bcc9 	b.w	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_1:
						  vTaskSuspend(DistanceCheckHandle);
 8003540:	4b60      	ldr	r3, [pc, #384]	; (80036c4 <StreamTask+0x8ec>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f006 f9a7 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=200;//室外
 800354a:	23c8      	movs	r3, #200	; 0xc8
 800354c:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  camera_recieve_IT_flag=1;
 800354e:	4b5a      	ldr	r3, [pc, #360]	; (80036b8 <StreamTask+0x8e0>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]
						  vTaskResume(ColorcheckHandle);
 8003554:	4b65      	ldr	r3, [pc, #404]	; (80036ec <StreamTask+0x914>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f006 fa61 	bl	8009a20 <vTaskResume>
						  gyro_reset_flag=0;
 800355e:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <StreamTask+0x8f4>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003564:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <StreamTask+0x8dc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f006 fa59 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 800356e:	4b58      	ldr	r3, [pc, #352]	; (80036d0 <StreamTask+0x8f8>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003574:	4b57      	ldr	r3, [pc, #348]	; (80036d4 <StreamTask+0x8fc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f006 fa51 	bl	8009a20 <vTaskResume>
						  delay(500);
 800357e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003582:	f7fe f98f 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003586:	4b54      	ldr	r3, [pc, #336]	; (80036d8 <StreamTask+0x900>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f04f 31ff 	mov.w	r1, #4294967295
 800358e:	4618      	mov	r0, r3
 8003590:	f005 f8a8 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003594:	4b51      	ldr	r3, [pc, #324]	; (80036dc <StreamTask+0x904>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4413      	add	r3, r2
 800359e:	461a      	mov	r2, r3
 80035a0:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <StreamTask+0x8f8>)
 80035a2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 80035a4:	4b4e      	ldr	r3, [pc, #312]	; (80036e0 <StreamTask+0x908>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 80035aa:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <StreamTask+0x90c>)
 80035ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80035b0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 80035b2:	4b4d      	ldr	r3, [pc, #308]	; (80036e8 <StreamTask+0x910>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f006 fa32 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 80035bc:	20c8      	movs	r0, #200	; 0xc8
 80035be:	f7fe f971 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 80035c2:	4b47      	ldr	r3, [pc, #284]	; (80036e0 <StreamTask+0x908>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80035c8:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <StreamTask+0x900>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295
 80035d0:	4618      	mov	r0, r3
 80035d2:	f005 f887 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 80035d6:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <StreamTask+0x908>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80035dc:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <StreamTask+0x910>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f006 f959 	bl	8009898 <vTaskSuspend>
		  	  	  	      vTaskSuspend(ColorcheckHandle);
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <StreamTask+0x914>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f006 f954 	bl	8009898 <vTaskSuspend>
		  	  	  	      camera_recieve_IT_flag=0;
 80035f0:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <StreamTask+0x8e0>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
		  	  	  	      color_judge();
 80035f6:	f7fe fe53 	bl	80022a0 <color_judge>
		  	  	  		  Car_Stop();
 80035fa:	f7fe f945 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80035fe:	4b33      	ldr	r3, [pc, #204]	; (80036cc <StreamTask+0x8f4>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003604:	f000 bc65 	b.w	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_2_1:
						  vTaskSuspend(DistanceCheckHandle);
 8003608:	4b2e      	ldr	r3, [pc, #184]	; (80036c4 <StreamTask+0x8ec>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f006 f943 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003612:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003616:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003618:	4b2c      	ldr	r3, [pc, #176]	; (80036cc <StreamTask+0x8f4>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 800361e:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <StreamTask+0x8dc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f006 f9fc 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 8003628:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <StreamTask+0x8f8>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 800362e:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <StreamTask+0x8fc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f006 f9f4 	bl	8009a20 <vTaskResume>
						  delay(500);
 8003638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800363c:	f7fe f932 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <StreamTask+0x900>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f04f 31ff 	mov.w	r1, #4294967295
 8003648:	4618      	mov	r0, r3
 800364a:	f005 f84b 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <StreamTask+0x904>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4413      	add	r3, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <StreamTask+0x8f8>)
 800365c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <StreamTask+0x908>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003664:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <StreamTask+0x90c>)
 8003666:	f44f 7248 	mov.w	r2, #800	; 0x320
 800366a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <StreamTask+0x910>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f006 f9d5 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 8003676:	20c8      	movs	r0, #200	; 0xc8
 8003678:	f7fe f914 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 800367c:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <StreamTask+0x908>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <StreamTask+0x900>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f04f 31ff 	mov.w	r1, #4294967295
 800368a:	4618      	mov	r0, r3
 800368c:	f005 f82a 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <StreamTask+0x908>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <StreamTask+0x910>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f006 f8fc 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 80036a0:	f7fe f8f2 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <StreamTask+0x8f4>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80036aa:	f000 bc12 	b.w	8003ed2 <StreamTask+0x10fa>
 80036ae:	bf00      	nop
 80036b0:	20004120 	.word	0x20004120
 80036b4:	20004314 	.word	0x20004314
 80036b8:	200002c8 	.word	0x200002c8
 80036bc:	200002ac 	.word	0x200002ac
 80036c0:	43af0000 	.word	0x43af0000
 80036c4:	2000412c 	.word	0x2000412c
 80036c8:	2000403c 	.word	0x2000403c
 80036cc:	200002cc 	.word	0x200002cc
 80036d0:	200002d4 	.word	0x200002d4
 80036d4:	20004044 	.word	0x20004044
 80036d8:	2000420c 	.word	0x2000420c
 80036dc:	200002d0 	.word	0x200002d0
 80036e0:	20000008 	.word	0x20000008
 80036e4:	20000000 	.word	0x20000000
 80036e8:	20004130 	.word	0x20004130
 80036ec:	20004230 	.word	0x20004230
	  case Go_Mile_2_2:
						  vTaskSuspend(DistanceCheckHandle);
 80036f0:	4ba3      	ldr	r3, [pc, #652]	; (8003980 <StreamTask+0xba8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f006 f8cf 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 80036fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80036fe:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003700:	4ba0      	ldr	r3, [pc, #640]	; (8003984 <StreamTask+0xbac>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003706:	4ba0      	ldr	r3, [pc, #640]	; (8003988 <StreamTask+0xbb0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f006 f988 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 8003710:	4b9e      	ldr	r3, [pc, #632]	; (800398c <StreamTask+0xbb4>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003716:	4b9e      	ldr	r3, [pc, #632]	; (8003990 <StreamTask+0xbb8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f006 f980 	bl	8009a20 <vTaskResume>
						  delay(500);
 8003720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003724:	f7fe f8be 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003728:	4b9a      	ldr	r3, [pc, #616]	; (8003994 <StreamTask+0xbbc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f04f 31ff 	mov.w	r1, #4294967295
 8003730:	4618      	mov	r0, r3
 8003732:	f004 ffd7 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003736:	4b98      	ldr	r3, [pc, #608]	; (8003998 <StreamTask+0xbc0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4413      	add	r3, r2
 8003740:	461a      	mov	r2, r3
 8003742:	4b92      	ldr	r3, [pc, #584]	; (800398c <StreamTask+0xbb4>)
 8003744:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003746:	4b95      	ldr	r3, [pc, #596]	; (800399c <StreamTask+0xbc4>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 800374c:	4b94      	ldr	r3, [pc, #592]	; (80039a0 <StreamTask+0xbc8>)
 800374e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003752:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003754:	4b93      	ldr	r3, [pc, #588]	; (80039a4 <StreamTask+0xbcc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f006 f961 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 800375e:	20c8      	movs	r0, #200	; 0xc8
 8003760:	f7fe f8a0 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003764:	4b8d      	ldr	r3, [pc, #564]	; (800399c <StreamTask+0xbc4>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 800376a:	4b8a      	ldr	r3, [pc, #552]	; (8003994 <StreamTask+0xbbc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f04f 31ff 	mov.w	r1, #4294967295
 8003772:	4618      	mov	r0, r3
 8003774:	f004 ffb6 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003778:	4b88      	ldr	r3, [pc, #544]	; (800399c <StreamTask+0xbc4>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 800377e:	4b89      	ldr	r3, [pc, #548]	; (80039a4 <StreamTask+0xbcc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f006 f888 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003788:	f7fe f87e 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 800378c:	4b7d      	ldr	r3, [pc, #500]	; (8003984 <StreamTask+0xbac>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003792:	e39e      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_2_3:
						  vTaskSuspend(DistanceCheckHandle);
 8003794:	4b7a      	ldr	r3, [pc, #488]	; (8003980 <StreamTask+0xba8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f006 f87d 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 800379e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80037a2:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80037a4:	4b77      	ldr	r3, [pc, #476]	; (8003984 <StreamTask+0xbac>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 80037aa:	4b77      	ldr	r3, [pc, #476]	; (8003988 <StreamTask+0xbb0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f006 f936 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 80037b4:	4b75      	ldr	r3, [pc, #468]	; (800398c <StreamTask+0xbb4>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 80037ba:	4b75      	ldr	r3, [pc, #468]	; (8003990 <StreamTask+0xbb8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f006 f92e 	bl	8009a20 <vTaskResume>
						  delay(500);
 80037c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037c8:	f7fe f86c 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 80037cc:	4b71      	ldr	r3, [pc, #452]	; (8003994 <StreamTask+0xbbc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f04f 31ff 	mov.w	r1, #4294967295
 80037d4:	4618      	mov	r0, r3
 80037d6:	f004 ff85 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 80037da:	4b6f      	ldr	r3, [pc, #444]	; (8003998 <StreamTask+0xbc0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4413      	add	r3, r2
 80037e4:	461a      	mov	r2, r3
 80037e6:	4b69      	ldr	r3, [pc, #420]	; (800398c <StreamTask+0xbb4>)
 80037e8:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 80037ea:	4b6c      	ldr	r3, [pc, #432]	; (800399c <StreamTask+0xbc4>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 80037f0:	4b6b      	ldr	r3, [pc, #428]	; (80039a0 <StreamTask+0xbc8>)
 80037f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80037f6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <StreamTask+0xbcc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f006 f90f 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 8003802:	20c8      	movs	r0, #200	; 0xc8
 8003804:	f7fe f84e 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003808:	4b64      	ldr	r3, [pc, #400]	; (800399c <StreamTask+0xbc4>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 800380e:	4b61      	ldr	r3, [pc, #388]	; (8003994 <StreamTask+0xbbc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f04f 31ff 	mov.w	r1, #4294967295
 8003816:	4618      	mov	r0, r3
 8003818:	f004 ff64 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 800381c:	4b5f      	ldr	r3, [pc, #380]	; (800399c <StreamTask+0xbc4>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003822:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <StreamTask+0xbcc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f006 f836 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 800382c:	f7fe f82c 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003830:	4b54      	ldr	r3, [pc, #336]	; (8003984 <StreamTask+0xbac>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003836:	e34c      	b.n	8003ed2 <StreamTask+0x10fa>

	  case Go_Mile_3_1:
						  vTaskSuspend(DistanceCheckHandle);
 8003838:	4b51      	ldr	r3, [pc, #324]	; (8003980 <StreamTask+0xba8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f006 f82b 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003842:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003846:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003848:	4b4e      	ldr	r3, [pc, #312]	; (8003984 <StreamTask+0xbac>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 800384e:	4b4e      	ldr	r3, [pc, #312]	; (8003988 <StreamTask+0xbb0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f006 f8e4 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 8003858:	4b4c      	ldr	r3, [pc, #304]	; (800398c <StreamTask+0xbb4>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 800385e:	4b4c      	ldr	r3, [pc, #304]	; (8003990 <StreamTask+0xbb8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f006 f8dc 	bl	8009a20 <vTaskResume>
						  delay(500);
 8003868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800386c:	f7fe f81a 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003870:	4b48      	ldr	r3, [pc, #288]	; (8003994 <StreamTask+0xbbc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f04f 31ff 	mov.w	r1, #4294967295
 8003878:	4618      	mov	r0, r3
 800387a:	f004 ff33 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 800387e:	4b46      	ldr	r3, [pc, #280]	; (8003998 <StreamTask+0xbc0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4413      	add	r3, r2
 8003888:	461a      	mov	r2, r3
 800388a:	4b40      	ldr	r3, [pc, #256]	; (800398c <StreamTask+0xbb4>)
 800388c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 800388e:	4b43      	ldr	r3, [pc, #268]	; (800399c <StreamTask+0xbc4>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003894:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <StreamTask+0xbc8>)
 8003896:	f44f 7248 	mov.w	r2, #800	; 0x320
 800389a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 800389c:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <StreamTask+0xbcc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f006 f8bd 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 80038a6:	20c8      	movs	r0, #200	; 0xc8
 80038a8:	f7fd fffc 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 80038ac:	4b3b      	ldr	r3, [pc, #236]	; (800399c <StreamTask+0xbc4>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <StreamTask+0xbbc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f04f 31ff 	mov.w	r1, #4294967295
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 ff12 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 80038c0:	4b36      	ldr	r3, [pc, #216]	; (800399c <StreamTask+0xbc4>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 80038c6:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <StreamTask+0xbcc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f005 ffe4 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 80038d0:	f7fd ffda 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <StreamTask+0xbac>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 80038da:	e2fa      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_3_3:
						  vTaskSuspend(DistanceCheckHandle);
 80038dc:	4b28      	ldr	r3, [pc, #160]	; (8003980 <StreamTask+0xba8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f005 ffd9 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 80038e6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80038ea:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <StreamTask+0xbac>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 80038f2:	4b25      	ldr	r3, [pc, #148]	; (8003988 <StreamTask+0xbb0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f006 f892 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 80038fc:	4b23      	ldr	r3, [pc, #140]	; (800398c <StreamTask+0xbb4>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003902:	4b23      	ldr	r3, [pc, #140]	; (8003990 <StreamTask+0xbb8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f006 f88a 	bl	8009a20 <vTaskResume>
						  delay(500);
 800390c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003910:	f7fd ffc8 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <StreamTask+0xbbc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f04f 31ff 	mov.w	r1, #4294967295
 800391c:	4618      	mov	r0, r3
 800391e:	f004 fee1 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <StreamTask+0xbc0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4413      	add	r3, r2
 800392c:	461a      	mov	r2, r3
 800392e:	4b17      	ldr	r3, [pc, #92]	; (800398c <StreamTask+0xbb4>)
 8003930:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003932:	4b1a      	ldr	r3, [pc, #104]	; (800399c <StreamTask+0xbc4>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003938:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <StreamTask+0xbc8>)
 800393a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800393e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <StreamTask+0xbcc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f006 f86b 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 800394a:	20c8      	movs	r0, #200	; 0xc8
 800394c:	f7fd ffaa 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <StreamTask+0xbc4>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003956:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <StreamTask+0xbbc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f04f 31ff 	mov.w	r1, #4294967295
 800395e:	4618      	mov	r0, r3
 8003960:	f004 fec0 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003964:	4b0d      	ldr	r3, [pc, #52]	; (800399c <StreamTask+0xbc4>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <StreamTask+0xbcc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f005 ff92 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003974:	f7fd ff88 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <StreamTask+0xbac>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 800397e:	e2a8      	b.n	8003ed2 <StreamTask+0x10fa>
 8003980:	2000412c 	.word	0x2000412c
 8003984:	200002cc 	.word	0x200002cc
 8003988:	20004314 	.word	0x20004314
 800398c:	200002d4 	.word	0x200002d4
 8003990:	20004044 	.word	0x20004044
 8003994:	2000420c 	.word	0x2000420c
 8003998:	200002d0 	.word	0x200002d0
 800399c:	20000008 	.word	0x20000008
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20004130 	.word	0x20004130
	  case Go_Mile_4:
	  					  vTaskSuspend(DistanceCheckHandle);
 80039a8:	4b95      	ldr	r3, [pc, #596]	; (8003c00 <StreamTask+0xe28>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f005 ff73 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=200;//室外
 80039b2:	23c8      	movs	r3, #200	; 0xc8
 80039b4:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 80039b6:	4b93      	ldr	r3, [pc, #588]	; (8003c04 <StreamTask+0xe2c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 80039bc:	4b92      	ldr	r3, [pc, #584]	; (8003c08 <StreamTask+0xe30>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f006 f82d 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 80039c6:	4b91      	ldr	r3, [pc, #580]	; (8003c0c <StreamTask+0xe34>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 80039cc:	4b90      	ldr	r3, [pc, #576]	; (8003c10 <StreamTask+0xe38>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f006 f825 	bl	8009a20 <vTaskResume>
						  delay(500);
 80039d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039da:	f7fd ff63 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 80039de:	4b8d      	ldr	r3, [pc, #564]	; (8003c14 <StreamTask+0xe3c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f04f 31ff 	mov.w	r1, #4294967295
 80039e6:	4618      	mov	r0, r3
 80039e8:	f004 fe7c 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 80039ec:	4b8a      	ldr	r3, [pc, #552]	; (8003c18 <StreamTask+0xe40>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4413      	add	r3, r2
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b84      	ldr	r3, [pc, #528]	; (8003c0c <StreamTask+0xe34>)
 80039fa:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 80039fc:	4b87      	ldr	r3, [pc, #540]	; (8003c1c <StreamTask+0xe44>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003a02:	4b87      	ldr	r3, [pc, #540]	; (8003c20 <StreamTask+0xe48>)
 8003a04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003a08:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003a0a:	4b86      	ldr	r3, [pc, #536]	; (8003c24 <StreamTask+0xe4c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f006 f806 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 8003a14:	20c8      	movs	r0, #200	; 0xc8
 8003a16:	f7fd ff45 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003a1a:	4b80      	ldr	r3, [pc, #512]	; (8003c1c <StreamTask+0xe44>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003a20:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <StreamTask+0xe3c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f04f 31ff 	mov.w	r1, #4294967295
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 fe5b 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003a2e:	4b7b      	ldr	r3, [pc, #492]	; (8003c1c <StreamTask+0xe44>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003a34:	4b7b      	ldr	r3, [pc, #492]	; (8003c24 <StreamTask+0xe4c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f005 ff2d 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003a3e:	f7fd ff23 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003a42:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <StreamTask+0xe2c>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003a48:	e243      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_5:
						  //vTaskSuspend(DistanceCheckHandle);
						  //pulse_incremnet=6900;//室内
						  //pulse_incremnet=0;//室外
						  //pulse_incremnet=600; //小正方形
		                  Ultrasonic_Feedback_front();
 8003a4a:	f7fe fa9f 	bl	8001f8c <Ultrasonic_Feedback_front>
						  gyro_reset_flag=0;
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <StreamTask+0xe2c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003a54:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <StreamTask+0xe30>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f005 ffe1 	bl	8009a20 <vTaskResume>
						  //critical_pulses=0;
						  //vTaskResume(MileageHandle);
						  delay(500);
 8003a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a62:	f7fd ff1f 	bl	80018a4 <delay>
						  //osSemaphoreWait(MileageSemHandle, osWaitForever);
						  //critical_pulses=pulse_incremnet+number_of_pulses;
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003a66:	4b6d      	ldr	r3, [pc, #436]	; (8003c1c <StreamTask+0xe44>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003a6c:	4b6c      	ldr	r3, [pc, #432]	; (8003c20 <StreamTask+0xe48>)
 8003a6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003a72:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003a74:	4b6b      	ldr	r3, [pc, #428]	; (8003c24 <StreamTask+0xe4c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f005 ffd1 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 8003a7e:	20c8      	movs	r0, #200	; 0xc8
 8003a80:	f7fd ff10 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003a84:	4b65      	ldr	r3, [pc, #404]	; (8003c1c <StreamTask+0xe44>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(UltraFrontSemHandle, osWaitForever);
 8003a8a:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <StreamTask+0xe50>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 fe26 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003a98:	4b60      	ldr	r3, [pc, #384]	; (8003c1c <StreamTask+0xe44>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003a9e:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <StreamTask+0xe4c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f005 fef8 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003aa8:	f7fd feee 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <StreamTask+0xe2c>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003ab2:	e20e      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_6:
	  	  	              vTaskSuspend(GyroReceiveHandle);
 8003ab4:	4b54      	ldr	r3, [pc, #336]	; (8003c08 <StreamTask+0xe30>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f005 feed 	bl	8009898 <vTaskSuspend>
		                  critical_pulses=0;
 8003abe:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <StreamTask+0xe34>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
	  	  	              vTaskSuspend(PIDCameraHandle);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <StreamTask+0xe54>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f005 fee5 	bl	8009898 <vTaskSuspend>
	  	  	              vTaskSuspend(DistanceCheckHandle);
 8003ace:	4b4c      	ldr	r3, [pc, #304]	; (8003c00 <StreamTask+0xe28>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f005 fee0 	bl	8009898 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003ad8:	4b55      	ldr	r3, [pc, #340]	; (8003c30 <StreamTask+0xe58>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8003ade:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ae2:	f7fd fedf 	bl	80018a4 <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  //critical_distance.front=350;
		  	  	  	  	  //vTaskResume(DistanceCheckHandle);
		  	  	  	      distance_flag=0;
 8003ae6:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <StreamTask+0xe5c>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
	  	                  stepping2();
 8003aec:	f7fe feb2 	bl	8002854 <stepping2>
		  	  	  	      Car_Stop();
 8003af0:	f7fd feca 	bl	8001888 <Car_Stop>
	  		              vTaskSuspend(GyroReceiveHandle);
 8003af4:	4b44      	ldr	r3, [pc, #272]	; (8003c08 <StreamTask+0xe30>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f005 fecd 	bl	8009898 <vTaskSuspend>
	  		              break;
 8003afe:	e1e8      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_6_7:
	  					  vTaskSuspend(DistanceCheckHandle);
 8003b00:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <StreamTask+0xe28>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f005 fec7 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=100;//室外
 8003b0a:	2364      	movs	r3, #100	; 0x64
 8003b0c:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <StreamTask+0xe2c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003b14:	4b3c      	ldr	r3, [pc, #240]	; (8003c08 <StreamTask+0xe30>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f005 ff81 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <StreamTask+0xe34>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003b24:	4b3a      	ldr	r3, [pc, #232]	; (8003c10 <StreamTask+0xe38>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f005 ff79 	bl	8009a20 <vTaskResume>
						  delay(500);
 8003b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b32:	f7fd feb7 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003b36:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <StreamTask+0xe3c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f004 fdd0 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <StreamTask+0xe40>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <StreamTask+0xe34>)
 8003b52:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003b54:	4b31      	ldr	r3, [pc, #196]	; (8003c1c <StreamTask+0xe44>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <StreamTask+0xe48>)
 8003b5c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003b60:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <StreamTask+0xe4c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f005 ff5a 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 8003b6c:	20c8      	movs	r0, #200	; 0xc8
 8003b6e:	f7fd fe99 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <StreamTask+0xe44>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003b78:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <StreamTask+0xe3c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b80:	4618      	mov	r0, r3
 8003b82:	f004 fdaf 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <StreamTask+0xe44>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003b8c:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <StreamTask+0xe4c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f005 fe81 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003b96:	f7fd fe77 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003b9a:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <StreamTask+0xe2c>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003ba0:	e197      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_7:
	  	  	              vTaskSuspend(GyroReceiveHandle);
 8003ba2:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <StreamTask+0xe30>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f005 fe76 	bl	8009898 <vTaskSuspend>
		                  critical_pulses=0;
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <StreamTask+0xe34>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
	  	  	              vTaskSuspend(PIDCameraHandle);
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <StreamTask+0xe54>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f005 fe6e 	bl	8009898 <vTaskSuspend>
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003bbc:	4b1c      	ldr	r3, [pc, #112]	; (8003c30 <StreamTask+0xe58>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  delay(500);
 8003bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bc6:	f7fd fe6d 	bl	80018a4 <delay>
		  	  	  	  	  //state= GoStraight;
		  	  	  	  	  critical_distance.front=350;
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <StreamTask+0xe60>)
 8003bcc:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <StreamTask+0xe64>)
 8003bce:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(DistanceCheckHandle);
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <StreamTask+0xe28>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f005 ff23 	bl	8009a20 <vTaskResume>
		  	  	  	      distance_flag=0;
 8003bda:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <StreamTask+0xe5c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
	  	                  stepping();
 8003be0:	f7fe fd7c 	bl	80026dc <stepping>
		  	  	  	      Car_Stop();
 8003be4:	f7fd fe50 	bl	8001888 <Car_Stop>
		  	  	  	      vTaskSuspend(DistanceCheckHandle);
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <StreamTask+0xe28>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f005 fe53 	bl	8009898 <vTaskSuspend>
	  		              vTaskSuspend(GyroReceiveHandle);
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <StreamTask+0xe30>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f005 fe4e 	bl	8009898 <vTaskSuspend>
	  		              break;
 8003bfc:	e169      	b.n	8003ed2 <StreamTask+0x10fa>
 8003bfe:	bf00      	nop
 8003c00:	2000412c 	.word	0x2000412c
 8003c04:	200002cc 	.word	0x200002cc
 8003c08:	20004314 	.word	0x20004314
 8003c0c:	200002d4 	.word	0x200002d4
 8003c10:	20004044 	.word	0x20004044
 8003c14:	2000420c 	.word	0x2000420c
 8003c18:	200002d0 	.word	0x200002d0
 8003c1c:	20000008 	.word	0x20000008
 8003c20:	20000000 	.word	0x20000000
 8003c24:	20004130 	.word	0x20004130
 8003c28:	20004128 	.word	0x20004128
 8003c2c:	20004120 	.word	0x20004120
 8003c30:	200002c8 	.word	0x200002c8
 8003c34:	200002c4 	.word	0x200002c4
 8003c38:	200002ac 	.word	0x200002ac
 8003c3c:	43af0000 	.word	0x43af0000
	  case Go_Mile_8_Until_Apriltag:
						  vTaskSuspend(DistanceCheckHandle);
 8003c40:	4ba5      	ldr	r3, [pc, #660]	; (8003ed8 <StreamTask+0x1100>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f005 fe27 	bl	8009898 <vTaskSuspend>
						  gyro_reset_flag=0;
 8003c4a:	4ba4      	ldr	r3, [pc, #656]	; (8003edc <StreamTask+0x1104>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
						  camera_recieve_IT_flag=1;
 8003c50:	4ba3      	ldr	r3, [pc, #652]	; (8003ee0 <StreamTask+0x1108>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
						  HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8003c56:	2202      	movs	r2, #2
 8003c58:	49a2      	ldr	r1, [pc, #648]	; (8003ee4 <StreamTask+0x110c>)
 8003c5a:	48a3      	ldr	r0, [pc, #652]	; (8003ee8 <StreamTask+0x1110>)
 8003c5c:	f003 ff03 	bl	8007a66 <HAL_UART_Receive_IT>
						  vTaskResume(GyroReceiveHandle);
 8003c60:	4ba2      	ldr	r3, [pc, #648]	; (8003eec <StreamTask+0x1114>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f005 fedb 	bl	8009a20 <vTaskResume>
						  delay(500);
 8003c6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c6e:	f7fd fe19 	bl	80018a4 <delay>
						  PID_Straight_Reset_Flag=1;
 8003c72:	4b9f      	ldr	r3, [pc, #636]	; (8003ef0 <StreamTask+0x1118>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
						  go_straight_speed=PWM_Mid-200;
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <StreamTask+0x111c>)
 8003c7a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003c7e:	601a      	str	r2, [r3, #0]
						  vTaskResume(GoStraightHandle);
 8003c80:	4b9d      	ldr	r3, [pc, #628]	; (8003ef8 <StreamTask+0x1120>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f005 fecb 	bl	8009a20 <vTaskResume>
						  delay(500);
 8003c8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c8e:	f7fd fe09 	bl	80018a4 <delay>
						  PID_Straight_Reset_Flag=0;
 8003c92:	4b97      	ldr	r3, [pc, #604]	; (8003ef0 <StreamTask+0x1118>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
						  osSemaphoreWait(ApriltagSemHandle, 0);
 8003c98:	4b98      	ldr	r3, [pc, #608]	; (8003efc <StreamTask+0x1124>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f004 fd20 	bl	80086e4 <osSemaphoreWait>
						  osSemaphoreWait(ApriltagSemHandle, osWaitForever);
 8003ca4:	4b95      	ldr	r3, [pc, #596]	; (8003efc <StreamTask+0x1124>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cac:	4618      	mov	r0, r3
 8003cae:	f004 fd19 	bl	80086e4 <osSemaphoreWait>
						  PID_Straight_Reset_Flag=1;
 8003cb2:	4b8f      	ldr	r3, [pc, #572]	; (8003ef0 <StreamTask+0x1118>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
						  vTaskSuspend(GoStraightHandle);
 8003cb8:	4b8f      	ldr	r3, [pc, #572]	; (8003ef8 <StreamTask+0x1120>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f005 fdeb 	bl	8009898 <vTaskSuspend>
						  PWM_SET_LEFT(PWM_Mid-100);
 8003cc2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003cc6:	f7fe fb25 	bl	8002314 <PWM_SET_LEFT>
						  PWM_SET_RIGHT(PWM_Mid-100);
 8003cca:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003cce:	f7fe fb5b 	bl	8002388 <PWM_SET_RIGHT>
						  delay(1200);
 8003cd2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8003cd6:	f7fd fde5 	bl	80018a4 <delay>
						  Car_Stop();
 8003cda:	f7fd fdd5 	bl	8001888 <Car_Stop>
						  gyro_reset_flag=1;
 8003cde:	4b7f      	ldr	r3, [pc, #508]	; (8003edc <StreamTask+0x1104>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
						  //vTaskSuspend(MileageHandle);
						  break;
 8003ce4:	e0f5      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_9:
		  	  	  	  	  camera_recieve_IT_flag=0;
 8003ce6:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <StreamTask+0x1108>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
						  vTaskSuspend(DistanceCheckHandle);
 8003cec:	4b7a      	ldr	r3, [pc, #488]	; (8003ed8 <StreamTask+0x1100>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f005 fdd1 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003cf6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003cfa:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003cfc:	4b77      	ldr	r3, [pc, #476]	; (8003edc <StreamTask+0x1104>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003d02:	4b7a      	ldr	r3, [pc, #488]	; (8003eec <StreamTask+0x1114>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f005 fe8a 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 8003d0c:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <StreamTask+0x1128>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003d12:	4b7c      	ldr	r3, [pc, #496]	; (8003f04 <StreamTask+0x112c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f005 fe82 	bl	8009a20 <vTaskResume>
						  delay(500);
 8003d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d20:	f7fd fdc0 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003d24:	4b78      	ldr	r3, [pc, #480]	; (8003f08 <StreamTask+0x1130>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f004 fcd9 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003d32:	4b76      	ldr	r3, [pc, #472]	; (8003f0c <StreamTask+0x1134>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b70      	ldr	r3, [pc, #448]	; (8003f00 <StreamTask+0x1128>)
 8003d40:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003d42:	4b6b      	ldr	r3, [pc, #428]	; (8003ef0 <StreamTask+0x1118>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003d48:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <StreamTask+0x111c>)
 8003d4a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d4e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003d50:	4b69      	ldr	r3, [pc, #420]	; (8003ef8 <StreamTask+0x1120>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f005 fe63 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 8003d5a:	20c8      	movs	r0, #200	; 0xc8
 8003d5c:	f7fd fda2 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003d60:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <StreamTask+0x1118>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003d66:	4b68      	ldr	r3, [pc, #416]	; (8003f08 <StreamTask+0x1130>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f004 fcb8 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003d74:	4b5e      	ldr	r3, [pc, #376]	; (8003ef0 <StreamTask+0x1118>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <StreamTask+0x1120>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f005 fd8a 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003d84:	f7fd fd80 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003d88:	4b54      	ldr	r3, [pc, #336]	; (8003edc <StreamTask+0x1104>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003d8e:	e0a0      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Go_Mile_10:
						 vTaskSuspend(DistanceCheckHandle);
 8003d90:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <StreamTask+0x1100>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f005 fd7f 	bl	8009898 <vTaskSuspend>
						  //pulse_incremnet=6900;//室内
						  pulse_incremnet=300;//室外
 8003d9a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003d9e:	60bb      	str	r3, [r7, #8]
						  //pulse_incremnet=600; //小正方形
						  gyro_reset_flag=0;
 8003da0:	4b4e      	ldr	r3, [pc, #312]	; (8003edc <StreamTask+0x1104>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
						  vTaskResume(GyroReceiveHandle);
 8003da6:	4b51      	ldr	r3, [pc, #324]	; (8003eec <StreamTask+0x1114>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f005 fe38 	bl	8009a20 <vTaskResume>
						  critical_pulses=0;
 8003db0:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <StreamTask+0x1128>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
						  vTaskResume(MileageHandle);
 8003db6:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <StreamTask+0x112c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f005 fe30 	bl	8009a20 <vTaskResume>
						  delay(500);
 8003dc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dc4:	f7fd fd6e 	bl	80018a4 <delay>
						  osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003dc8:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <StreamTask+0x1130>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 fc87 	bl	80086e4 <osSemaphoreWait>
						  critical_pulses=pulse_incremnet+number_of_pulses;
 8003dd6:	4b4d      	ldr	r3, [pc, #308]	; (8003f0c <StreamTask+0x1134>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4413      	add	r3, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <StreamTask+0x1128>)
 8003de4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  PID_Straight_Reset_Flag=1;
 8003de6:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <StreamTask+0x1118>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
		  	  	  	  	  go_straight_speed=PWM_Mid;
 8003dec:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <StreamTask+0x111c>)
 8003dee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003df2:	601a      	str	r2, [r3, #0]
		  	  	  	  	  vTaskResume(GoStraightHandle);
 8003df4:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <StreamTask+0x1120>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f005 fe11 	bl	8009a20 <vTaskResume>
		  	  	  	  	  delay(200);
 8003dfe:	20c8      	movs	r0, #200	; 0xc8
 8003e00:	f7fd fd50 	bl	80018a4 <delay>
		  	  	  	  	  PID_Straight_Reset_Flag=0;
 8003e04:	4b3a      	ldr	r3, [pc, #232]	; (8003ef0 <StreamTask+0x1118>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
		  	  	  	      osSemaphoreWait(MileageSemHandle, osWaitForever);
 8003e0a:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <StreamTask+0x1130>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e12:	4618      	mov	r0, r3
 8003e14:	f004 fc66 	bl	80086e4 <osSemaphoreWait>
		  	  	  	      PID_Straight_Reset_Flag=1;
 8003e18:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <StreamTask+0x1118>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
		  	  	  	      vTaskSuspend(GoStraightHandle);
 8003e1e:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <StreamTask+0x1120>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f005 fd38 	bl	8009898 <vTaskSuspend>
		  	  	  		  Car_Stop();
 8003e28:	f7fd fd2e 	bl	8001888 <Car_Stop>
		  	  	  		  gyro_reset_flag=1;
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <StreamTask+0x1104>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
		  	  	  		  //vTaskSuspend(MileageHandle);
		  	  	  	  	  break;
 8003e32:	e04e      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Apriltag_Check:
		  	  	  	  	  Car_Stop();
 8003e34:	f7fd fd28 	bl	8001888 <Car_Stop>
		  	  	  	  	  break;
 8003e38:	e04b      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Apriltag_Adjust1:
						  vTaskSuspend(DistanceCheckHandle);
 8003e3a:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <StreamTask+0x1100>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f005 fd2a 	bl	8009898 <vTaskSuspend>
						  vTaskSuspend(GoStraightHandle);
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <StreamTask+0x1120>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f005 fd25 	bl	8009898 <vTaskSuspend>
						  //vTaskSuspend(MileageHandle);
						  gyro_reset_flag=1;
 8003e4e:	4b23      	ldr	r3, [pc, #140]	; (8003edc <StreamTask+0x1104>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
						  Car_Stop();
 8003e54:	f7fd fd18 	bl	8001888 <Car_Stop>
						  delay(50);
 8003e58:	2032      	movs	r0, #50	; 0x32
 8003e5a:	f7fd fd23 	bl	80018a4 <delay>
						  distance_flag=0;
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <StreamTask+0x1138>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
						  delay(500);
 8003e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e68:	f7fd fd1c 	bl	80018a4 <delay>
						  PID_Apriltag(5);
 8003e6c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003e70:	f7fe fae8 	bl	8002444 <PID_Apriltag>
						  Car_Stop();
 8003e74:	f7fd fd08 	bl	8001888 <Car_Stop>
						  break;
 8003e78:	e02b      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Feeding:
		  	  	  	  	  Car_Stop();
 8003e7a:	f7fd fd05 	bl	8001888 <Car_Stop>
		  	  	  	  	  feeding();
 8003e7e:	f7fe fdcb 	bl	8002a18 <feeding>
		  	  	  	  	  break;
 8003e82:	e026      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Mile_Adjust:
		  	  	  	  	  vTaskResume(MileageHandle);
 8003e84:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <StreamTask+0x112c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f005 fdc9 	bl	8009a20 <vTaskResume>
		  	  	  	  	  osSemaphoreWait(MileageNegSemHandle, 0);
 8003e8e:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <StreamTask+0x113c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f004 fc25 	bl	80086e4 <osSemaphoreWait>
		  	  	  	  	  PWM_SET_LEFT(-PWM_Lowest-80);
 8003e9a:	481f      	ldr	r0, [pc, #124]	; (8003f18 <StreamTask+0x1140>)
 8003e9c:	f7fe fa3a 	bl	8002314 <PWM_SET_LEFT>
		  	  	  		  PWM_SET_RIGHT(-PWM_Lowest-80);
 8003ea0:	481d      	ldr	r0, [pc, #116]	; (8003f18 <StreamTask+0x1140>)
 8003ea2:	f7fe fa71 	bl	8002388 <PWM_SET_RIGHT>
		  	  	  		  osSemaphoreWait(MileageNegSemHandle, osWaitForever);
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <StreamTask+0x113c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f004 fc18 	bl	80086e4 <osSemaphoreWait>
		  	  	  		  Car_Stop();
 8003eb4:	f7fd fce8 	bl	8001888 <Car_Stop>
		  	  	  		  vTaskSuspend(MileageHandle);
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <StreamTask+0x112c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f005 fceb 	bl	8009898 <vTaskSuspend>
		  	  	  	  	  break;
 8003ec2:	e006      	b.n	8003ed2 <StreamTask+0x10fa>
	  case Idle:
		  	  	  	  	  Car_Stop();
 8003ec4:	f7fd fce0 	bl	8001888 <Car_Stop>
		  	  	  	  	  break;
 8003ec8:	e003      	b.n	8003ed2 <StreamTask+0x10fa>
	  default :
		  	  	  	  	  Car_Initial();
 8003eca:	f7fd fca7 	bl	800181c <Car_Initial>
		  	  	  	  	  break;
 8003ece:	e000      	b.n	8003ed2 <StreamTask+0x10fa>
		  continue;
 8003ed0:	bf00      	nop
	  delay(50);
 8003ed2:	f7fe bf8f 	b.w	8002df4 <StreamTask+0x1c>
 8003ed6:	bf00      	nop
 8003ed8:	2000412c 	.word	0x2000412c
 8003edc:	200002cc 	.word	0x200002cc
 8003ee0:	200002c8 	.word	0x200002c8
 8003ee4:	20000294 	.word	0x20000294
 8003ee8:	200042d0 	.word	0x200042d0
 8003eec:	20004314 	.word	0x20004314
 8003ef0:	20000008 	.word	0x20000008
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	20004130 	.word	0x20004130
 8003efc:	2000423c 	.word	0x2000423c
 8003f00:	200002d4 	.word	0x200002d4
 8003f04:	20004044 	.word	0x20004044
 8003f08:	2000420c 	.word	0x2000420c
 8003f0c:	200002d0 	.word	0x200002d0
 8003f10:	200002c4 	.word	0x200002c4
 8003f14:	20004240 	.word	0x20004240
 8003f18:	fffffdbc 	.word	0xfffffdbc

08003f1c <PIDCameraTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PIDCameraTask */
void PIDCameraTask(void const * argument)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PIDCameraTask */
		vTaskSuspend(PIDCameraHandle);
 8003f24:	4b5e      	ldr	r3, [pc, #376]	; (80040a0 <PIDCameraTask+0x184>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f005 fcb5 	bl	8009898 <vTaskSuspend>
		float PID_Error_Last=0;
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	61fb      	str	r3, [r7, #28]
		float PID_Output=0;                    // PWM输出占空
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
		float Error = 0, Error_Total=0;
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
		int32_t PID_Input=0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
		camera_recieve_IT_flag=1;
 8003f4a:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <PIDCameraTask+0x188>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8003f50:	2202      	movs	r2, #2
 8003f52:	4955      	ldr	r1, [pc, #340]	; (80040a8 <PIDCameraTask+0x18c>)
 8003f54:	4855      	ldr	r0, [pc, #340]	; (80040ac <PIDCameraTask+0x190>)
 8003f56:	f003 fd86 	bl	8007a66 <HAL_UART_Receive_IT>
	  /* Infinite loop */
	  for(;;)
	  {
		  if(state == Idle)
 8003f5a:	4b55      	ldr	r3, [pc, #340]	; (80040b0 <PIDCameraTask+0x194>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b27      	cmp	r3, #39	; 0x27
 8003f60:	d105      	bne.n	8003f6e <PIDCameraTask+0x52>
		  {
			  vTaskSuspend(PIDCameraHandle);
 8003f62:	4b4f      	ldr	r3, [pc, #316]	; (80040a0 <PIDCameraTask+0x184>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f005 fc96 	bl	8009898 <vTaskSuspend>
			  continue;
 8003f6c:	e097      	b.n	800409e <PIDCameraTask+0x182>
		  }
//		  	 if(camera_ready_flag==0)
//		  		 continue;
//		  	 camera_ready_flag=0;
		  	 osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8003f6e:	4b51      	ldr	r3, [pc, #324]	; (80040b4 <PIDCameraTask+0x198>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f04f 31ff 	mov.w	r1, #4294967295
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 fbb4 	bl	80086e4 <osSemaphoreWait>
		  	 HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
 8003f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f80:	484d      	ldr	r0, [pc, #308]	; (80040b8 <PIDCameraTask+0x19c>)
 8003f82:	f001 fa56 	bl	8005432 <HAL_GPIO_TogglePin>
		  	 //delay(10);
		  	 //Data=0x03E8;
		  	 //PID_Input=-300;
		  	 PID_Input = (Camera_Data & (0x07FF))-1000;
 8003f86:	4b4d      	ldr	r3, [pc, #308]	; (80040bc <PIDCameraTask+0x1a0>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f90:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003f94:	60fb      	str	r3, [r7, #12]
		  	 if (PID_Input == -1000)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003f9c:	d07e      	beq.n	800409c <PIDCameraTask+0x180>
		  		 continue;
		  	 Error = PID_Target - PID_Input;		  // 偏差 = 目标 - 实际
 8003f9e:	4b48      	ldr	r3, [pc, #288]	; (80040c0 <PIDCameraTask+0x1a4>)
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fb2:	edc7 7a04 	vstr	s15, [r7, #16]
		  	 PID_Output = Kp * Error  +
 8003fb6:	4b43      	ldr	r3, [pc, #268]	; (80040c4 <PIDCameraTask+0x1a8>)
 8003fb8:	ed93 7a00 	vldr	s14, [r3]
 8003fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
		  				  Kd * (Error - PID_Error_Last ) +
 8003fc4:	edd7 6a04 	vldr	s13, [r7, #16]
 8003fc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fcc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003fd0:	4b3d      	ldr	r3, [pc, #244]	; (80040c8 <PIDCameraTask+0x1ac>)
 8003fd2:	edd3 7a00 	vldr	s15, [r3]
 8003fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
		  	 PID_Output = Kp * Error  +
 8003fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fde:	ed97 7a05 	vldr	s14, [r7, #20]
 8003fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe6:	edc7 7a06 	vstr	s15, [r7, #24]
		  				  Error_Total;
		  	 Error_Total=Error_Total+Ki*Error;
 8003fea:	4b38      	ldr	r3, [pc, #224]	; (80040cc <PIDCameraTask+0x1b0>)
 8003fec:	ed93 7a00 	vldr	s14, [r3]
 8003ff0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff8:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004000:	edc7 7a05 	vstr	s15, [r7, #20]
		  	 PID_Error_Last = Error;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	61fb      	str	r3, [r7, #28]
		  	 if(PID_Output < 0)
 8004008:	edd7 7a06 	vldr	s15, [r7, #24]
 800400c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004014:	d508      	bpl.n	8004028 <PIDCameraTask+0x10c>
		  		 PID_Output-=PWM_Lowest;
 8004016:	edd7 7a06 	vldr	s15, [r7, #24]
 800401a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80040d0 <PIDCameraTask+0x1b4>
 800401e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004022:	edc7 7a06 	vstr	s15, [r7, #24]
 8004026:	e007      	b.n	8004038 <PIDCameraTask+0x11c>
		  	 else
		  		 PID_Output+=PWM_Lowest;
 8004028:	edd7 7a06 	vldr	s15, [r7, #24]
 800402c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80040d0 <PIDCameraTask+0x1b4>
 8004030:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004034:	edc7 7a06 	vstr	s15, [r7, #24]
		     if(PID_Output > PWM_Higest-PWM_Mid) 			PID_Output =	2000-PWM_Mid;	    // 限幅
 8004038:	edd7 7a06 	vldr	s15, [r7, #24]
 800403c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80040d4 <PIDCameraTask+0x1b8>
 8004040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004048:	dd02      	ble.n	8004050 <PIDCameraTask+0x134>
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <PIDCameraTask+0x1bc>)
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	e00a      	b.n	8004066 <PIDCameraTask+0x14a>
		     else if(PID_Output <-(PWM_Higest-PWM_Mid)) 	PID_Output = 	-(2000-PWM_Mid);
 8004050:	edd7 7a06 	vldr	s15, [r7, #24]
 8004054:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80040dc <PIDCameraTask+0x1c0>
 8004058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004060:	d501      	bpl.n	8004066 <PIDCameraTask+0x14a>
 8004062:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <PIDCameraTask+0x1c4>)
 8004064:	61bb      	str	r3, [r7, #24]
		     taskENTER_CRITICAL();
 8004066:	f006 fca5 	bl	800a9b4 <vPortEnterCritical>
		     PWM_SET_RIGHT ((PWM_Mid + (int32_t) PID_Output));
 800406a:	edd7 7a06 	vldr	s15, [r7, #24]
 800406e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004072:	ee17 3a90 	vmov	r3, s15
 8004076:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe f984 	bl	8002388 <PWM_SET_RIGHT>
		     PWM_SET_LEFT  ((PWM_Mid - (int32_t) PID_Output));
 8004080:	edd7 7a06 	vldr	s15, [r7, #24]
 8004084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004088:	ee17 3a90 	vmov	r3, s15
 800408c:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe f93f 	bl	8002314 <PWM_SET_LEFT>
		     taskEXIT_CRITICAL();
 8004096:	f006 fcbd 	bl	800aa14 <vPortExitCritical>
 800409a:	e75e      	b.n	8003f5a <PIDCameraTask+0x3e>
		  		 continue;
 800409c:	bf00      	nop
		  if(state == Idle)
 800409e:	e75c      	b.n	8003f5a <PIDCameraTask+0x3e>
 80040a0:	20004120 	.word	0x20004120
 80040a4:	200002c8 	.word	0x200002c8
 80040a8:	20000294 	.word	0x20000294
 80040ac:	200042d0 	.word	0x200042d0
 80040b0:	2000417c 	.word	0x2000417c
 80040b4:	20004124 	.word	0x20004124
 80040b8:	40021400 	.word	0x40021400
 80040bc:	20000296 	.word	0x20000296
 80040c0:	200002de 	.word	0x200002de
 80040c4:	20000010 	.word	0x20000010
 80040c8:	200002e4 	.word	0x200002e4
 80040cc:	200002e0 	.word	0x200002e0
 80040d0:	43fa0000 	.word	0x43fa0000
 80040d4:	44160000 	.word	0x44160000
 80040d8:	44960000 	.word	0x44960000
 80040dc:	c4160000 	.word	0xc4160000
 80040e0:	c4960000 	.word	0xc4960000

080040e4 <GyroReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroReceiveTask */
void GyroReceiveTask(void const * argument)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08e      	sub	sp, #56	; 0x38
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroReceiveTask */
	vTaskSuspend(GyroReceiveHandle);
 80040ec:	4ba6      	ldr	r3, [pc, #664]	; (8004388 <GyroReceiveTask+0x2a4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f005 fbd1 	bl	8009898 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  delay(100);
 80040f6:	2064      	movs	r0, #100	; 0x64
 80040f8:	f7fd fbd4 	bl	80018a4 <delay>
	  uint8_t AxH=0, AxL=0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004102:	2300      	movs	r3, #0
 8004104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  int16_t Ax=0;
 8004108:	2300      	movs	r3, #0
 800410a:	853b      	strh	r3, [r7, #40]	; 0x28

	  uint8_t AyH=0,AyL=0;
 800410c:	2300      	movs	r3, #0
 800410e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004112:	2300      	movs	r3, #0
 8004114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  int16_t Ay=0;
 8004118:	2300      	movs	r3, #0
 800411a:	84bb      	strh	r3, [r7, #36]	; 0x24

	  uint8_t YawH=0,YawL=0;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004122:	2300      	movs	r3, #0
 8004124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  int16_t Yaw=0;
 8004128:	2300      	movs	r3, #0
 800412a:	843b      	strh	r3, [r7, #32]

	  uint8_t sum=0;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int i=0;
 8004132:	2300      	movs	r3, #0
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
	  int h=0;
 8004136:	2300      	movs	r3, #0
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint8_t GyroData[21]={0};
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	f107 030c 	add.w	r3, r7, #12
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	741a      	strb	r2, [r3, #16]
	  taskENTER_CRITICAL();
 800414e:	f006 fc31 	bl	800a9b4 <vPortEnterCritical>
	  HAL_UART_Receive(&huart3, (uint8_t *) &GyroData, sizeof(GyroData), 50);
 8004152:	f107 0108 	add.w	r1, r7, #8
 8004156:	2332      	movs	r3, #50	; 0x32
 8004158:	2215      	movs	r2, #21
 800415a:	488c      	ldr	r0, [pc, #560]	; (800438c <GyroReceiveTask+0x2a8>)
 800415c:	f003 fbe1 	bl	8007922 <HAL_UART_Receive>
	  taskEXIT_CRITICAL();
 8004160:	f006 fc58 	bl	800aa14 <vPortExitCritical>
	  while(h<14)
 8004164:	e009      	b.n	800417a <GyroReceiveTask+0x96>
	  {
		  if(GyroData[h]==0x55)
 8004166:	f107 0208 	add.w	r2, r7, #8
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	4413      	add	r3, r2
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b55      	cmp	r3, #85	; 0x55
 8004172:	d006      	beq.n	8004182 <GyroReceiveTask+0x9e>
			  break;
		  h++;
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	3301      	adds	r3, #1
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
	  while(h<14)
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	2b0d      	cmp	r3, #13
 800417e:	ddf2      	ble.n	8004166 <GyroReceiveTask+0x82>
 8004180:	e000      	b.n	8004184 <GyroReceiveTask+0xa0>
			  break;
 8004182:	bf00      	nop
	  }
	  if(GyroData[h]!=0x55)
 8004184:	f107 0208 	add.w	r2, r7, #8
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	4413      	add	r3, r2
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b55      	cmp	r3, #85	; 0x55
 8004190:	f040 80f3 	bne.w	800437a <GyroReceiveTask+0x296>
		  continue;
	  if(GyroData[h+1]!=0x53)
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	3301      	adds	r3, #1
 8004198:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800419c:	4413      	add	r3, r2
 800419e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80041a2:	2b53      	cmp	r3, #83	; 0x53
 80041a4:	f040 80eb 	bne.w	800437e <GyroReceiveTask+0x29a>
		  continue;
	  i=0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
	  sum=0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  while(i<10)
 80041b2:	e00f      	b.n	80041d4 <GyroReceiveTask+0xf0>
	  {
		  sum=sum+GyroData[h+i];
 80041b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	4413      	add	r3, r2
 80041ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041be:	4413      	add	r3, r2
 80041c0:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 80041c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041c8:	4413      	add	r3, r2
 80041ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  i++;
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	3301      	adds	r3, #1
 80041d2:	633b      	str	r3, [r7, #48]	; 0x30
	  while(i<10)
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	2b09      	cmp	r3, #9
 80041d8:	ddec      	ble.n	80041b4 <GyroReceiveTask+0xd0>
	  }
	  	  if (sum!=GyroData[h+10])
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	330a      	adds	r3, #10
 80041de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041e2:	4413      	add	r3, r2
 80041e4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80041e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80041ec:	429a      	cmp	r2, r3
 80041ee:	f040 80c8 	bne.w	8004382 <GyroReceiveTask+0x29e>
	  		  continue;
	  AxL=GyroData[h+2];
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	3302      	adds	r3, #2
 80041f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041fa:	4413      	add	r3, r2
 80041fc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004200:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  AxH=GyroData[h+3];
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	3303      	adds	r3, #3
 8004208:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800420c:	4413      	add	r3, r2
 800420e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  AyL=GyroData[h+4];
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	3304      	adds	r3, #4
 800421a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800421e:	4413      	add	r3, r2
 8004220:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  AyH=GyroData[h+5];
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422a:	3305      	adds	r3, #5
 800422c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004230:	4413      	add	r3, r2
 8004232:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  YawL=GyroData[h+6];
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	3306      	adds	r3, #6
 800423e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004242:	4413      	add	r3, r2
 8004244:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  YawH=GyroData[h+7];
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	3307      	adds	r3, #7
 8004250:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004254:	4413      	add	r3, r2
 8004256:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  Ax=((((int16_t) AxH)<<8) | AxL);
 800425e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	b21a      	sxth	r2, r3
 8004266:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800426a:	b21b      	sxth	r3, r3
 800426c:	4313      	orrs	r3, r2
 800426e:	853b      	strh	r3, [r7, #40]	; 0x28
	  Ay=((((int16_t) AyH)<<8) | AyL);
 8004270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	b21a      	sxth	r2, r3
 8004278:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800427c:	b21b      	sxth	r3, r3
 800427e:	4313      	orrs	r3, r2
 8004280:	84bb      	strh	r3, [r7, #36]	; 0x24
	  Yaw=((((int16_t) YawH)<<8) | YawL);
 8004282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	b21a      	sxth	r2, r3
 800428a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800428e:	b21b      	sxth	r3, r3
 8004290:	4313      	orrs	r3, r2
 8004292:	843b      	strh	r3, [r7, #32]
	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  //taskENTER_CRITICAL();
	  //HAL_UART_Transmit(&huart1, (uint8_t *) &Yaw, sizeof(Yaw), 0xFFFF);
	  //taskEXIT_CRITICAL();
	  if(gyro_reset_flag)
 8004294:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <GyroReceiveTask+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <GyroReceiveTask+0x1c4>
	  {
		  vTaskSuspend(GyroReceiveHandle);
 800429c:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <GyroReceiveTask+0x2a4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f005 faf9 	bl	8009898 <vTaskSuspend>
		  continue;
 80042a6:	e06d      	b.n	8004384 <GyroReceiveTask+0x2a0>
	  }

	  angle.x=(((float)Ax) / 32768.0 * 180.0);
 80042a8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b4:	ee17 0a90 	vmov	r0, s15
 80042b8:	f7fc f8ee 	bl	8000498 <__aeabi_f2d>
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	4b34      	ldr	r3, [pc, #208]	; (8004394 <GyroReceiveTask+0x2b0>)
 80042c2:	f7fc fa6b 	bl	800079c <__aeabi_ddiv>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	4b31      	ldr	r3, [pc, #196]	; (8004398 <GyroReceiveTask+0x2b4>)
 80042d4:	f7fc f938 	bl	8000548 <__aeabi_dmul>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	f7fc fb6c 	bl	80009bc <__aeabi_d2f>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4a2d      	ldr	r2, [pc, #180]	; (800439c <GyroReceiveTask+0x2b8>)
 80042e8:	6013      	str	r3, [r2, #0]
	  angle.y=(((float)Ay) / 32768.0 * 180.0);
 80042ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f6:	ee17 0a90 	vmov	r0, s15
 80042fa:	f7fc f8cd 	bl	8000498 <__aeabi_f2d>
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <GyroReceiveTask+0x2b0>)
 8004304:	f7fc fa4a 	bl	800079c <__aeabi_ddiv>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	4b20      	ldr	r3, [pc, #128]	; (8004398 <GyroReceiveTask+0x2b4>)
 8004316:	f7fc f917 	bl	8000548 <__aeabi_dmul>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4610      	mov	r0, r2
 8004320:	4619      	mov	r1, r3
 8004322:	f7fc fb4b 	bl	80009bc <__aeabi_d2f>
 8004326:	4603      	mov	r3, r0
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <GyroReceiveTask+0x2b8>)
 800432a:	6053      	str	r3, [r2, #4]
	  angle.z=(((float)Yaw) / 32768.0 * 180.0);
 800432c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004330:	ee07 3a90 	vmov	s15, r3
 8004334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004338:	ee17 0a90 	vmov	r0, s15
 800433c:	f7fc f8ac 	bl	8000498 <__aeabi_f2d>
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <GyroReceiveTask+0x2b0>)
 8004346:	f7fc fa29 	bl	800079c <__aeabi_ddiv>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <GyroReceiveTask+0x2b4>)
 8004358:	f7fc f8f6 	bl	8000548 <__aeabi_dmul>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	f7fc fb2a 	bl	80009bc <__aeabi_d2f>
 8004368:	4603      	mov	r3, r0
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <GyroReceiveTask+0x2b8>)
 800436c:	6093      	str	r3, [r2, #8]
	  osSemaphoreRelease(GyroReadySemHandle);
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <GyroReceiveTask+0x2bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f004 fa04 	bl	8008780 <osSemaphoreRelease>
 8004378:	e6bd      	b.n	80040f6 <GyroReceiveTask+0x12>
		  continue;
 800437a:	bf00      	nop
 800437c:	e6bb      	b.n	80040f6 <GyroReceiveTask+0x12>
		  continue;
 800437e:	bf00      	nop
 8004380:	e6b9      	b.n	80040f6 <GyroReceiveTask+0x12>
	  		  continue;
 8004382:	bf00      	nop
  {
 8004384:	e6b7      	b.n	80040f6 <GyroReceiveTask+0x12>
 8004386:	bf00      	nop
 8004388:	20004314 	.word	0x20004314
 800438c:	200040dc 	.word	0x200040dc
 8004390:	200002cc 	.word	0x200002cc
 8004394:	40e00000 	.word	0x40e00000
 8004398:	40668000 	.word	0x40668000
 800439c:	200002a0 	.word	0x200002a0
 80043a0:	20004238 	.word	0x20004238

080043a4 <DistanceCheckTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DistanceCheckTask */
void DistanceCheckTask(void const * argument)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DistanceCheckTask */
	vTaskSuspend(DistanceCheckHandle);
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <DistanceCheckTask+0xa0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f005 fa71 	bl	8009898 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  Distance distance={0.0,0.0};
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
	  Distance temp=Ultrasonic_Feedback();
 80043c2:	f7fd fd81 	bl	8001ec8 <Ultrasonic_Feedback>
 80043c6:	eeb0 7a40 	vmov.f32	s14, s0
 80043ca:	eef0 7a60 	vmov.f32	s15, s1
 80043ce:	ed87 7a03 	vstr	s14, [r7, #12]
 80043d2:	edc7 7a04 	vstr	s15, [r7, #16]
	  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
	  for(int i=0;i<1;i++)
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	e00a      	b.n	80043f2 <DistanceCheckTask+0x4e>
	  {
		  distance.front+=temp.front;
 80043dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80043e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80043e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e8:	edc7 7a05 	vstr	s15, [r7, #20]
	  for(int i=0;i<1;i++)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	ddf1      	ble.n	80043dc <DistanceCheckTask+0x38>
	  }
	  distance.front/=1;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	617b      	str	r3, [r7, #20]
	  if(distance.front < critical_distance.front)
 80043fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8004400:	4b11      	ldr	r3, [pc, #68]	; (8004448 <DistanceCheckTask+0xa4>)
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440e:	d50e      	bpl.n	800442e <DistanceCheckTask+0x8a>
	  {
		  distance_flag=1;
 8004410:	4b0e      	ldr	r3, [pc, #56]	; (800444c <DistanceCheckTask+0xa8>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]
		  osSemaphoreRelease(CriticalDistanceSemHandle);
 8004416:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <DistanceCheckTask+0xac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f004 f9b0 	bl	8008780 <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 8004420:	2201      	movs	r2, #1
 8004422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004426:	480b      	ldr	r0, [pc, #44]	; (8004454 <DistanceCheckTask+0xb0>)
 8004428:	f000 ffea 	bl	8005400 <HAL_GPIO_WritePin>
 800442c:	e7c3      	b.n	80043b6 <DistanceCheckTask+0x12>
	  }
	  else
	  {
		  distance_flag=0;
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <DistanceCheckTask+0xa8>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8004434:	2200      	movs	r2, #0
 8004436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800443a:	4806      	ldr	r0, [pc, #24]	; (8004454 <DistanceCheckTask+0xb0>)
 800443c:	f000 ffe0 	bl	8005400 <HAL_GPIO_WritePin>
  {
 8004440:	e7b9      	b.n	80043b6 <DistanceCheckTask+0x12>
 8004442:	bf00      	nop
 8004444:	2000412c 	.word	0x2000412c
 8004448:	200002ac 	.word	0x200002ac
 800444c:	200002c4 	.word	0x200002c4
 8004450:	2000403c 	.word	0x2000403c
 8004454:	40021400 	.word	0x40021400

08004458 <MileageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MileageTask */
void MileageTask(void const * argument)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MileageTask */
	//uint8_t mileage_counter;
	vTaskSuspend(MileageHandle);
 8004460:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <MileageTask+0x60>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f005 fa17 	bl	8009898 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  taskENTER_CRITICAL();
 800446a:	f006 faa3 	bl	800a9b4 <vPortEnterCritical>
	  //mileage_counter=__HAL_TIM_GET_COUNTER(&htim2);
	  //number_of_pulses=1000*(mileage_IT_number-1)+mileage_counter;
	  number_of_pulses=5000*mileage_IT_number+__HAL_TIM_GET_COUNTER(&htim2);
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <MileageTask+0x64>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	461a      	mov	r2, r3
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <MileageTask+0x68>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	4413      	add	r3, r2
 8004484:	461a      	mov	r2, r3
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <MileageTask+0x6c>)
 8004488:	601a      	str	r2, [r3, #0]
	  taskEXIT_CRITICAL();
 800448a:	f006 fac3 	bl	800aa14 <vPortExitCritical>
	  //HAL_UART_Transmit(&huart1, &number_of_pulses, sizeof(number_of_pulses), 1000);
	  if (number_of_pulses>critical_pulses)
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <MileageTask+0x6c>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <MileageTask+0x70>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	dd05      	ble.n	80044a6 <MileageTask+0x4e>
		  osSemaphoreRelease(MileageSemHandle);
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <MileageTask+0x74>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f004 f96e 	bl	8008780 <osSemaphoreRelease>
 80044a4:	e004      	b.n	80044b0 <MileageTask+0x58>
	  else
		  osSemaphoreRelease(MileageNegSemHandle);
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <MileageTask+0x78>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f004 f968 	bl	8008780 <osSemaphoreRelease>
	  delay(50);
 80044b0:	2032      	movs	r0, #50	; 0x32
 80044b2:	f7fd f9f7 	bl	80018a4 <delay>
	  taskENTER_CRITICAL();
 80044b6:	e7d8      	b.n	800446a <MileageTask+0x12>
 80044b8:	20004044 	.word	0x20004044
 80044bc:	20000004 	.word	0x20000004
 80044c0:	20004288 	.word	0x20004288
 80044c4:	200002d0 	.word	0x200002d0
 80044c8:	200002d4 	.word	0x200002d4
 80044cc:	2000420c 	.word	0x2000420c
 80044d0:	20004240 	.word	0x20004240

080044d4 <GoStraightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GoStraightTask */
void GoStraightTask(void const * argument)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GoStraightTask */
	vTaskSuspend(GoStraightHandle);
 80044dc:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <GoStraightTask+0x3c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f005 f9d9 	bl	8009898 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	if (PID_Straight_Reset_Flag)
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <GoStraightTask+0x40>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <GoStraightTask+0x36>
		continue;
	PID_Straight((float)go_straight_speed);
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <GoStraightTask+0x44>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fa:	eeb0 0a67 	vmov.f32	s0, s15
 80044fe:	f7fd fbdd 	bl	8001cbc <PID_Straight>
    delay(100);
 8004502:	2064      	movs	r0, #100	; 0x64
 8004504:	f7fd f9ce 	bl	80018a4 <delay>
 8004508:	e7ed      	b.n	80044e6 <GoStraightTask+0x12>
		continue;
 800450a:	bf00      	nop
	if (PID_Straight_Reset_Flag)
 800450c:	e7eb      	b.n	80044e6 <GoStraightTask+0x12>
 800450e:	bf00      	nop
 8004510:	20004130 	.word	0x20004130
 8004514:	20000008 	.word	0x20000008
 8004518:	20000000 	.word	0x20000000

0800451c <ColorcheckTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ColorcheckTask */
void ColorcheckTask(void const * argument)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ColorcheckTask */
	vTaskSuspend(ColorcheckHandle);
 8004524:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <ColorcheckTask+0x88>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f005 f9b5 	bl	8009898 <vTaskSuspend>
	uint16_t temp=0;
 800452e:	2300      	movs	r3, #0
 8004530:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */

	HAL_UART_Receive_IT(&huart2,(uint8_t*) &Rx_Buf,2);
 8004532:	2202      	movs	r2, #2
 8004534:	491c      	ldr	r1, [pc, #112]	; (80045a8 <ColorcheckTask+0x8c>)
 8004536:	481d      	ldr	r0, [pc, #116]	; (80045ac <ColorcheckTask+0x90>)
 8004538:	f003 fa95 	bl	8007a66 <HAL_UART_Receive_IT>
	for(;;)
	{
		temp=0;
 800453c:	2300      	movs	r3, #0
 800453e:	81fb      	strh	r3, [r7, #14]
	  osSemaphoreWait(CameraUARTSemHandle, osWaitForever);
 8004540:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <ColorcheckTask+0x94>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f04f 31ff 	mov.w	r1, #4294967295
 8004548:	4618      	mov	r0, r3
 800454a:	f004 f8cb 	bl	80086e4 <osSemaphoreWait>
	  //camera_recieve_IT_flag=0;

	  temp = Camera_Data;
 800454e:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <ColorcheckTask+0x98>)
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	81fb      	strh	r3, [r7, #14]
	  temp = temp&(0x1800);
 8004554:	89fb      	ldrh	r3, [r7, #14]
 8004556:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800455a:	81fb      	strh	r3, [r7, #14]
	  temp = (temp>>11);
 800455c:	89fb      	ldrh	r3, [r7, #14]
 800455e:	0adb      	lsrs	r3, r3, #11
 8004560:	81fb      	strh	r3, [r7, #14]
	  switch(temp)
 8004562:	89fb      	ldrh	r3, [r7, #14]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d014      	beq.n	8004592 <ColorcheckTask+0x76>
 8004568:	2b03      	cmp	r3, #3
 800456a:	dc19      	bgt.n	80045a0 <ColorcheckTask+0x84>
 800456c:	2b01      	cmp	r3, #1
 800456e:	d002      	beq.n	8004576 <ColorcheckTask+0x5a>
 8004570:	2b02      	cmp	r3, #2
 8004572:	d007      	beq.n	8004584 <ColorcheckTask+0x68>
		  break;
	  case 3:
		  yellow++;
		  break;
	  default:
		  break;
 8004574:	e014      	b.n	80045a0 <ColorcheckTask+0x84>
		  blue++;
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <ColorcheckTask+0x9c>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	3301      	adds	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <ColorcheckTask+0x9c>)
 8004580:	801a      	strh	r2, [r3, #0]
		  break;
 8004582:	e00e      	b.n	80045a2 <ColorcheckTask+0x86>
		  pink++;
 8004584:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <ColorcheckTask+0xa0>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <ColorcheckTask+0xa0>)
 800458e:	801a      	strh	r2, [r3, #0]
		  break;
 8004590:	e007      	b.n	80045a2 <ColorcheckTask+0x86>
		  yellow++;
 8004592:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <ColorcheckTask+0xa4>)
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <ColorcheckTask+0xa4>)
 800459c:	801a      	strh	r2, [r3, #0]
		  break;
 800459e:	e000      	b.n	80045a2 <ColorcheckTask+0x86>
		  break;
 80045a0:	bf00      	nop
		temp=0;
 80045a2:	e7cb      	b.n	800453c <ColorcheckTask+0x20>
 80045a4:	20004230 	.word	0x20004230
 80045a8:	20000294 	.word	0x20000294
 80045ac:	200042d0 	.word	0x200042d0
 80045b0:	20004124 	.word	0x20004124
 80045b4:	20000296 	.word	0x20000296
 80045b8:	200002d8 	.word	0x200002d8
 80045bc:	200002da 	.word	0x200002da
 80045c0:	200002dc 	.word	0x200002dc

080045c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a10      	ldr	r2, [pc, #64]	; (8004614 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d102      	bne.n	80045dc <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80045d6:	f000 fbe3 	bl	8004da0 <HAL_IncTick>
	   	else
  		mileage_IT_number++;
  		//HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);//Green LED
  	}
  /* USER CODE END Callback 1 */
}
 80045da:	e016      	b.n	800460a <HAL_TIM_PeriodElapsedCallback+0x46>
  else if(htim->Instance==TIM2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d111      	bne.n	800460a <HAL_TIM_PeriodElapsedCallback+0x46>
		if(__HAL_TIM_GET_COUNTER(&htim2)>3000)
 80045e6:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d905      	bls.n	8004600 <HAL_TIM_PeriodElapsedCallback+0x3c>
	    	mileage_IT_number--;
 80045f4:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80045fc:	6013      	str	r3, [r2, #0]
}
 80045fe:	e004      	b.n	800460a <HAL_TIM_PeriodElapsedCallback+0x46>
  		mileage_IT_number++;
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	4a05      	ldr	r2, [pc, #20]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004608:	6013      	str	r3, [r2, #0]
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	20004288 	.word	0x20004288
 800461c:	20000004 	.word	0x20000004

08004620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004624:	b672      	cpsid	i
}
 8004626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004628:	e7fe      	b.n	8004628 <Error_Handler+0x8>
	...

0800462c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <HAL_MspInit+0x54>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	4a11      	ldr	r2, [pc, #68]	; (8004680 <HAL_MspInit+0x54>)
 800463c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004640:	6453      	str	r3, [r2, #68]	; 0x44
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <HAL_MspInit+0x54>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_MspInit+0x54>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <HAL_MspInit+0x54>)
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465c:	6413      	str	r3, [r2, #64]	; 0x40
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <HAL_MspInit+0x54>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800466a:	2200      	movs	r2, #0
 800466c:	210f      	movs	r1, #15
 800466e:	f06f 0001 	mvn.w	r0, #1
 8004672:	f000 fc6d 	bl	8004f50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800

08004684 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a05      	ldr	r2, [pc, #20]	; (80046a8 <HAL_RTC_MspInit+0x24>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d102      	bne.n	800469c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <HAL_RTC_MspInit+0x28>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40002800 	.word	0x40002800
 80046ac:	42470e3c 	.word	0x42470e3c

080046b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	; 0x30
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	f107 031c 	add.w	r3, r7, #28
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d0:	d134      	bne.n	800473c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	4a33      	ldr	r2, [pc, #204]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	6413      	str	r3, [r2, #64]	; 0x40
 80046e2:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30
 80046fe:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800470a:	2322      	movs	r3, #34	; 0x22
 800470c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470e:	2302      	movs	r3, #2
 8004710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004716:	2300      	movs	r3, #0
 8004718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800471a:	2301      	movs	r3, #1
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471e:	f107 031c 	add.w	r3, r7, #28
 8004722:	4619      	mov	r1, r3
 8004724:	4821      	ldr	r0, [pc, #132]	; (80047ac <HAL_TIM_Encoder_MspInit+0xfc>)
 8004726:	f000 fccf 	bl	80050c8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	2105      	movs	r1, #5
 800472e:	201c      	movs	r0, #28
 8004730:	f000 fc0e 	bl	8004f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004734:	201c      	movs	r0, #28
 8004736:	f000 fc27 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800473a:	e030      	b.n	800479e <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM8)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_TIM_Encoder_MspInit+0x100>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d12b      	bne.n	800479e <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	6453      	str	r3, [r2, #68]	; 0x44
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	6313      	str	r3, [r2, #48]	; 0x30
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800477e:	23c0      	movs	r3, #192	; 0xc0
 8004780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004782:	2302      	movs	r3, #2
 8004784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	2300      	movs	r3, #0
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478a:	2300      	movs	r3, #0
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800478e:	2303      	movs	r3, #3
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004792:	f107 031c 	add.w	r3, r7, #28
 8004796:	4619      	mov	r1, r3
 8004798:	4806      	ldr	r0, [pc, #24]	; (80047b4 <HAL_TIM_Encoder_MspInit+0x104>)
 800479a:	f000 fc95 	bl	80050c8 <HAL_GPIO_Init>
}
 800479e:	bf00      	nop
 80047a0:	3730      	adds	r7, #48	; 0x30
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40020000 	.word	0x40020000
 80047b0:	40010400 	.word	0x40010400
 80047b4:	40020800 	.word	0x40020800

080047b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <HAL_TIM_Base_MspInit+0x64>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10e      	bne.n	80047e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <HAL_TIM_Base_MspInit+0x68>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	4a13      	ldr	r2, [pc, #76]	; (8004820 <HAL_TIM_Base_MspInit+0x68>)
 80047d4:	f043 0302 	orr.w	r3, r3, #2
 80047d8:	6413      	str	r3, [r2, #64]	; 0x40
 80047da:	4b11      	ldr	r3, [pc, #68]	; (8004820 <HAL_TIM_Base_MspInit+0x68>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80047e6:	e012      	b.n	800480e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <HAL_TIM_Base_MspInit+0x6c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10d      	bne.n	800480e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_TIM_Base_MspInit+0x68>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <HAL_TIM_Base_MspInit+0x68>)
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
 8004802:	4b07      	ldr	r3, [pc, #28]	; (8004820 <HAL_TIM_Base_MspInit+0x68>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	68bb      	ldr	r3, [r7, #8]
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40000400 	.word	0x40000400
 8004820:	40023800 	.word	0x40023800
 8004824:	40000800 	.word	0x40000800

08004828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	60da      	str	r2, [r3, #12]
 800483e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a24      	ldr	r2, [pc, #144]	; (80048d8 <HAL_TIM_MspPostInit+0xb0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d11e      	bne.n	8004888 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	4b23      	ldr	r3, [pc, #140]	; (80048dc <HAL_TIM_MspPostInit+0xb4>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	4a22      	ldr	r2, [pc, #136]	; (80048dc <HAL_TIM_MspPostInit+0xb4>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6313      	str	r3, [r2, #48]	; 0x30
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_TIM_MspPostInit+0xb4>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = leftPWM_Pin;
 8004866:	2340      	movs	r3, #64	; 0x40
 8004868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486a:	2302      	movs	r3, #2
 800486c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004876:	2302      	movs	r3, #2
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(leftPWM_GPIO_Port, &GPIO_InitStruct);
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4619      	mov	r1, r3
 8004880:	4817      	ldr	r0, [pc, #92]	; (80048e0 <HAL_TIM_MspPostInit+0xb8>)
 8004882:	f000 fc21 	bl	80050c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004886:	e023      	b.n	80048d0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <HAL_TIM_MspPostInit+0xbc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d11e      	bne.n	80048d0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	4b11      	ldr	r3, [pc, #68]	; (80048dc <HAL_TIM_MspPostInit+0xb4>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	4a10      	ldr	r2, [pc, #64]	; (80048dc <HAL_TIM_MspPostInit+0xb4>)
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	6313      	str	r3, [r2, #48]	; 0x30
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <HAL_TIM_MspPostInit+0xb4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightPWM_Pin;
 80048ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b4:	2302      	movs	r3, #2
 80048b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048bc:	2300      	movs	r3, #0
 80048be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80048c0:	2302      	movs	r3, #2
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(rightPWM_GPIO_Port, &GPIO_InitStruct);
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	4619      	mov	r1, r3
 80048ca:	4807      	ldr	r0, [pc, #28]	; (80048e8 <HAL_TIM_MspPostInit+0xc0>)
 80048cc:	f000 fbfc 	bl	80050c8 <HAL_GPIO_Init>
}
 80048d0:	bf00      	nop
 80048d2:	3728      	adds	r7, #40	; 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40020000 	.word	0x40020000
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40020c00 	.word	0x40020c00

080048ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b092      	sub	sp, #72	; 0x48
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	609a      	str	r2, [r3, #8]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a9a      	ldr	r2, [pc, #616]	; (8004b74 <HAL_UART_MspInit+0x288>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d135      	bne.n	800497a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	633b      	str	r3, [r7, #48]	; 0x30
 8004912:	4b99      	ldr	r3, [pc, #612]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	4a98      	ldr	r2, [pc, #608]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800491c:	6413      	str	r3, [r2, #64]	; 0x40
 800491e:	4b96      	ldr	r3, [pc, #600]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004926:	633b      	str	r3, [r7, #48]	; 0x30
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492e:	4b92      	ldr	r3, [pc, #584]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	4a91      	ldr	r2, [pc, #580]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004934:	f043 0304 	orr.w	r3, r3, #4
 8004938:	6313      	str	r3, [r2, #48]	; 0x30
 800493a:	4b8f      	ldr	r3, [pc, #572]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004946:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494c:	2302      	movs	r3, #2
 800494e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004950:	2301      	movs	r3, #1
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004954:	2303      	movs	r3, #3
 8004956:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004958:	2308      	movs	r3, #8
 800495a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800495c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004960:	4619      	mov	r1, r3
 8004962:	4886      	ldr	r0, [pc, #536]	; (8004b7c <HAL_UART_MspInit+0x290>)
 8004964:	f000 fbb0 	bl	80050c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8004968:	2200      	movs	r2, #0
 800496a:	2105      	movs	r1, #5
 800496c:	2034      	movs	r0, #52	; 0x34
 800496e:	f000 faef 	bl	8004f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004972:	2034      	movs	r0, #52	; 0x34
 8004974:	f000 fb08 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004978:	e0f7      	b.n	8004b6a <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==UART5)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a80      	ldr	r2, [pc, #512]	; (8004b80 <HAL_UART_MspInit+0x294>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d14b      	bne.n	8004a1c <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004984:	2300      	movs	r3, #0
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
 8004988:	4b7b      	ldr	r3, [pc, #492]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	4a7a      	ldr	r2, [pc, #488]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 800498e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004992:	6413      	str	r3, [r2, #64]	; 0x40
 8004994:	4b78      	ldr	r3, [pc, #480]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049a0:	2300      	movs	r3, #0
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
 80049a4:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	4a73      	ldr	r2, [pc, #460]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 80049aa:	f043 0304 	orr.w	r3, r3, #4
 80049ae:	6313      	str	r3, [r2, #48]	; 0x30
 80049b0:	4b71      	ldr	r3, [pc, #452]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049bc:	2300      	movs	r3, #0
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	4b6d      	ldr	r3, [pc, #436]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	4a6c      	ldr	r2, [pc, #432]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 80049c6:	f043 0308 	orr.w	r3, r3, #8
 80049ca:	6313      	str	r3, [r2, #48]	; 0x30
 80049cc:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	623b      	str	r3, [r7, #32]
 80049d6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80049d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049de:	2302      	movs	r3, #2
 80049e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049e2:	2301      	movs	r3, #1
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e6:	2303      	movs	r3, #3
 80049e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80049ea:	2308      	movs	r3, #8
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049f2:	4619      	mov	r1, r3
 80049f4:	4861      	ldr	r0, [pc, #388]	; (8004b7c <HAL_UART_MspInit+0x290>)
 80049f6:	f000 fb67 	bl	80050c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049fa:	2304      	movs	r3, #4
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fe:	2302      	movs	r3, #2
 8004a00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a02:	2301      	movs	r3, #1
 8004a04:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a06:	2303      	movs	r3, #3
 8004a08:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a12:	4619      	mov	r1, r3
 8004a14:	485b      	ldr	r0, [pc, #364]	; (8004b84 <HAL_UART_MspInit+0x298>)
 8004a16:	f000 fb57 	bl	80050c8 <HAL_GPIO_Init>
}
 8004a1a:	e0a6      	b.n	8004b6a <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a59      	ldr	r2, [pc, #356]	; (8004b88 <HAL_UART_MspInit+0x29c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d135      	bne.n	8004a92 <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	4a52      	ldr	r2, [pc, #328]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004a30:	f043 0310 	orr.w	r3, r3, #16
 8004a34:	6453      	str	r3, [r2, #68]	; 0x44
 8004a36:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	4b4c      	ldr	r3, [pc, #304]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	4a4b      	ldr	r2, [pc, #300]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	6313      	str	r3, [r2, #48]	; 0x30
 8004a52:	4b49      	ldr	r3, [pc, #292]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a64:	2302      	movs	r3, #2
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a70:	2307      	movs	r3, #7
 8004a72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4844      	ldr	r0, [pc, #272]	; (8004b8c <HAL_UART_MspInit+0x2a0>)
 8004a7c:	f000 fb24 	bl	80050c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004a80:	2200      	movs	r2, #0
 8004a82:	2105      	movs	r1, #5
 8004a84:	2025      	movs	r0, #37	; 0x25
 8004a86:	f000 fa63 	bl	8004f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a8a:	2025      	movs	r0, #37	; 0x25
 8004a8c:	f000 fa7c 	bl	8004f88 <HAL_NVIC_EnableIRQ>
}
 8004a90:	e06b      	b.n	8004b6a <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3e      	ldr	r2, [pc, #248]	; (8004b90 <HAL_UART_MspInit+0x2a4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d134      	bne.n	8004b06 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	4a34      	ldr	r2, [pc, #208]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8004aac:	4b32      	ldr	r3, [pc, #200]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	4a2d      	ldr	r2, [pc, #180]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ad4:	230c      	movs	r3, #12
 8004ad6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ae4:	2307      	movs	r3, #7
 8004ae6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004aec:	4619      	mov	r1, r3
 8004aee:	4827      	ldr	r0, [pc, #156]	; (8004b8c <HAL_UART_MspInit+0x2a0>)
 8004af0:	f000 faea 	bl	80050c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004af4:	2200      	movs	r2, #0
 8004af6:	2105      	movs	r1, #5
 8004af8:	2026      	movs	r0, #38	; 0x26
 8004afa:	f000 fa29 	bl	8004f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004afe:	2026      	movs	r0, #38	; 0x26
 8004b00:	f000 fa42 	bl	8004f88 <HAL_NVIC_EnableIRQ>
}
 8004b04:	e031      	b.n	8004b6a <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART3)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a22      	ldr	r2, [pc, #136]	; (8004b94 <HAL_UART_MspInit+0x2a8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d12c      	bne.n	8004b6a <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b20:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	4a10      	ldr	r2, [pc, #64]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004b36:	f043 0302 	orr.w	r3, r3, #2
 8004b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <HAL_UART_MspInit+0x28c>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b56:	2303      	movs	r3, #3
 8004b58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b5a:	2307      	movs	r3, #7
 8004b5c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b62:	4619      	mov	r1, r3
 8004b64:	480c      	ldr	r0, [pc, #48]	; (8004b98 <HAL_UART_MspInit+0x2ac>)
 8004b66:	f000 faaf 	bl	80050c8 <HAL_GPIO_Init>
}
 8004b6a:	bf00      	nop
 8004b6c:	3748      	adds	r7, #72	; 0x48
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40004c00 	.word	0x40004c00
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40020800 	.word	0x40020800
 8004b80:	40005000 	.word	0x40005000
 8004b84:	40020c00 	.word	0x40020c00
 8004b88:	40011000 	.word	0x40011000
 8004b8c:	40020000 	.word	0x40020000
 8004b90:	40004400 	.word	0x40004400
 8004b94:	40004800 	.word	0x40004800
 8004b98:	40020400 	.word	0x40020400

08004b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	; 0x30
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004bac:	2200      	movs	r2, #0
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	2019      	movs	r0, #25
 8004bb2:	f000 f9cd 	bl	8004f50 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004bb6:	2019      	movs	r0, #25
 8004bb8:	f000 f9e6 	bl	8004f88 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	4b1f      	ldr	r3, [pc, #124]	; (8004c40 <HAL_InitTick+0xa4>)
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc4:	4a1e      	ldr	r2, [pc, #120]	; (8004c40 <HAL_InitTick+0xa4>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6453      	str	r3, [r2, #68]	; 0x44
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <HAL_InitTick+0xa4>)
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004bd8:	f107 0210 	add.w	r2, r7, #16
 8004bdc:	f107 0314 	add.w	r3, r7, #20
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 f8c0 	bl	8005d68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004be8:	f001 f8aa 	bl	8005d40 <HAL_RCC_GetPCLK2Freq>
 8004bec:	4603      	mov	r3, r0
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	4a13      	ldr	r2, [pc, #76]	; (8004c44 <HAL_InitTick+0xa8>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0c9b      	lsrs	r3, r3, #18
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_InitTick+0xac>)
 8004c02:	4a12      	ldr	r2, [pc, #72]	; (8004c4c <HAL_InitTick+0xb0>)
 8004c04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004c06:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <HAL_InitTick+0xac>)
 8004c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <HAL_InitTick+0xac>)
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_InitTick+0xac>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_InitTick+0xac>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004c20:	4809      	ldr	r0, [pc, #36]	; (8004c48 <HAL_InitTick+0xac>)
 8004c22:	f001 fc38 	bl	8006496 <HAL_TIM_Base_Init>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d104      	bne.n	8004c36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004c2c:	4806      	ldr	r0, [pc, #24]	; (8004c48 <HAL_InitTick+0xac>)
 8004c2e:	f001 fc81 	bl	8006534 <HAL_TIM_Base_Start_IT>
 8004c32:	4603      	mov	r3, r0
 8004c34:	e000      	b.n	8004c38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3730      	adds	r7, #48	; 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40023800 	.word	0x40023800
 8004c44:	431bde83 	.word	0x431bde83
 8004c48:	20004318 	.word	0x20004318
 8004c4c:	40010000 	.word	0x40010000

08004c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004c54:	f001 f8ba 	bl	8005dcc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c58:	e7fe      	b.n	8004c58 <NMI_Handler+0x8>

08004c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c5e:	e7fe      	b.n	8004c5e <HardFault_Handler+0x4>

08004c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c64:	e7fe      	b.n	8004c64 <MemManage_Handler+0x4>

08004c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c6a:	e7fe      	b.n	8004c6a <BusFault_Handler+0x4>

08004c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c70:	e7fe      	b.n	8004c70 <UsageFault_Handler+0x4>

08004c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c84:	4802      	ldr	r0, [pc, #8]	; (8004c90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004c86:	f001 ff1b 	bl	8006ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20004318 	.word	0x20004318

08004c94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c98:	4802      	ldr	r0, [pc, #8]	; (8004ca4 <TIM2_IRQHandler+0x10>)
 8004c9a:	f001 ff11 	bl	8006ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20004288 	.word	0x20004288

08004ca8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004cac:	4802      	ldr	r0, [pc, #8]	; (8004cb8 <USART1_IRQHandler+0x10>)
 8004cae:	f002 ff0b 	bl	8007ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200041c4 	.word	0x200041c4

08004cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004cc0:	4802      	ldr	r0, [pc, #8]	; (8004ccc <USART2_IRQHandler+0x10>)
 8004cc2:	f002 ff01 	bl	8007ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	200042d0 	.word	0x200042d0

08004cd0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004cd4:	4802      	ldr	r0, [pc, #8]	; (8004ce0 <UART4_IRQHandler+0x10>)
 8004cd6:	f002 fef7 	bl	8007ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20004244 	.word	0x20004244

08004ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <SystemInit+0x20>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <SystemInit+0x20>)
 8004cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d0c:	480d      	ldr	r0, [pc, #52]	; (8004d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004d0e:	490e      	ldr	r1, [pc, #56]	; (8004d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004d10:	4a0e      	ldr	r2, [pc, #56]	; (8004d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d14:	e002      	b.n	8004d1c <LoopCopyDataInit>

08004d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d1a:	3304      	adds	r3, #4

08004d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d20:	d3f9      	bcc.n	8004d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d22:	4a0b      	ldr	r2, [pc, #44]	; (8004d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004d24:	4c0b      	ldr	r4, [pc, #44]	; (8004d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d28:	e001      	b.n	8004d2e <LoopFillZerobss>

08004d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d2c:	3204      	adds	r2, #4

08004d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d30:	d3fb      	bcc.n	8004d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d32:	f7ff ffd7 	bl	8004ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d36:	f006 f949 	bl	800afcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d3a:	f7fc f825 	bl	8000d88 <main>
  bx  lr    
 8004d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d48:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8004d4c:	0800b1a0 	.word	0x0800b1a0
  ldr r2, =_sbss
 8004d50:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8004d54:	20004364 	.word	0x20004364

08004d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d58:	e7fe      	b.n	8004d58 <ADC_IRQHandler>
	...

08004d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d60:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <HAL_Init+0x40>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a0d      	ldr	r2, [pc, #52]	; (8004d9c <HAL_Init+0x40>)
 8004d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_Init+0x40>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <HAL_Init+0x40>)
 8004d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d78:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <HAL_Init+0x40>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a07      	ldr	r2, [pc, #28]	; (8004d9c <HAL_Init+0x40>)
 8004d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d84:	2003      	movs	r0, #3
 8004d86:	f000 f8d8 	bl	8004f3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7ff ff06 	bl	8004b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d90:	f7ff fc4c 	bl	800462c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023c00 	.word	0x40023c00

08004da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_IncTick+0x20>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_IncTick+0x24>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4413      	add	r3, r2
 8004db0:	4a04      	ldr	r2, [pc, #16]	; (8004dc4 <HAL_IncTick+0x24>)
 8004db2:	6013      	str	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	2000001c 	.word	0x2000001c
 8004dc4:	20004360 	.word	0x20004360

08004dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return uwTick;
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <HAL_GetTick+0x14>)
 8004dce:	681b      	ldr	r3, [r3, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20004360 	.word	0x20004360

08004de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <__NVIC_SetPriorityGrouping+0x44>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e12:	4a04      	ldr	r2, [pc, #16]	; (8004e24 <__NVIC_SetPriorityGrouping+0x44>)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	60d3      	str	r3, [r2, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <__NVIC_GetPriorityGrouping+0x18>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	f003 0307 	and.w	r3, r3, #7
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	db0b      	blt.n	8004e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	f003 021f 	and.w	r2, r3, #31
 8004e5c:	4907      	ldr	r1, [pc, #28]	; (8004e7c <__NVIC_EnableIRQ+0x38>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2001      	movs	r0, #1
 8004e66:	fa00 f202 	lsl.w	r2, r0, r2
 8004e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	e000e100 	.word	0xe000e100

08004e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	6039      	str	r1, [r7, #0]
 8004e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	db0a      	blt.n	8004eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	490c      	ldr	r1, [pc, #48]	; (8004ecc <__NVIC_SetPriority+0x4c>)
 8004e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9e:	0112      	lsls	r2, r2, #4
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ea8:	e00a      	b.n	8004ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	4908      	ldr	r1, [pc, #32]	; (8004ed0 <__NVIC_SetPriority+0x50>)
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	3b04      	subs	r3, #4
 8004eb8:	0112      	lsls	r2, r2, #4
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	761a      	strb	r2, [r3, #24]
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000e100 	.word	0xe000e100
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f1c3 0307 	rsb	r3, r3, #7
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf28      	it	cs
 8004ef2:	2304      	movcs	r3, #4
 8004ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d902      	bls.n	8004f04 <NVIC_EncodePriority+0x30>
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	3b03      	subs	r3, #3
 8004f02:	e000      	b.n	8004f06 <NVIC_EncodePriority+0x32>
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f08:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43da      	mvns	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	401a      	ands	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	fa01 f303 	lsl.w	r3, r1, r3
 8004f26:	43d9      	mvns	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f2c:	4313      	orrs	r3, r2
         );
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3724      	adds	r7, #36	; 0x24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff ff4c 	bl	8004de0 <__NVIC_SetPriorityGrouping>
}
 8004f48:	bf00      	nop
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f62:	f7ff ff61 	bl	8004e28 <__NVIC_GetPriorityGrouping>
 8004f66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f7ff ffb1 	bl	8004ed4 <NVIC_EncodePriority>
 8004f72:	4602      	mov	r2, r0
 8004f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff ff80 	bl	8004e80 <__NVIC_SetPriority>
}
 8004f80:	bf00      	nop
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ff54 	bl	8004e44 <__NVIC_EnableIRQ>
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fb2:	f7ff ff09 	bl	8004dc8 <HAL_GetTick>
 8004fb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d008      	beq.n	8004fd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2280      	movs	r2, #128	; 0x80
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e052      	b.n	800507c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0216 	bic.w	r2, r2, #22
 8004fe4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <HAL_DMA_Abort+0x62>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0208 	bic.w	r2, r2, #8
 8005014:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005026:	e013      	b.n	8005050 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005028:	f7ff fece 	bl	8004dc8 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b05      	cmp	r3, #5
 8005034:	d90c      	bls.n	8005050 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2203      	movs	r2, #3
 8005048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e015      	b.n	800507c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e4      	bne.n	8005028 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	223f      	movs	r2, #63	; 0x3f
 8005064:	409a      	lsls	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d004      	beq.n	80050a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2280      	movs	r2, #128	; 0x80
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e00c      	b.n	80050bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2205      	movs	r2, #5
 80050a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b089      	sub	sp, #36	; 0x24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050de:	2300      	movs	r3, #0
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	e16b      	b.n	80053bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050e4:	2201      	movs	r2, #1
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4013      	ands	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	f040 815a 	bne.w	80053b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b01      	cmp	r3, #1
 800510c:	d005      	beq.n	800511a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005116:	2b02      	cmp	r3, #2
 8005118:	d130      	bne.n	800517c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	2203      	movs	r2, #3
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005150:	2201      	movs	r2, #1
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 0201 	and.w	r2, r3, #1
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	2b03      	cmp	r3, #3
 8005186:	d017      	beq.n	80051b8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	2203      	movs	r2, #3
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4013      	ands	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d123      	bne.n	800520c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	08da      	lsrs	r2, r3, #3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3208      	adds	r2, #8
 80051cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	220f      	movs	r2, #15
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	08da      	lsrs	r2, r3, #3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3208      	adds	r2, #8
 8005206:	69b9      	ldr	r1, [r7, #24]
 8005208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	2203      	movs	r2, #3
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 0203 	and.w	r2, r3, #3
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80b4 	beq.w	80053b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	4b60      	ldr	r3, [pc, #384]	; (80053d4 <HAL_GPIO_Init+0x30c>)
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	4a5f      	ldr	r2, [pc, #380]	; (80053d4 <HAL_GPIO_Init+0x30c>)
 8005258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800525c:	6453      	str	r3, [r2, #68]	; 0x44
 800525e:	4b5d      	ldr	r3, [pc, #372]	; (80053d4 <HAL_GPIO_Init+0x30c>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800526a:	4a5b      	ldr	r2, [pc, #364]	; (80053d8 <HAL_GPIO_Init+0x310>)
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	089b      	lsrs	r3, r3, #2
 8005270:	3302      	adds	r3, #2
 8005272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	220f      	movs	r2, #15
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	43db      	mvns	r3, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4013      	ands	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a52      	ldr	r2, [pc, #328]	; (80053dc <HAL_GPIO_Init+0x314>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d02b      	beq.n	80052ee <HAL_GPIO_Init+0x226>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a51      	ldr	r2, [pc, #324]	; (80053e0 <HAL_GPIO_Init+0x318>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d025      	beq.n	80052ea <HAL_GPIO_Init+0x222>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a50      	ldr	r2, [pc, #320]	; (80053e4 <HAL_GPIO_Init+0x31c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01f      	beq.n	80052e6 <HAL_GPIO_Init+0x21e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a4f      	ldr	r2, [pc, #316]	; (80053e8 <HAL_GPIO_Init+0x320>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d019      	beq.n	80052e2 <HAL_GPIO_Init+0x21a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a4e      	ldr	r2, [pc, #312]	; (80053ec <HAL_GPIO_Init+0x324>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_GPIO_Init+0x216>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a4d      	ldr	r2, [pc, #308]	; (80053f0 <HAL_GPIO_Init+0x328>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00d      	beq.n	80052da <HAL_GPIO_Init+0x212>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a4c      	ldr	r2, [pc, #304]	; (80053f4 <HAL_GPIO_Init+0x32c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d007      	beq.n	80052d6 <HAL_GPIO_Init+0x20e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a4b      	ldr	r2, [pc, #300]	; (80053f8 <HAL_GPIO_Init+0x330>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <HAL_GPIO_Init+0x20a>
 80052ce:	2307      	movs	r3, #7
 80052d0:	e00e      	b.n	80052f0 <HAL_GPIO_Init+0x228>
 80052d2:	2308      	movs	r3, #8
 80052d4:	e00c      	b.n	80052f0 <HAL_GPIO_Init+0x228>
 80052d6:	2306      	movs	r3, #6
 80052d8:	e00a      	b.n	80052f0 <HAL_GPIO_Init+0x228>
 80052da:	2305      	movs	r3, #5
 80052dc:	e008      	b.n	80052f0 <HAL_GPIO_Init+0x228>
 80052de:	2304      	movs	r3, #4
 80052e0:	e006      	b.n	80052f0 <HAL_GPIO_Init+0x228>
 80052e2:	2303      	movs	r3, #3
 80052e4:	e004      	b.n	80052f0 <HAL_GPIO_Init+0x228>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e002      	b.n	80052f0 <HAL_GPIO_Init+0x228>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <HAL_GPIO_Init+0x228>
 80052ee:	2300      	movs	r3, #0
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	f002 0203 	and.w	r2, r2, #3
 80052f6:	0092      	lsls	r2, r2, #2
 80052f8:	4093      	lsls	r3, r2
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005300:	4935      	ldr	r1, [pc, #212]	; (80053d8 <HAL_GPIO_Init+0x310>)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	3302      	adds	r3, #2
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800530e:	4b3b      	ldr	r3, [pc, #236]	; (80053fc <HAL_GPIO_Init+0x334>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	43db      	mvns	r3, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	4013      	ands	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005332:	4a32      	ldr	r2, [pc, #200]	; (80053fc <HAL_GPIO_Init+0x334>)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005338:	4b30      	ldr	r3, [pc, #192]	; (80053fc <HAL_GPIO_Init+0x334>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	43db      	mvns	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4013      	ands	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800535c:	4a27      	ldr	r2, [pc, #156]	; (80053fc <HAL_GPIO_Init+0x334>)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005362:	4b26      	ldr	r3, [pc, #152]	; (80053fc <HAL_GPIO_Init+0x334>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	43db      	mvns	r3, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4013      	ands	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005386:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <HAL_GPIO_Init+0x334>)
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800538c:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <HAL_GPIO_Init+0x334>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	43db      	mvns	r3, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4013      	ands	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053b0:	4a12      	ldr	r2, [pc, #72]	; (80053fc <HAL_GPIO_Init+0x334>)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	3301      	adds	r3, #1
 80053ba:	61fb      	str	r3, [r7, #28]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b0f      	cmp	r3, #15
 80053c0:	f67f ae90 	bls.w	80050e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	3724      	adds	r7, #36	; 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40013800 	.word	0x40013800
 80053dc:	40020000 	.word	0x40020000
 80053e0:	40020400 	.word	0x40020400
 80053e4:	40020800 	.word	0x40020800
 80053e8:	40020c00 	.word	0x40020c00
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40021400 	.word	0x40021400
 80053f4:	40021800 	.word	0x40021800
 80053f8:	40021c00 	.word	0x40021c00
 80053fc:	40013c00 	.word	0x40013c00

08005400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	807b      	strh	r3, [r7, #2]
 800540c:	4613      	mov	r3, r2
 800540e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005410:	787b      	ldrb	r3, [r7, #1]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005416:	887a      	ldrh	r2, [r7, #2]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800541c:	e003      	b.n	8005426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800541e:	887b      	ldrh	r3, [r7, #2]
 8005420:	041a      	lsls	r2, r3, #16
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	619a      	str	r2, [r3, #24]
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005444:	887a      	ldrh	r2, [r7, #2]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4013      	ands	r3, r2
 800544a:	041a      	lsls	r2, r3, #16
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	43d9      	mvns	r1, r3
 8005450:	887b      	ldrh	r3, [r7, #2]
 8005452:	400b      	ands	r3, r1
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	619a      	str	r2, [r3, #24]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e264      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d075      	beq.n	8005572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005486:	4ba3      	ldr	r3, [pc, #652]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b04      	cmp	r3, #4
 8005490:	d00c      	beq.n	80054ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005492:	4ba0      	ldr	r3, [pc, #640]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800549a:	2b08      	cmp	r3, #8
 800549c:	d112      	bne.n	80054c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549e:	4b9d      	ldr	r3, [pc, #628]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054aa:	d10b      	bne.n	80054c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ac:	4b99      	ldr	r3, [pc, #612]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d05b      	beq.n	8005570 <HAL_RCC_OscConfig+0x108>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d157      	bne.n	8005570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e23f      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054cc:	d106      	bne.n	80054dc <HAL_RCC_OscConfig+0x74>
 80054ce:	4b91      	ldr	r3, [pc, #580]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a90      	ldr	r2, [pc, #576]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e01d      	b.n	8005518 <HAL_RCC_OscConfig+0xb0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e4:	d10c      	bne.n	8005500 <HAL_RCC_OscConfig+0x98>
 80054e6:	4b8b      	ldr	r3, [pc, #556]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a8a      	ldr	r2, [pc, #552]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4b88      	ldr	r3, [pc, #544]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a87      	ldr	r2, [pc, #540]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e00b      	b.n	8005518 <HAL_RCC_OscConfig+0xb0>
 8005500:	4b84      	ldr	r3, [pc, #528]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a83      	ldr	r2, [pc, #524]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4b81      	ldr	r3, [pc, #516]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a80      	ldr	r2, [pc, #512]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d013      	beq.n	8005548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7ff fc52 	bl	8004dc8 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005528:	f7ff fc4e 	bl	8004dc8 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b64      	cmp	r3, #100	; 0x64
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e204      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b76      	ldr	r3, [pc, #472]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0xc0>
 8005546:	e014      	b.n	8005572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005548:	f7ff fc3e 	bl	8004dc8 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005550:	f7ff fc3a 	bl	8004dc8 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e1f0      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005562:	4b6c      	ldr	r3, [pc, #432]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0xe8>
 800556e:	e000      	b.n	8005572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d063      	beq.n	8005646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800557e:	4b65      	ldr	r3, [pc, #404]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 030c 	and.w	r3, r3, #12
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800558a:	4b62      	ldr	r3, [pc, #392]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005592:	2b08      	cmp	r3, #8
 8005594:	d11c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005596:	4b5f      	ldr	r3, [pc, #380]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d116      	bne.n	80055d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a2:	4b5c      	ldr	r3, [pc, #368]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_RCC_OscConfig+0x152>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d001      	beq.n	80055ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e1c4      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ba:	4b56      	ldr	r3, [pc, #344]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4952      	ldr	r1, [pc, #328]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ce:	e03a      	b.n	8005646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d020      	beq.n	800561a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d8:	4b4f      	ldr	r3, [pc, #316]	; (8005718 <HAL_RCC_OscConfig+0x2b0>)
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055de:	f7ff fbf3 	bl	8004dc8 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055e6:	f7ff fbef 	bl	8004dc8 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e1a5      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f8:	4b46      	ldr	r3, [pc, #280]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005604:	4b43      	ldr	r3, [pc, #268]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4940      	ldr	r1, [pc, #256]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 8005614:	4313      	orrs	r3, r2
 8005616:	600b      	str	r3, [r1, #0]
 8005618:	e015      	b.n	8005646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561a:	4b3f      	ldr	r3, [pc, #252]	; (8005718 <HAL_RCC_OscConfig+0x2b0>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7ff fbd2 	bl	8004dc8 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005628:	f7ff fbce 	bl	8004dc8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e184      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563a:	4b36      	ldr	r3, [pc, #216]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d030      	beq.n	80056b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d016      	beq.n	8005688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800565a:	4b30      	ldr	r3, [pc, #192]	; (800571c <HAL_RCC_OscConfig+0x2b4>)
 800565c:	2201      	movs	r2, #1
 800565e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7ff fbb2 	bl	8004dc8 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005668:	f7ff fbae 	bl	8004dc8 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e164      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567a:	4b26      	ldr	r3, [pc, #152]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 800567c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x200>
 8005686:	e015      	b.n	80056b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005688:	4b24      	ldr	r3, [pc, #144]	; (800571c <HAL_RCC_OscConfig+0x2b4>)
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568e:	f7ff fb9b 	bl	8004dc8 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005696:	f7ff fb97 	bl	8004dc8 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e14d      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a8:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80056aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80a0 	beq.w	8005802 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c2:	2300      	movs	r3, #0
 80056c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10f      	bne.n	80056f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	4a0e      	ldr	r2, [pc, #56]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e0:	6413      	str	r3, [r2, #64]	; 0x40
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <HAL_RCC_OscConfig+0x2b8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d121      	bne.n	8005742 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <HAL_RCC_OscConfig+0x2b8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a07      	ldr	r2, [pc, #28]	; (8005720 <HAL_RCC_OscConfig+0x2b8>)
 8005704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800570a:	f7ff fb5d 	bl	8004dc8 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005710:	e011      	b.n	8005736 <HAL_RCC_OscConfig+0x2ce>
 8005712:	bf00      	nop
 8005714:	40023800 	.word	0x40023800
 8005718:	42470000 	.word	0x42470000
 800571c:	42470e80 	.word	0x42470e80
 8005720:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005724:	f7ff fb50 	bl	8004dc8 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e106      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005736:	4b85      	ldr	r3, [pc, #532]	; (800594c <HAL_RCC_OscConfig+0x4e4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d106      	bne.n	8005758 <HAL_RCC_OscConfig+0x2f0>
 800574a:	4b81      	ldr	r3, [pc, #516]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	4a80      	ldr	r2, [pc, #512]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6713      	str	r3, [r2, #112]	; 0x70
 8005756:	e01c      	b.n	8005792 <HAL_RCC_OscConfig+0x32a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b05      	cmp	r3, #5
 800575e:	d10c      	bne.n	800577a <HAL_RCC_OscConfig+0x312>
 8005760:	4b7b      	ldr	r3, [pc, #492]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005764:	4a7a      	ldr	r2, [pc, #488]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 8005766:	f043 0304 	orr.w	r3, r3, #4
 800576a:	6713      	str	r3, [r2, #112]	; 0x70
 800576c:	4b78      	ldr	r3, [pc, #480]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	4a77      	ldr	r2, [pc, #476]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6713      	str	r3, [r2, #112]	; 0x70
 8005778:	e00b      	b.n	8005792 <HAL_RCC_OscConfig+0x32a>
 800577a:	4b75      	ldr	r3, [pc, #468]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a74      	ldr	r2, [pc, #464]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
 8005786:	4b72      	ldr	r3, [pc, #456]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	4a71      	ldr	r2, [pc, #452]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 800578c:	f023 0304 	bic.w	r3, r3, #4
 8005790:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d015      	beq.n	80057c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579a:	f7ff fb15 	bl	8004dc8 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a0:	e00a      	b.n	80057b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a2:	f7ff fb11 	bl	8004dc8 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e0c5      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b8:	4b65      	ldr	r3, [pc, #404]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0ee      	beq.n	80057a2 <HAL_RCC_OscConfig+0x33a>
 80057c4:	e014      	b.n	80057f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c6:	f7ff faff 	bl	8004dc8 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057cc:	e00a      	b.n	80057e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ce:	f7ff fafb 	bl	8004dc8 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057dc:	4293      	cmp	r3, r2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e0af      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e4:	4b5a      	ldr	r3, [pc, #360]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1ee      	bne.n	80057ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d105      	bne.n	8005802 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f6:	4b56      	ldr	r3, [pc, #344]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	4a55      	ldr	r2, [pc, #340]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 80057fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 809b 	beq.w	8005942 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800580c:	4b50      	ldr	r3, [pc, #320]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 030c 	and.w	r3, r3, #12
 8005814:	2b08      	cmp	r3, #8
 8005816:	d05c      	beq.n	80058d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d141      	bne.n	80058a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005820:	4b4c      	ldr	r3, [pc, #304]	; (8005954 <HAL_RCC_OscConfig+0x4ec>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005826:	f7ff facf 	bl	8004dc8 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582e:	f7ff facb 	bl	8004dc8 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e081      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005840:	4b43      	ldr	r3, [pc, #268]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	019b      	lsls	r3, r3, #6
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	3b01      	subs	r3, #1
 8005866:	041b      	lsls	r3, r3, #16
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	4937      	ldr	r1, [pc, #220]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 8005872:	4313      	orrs	r3, r2
 8005874:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005876:	4b37      	ldr	r3, [pc, #220]	; (8005954 <HAL_RCC_OscConfig+0x4ec>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587c:	f7ff faa4 	bl	8004dc8 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005884:	f7ff faa0 	bl	8004dc8 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e056      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005896:	4b2e      	ldr	r3, [pc, #184]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x41c>
 80058a2:	e04e      	b.n	8005942 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a4:	4b2b      	ldr	r3, [pc, #172]	; (8005954 <HAL_RCC_OscConfig+0x4ec>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058aa:	f7ff fa8d 	bl	8004dc8 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b2:	f7ff fa89 	bl	8004dc8 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e03f      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c4:	4b22      	ldr	r3, [pc, #136]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x44a>
 80058d0:	e037      	b.n	8005942 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e032      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058de:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <HAL_RCC_OscConfig+0x4e8>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d028      	beq.n	800593e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d121      	bne.n	800593e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005904:	429a      	cmp	r2, r3
 8005906:	d11a      	bne.n	800593e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800590e:	4013      	ands	r3, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005914:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005916:	4293      	cmp	r3, r2
 8005918:	d111      	bne.n	800593e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	3b01      	subs	r3, #1
 8005928:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800592a:	429a      	cmp	r2, r3
 800592c:	d107      	bne.n	800593e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800593a:	429a      	cmp	r2, r3
 800593c:	d001      	beq.n	8005942 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40007000 	.word	0x40007000
 8005950:	40023800 	.word	0x40023800
 8005954:	42470060 	.word	0x42470060

08005958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0cc      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800596c:	4b68      	ldr	r3, [pc, #416]	; (8005b10 <HAL_RCC_ClockConfig+0x1b8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d90c      	bls.n	8005994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597a:	4b65      	ldr	r3, [pc, #404]	; (8005b10 <HAL_RCC_ClockConfig+0x1b8>)
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005982:	4b63      	ldr	r3, [pc, #396]	; (8005b10 <HAL_RCC_ClockConfig+0x1b8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d001      	beq.n	8005994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0b8      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d020      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059ac:	4b59      	ldr	r3, [pc, #356]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4a58      	ldr	r2, [pc, #352]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c4:	4b53      	ldr	r3, [pc, #332]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	4a52      	ldr	r2, [pc, #328]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d0:	4b50      	ldr	r3, [pc, #320]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	494d      	ldr	r1, [pc, #308]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d044      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d107      	bne.n	8005a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f6:	4b47      	ldr	r3, [pc, #284]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d119      	bne.n	8005a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e07f      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d003      	beq.n	8005a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d107      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a16:	4b3f      	ldr	r3, [pc, #252]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e06f      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a26:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e067      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a36:	4b37      	ldr	r3, [pc, #220]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f023 0203 	bic.w	r2, r3, #3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	4934      	ldr	r1, [pc, #208]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a48:	f7ff f9be 	bl	8004dc8 <HAL_GetTick>
 8005a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a50:	f7ff f9ba 	bl	8004dc8 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e04f      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a66:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 020c 	and.w	r2, r3, #12
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d1eb      	bne.n	8005a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a78:	4b25      	ldr	r3, [pc, #148]	; (8005b10 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d20c      	bcs.n	8005aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a86:	4b22      	ldr	r3, [pc, #136]	; (8005b10 <HAL_RCC_ClockConfig+0x1b8>)
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8e:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <HAL_RCC_ClockConfig+0x1b8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d001      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e032      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aac:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4916      	ldr	r1, [pc, #88]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aca:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	490e      	ldr	r1, [pc, #56]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ade:	f000 f82d 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	091b      	lsrs	r3, r3, #4
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	490a      	ldr	r1, [pc, #40]	; (8005b18 <HAL_RCC_ClockConfig+0x1c0>)
 8005af0:	5ccb      	ldrb	r3, [r1, r3]
 8005af2:	fa22 f303 	lsr.w	r3, r2, r3
 8005af6:	4a09      	ldr	r2, [pc, #36]	; (8005b1c <HAL_RCC_ClockConfig+0x1c4>)
 8005af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff f84c 	bl	8004b9c <HAL_InitTick>

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40023c00 	.word	0x40023c00
 8005b14:	40023800 	.word	0x40023800
 8005b18:	0800b178 	.word	0x0800b178
 8005b1c:	20000014 	.word	0x20000014
 8005b20:	20000018 	.word	0x20000018

08005b24 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005b28:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <HAL_RCC_EnableCSS+0x14>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
}
 8005b2e:	bf00      	nop
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	4247004c 	.word	0x4247004c

08005b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	607b      	str	r3, [r7, #4]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b54:	4b67      	ldr	r3, [pc, #412]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 030c 	and.w	r3, r3, #12
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d00d      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x40>
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	f200 80bd 	bhi.w	8005ce0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x34>
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d003      	beq.n	8005b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b6e:	e0b7      	b.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b70:	4b61      	ldr	r3, [pc, #388]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b72:	60bb      	str	r3, [r7, #8]
       break;
 8005b74:	e0b7      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b76:	4b61      	ldr	r3, [pc, #388]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005b78:	60bb      	str	r3, [r7, #8]
      break;
 8005b7a:	e0b4      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b7c:	4b5d      	ldr	r3, [pc, #372]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b86:	4b5b      	ldr	r3, [pc, #364]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d04d      	beq.n	8005c2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b92:	4b58      	ldr	r3, [pc, #352]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	099b      	lsrs	r3, r3, #6
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ba2:	f04f 0100 	mov.w	r1, #0
 8005ba6:	ea02 0800 	and.w	r8, r2, r0
 8005baa:	ea03 0901 	and.w	r9, r3, r1
 8005bae:	4640      	mov	r0, r8
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	014b      	lsls	r3, r1, #5
 8005bbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bc0:	0142      	lsls	r2, r0, #5
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	ebb0 0008 	subs.w	r0, r0, r8
 8005bca:	eb61 0109 	sbc.w	r1, r1, r9
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	018b      	lsls	r3, r1, #6
 8005bd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bdc:	0182      	lsls	r2, r0, #6
 8005bde:	1a12      	subs	r2, r2, r0
 8005be0:	eb63 0301 	sbc.w	r3, r3, r1
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	00d9      	lsls	r1, r3, #3
 8005bee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bf2:	00d0      	lsls	r0, r2, #3
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	eb12 0208 	adds.w	r2, r2, r8
 8005bfc:	eb43 0309 	adc.w	r3, r3, r9
 8005c00:	f04f 0000 	mov.w	r0, #0
 8005c04:	f04f 0100 	mov.w	r1, #0
 8005c08:	0259      	lsls	r1, r3, #9
 8005c0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005c0e:	0250      	lsls	r0, r2, #9
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	f7fa ff1c 	bl	8000a5c <__aeabi_uldivmod>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4613      	mov	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e04a      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c2e:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	099b      	lsrs	r3, r3, #6
 8005c34:	461a      	mov	r2, r3
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c3e:	f04f 0100 	mov.w	r1, #0
 8005c42:	ea02 0400 	and.w	r4, r2, r0
 8005c46:	ea03 0501 	and.w	r5, r3, r1
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	014b      	lsls	r3, r1, #5
 8005c58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c5c:	0142      	lsls	r2, r0, #5
 8005c5e:	4610      	mov	r0, r2
 8005c60:	4619      	mov	r1, r3
 8005c62:	1b00      	subs	r0, r0, r4
 8005c64:	eb61 0105 	sbc.w	r1, r1, r5
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	018b      	lsls	r3, r1, #6
 8005c72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c76:	0182      	lsls	r2, r0, #6
 8005c78:	1a12      	subs	r2, r2, r0
 8005c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c7e:	f04f 0000 	mov.w	r0, #0
 8005c82:	f04f 0100 	mov.w	r1, #0
 8005c86:	00d9      	lsls	r1, r3, #3
 8005c88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c8c:	00d0      	lsls	r0, r2, #3
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	1912      	adds	r2, r2, r4
 8005c94:	eb45 0303 	adc.w	r3, r5, r3
 8005c98:	f04f 0000 	mov.w	r0, #0
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	0299      	lsls	r1, r3, #10
 8005ca2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ca6:	0290      	lsls	r0, r2, #10
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4610      	mov	r0, r2
 8005cae:	4619      	mov	r1, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	f7fa fed0 	bl	8000a5c <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	0c1b      	lsrs	r3, r3, #16
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cdc:	60bb      	str	r3, [r7, #8]
      break;
 8005cde:	e002      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ce2:	60bb      	str	r3, [r7, #8]
      break;
 8005ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	00f42400 	.word	0x00f42400
 8005cfc:	007a1200 	.word	0x007a1200

08005d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d04:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d06:	681b      	ldr	r3, [r3, #0]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000014 	.word	0x20000014

08005d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d1c:	f7ff fff0 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	0a9b      	lsrs	r3, r3, #10
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	4903      	ldr	r1, [pc, #12]	; (8005d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	0800b188 	.word	0x0800b188

08005d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d44:	f7ff ffdc 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	0b5b      	lsrs	r3, r3, #13
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	4903      	ldr	r1, [pc, #12]	; (8005d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d56:	5ccb      	ldrb	r3, [r1, r3]
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40023800 	.word	0x40023800
 8005d64:	0800b188 	.word	0x0800b188

08005d68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	220f      	movs	r2, #15
 8005d76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d78:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 0203 	and.w	r2, r3, #3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d84:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d9c:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	08db      	lsrs	r3, r3, #3
 8005da2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005daa:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <HAL_RCC_GetClockConfig+0x60>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0207 	and.w	r2, r3, #7
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	40023c00 	.word	0x40023c00

08005dcc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005dd0:	4b06      	ldr	r3, [pc, #24]	; (8005dec <HAL_RCC_NMI_IRQHandler+0x20>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd8:	2b80      	cmp	r3, #128	; 0x80
 8005dda:	d104      	bne.n	8005de6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005ddc:	f000 f80a 	bl	8005df4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005de0:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005de2:	2280      	movs	r2, #128	; 0x80
 8005de4:	701a      	strb	r2, [r3, #0]
  }
}
 8005de6:	bf00      	nop
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
 8005df0:	4002380e 	.word	0x4002380e

08005df4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d035      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e2c:	4b62      	ldr	r3, [pc, #392]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e32:	f7fe ffc9 	bl	8004dc8 <HAL_GetTick>
 8005e36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e38:	e008      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e3a:	f7fe ffc5 	bl	8004dc8 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e0b0      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e4c:	4b5b      	ldr	r3, [pc, #364]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f0      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	019a      	lsls	r2, r3, #6
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	071b      	lsls	r3, r3, #28
 8005e64:	4955      	ldr	r1, [pc, #340]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e6c:	4b52      	ldr	r3, [pc, #328]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e72:	f7fe ffa9 	bl	8004dc8 <HAL_GetTick>
 8005e76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e78:	e008      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e7a:	f7fe ffa5 	bl	8004dc8 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e090      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e8c:	4b4b      	ldr	r3, [pc, #300]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8083 	beq.w	8005fac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	4b44      	ldr	r3, [pc, #272]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	4a43      	ldr	r2, [pc, #268]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb6:	4b41      	ldr	r3, [pc, #260]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ec2:	4b3f      	ldr	r3, [pc, #252]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a3e      	ldr	r2, [pc, #248]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ecc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ece:	f7fe ff7b 	bl	8004dc8 <HAL_GetTick>
 8005ed2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ed6:	f7fe ff77 	bl	8004dc8 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e062      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ee8:	4b35      	ldr	r3, [pc, #212]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0f0      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ef4:	4b31      	ldr	r3, [pc, #196]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d02f      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d028      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f12:	4b2a      	ldr	r3, [pc, #168]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f1c:	4b29      	ldr	r3, [pc, #164]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f22:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f28:	4a24      	ldr	r2, [pc, #144]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f2e:	4b23      	ldr	r3, [pc, #140]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d114      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f3a:	f7fe ff45 	bl	8004dc8 <HAL_GetTick>
 8005f3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f40:	e00a      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f42:	f7fe ff41 	bl	8004dc8 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e02a      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f58:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0ee      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f70:	d10d      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	490d      	ldr	r1, [pc, #52]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	608b      	str	r3, [r1, #8]
 8005f8c:	e005      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f8e:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f98:	6093      	str	r3, [r2, #8]
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa6:	4905      	ldr	r1, [pc, #20]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	42470068 	.word	0x42470068
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	40007000 	.word	0x40007000
 8005fc4:	42470e40 	.word	0x42470e40

08005fc8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e083      	b.n	80060e2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	7f5b      	ldrb	r3, [r3, #29]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fe fb4a 	bl	8004684 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	22ca      	movs	r2, #202	; 0xca
 8005ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2253      	movs	r2, #83	; 0x53
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f9fb 	bl	8006402 <RTC_EnterInitMode>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2204      	movs	r2, #4
 800601e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e05e      	b.n	80060e2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006036:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6899      	ldr	r1, [r3, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68d2      	ldr	r2, [r2, #12]
 800605e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6919      	ldr	r1, [r3, #16]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	041a      	lsls	r2, r3, #16
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006082:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10e      	bne.n	80060b0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f98d 	bl	80063b2 <HAL_RTC_WaitForSynchro>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	22ff      	movs	r2, #255	; 0xff
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e018      	b.n	80060e2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060be:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	22ff      	movs	r2, #255	; 0xff
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80060e0:	2300      	movs	r3, #0
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060ea:	b590      	push	{r4, r7, lr}
 80060ec:	b087      	sub	sp, #28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	7f1b      	ldrb	r3, [r3, #28]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_RTC_SetTime+0x1c>
 8006102:	2302      	movs	r3, #2
 8006104:	e0aa      	b.n	800625c <HAL_RTC_SetTime+0x172>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2202      	movs	r2, #2
 8006110:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d126      	bne.n	8006166 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2200      	movs	r2, #0
 800612a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 f992 	bl	800645a <RTC_ByteToBcd2>
 8006136:	4603      	mov	r3, r0
 8006138:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f98b 	bl	800645a <RTC_ByteToBcd2>
 8006144:	4603      	mov	r3, r0
 8006146:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006148:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	789b      	ldrb	r3, [r3, #2]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f983 	bl	800645a <RTC_ByteToBcd2>
 8006154:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006156:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	78db      	ldrb	r3, [r3, #3]
 800615e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e018      	b.n	8006198 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d102      	bne.n	800617a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2200      	movs	r2, #0
 8006178:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	785b      	ldrb	r3, [r3, #1]
 8006184:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006186:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800618c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	78db      	ldrb	r3, [r3, #3]
 8006192:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	22ca      	movs	r2, #202	; 0xca
 800619e:	625a      	str	r2, [r3, #36]	; 0x24
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2253      	movs	r2, #83	; 0x53
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f92a 	bl	8006402 <RTC_EnterInitMode>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	22ff      	movs	r2, #255	; 0xff
 80061ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2204      	movs	r2, #4
 80061c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e047      	b.n	800625c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061da:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061ea:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6899      	ldr	r1, [r3, #8]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006212:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d111      	bne.n	8006246 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f8c5 	bl	80063b2 <HAL_RTC_WaitForSynchro>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	22ff      	movs	r2, #255	; 0xff
 8006234:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2204      	movs	r2, #4
 800623a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e00a      	b.n	800625c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	22ff      	movs	r2, #255	; 0xff
 800624c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800625a:	2300      	movs	r3, #0
  }
}
 800625c:	4618      	mov	r0, r3
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	bd90      	pop	{r4, r7, pc}

08006264 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	7f1b      	ldrb	r3, [r3, #28]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_RTC_SetDate+0x1c>
 800627c:	2302      	movs	r3, #2
 800627e:	e094      	b.n	80063aa <HAL_RTC_SetDate+0x146>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2202      	movs	r2, #2
 800628a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10e      	bne.n	80062b0 <HAL_RTC_SetDate+0x4c>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	d008      	beq.n	80062b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	f023 0310 	bic.w	r3, r3, #16
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	330a      	adds	r3, #10
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d11c      	bne.n	80062f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	78db      	ldrb	r3, [r3, #3]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 f8cd 	bl	800645a <RTC_ByteToBcd2>
 80062c0:	4603      	mov	r3, r0
 80062c2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 f8c6 	bl	800645a <RTC_ByteToBcd2>
 80062ce:	4603      	mov	r3, r0
 80062d0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80062d2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	789b      	ldrb	r3, [r3, #2]
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 f8be 	bl	800645a <RTC_ByteToBcd2>
 80062de:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80062e0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e00e      	b.n	800630e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	78db      	ldrb	r3, [r3, #3]
 80062f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80062fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006302:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	22ca      	movs	r2, #202	; 0xca
 8006314:	625a      	str	r2, [r3, #36]	; 0x24
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2253      	movs	r2, #83	; 0x53
 800631c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f86f 	bl	8006402 <RTC_EnterInitMode>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	22ff      	movs	r2, #255	; 0xff
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2204      	movs	r2, #4
 8006336:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e033      	b.n	80063aa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800634c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006350:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006360:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d111      	bne.n	8006394 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f81e 	bl	80063b2 <HAL_RTC_WaitForSynchro>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	22ff      	movs	r2, #255	; 0xff
 8006382:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2204      	movs	r2, #4
 8006388:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e00a      	b.n	80063aa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	22ff      	movs	r2, #255	; 0xff
 800639a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80063a8:	2300      	movs	r3, #0
  }
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}

080063b2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063ce:	f7fe fcfb 	bl	8004dc8 <HAL_GetTick>
 80063d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80063d4:	e009      	b.n	80063ea <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063d6:	f7fe fcf7 	bl	8004dc8 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063e4:	d901      	bls.n	80063ea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e007      	b.n	80063fa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0ee      	beq.n	80063d6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d119      	bne.n	8006450 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f04f 32ff 	mov.w	r2, #4294967295
 8006424:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006426:	f7fe fccf 	bl	8004dc8 <HAL_GetTick>
 800642a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800642c:	e009      	b.n	8006442 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800642e:	f7fe fccb 	bl	8004dc8 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800643c:	d901      	bls.n	8006442 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e007      	b.n	8006452 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0ee      	beq.n	800642e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	4603      	mov	r3, r0
 8006462:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006468:	e005      	b.n	8006476 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	3b0a      	subs	r3, #10
 8006474:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	2b09      	cmp	r3, #9
 800647a:	d8f6      	bhi.n	800646a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	b2da      	uxtb	r2, r3
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	4313      	orrs	r3, r2
 8006488:	b2db      	uxtb	r3, r3
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e041      	b.n	800652c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fe f97b 	bl	80047b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f000 fda5 	bl	8007024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d001      	beq.n	800654c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e04e      	b.n	80065ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a23      	ldr	r2, [pc, #140]	; (80065f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d022      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006576:	d01d      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <HAL_TIM_Base_Start_IT+0xc8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d018      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <HAL_TIM_Base_Start_IT+0xcc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <HAL_TIM_Base_Start_IT+0xd0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00e      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1b      	ldr	r2, [pc, #108]	; (8006608 <HAL_TIM_Base_Start_IT+0xd4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d009      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a19      	ldr	r2, [pc, #100]	; (800660c <HAL_TIM_Base_Start_IT+0xd8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_TIM_Base_Start_IT+0xdc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d111      	bne.n	80065d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b06      	cmp	r3, #6
 80065c4:	d010      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0201 	orr.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d6:	e007      	b.n	80065e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40000c00 	.word	0x40000c00
 8006608:	40010400 	.word	0x40010400
 800660c:	40014000 	.word	0x40014000
 8006610:	40001800 	.word	0x40001800

08006614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e041      	b.n	80066aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f839 	bl	80066b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f000 fce6 	bl	8007024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d109      	bne.n	80066ec <HAL_TIM_PWM_Start+0x24>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	bf14      	ite	ne
 80066e4:	2301      	movne	r3, #1
 80066e6:	2300      	moveq	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	e022      	b.n	8006732 <HAL_TIM_PWM_Start+0x6a>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d109      	bne.n	8006706 <HAL_TIM_PWM_Start+0x3e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	bf14      	ite	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	2300      	moveq	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	e015      	b.n	8006732 <HAL_TIM_PWM_Start+0x6a>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d109      	bne.n	8006720 <HAL_TIM_PWM_Start+0x58>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	e008      	b.n	8006732 <HAL_TIM_PWM_Start+0x6a>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b01      	cmp	r3, #1
 800672a:	bf14      	ite	ne
 800672c:	2301      	movne	r3, #1
 800672e:	2300      	moveq	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e07c      	b.n	8006834 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_TIM_PWM_Start+0x82>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006748:	e013      	b.n	8006772 <HAL_TIM_PWM_Start+0xaa>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d104      	bne.n	800675a <HAL_TIM_PWM_Start+0x92>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006758:	e00b      	b.n	8006772 <HAL_TIM_PWM_Start+0xaa>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d104      	bne.n	800676a <HAL_TIM_PWM_Start+0xa2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006768:	e003      	b.n	8006772 <HAL_TIM_PWM_Start+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2201      	movs	r2, #1
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 ff3c 	bl	80075f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2d      	ldr	r2, [pc, #180]	; (800683c <HAL_TIM_PWM_Start+0x174>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d004      	beq.n	8006794 <HAL_TIM_PWM_Start+0xcc>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2c      	ldr	r2, [pc, #176]	; (8006840 <HAL_TIM_PWM_Start+0x178>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d101      	bne.n	8006798 <HAL_TIM_PWM_Start+0xd0>
 8006794:	2301      	movs	r3, #1
 8006796:	e000      	b.n	800679a <HAL_TIM_PWM_Start+0xd2>
 8006798:	2300      	movs	r3, #0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a22      	ldr	r2, [pc, #136]	; (800683c <HAL_TIM_PWM_Start+0x174>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d022      	beq.n	80067fe <HAL_TIM_PWM_Start+0x136>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c0:	d01d      	beq.n	80067fe <HAL_TIM_PWM_Start+0x136>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1f      	ldr	r2, [pc, #124]	; (8006844 <HAL_TIM_PWM_Start+0x17c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d018      	beq.n	80067fe <HAL_TIM_PWM_Start+0x136>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <HAL_TIM_PWM_Start+0x180>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d013      	beq.n	80067fe <HAL_TIM_PWM_Start+0x136>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1c      	ldr	r2, [pc, #112]	; (800684c <HAL_TIM_PWM_Start+0x184>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00e      	beq.n	80067fe <HAL_TIM_PWM_Start+0x136>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a16      	ldr	r2, [pc, #88]	; (8006840 <HAL_TIM_PWM_Start+0x178>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d009      	beq.n	80067fe <HAL_TIM_PWM_Start+0x136>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a18      	ldr	r2, [pc, #96]	; (8006850 <HAL_TIM_PWM_Start+0x188>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d004      	beq.n	80067fe <HAL_TIM_PWM_Start+0x136>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a16      	ldr	r2, [pc, #88]	; (8006854 <HAL_TIM_PWM_Start+0x18c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d111      	bne.n	8006822 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b06      	cmp	r3, #6
 800680e:	d010      	beq.n	8006832 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006820:	e007      	b.n	8006832 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0201 	orr.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40010000 	.word	0x40010000
 8006840:	40010400 	.word	0x40010400
 8006844:	40000400 	.word	0x40000400
 8006848:	40000800 	.word	0x40000800
 800684c:	40000c00 	.word	0x40000c00
 8006850:	40014000 	.word	0x40014000
 8006854:	40001800 	.word	0x40001800

08006858 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e097      	b.n	800699c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7fd ff15 	bl	80046b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800689c:	f023 0307 	bic.w	r3, r3, #7
 80068a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f000 fbb9 	bl	8007024 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068da:	f023 0303 	bic.w	r3, r3, #3
 80068de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	4313      	orrs	r3, r2
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068f8:	f023 030c 	bic.w	r3, r3, #12
 80068fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	4313      	orrs	r3, r2
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	011a      	lsls	r2, r3, #4
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	031b      	lsls	r3, r3, #12
 8006928:	4313      	orrs	r3, r2
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	4313      	orrs	r3, r2
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d110      	bne.n	80069f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d102      	bne.n	80069e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069da:	7b7b      	ldrb	r3, [r7, #13]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d001      	beq.n	80069e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e069      	b.n	8006ab8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f4:	e031      	b.n	8006a5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d110      	bne.n	8006a1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d102      	bne.n	8006a08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a02:	7b3b      	ldrb	r3, [r7, #12]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e055      	b.n	8006ab8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a1c:	e01d      	b.n	8006a5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d108      	bne.n	8006a36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d105      	bne.n	8006a36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a2a:	7b7b      	ldrb	r3, [r7, #13]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d102      	bne.n	8006a36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a30:	7b3b      	ldrb	r3, [r7, #12]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d001      	beq.n	8006a3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e03e      	b.n	8006ab8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_TIM_Encoder_Start+0xc4>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d008      	beq.n	8006a78 <HAL_TIM_Encoder_Start+0xd4>
 8006a66:	e00f      	b.n	8006a88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fdc1 	bl	80075f8 <TIM_CCxChannelCmd>
      break;
 8006a76:	e016      	b.n	8006aa6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	2104      	movs	r1, #4
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fdb9 	bl	80075f8 <TIM_CCxChannelCmd>
      break;
 8006a86:	e00e      	b.n	8006aa6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fdb1 	bl	80075f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fdaa 	bl	80075f8 <TIM_CCxChannelCmd>
      break;
 8006aa4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0201 	orr.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d122      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d11b      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0202 	mvn.w	r2, #2
 8006aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa70 	bl	8006fe8 <HAL_TIM_IC_CaptureCallback>
 8006b08:	e005      	b.n	8006b16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa62 	bl	8006fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fa73 	bl	8006ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d122      	bne.n	8006b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d11b      	bne.n	8006b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0204 	mvn.w	r2, #4
 8006b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2202      	movs	r2, #2
 8006b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa46 	bl	8006fe8 <HAL_TIM_IC_CaptureCallback>
 8006b5c:	e005      	b.n	8006b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa38 	bl	8006fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa49 	bl	8006ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d122      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d11b      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0208 	mvn.w	r2, #8
 8006b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2204      	movs	r2, #4
 8006b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa1c 	bl	8006fe8 <HAL_TIM_IC_CaptureCallback>
 8006bb0:	e005      	b.n	8006bbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa0e 	bl	8006fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa1f 	bl	8006ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0310 	and.w	r3, r3, #16
 8006bce:	2b10      	cmp	r3, #16
 8006bd0:	d122      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b10      	cmp	r3, #16
 8006bde:	d11b      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0210 	mvn.w	r2, #16
 8006be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2208      	movs	r2, #8
 8006bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f9f2 	bl	8006fe8 <HAL_TIM_IC_CaptureCallback>
 8006c04:	e005      	b.n	8006c12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f9e4 	bl	8006fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f9f5 	bl	8006ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10e      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d107      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f06f 0201 	mvn.w	r2, #1
 8006c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fd fcc0 	bl	80045c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4e:	2b80      	cmp	r3, #128	; 0x80
 8006c50:	d10e      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5c:	2b80      	cmp	r3, #128	; 0x80
 8006c5e:	d107      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fd70 	bl	8007750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d10e      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d107      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9ba 	bl	8007010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d10e      	bne.n	8006cc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d107      	bne.n	8006cc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0220 	mvn.w	r2, #32
 8006cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fd3a 	bl	800773c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e0ac      	b.n	8006e44 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b0c      	cmp	r3, #12
 8006cf6:	f200 809f 	bhi.w	8006e38 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006e39 	.word	0x08006e39
 8006d08:	08006e39 	.word	0x08006e39
 8006d0c:	08006e39 	.word	0x08006e39
 8006d10:	08006d75 	.word	0x08006d75
 8006d14:	08006e39 	.word	0x08006e39
 8006d18:	08006e39 	.word	0x08006e39
 8006d1c:	08006e39 	.word	0x08006e39
 8006d20:	08006db7 	.word	0x08006db7
 8006d24:	08006e39 	.word	0x08006e39
 8006d28:	08006e39 	.word	0x08006e39
 8006d2c:	08006e39 	.word	0x08006e39
 8006d30:	08006df7 	.word	0x08006df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fa12 	bl	8007164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0208 	orr.w	r2, r2, #8
 8006d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6999      	ldr	r1, [r3, #24]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	619a      	str	r2, [r3, #24]
      break;
 8006d72:	e062      	b.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fa62 	bl	8007244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6999      	ldr	r1, [r3, #24]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	021a      	lsls	r2, r3, #8
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	619a      	str	r2, [r3, #24]
      break;
 8006db4:	e041      	b.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fab7 	bl	8007330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0208 	orr.w	r2, r2, #8
 8006dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0204 	bic.w	r2, r2, #4
 8006de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69d9      	ldr	r1, [r3, #28]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	61da      	str	r2, [r3, #28]
      break;
 8006df4:	e021      	b.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fb0b 	bl	8007418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69d9      	ldr	r1, [r3, #28]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	021a      	lsls	r2, r3, #8
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	61da      	str	r2, [r3, #28]
      break;
 8006e36:	e000      	b.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIM_ConfigClockSource+0x18>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0b3      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x180>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e9c:	d03e      	beq.n	8006f1c <HAL_TIM_ConfigClockSource+0xd0>
 8006e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea2:	f200 8087 	bhi.w	8006fb4 <HAL_TIM_ConfigClockSource+0x168>
 8006ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eaa:	f000 8085 	beq.w	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb2:	d87f      	bhi.n	8006fb4 <HAL_TIM_ConfigClockSource+0x168>
 8006eb4:	2b70      	cmp	r3, #112	; 0x70
 8006eb6:	d01a      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0xa2>
 8006eb8:	2b70      	cmp	r3, #112	; 0x70
 8006eba:	d87b      	bhi.n	8006fb4 <HAL_TIM_ConfigClockSource+0x168>
 8006ebc:	2b60      	cmp	r3, #96	; 0x60
 8006ebe:	d050      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x116>
 8006ec0:	2b60      	cmp	r3, #96	; 0x60
 8006ec2:	d877      	bhi.n	8006fb4 <HAL_TIM_ConfigClockSource+0x168>
 8006ec4:	2b50      	cmp	r3, #80	; 0x50
 8006ec6:	d03c      	beq.n	8006f42 <HAL_TIM_ConfigClockSource+0xf6>
 8006ec8:	2b50      	cmp	r3, #80	; 0x50
 8006eca:	d873      	bhi.n	8006fb4 <HAL_TIM_ConfigClockSource+0x168>
 8006ecc:	2b40      	cmp	r3, #64	; 0x40
 8006ece:	d058      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x136>
 8006ed0:	2b40      	cmp	r3, #64	; 0x40
 8006ed2:	d86f      	bhi.n	8006fb4 <HAL_TIM_ConfigClockSource+0x168>
 8006ed4:	2b30      	cmp	r3, #48	; 0x30
 8006ed6:	d064      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0x156>
 8006ed8:	2b30      	cmp	r3, #48	; 0x30
 8006eda:	d86b      	bhi.n	8006fb4 <HAL_TIM_ConfigClockSource+0x168>
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d060      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0x156>
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d867      	bhi.n	8006fb4 <HAL_TIM_ConfigClockSource+0x168>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d05c      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0x156>
 8006ee8:	2b10      	cmp	r3, #16
 8006eea:	d05a      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006eec:	e062      	b.n	8006fb4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6899      	ldr	r1, [r3, #8]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f000 fb5b 	bl	80075b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	609a      	str	r2, [r3, #8]
      break;
 8006f1a:	e04e      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	6899      	ldr	r1, [r3, #8]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f000 fb44 	bl	80075b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f3e:	609a      	str	r2, [r3, #8]
      break;
 8006f40:	e03b      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6859      	ldr	r1, [r3, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f000 fab8 	bl	80074c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2150      	movs	r1, #80	; 0x50
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fb11 	bl	8007582 <TIM_ITRx_SetConfig>
      break;
 8006f60:	e02b      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6859      	ldr	r1, [r3, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f000 fad7 	bl	8007522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2160      	movs	r1, #96	; 0x60
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fb01 	bl	8007582 <TIM_ITRx_SetConfig>
      break;
 8006f80:	e01b      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6859      	ldr	r1, [r3, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f000 fa98 	bl	80074c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2140      	movs	r1, #64	; 0x40
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 faf1 	bl	8007582 <TIM_ITRx_SetConfig>
      break;
 8006fa0:	e00b      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f000 fae8 	bl	8007582 <TIM_ITRx_SetConfig>
        break;
 8006fb2:	e002      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006fb4:	bf00      	nop
 8006fb6:	e000      	b.n	8006fba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006fb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a40      	ldr	r2, [pc, #256]	; (8007138 <TIM_Base_SetConfig+0x114>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d013      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007042:	d00f      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a3d      	ldr	r2, [pc, #244]	; (800713c <TIM_Base_SetConfig+0x118>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00b      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a3c      	ldr	r2, [pc, #240]	; (8007140 <TIM_Base_SetConfig+0x11c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a3b      	ldr	r2, [pc, #236]	; (8007144 <TIM_Base_SetConfig+0x120>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a3a      	ldr	r2, [pc, #232]	; (8007148 <TIM_Base_SetConfig+0x124>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d108      	bne.n	8007076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2f      	ldr	r2, [pc, #188]	; (8007138 <TIM_Base_SetConfig+0x114>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d02b      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007084:	d027      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a2c      	ldr	r2, [pc, #176]	; (800713c <TIM_Base_SetConfig+0x118>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d023      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a2b      	ldr	r2, [pc, #172]	; (8007140 <TIM_Base_SetConfig+0x11c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01f      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2a      	ldr	r2, [pc, #168]	; (8007144 <TIM_Base_SetConfig+0x120>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01b      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a29      	ldr	r2, [pc, #164]	; (8007148 <TIM_Base_SetConfig+0x124>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d017      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a28      	ldr	r2, [pc, #160]	; (800714c <TIM_Base_SetConfig+0x128>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a27      	ldr	r2, [pc, #156]	; (8007150 <TIM_Base_SetConfig+0x12c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00f      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a26      	ldr	r2, [pc, #152]	; (8007154 <TIM_Base_SetConfig+0x130>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00b      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a25      	ldr	r2, [pc, #148]	; (8007158 <TIM_Base_SetConfig+0x134>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d007      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a24      	ldr	r2, [pc, #144]	; (800715c <TIM_Base_SetConfig+0x138>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d003      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a23      	ldr	r2, [pc, #140]	; (8007160 <TIM_Base_SetConfig+0x13c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d108      	bne.n	80070e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a0a      	ldr	r2, [pc, #40]	; (8007138 <TIM_Base_SetConfig+0x114>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_Base_SetConfig+0xf8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a0c      	ldr	r2, [pc, #48]	; (8007148 <TIM_Base_SetConfig+0x124>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d103      	bne.n	8007124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	615a      	str	r2, [r3, #20]
}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40010000 	.word	0x40010000
 800713c:	40000400 	.word	0x40000400
 8007140:	40000800 	.word	0x40000800
 8007144:	40000c00 	.word	0x40000c00
 8007148:	40010400 	.word	0x40010400
 800714c:	40014000 	.word	0x40014000
 8007150:	40014400 	.word	0x40014400
 8007154:	40014800 	.word	0x40014800
 8007158:	40001800 	.word	0x40001800
 800715c:	40001c00 	.word	0x40001c00
 8007160:	40002000 	.word	0x40002000

08007164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f023 0201 	bic.w	r2, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 0302 	bic.w	r3, r3, #2
 80071ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a20      	ldr	r2, [pc, #128]	; (800723c <TIM_OC1_SetConfig+0xd8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC1_SetConfig+0x64>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a1f      	ldr	r2, [pc, #124]	; (8007240 <TIM_OC1_SetConfig+0xdc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d10c      	bne.n	80071e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0308 	bic.w	r3, r3, #8
 80071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 0304 	bic.w	r3, r3, #4
 80071e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a15      	ldr	r2, [pc, #84]	; (800723c <TIM_OC1_SetConfig+0xd8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_OC1_SetConfig+0x8e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a14      	ldr	r2, [pc, #80]	; (8007240 <TIM_OC1_SetConfig+0xdc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d111      	bne.n	8007216 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	621a      	str	r2, [r3, #32]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	40010000 	.word	0x40010000
 8007240:	40010400 	.word	0x40010400

08007244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0210 	bic.w	r2, r3, #16
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f023 0320 	bic.w	r3, r3, #32
 800728e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a22      	ldr	r2, [pc, #136]	; (8007328 <TIM_OC2_SetConfig+0xe4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC2_SetConfig+0x68>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a21      	ldr	r2, [pc, #132]	; (800732c <TIM_OC2_SetConfig+0xe8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d10d      	bne.n	80072c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a17      	ldr	r2, [pc, #92]	; (8007328 <TIM_OC2_SetConfig+0xe4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_OC2_SetConfig+0x94>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a16      	ldr	r2, [pc, #88]	; (800732c <TIM_OC2_SetConfig+0xe8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d113      	bne.n	8007300 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40010000 	.word	0x40010000
 800732c:	40010400 	.word	0x40010400

08007330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a21      	ldr	r2, [pc, #132]	; (8007410 <TIM_OC3_SetConfig+0xe0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d003      	beq.n	8007396 <TIM_OC3_SetConfig+0x66>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a20      	ldr	r2, [pc, #128]	; (8007414 <TIM_OC3_SetConfig+0xe4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d10d      	bne.n	80073b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800739c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <TIM_OC3_SetConfig+0xe0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d003      	beq.n	80073c2 <TIM_OC3_SetConfig+0x92>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a15      	ldr	r2, [pc, #84]	; (8007414 <TIM_OC3_SetConfig+0xe4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d113      	bne.n	80073ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	621a      	str	r2, [r3, #32]
}
 8007404:	bf00      	nop
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400

08007418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	021b      	lsls	r3, r3, #8
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	031b      	lsls	r3, r3, #12
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a12      	ldr	r2, [pc, #72]	; (80074bc <TIM_OC4_SetConfig+0xa4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d003      	beq.n	8007480 <TIM_OC4_SetConfig+0x68>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a11      	ldr	r2, [pc, #68]	; (80074c0 <TIM_OC4_SetConfig+0xa8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d109      	bne.n	8007494 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	019b      	lsls	r3, r3, #6
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	621a      	str	r2, [r3, #32]
}
 80074ae:	bf00      	nop
 80074b0:	371c      	adds	r7, #28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	40010000 	.word	0x40010000
 80074c0:	40010400 	.word	0x40010400

080074c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f023 0201 	bic.w	r2, r3, #1
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f023 030a 	bic.w	r3, r3, #10
 8007500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4313      	orrs	r3, r2
 8007508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	621a      	str	r2, [r3, #32]
}
 8007516:	bf00      	nop
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007522:	b480      	push	{r7}
 8007524:	b087      	sub	sp, #28
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f023 0210 	bic.w	r2, r3, #16
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800754c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	031b      	lsls	r3, r3, #12
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800755e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	621a      	str	r2, [r3, #32]
}
 8007576:	bf00      	nop
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4313      	orrs	r3, r2
 80075a0:	f043 0307 	orr.w	r3, r3, #7
 80075a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	609a      	str	r2, [r3, #8]
}
 80075ac:	bf00      	nop
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	021a      	lsls	r2, r3, #8
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	431a      	orrs	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4313      	orrs	r3, r2
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	609a      	str	r2, [r3, #8]
}
 80075ec:	bf00      	nop
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	2201      	movs	r2, #1
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a1a      	ldr	r2, [r3, #32]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	43db      	mvns	r3, r3
 800761a:	401a      	ands	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	fa01 f303 	lsl.w	r3, r1, r3
 8007630:	431a      	orrs	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	621a      	str	r2, [r3, #32]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007658:	2302      	movs	r3, #2
 800765a:	e05a      	b.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a21      	ldr	r2, [pc, #132]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d022      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a8:	d01d      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d018      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a1b      	ldr	r2, [pc, #108]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d013      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1a      	ldr	r2, [pc, #104]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00e      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a18      	ldr	r2, [pc, #96]	; (8007730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d009      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a17      	ldr	r2, [pc, #92]	; (8007734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d004      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a15      	ldr	r2, [pc, #84]	; (8007738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d10c      	bne.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40010000 	.word	0x40010000
 8007724:	40000400 	.word	0x40000400
 8007728:	40000800 	.word	0x40000800
 800772c:	40000c00 	.word	0x40000c00
 8007730:	40010400 	.word	0x40010400
 8007734:	40014000 	.word	0x40014000
 8007738:	40001800 	.word	0x40001800

0800773c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e03f      	b.n	80077f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fd f8ae 	bl	80048ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2224      	movs	r2, #36	; 0x24
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fd13 	bl	80081d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	695a      	ldr	r2, [r3, #20]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b08a      	sub	sp, #40	; 0x28
 8007802:	af02      	add	r7, sp, #8
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	603b      	str	r3, [r7, #0]
 800780a:	4613      	mov	r3, r2
 800780c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b20      	cmp	r3, #32
 800781c:	d17c      	bne.n	8007918 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <HAL_UART_Transmit+0x2c>
 8007824:	88fb      	ldrh	r3, [r7, #6]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e075      	b.n	800791a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <HAL_UART_Transmit+0x3e>
 8007838:	2302      	movs	r3, #2
 800783a:	e06e      	b.n	800791a <HAL_UART_Transmit+0x11c>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2221      	movs	r2, #33	; 0x21
 800784e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007852:	f7fd fab9 	bl	8004dc8 <HAL_GetTick>
 8007856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	88fa      	ldrh	r2, [r7, #6]
 800785c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	88fa      	ldrh	r2, [r7, #6]
 8007862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786c:	d108      	bne.n	8007880 <HAL_UART_Transmit+0x82>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	e003      	b.n	8007888 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007884:	2300      	movs	r3, #0
 8007886:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007890:	e02a      	b.n	80078e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2200      	movs	r2, #0
 800789a:	2180      	movs	r1, #128	; 0x80
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fad5 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e036      	b.n	800791a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10b      	bne.n	80078ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	3302      	adds	r3, #2
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	e007      	b.n	80078da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	781a      	ldrb	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	3301      	adds	r3, #1
 80078d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1cf      	bne.n	8007892 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2200      	movs	r2, #0
 80078fa:	2140      	movs	r1, #64	; 0x40
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 faa5 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e006      	b.n	800791a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	e000      	b.n	800791a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007918:	2302      	movs	r3, #2
  }
}
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b08a      	sub	sp, #40	; 0x28
 8007926:	af02      	add	r7, sp, #8
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	603b      	str	r3, [r7, #0]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b20      	cmp	r3, #32
 8007940:	f040 808c 	bne.w	8007a5c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <HAL_UART_Receive+0x2e>
 800794a:	88fb      	ldrh	r3, [r7, #6]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e084      	b.n	8007a5e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800795a:	2b01      	cmp	r3, #1
 800795c:	d101      	bne.n	8007962 <HAL_UART_Receive+0x40>
 800795e:	2302      	movs	r3, #2
 8007960:	e07d      	b.n	8007a5e <HAL_UART_Receive+0x13c>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2222      	movs	r2, #34	; 0x22
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800797e:	f7fd fa23 	bl	8004dc8 <HAL_GetTick>
 8007982:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	88fa      	ldrh	r2, [r7, #6]
 8007988:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007998:	d108      	bne.n	80079ac <HAL_UART_Receive+0x8a>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d104      	bne.n	80079ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	e003      	b.n	80079b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80079bc:	e043      	b.n	8007a46 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2200      	movs	r2, #0
 80079c6:	2120      	movs	r1, #32
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fa3f 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e042      	b.n	8007a5e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10c      	bne.n	80079f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	3302      	adds	r3, #2
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	e01f      	b.n	8007a38 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a00:	d007      	beq.n	8007a12 <HAL_UART_Receive+0xf0>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <HAL_UART_Receive+0xfe>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d106      	bne.n	8007a20 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	e008      	b.n	8007a32 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	3301      	adds	r3, #1
 8007a36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1b6      	bne.n	80079be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e000      	b.n	8007a5e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007a5c:	2302      	movs	r3, #2
  }
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3720      	adds	r7, #32
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d11d      	bne.n	8007abc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_UART_Receive_IT+0x26>
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e016      	b.n	8007abe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d101      	bne.n	8007a9e <HAL_UART_Receive_IT+0x38>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e00f      	b.n	8007abe <HAL_UART_Receive_IT+0x58>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fa14 	bl	8007ee0 <UART_Start_Receive_IT>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	e000      	b.n	8007abe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007abc:	2302      	movs	r3, #2
  }
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10d      	bne.n	8007b1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d008      	beq.n	8007b1a <HAL_UART_IRQHandler+0x52>
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fac7 	bl	80080a6 <UART_Receive_IT>
      return;
 8007b18:	e17c      	b.n	8007e14 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 80b1 	beq.w	8007c84 <HAL_UART_IRQHandler+0x1bc>
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d105      	bne.n	8007b38 <HAL_UART_IRQHandler+0x70>
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 80a6 	beq.w	8007c84 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <HAL_UART_IRQHandler+0x90>
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b50:	f043 0201 	orr.w	r2, r3, #1
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <HAL_UART_IRQHandler+0xb0>
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b70:	f043 0202 	orr.w	r2, r3, #2
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_UART_IRQHandler+0xd0>
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	f043 0204 	orr.w	r2, r3, #4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00f      	beq.n	8007bc2 <HAL_UART_IRQHandler+0xfa>
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d104      	bne.n	8007bb6 <HAL_UART_IRQHandler+0xee>
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f043 0208 	orr.w	r2, r3, #8
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 811f 	beq.w	8007e0a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_UART_IRQHandler+0x11e>
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	f003 0320 	and.w	r3, r3, #32
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa60 	bl	80080a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b40      	cmp	r3, #64	; 0x40
 8007bf2:	bf0c      	ite	eq
 8007bf4:	2301      	moveq	r3, #1
 8007bf6:	2300      	movne	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d102      	bne.n	8007c0e <HAL_UART_IRQHandler+0x146>
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d031      	beq.n	8007c72 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f9a0 	bl	8007f54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1e:	2b40      	cmp	r3, #64	; 0x40
 8007c20:	d123      	bne.n	8007c6a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695a      	ldr	r2, [r3, #20]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d013      	beq.n	8007c62 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	4a77      	ldr	r2, [pc, #476]	; (8007e1c <HAL_UART_IRQHandler+0x354>)
 8007c40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fd fa1c 	bl	8005084 <HAL_DMA_Abort_IT>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d016      	beq.n	8007c80 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c60:	e00e      	b.n	8007c80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fa fade 	bl	8002224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c68:	e00a      	b.n	8007c80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fa fada 	bl	8002224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c70:	e006      	b.n	8007c80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7fa fad6 	bl	8002224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c7e:	e0c4      	b.n	8007e0a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c80:	bf00      	nop
    return;
 8007c82:	e0c2      	b.n	8007e0a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	f040 80a2 	bne.w	8007dd2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 809c 	beq.w	8007dd2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	f003 0310 	and.w	r3, r3, #16
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 8096 	beq.w	8007dd2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d14f      	bne.n	8007d6a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007cd4:	8a3b      	ldrh	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8099 	beq.w	8007e0e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ce0:	8a3a      	ldrh	r2, [r7, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	f080 8093 	bcs.w	8007e0e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	8a3a      	ldrh	r2, [r7, #16]
 8007cec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf8:	d02b      	beq.n	8007d52 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d08:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695a      	ldr	r2, [r3, #20]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0201 	bic.w	r2, r2, #1
 8007d18:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	695a      	ldr	r2, [r3, #20]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d28:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0210 	bic.w	r2, r2, #16
 8007d46:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd f929 	bl	8004fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f866 	bl	8007e34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d68:	e051      	b.n	8007e0e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d047      	beq.n	8007e12 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007d82:	8a7b      	ldrh	r3, [r7, #18]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d044      	beq.n	8007e12 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d96:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	695a      	ldr	r2, [r3, #20]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0210 	bic.w	r2, r2, #16
 8007dc4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dc6:	8a7b      	ldrh	r3, [r7, #18]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f832 	bl	8007e34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007dd0:	e01f      	b.n	8007e12 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <HAL_UART_IRQHandler+0x326>
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f8f5 	bl	8007fd6 <UART_Transmit_IT>
    return;
 8007dec:	e012      	b.n	8007e14 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00d      	beq.n	8007e14 <HAL_UART_IRQHandler+0x34c>
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d008      	beq.n	8007e14 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f937 	bl	8008076 <UART_EndTransmit_IT>
    return;
 8007e08:	e004      	b.n	8007e14 <HAL_UART_IRQHandler+0x34c>
    return;
 8007e0a:	bf00      	nop
 8007e0c:	e002      	b.n	8007e14 <HAL_UART_IRQHandler+0x34c>
      return;
 8007e0e:	bf00      	nop
 8007e10:	e000      	b.n	8007e14 <HAL_UART_IRQHandler+0x34c>
      return;
 8007e12:	bf00      	nop
  }
}
 8007e14:	3728      	adds	r7, #40	; 0x28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	08007faf 	.word	0x08007faf

08007e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e5c:	e02c      	b.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d028      	beq.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e6c:	f7fc ffac 	bl	8004dc8 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d21d      	bcs.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695a      	ldr	r2, [r3, #20]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0201 	bic.w	r2, r2, #1
 8007e9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e00f      	b.n	8007ed8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2301      	moveq	r3, #1
 8007eca:	2300      	movne	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	461a      	mov	r2, r3
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d0c3      	beq.n	8007e5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	88fa      	ldrh	r2, [r7, #6]
 8007ef8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	88fa      	ldrh	r2, [r7, #6]
 8007efe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2222      	movs	r2, #34	; 0x22
 8007f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f24:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	695a      	ldr	r2, [r3, #20]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0201 	orr.w	r2, r2, #1
 8007f34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f042 0220 	orr.w	r2, r2, #32
 8007f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695a      	ldr	r2, [r3, #20]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0201 	bic.w	r2, r2, #1
 8007f7a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d107      	bne.n	8007f94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0210 	bic.w	r2, r2, #16
 8007f92:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7fa f92b 	bl	8002224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b085      	sub	sp, #20
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b21      	cmp	r3, #33	; 0x21
 8007fe8:	d13e      	bne.n	8008068 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff2:	d114      	bne.n	800801e <UART_Transmit_IT+0x48>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d110      	bne.n	800801e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008010:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	1c9a      	adds	r2, r3, #2
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	621a      	str	r2, [r3, #32]
 800801c:	e008      	b.n	8008030 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	1c59      	adds	r1, r3, #1
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	6211      	str	r1, [r2, #32]
 8008028:	781a      	ldrb	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29b      	uxth	r3, r3
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4619      	mov	r1, r3
 800803e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10f      	bne.n	8008064 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008052:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008062:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	e000      	b.n	800806a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008068:	2302      	movs	r3, #2
  }
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800808c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2220      	movs	r2, #32
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff fec2 	bl	8007e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b22      	cmp	r3, #34	; 0x22
 80080b8:	f040 8087 	bne.w	80081ca <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c4:	d117      	bne.n	80080f6 <UART_Receive_IT+0x50>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d113      	bne.n	80080f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	1c9a      	adds	r2, r3, #2
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	629a      	str	r2, [r3, #40]	; 0x28
 80080f4:	e026      	b.n	8008144 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008108:	d007      	beq.n	800811a <UART_Receive_IT+0x74>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <UART_Receive_IT+0x82>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	e008      	b.n	800813a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008134:	b2da      	uxtb	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29b      	uxth	r3, r3
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	4619      	mov	r1, r3
 8008152:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008154:	2b00      	cmp	r3, #0
 8008156:	d136      	bne.n	80081c6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0220 	bic.w	r2, r2, #32
 8008166:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695a      	ldr	r2, [r3, #20]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2220      	movs	r2, #32
 800818c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008194:	2b01      	cmp	r3, #1
 8008196:	d10e      	bne.n	80081b6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0210 	bic.w	r2, r2, #16
 80081a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff fe40 	bl	8007e34 <HAL_UARTEx_RxEventCallback>
 80081b4:	e002      	b.n	80081bc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7f9 ff2c 	bl	8002014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e002      	b.n	80081cc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80081ca:	2302      	movs	r3, #2
  }
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	b09f      	sub	sp, #124	; 0x7c
 80081da:	af00      	add	r7, sp, #0
 80081dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ea:	68d9      	ldr	r1, [r3, #12]
 80081ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	ea40 0301 	orr.w	r3, r0, r1
 80081f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	431a      	orrs	r2, r3
 8008200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	431a      	orrs	r2, r3
 8008206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	4313      	orrs	r3, r2
 800820c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800820e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008218:	f021 010c 	bic.w	r1, r1, #12
 800821c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008222:	430b      	orrs	r3, r1
 8008224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008232:	6999      	ldr	r1, [r3, #24]
 8008234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	ea40 0301 	orr.w	r3, r0, r1
 800823c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800823e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	4bc5      	ldr	r3, [pc, #788]	; (8008558 <UART_SetConfig+0x384>)
 8008244:	429a      	cmp	r2, r3
 8008246:	d004      	beq.n	8008252 <UART_SetConfig+0x7e>
 8008248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	4bc3      	ldr	r3, [pc, #780]	; (800855c <UART_SetConfig+0x388>)
 800824e:	429a      	cmp	r2, r3
 8008250:	d103      	bne.n	800825a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008252:	f7fd fd75 	bl	8005d40 <HAL_RCC_GetPCLK2Freq>
 8008256:	6778      	str	r0, [r7, #116]	; 0x74
 8008258:	e002      	b.n	8008260 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800825a:	f7fd fd5d 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 800825e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008268:	f040 80b6 	bne.w	80083d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800826c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800826e:	461c      	mov	r4, r3
 8008270:	f04f 0500 	mov.w	r5, #0
 8008274:	4622      	mov	r2, r4
 8008276:	462b      	mov	r3, r5
 8008278:	1891      	adds	r1, r2, r2
 800827a:	6439      	str	r1, [r7, #64]	; 0x40
 800827c:	415b      	adcs	r3, r3
 800827e:	647b      	str	r3, [r7, #68]	; 0x44
 8008280:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008284:	1912      	adds	r2, r2, r4
 8008286:	eb45 0303 	adc.w	r3, r5, r3
 800828a:	f04f 0000 	mov.w	r0, #0
 800828e:	f04f 0100 	mov.w	r1, #0
 8008292:	00d9      	lsls	r1, r3, #3
 8008294:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008298:	00d0      	lsls	r0, r2, #3
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	1911      	adds	r1, r2, r4
 80082a0:	6639      	str	r1, [r7, #96]	; 0x60
 80082a2:	416b      	adcs	r3, r5
 80082a4:	667b      	str	r3, [r7, #100]	; 0x64
 80082a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	461a      	mov	r2, r3
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	1891      	adds	r1, r2, r2
 80082b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80082b4:	415b      	adcs	r3, r3
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80082c0:	f7f8 fbcc 	bl	8000a5c <__aeabi_uldivmod>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4ba5      	ldr	r3, [pc, #660]	; (8008560 <UART_SetConfig+0x38c>)
 80082ca:	fba3 2302 	umull	r2, r3, r3, r2
 80082ce:	095b      	lsrs	r3, r3, #5
 80082d0:	011e      	lsls	r6, r3, #4
 80082d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082d4:	461c      	mov	r4, r3
 80082d6:	f04f 0500 	mov.w	r5, #0
 80082da:	4622      	mov	r2, r4
 80082dc:	462b      	mov	r3, r5
 80082de:	1891      	adds	r1, r2, r2
 80082e0:	6339      	str	r1, [r7, #48]	; 0x30
 80082e2:	415b      	adcs	r3, r3
 80082e4:	637b      	str	r3, [r7, #52]	; 0x34
 80082e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80082ea:	1912      	adds	r2, r2, r4
 80082ec:	eb45 0303 	adc.w	r3, r5, r3
 80082f0:	f04f 0000 	mov.w	r0, #0
 80082f4:	f04f 0100 	mov.w	r1, #0
 80082f8:	00d9      	lsls	r1, r3, #3
 80082fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082fe:	00d0      	lsls	r0, r2, #3
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	1911      	adds	r1, r2, r4
 8008306:	65b9      	str	r1, [r7, #88]	; 0x58
 8008308:	416b      	adcs	r3, r5
 800830a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800830c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	461a      	mov	r2, r3
 8008312:	f04f 0300 	mov.w	r3, #0
 8008316:	1891      	adds	r1, r2, r2
 8008318:	62b9      	str	r1, [r7, #40]	; 0x28
 800831a:	415b      	adcs	r3, r3
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800831e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008322:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008326:	f7f8 fb99 	bl	8000a5c <__aeabi_uldivmod>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4b8c      	ldr	r3, [pc, #560]	; (8008560 <UART_SetConfig+0x38c>)
 8008330:	fba3 1302 	umull	r1, r3, r3, r2
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	2164      	movs	r1, #100	; 0x64
 8008338:	fb01 f303 	mul.w	r3, r1, r3
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	3332      	adds	r3, #50	; 0x32
 8008342:	4a87      	ldr	r2, [pc, #540]	; (8008560 <UART_SetConfig+0x38c>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	095b      	lsrs	r3, r3, #5
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008350:	441e      	add	r6, r3
 8008352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008354:	4618      	mov	r0, r3
 8008356:	f04f 0100 	mov.w	r1, #0
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	1894      	adds	r4, r2, r2
 8008360:	623c      	str	r4, [r7, #32]
 8008362:	415b      	adcs	r3, r3
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
 8008366:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800836a:	1812      	adds	r2, r2, r0
 800836c:	eb41 0303 	adc.w	r3, r1, r3
 8008370:	f04f 0400 	mov.w	r4, #0
 8008374:	f04f 0500 	mov.w	r5, #0
 8008378:	00dd      	lsls	r5, r3, #3
 800837a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800837e:	00d4      	lsls	r4, r2, #3
 8008380:	4622      	mov	r2, r4
 8008382:	462b      	mov	r3, r5
 8008384:	1814      	adds	r4, r2, r0
 8008386:	653c      	str	r4, [r7, #80]	; 0x50
 8008388:	414b      	adcs	r3, r1
 800838a:	657b      	str	r3, [r7, #84]	; 0x54
 800838c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	461a      	mov	r2, r3
 8008392:	f04f 0300 	mov.w	r3, #0
 8008396:	1891      	adds	r1, r2, r2
 8008398:	61b9      	str	r1, [r7, #24]
 800839a:	415b      	adcs	r3, r3
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083a6:	f7f8 fb59 	bl	8000a5c <__aeabi_uldivmod>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4b6c      	ldr	r3, [pc, #432]	; (8008560 <UART_SetConfig+0x38c>)
 80083b0:	fba3 1302 	umull	r1, r3, r3, r2
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	2164      	movs	r1, #100	; 0x64
 80083b8:	fb01 f303 	mul.w	r3, r1, r3
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	3332      	adds	r3, #50	; 0x32
 80083c2:	4a67      	ldr	r2, [pc, #412]	; (8008560 <UART_SetConfig+0x38c>)
 80083c4:	fba2 2303 	umull	r2, r3, r2, r3
 80083c8:	095b      	lsrs	r3, r3, #5
 80083ca:	f003 0207 	and.w	r2, r3, #7
 80083ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4432      	add	r2, r6
 80083d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083d6:	e0b9      	b.n	800854c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083da:	461c      	mov	r4, r3
 80083dc:	f04f 0500 	mov.w	r5, #0
 80083e0:	4622      	mov	r2, r4
 80083e2:	462b      	mov	r3, r5
 80083e4:	1891      	adds	r1, r2, r2
 80083e6:	6139      	str	r1, [r7, #16]
 80083e8:	415b      	adcs	r3, r3
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80083f0:	1912      	adds	r2, r2, r4
 80083f2:	eb45 0303 	adc.w	r3, r5, r3
 80083f6:	f04f 0000 	mov.w	r0, #0
 80083fa:	f04f 0100 	mov.w	r1, #0
 80083fe:	00d9      	lsls	r1, r3, #3
 8008400:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008404:	00d0      	lsls	r0, r2, #3
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	eb12 0804 	adds.w	r8, r2, r4
 800840e:	eb43 0905 	adc.w	r9, r3, r5
 8008412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	4618      	mov	r0, r3
 8008418:	f04f 0100 	mov.w	r1, #0
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	008b      	lsls	r3, r1, #2
 8008426:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800842a:	0082      	lsls	r2, r0, #2
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f8 fb14 	bl	8000a5c <__aeabi_uldivmod>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4b49      	ldr	r3, [pc, #292]	; (8008560 <UART_SetConfig+0x38c>)
 800843a:	fba3 2302 	umull	r2, r3, r3, r2
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	011e      	lsls	r6, r3, #4
 8008442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008444:	4618      	mov	r0, r3
 8008446:	f04f 0100 	mov.w	r1, #0
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	1894      	adds	r4, r2, r2
 8008450:	60bc      	str	r4, [r7, #8]
 8008452:	415b      	adcs	r3, r3
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800845a:	1812      	adds	r2, r2, r0
 800845c:	eb41 0303 	adc.w	r3, r1, r3
 8008460:	f04f 0400 	mov.w	r4, #0
 8008464:	f04f 0500 	mov.w	r5, #0
 8008468:	00dd      	lsls	r5, r3, #3
 800846a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800846e:	00d4      	lsls	r4, r2, #3
 8008470:	4622      	mov	r2, r4
 8008472:	462b      	mov	r3, r5
 8008474:	1814      	adds	r4, r2, r0
 8008476:	64bc      	str	r4, [r7, #72]	; 0x48
 8008478:	414b      	adcs	r3, r1
 800847a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800847c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4618      	mov	r0, r3
 8008482:	f04f 0100 	mov.w	r1, #0
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	008b      	lsls	r3, r1, #2
 8008490:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008494:	0082      	lsls	r2, r0, #2
 8008496:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800849a:	f7f8 fadf 	bl	8000a5c <__aeabi_uldivmod>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4b2f      	ldr	r3, [pc, #188]	; (8008560 <UART_SetConfig+0x38c>)
 80084a4:	fba3 1302 	umull	r1, r3, r3, r2
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	2164      	movs	r1, #100	; 0x64
 80084ac:	fb01 f303 	mul.w	r3, r1, r3
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	3332      	adds	r3, #50	; 0x32
 80084b6:	4a2a      	ldr	r2, [pc, #168]	; (8008560 <UART_SetConfig+0x38c>)
 80084b8:	fba2 2303 	umull	r2, r3, r2, r3
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084c2:	441e      	add	r6, r3
 80084c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084c6:	4618      	mov	r0, r3
 80084c8:	f04f 0100 	mov.w	r1, #0
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	1894      	adds	r4, r2, r2
 80084d2:	603c      	str	r4, [r7, #0]
 80084d4:	415b      	adcs	r3, r3
 80084d6:	607b      	str	r3, [r7, #4]
 80084d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084dc:	1812      	adds	r2, r2, r0
 80084de:	eb41 0303 	adc.w	r3, r1, r3
 80084e2:	f04f 0400 	mov.w	r4, #0
 80084e6:	f04f 0500 	mov.w	r5, #0
 80084ea:	00dd      	lsls	r5, r3, #3
 80084ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084f0:	00d4      	lsls	r4, r2, #3
 80084f2:	4622      	mov	r2, r4
 80084f4:	462b      	mov	r3, r5
 80084f6:	eb12 0a00 	adds.w	sl, r2, r0
 80084fa:	eb43 0b01 	adc.w	fp, r3, r1
 80084fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	4618      	mov	r0, r3
 8008504:	f04f 0100 	mov.w	r1, #0
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	008b      	lsls	r3, r1, #2
 8008512:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008516:	0082      	lsls	r2, r0, #2
 8008518:	4650      	mov	r0, sl
 800851a:	4659      	mov	r1, fp
 800851c:	f7f8 fa9e 	bl	8000a5c <__aeabi_uldivmod>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <UART_SetConfig+0x38c>)
 8008526:	fba3 1302 	umull	r1, r3, r3, r2
 800852a:	095b      	lsrs	r3, r3, #5
 800852c:	2164      	movs	r1, #100	; 0x64
 800852e:	fb01 f303 	mul.w	r3, r1, r3
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	011b      	lsls	r3, r3, #4
 8008536:	3332      	adds	r3, #50	; 0x32
 8008538:	4a09      	ldr	r2, [pc, #36]	; (8008560 <UART_SetConfig+0x38c>)
 800853a:	fba2 2303 	umull	r2, r3, r2, r3
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	f003 020f 	and.w	r2, r3, #15
 8008544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4432      	add	r2, r6
 800854a:	609a      	str	r2, [r3, #8]
}
 800854c:	bf00      	nop
 800854e:	377c      	adds	r7, #124	; 0x7c
 8008550:	46bd      	mov	sp, r7
 8008552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008556:	bf00      	nop
 8008558:	40011000 	.word	0x40011000
 800855c:	40011400 	.word	0x40011400
 8008560:	51eb851f 	.word	0x51eb851f

08008564 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008576:	2b84      	cmp	r3, #132	; 0x84
 8008578:	d005      	beq.n	8008586 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800857a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	3303      	adds	r3, #3
 8008584:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008586:	68fb      	ldr	r3, [r7, #12]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800859a:	f3ef 8305 	mrs	r3, IPSR
 800859e:	607b      	str	r3, [r7, #4]
  return(result);
 80085a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bf14      	ite	ne
 80085a6:	2301      	movne	r3, #1
 80085a8:	2300      	moveq	r3, #0
 80085aa:	b2db      	uxtb	r3, r3
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80085bc:	f001 fa8e 	bl	8009adc <vTaskStartScheduler>
  
  return osOK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80085ca:	f7ff ffe3 	bl	8008594 <inHandlerMode>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80085d4:	f001 fb9c 	bl	8009d10 <xTaskGetTickCountFromISR>
 80085d8:	4603      	mov	r3, r0
 80085da:	e002      	b.n	80085e2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80085dc:	f001 fb88 	bl	8009cf0 <xTaskGetTickCount>
 80085e0:	4603      	mov	r3, r0
  }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80085e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e8:	b089      	sub	sp, #36	; 0x24
 80085ea:	af04      	add	r7, sp, #16
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d020      	beq.n	800863a <osThreadCreate+0x54>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01c      	beq.n	800863a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685c      	ldr	r4, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681d      	ldr	r5, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691e      	ldr	r6, [r3, #16]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff ffa6 	bl	8008564 <makeFreeRtosPriority>
 8008618:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008622:	9202      	str	r2, [sp, #8]
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	9100      	str	r1, [sp, #0]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	4632      	mov	r2, r6
 800862c:	4629      	mov	r1, r5
 800862e:	4620      	mov	r0, r4
 8008630:	f000 ff20 	bl	8009474 <xTaskCreateStatic>
 8008634:	4603      	mov	r3, r0
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e01c      	b.n	8008674 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685c      	ldr	r4, [r3, #4]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008646:	b29e      	uxth	r6, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff ff88 	bl	8008564 <makeFreeRtosPriority>
 8008654:	4602      	mov	r2, r0
 8008656:	f107 030c 	add.w	r3, r7, #12
 800865a:	9301      	str	r3, [sp, #4]
 800865c:	9200      	str	r2, [sp, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	4632      	mov	r2, r6
 8008662:	4629      	mov	r1, r5
 8008664:	4620      	mov	r0, r4
 8008666:	f000 ff62 	bl	800952e <xTaskCreate>
 800866a:	4603      	mov	r3, r0
 800866c:	2b01      	cmp	r3, #1
 800866e:	d001      	beq.n	8008674 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008670:	2300      	movs	r3, #0
 8008672:	e000      	b.n	8008676 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008674:	68fb      	ldr	r3, [r7, #12]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800867e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800867e:	b580      	push	{r7, lr}
 8008680:	b086      	sub	sp, #24
 8008682:	af02      	add	r7, sp, #8
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00f      	beq.n	80086b0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d10a      	bne.n	80086ac <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2203      	movs	r2, #3
 800869c:	9200      	str	r2, [sp, #0]
 800869e:	2200      	movs	r2, #0
 80086a0:	2100      	movs	r1, #0
 80086a2:	2001      	movs	r0, #1
 80086a4:	f000 f9d4 	bl	8008a50 <xQueueGenericCreateStatic>
 80086a8:	4603      	mov	r3, r0
 80086aa:	e016      	b.n	80086da <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	e014      	b.n	80086da <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d110      	bne.n	80086d8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80086b6:	2203      	movs	r2, #3
 80086b8:	2100      	movs	r1, #0
 80086ba:	2001      	movs	r0, #1
 80086bc:	f000 fa40 	bl	8008b40 <xQueueGenericCreate>
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d005      	beq.n	80086d4 <osSemaphoreCreate+0x56>
 80086c8:	2300      	movs	r3, #0
 80086ca:	2200      	movs	r2, #0
 80086cc:	2100      	movs	r1, #0
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 fa90 	bl	8008bf4 <xQueueGenericSend>
      return sema;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	e000      	b.n	80086da <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80086d8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80086ee:	2300      	movs	r3, #0
 80086f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80086f8:	2380      	movs	r3, #128	; 0x80
 80086fa:	e03a      	b.n	8008772 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d103      	bne.n	8008710 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008708:	f04f 33ff 	mov.w	r3, #4294967295
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	e009      	b.n	8008724 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d006      	beq.n	8008724 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <osSemaphoreWait+0x40>
      ticks = 1;
 8008720:	2301      	movs	r3, #1
 8008722:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008724:	f7ff ff36 	bl	8008594 <inHandlerMode>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d017      	beq.n	800875e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800872e:	f107 0308 	add.w	r3, r7, #8
 8008732:	461a      	mov	r2, r3
 8008734:	2100      	movs	r1, #0
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fcf4 	bl	8009124 <xQueueReceiveFromISR>
 800873c:	4603      	mov	r3, r0
 800873e:	2b01      	cmp	r3, #1
 8008740:	d001      	beq.n	8008746 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008742:	23ff      	movs	r3, #255	; 0xff
 8008744:	e015      	b.n	8008772 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d011      	beq.n	8008770 <osSemaphoreWait+0x8c>
 800874c:	4b0b      	ldr	r3, [pc, #44]	; (800877c <osSemaphoreWait+0x98>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	e008      	b.n	8008770 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800875e:	68f9      	ldr	r1, [r7, #12]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fbd3 	bl	8008f0c <xQueueSemaphoreTake>
 8008766:	4603      	mov	r3, r0
 8008768:	2b01      	cmp	r3, #1
 800876a:	d001      	beq.n	8008770 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800876c:	23ff      	movs	r3, #255	; 0xff
 800876e:	e000      	b.n	8008772 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	e000ed04 	.word	0xe000ed04

08008780 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008788:	2300      	movs	r3, #0
 800878a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800878c:	2300      	movs	r3, #0
 800878e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008790:	f7ff ff00 	bl	8008594 <inHandlerMode>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d016      	beq.n	80087c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800879a:	f107 0308 	add.w	r3, r7, #8
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fb25 	bl	8008df0 <xQueueGiveFromISR>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d001      	beq.n	80087b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80087ac:	23ff      	movs	r3, #255	; 0xff
 80087ae:	e017      	b.n	80087e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d013      	beq.n	80087de <osSemaphoreRelease+0x5e>
 80087b6:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <osSemaphoreRelease+0x68>)
 80087b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	e00a      	b.n	80087de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80087c8:	2300      	movs	r3, #0
 80087ca:	2200      	movs	r2, #0
 80087cc:	2100      	movs	r1, #0
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa10 	bl	8008bf4 <xQueueGenericSend>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d001      	beq.n	80087de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80087da:	23ff      	movs	r3, #255	; 0xff
 80087dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80087de:	68fb      	ldr	r3, [r7, #12]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <osDelayUntil+0x18>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	e000      	b.n	8008806 <osDelayUntil+0x1a>
 8008804:	2301      	movs	r3, #1
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 ffc7 	bl	800979c <vTaskDelayUntil>
  
  return osOK;
 800880e:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f103 0208 	add.w	r2, r3, #8
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f04f 32ff 	mov.w	r2, #4294967295
 8008830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f103 0208 	add.w	r2, r3, #8
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f103 0208 	add.w	r2, r3, #8
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008872:	b480      	push	{r7}
 8008874:	b085      	sub	sp, #20
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	601a      	str	r2, [r3, #0]
}
 80088ae:	bf00      	nop
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088ba:	b480      	push	{r7}
 80088bc:	b085      	sub	sp, #20
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d103      	bne.n	80088da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e00c      	b.n	80088f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3308      	adds	r3, #8
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	e002      	b.n	80088e8 <vListInsert+0x2e>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d2f6      	bcs.n	80088e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	601a      	str	r2, [r3, #0]
}
 8008920:	bf00      	nop
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6892      	ldr	r2, [r2, #8]
 8008942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6852      	ldr	r2, [r2, #4]
 800894c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d103      	bne.n	8008960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	1e5a      	subs	r2, r3, #1
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10a      	bne.n	80089aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80089a6:	bf00      	nop
 80089a8:	e7fe      	b.n	80089a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80089aa:	f002 f803 	bl	800a9b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b6:	68f9      	ldr	r1, [r7, #12]
 80089b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089ba:	fb01 f303 	mul.w	r3, r1, r3
 80089be:	441a      	add	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089da:	3b01      	subs	r3, #1
 80089dc:	68f9      	ldr	r1, [r7, #12]
 80089de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089e0:	fb01 f303 	mul.w	r3, r1, r3
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	22ff      	movs	r2, #255	; 0xff
 80089ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	22ff      	movs	r2, #255	; 0xff
 80089f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d114      	bne.n	8008a2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01a      	beq.n	8008a3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3310      	adds	r3, #16
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 fac9 	bl	8009fa4 <xTaskRemoveFromEventList>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d012      	beq.n	8008a3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a18:	4b0c      	ldr	r3, [pc, #48]	; (8008a4c <xQueueGenericReset+0xcc>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	e009      	b.n	8008a3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3310      	adds	r3, #16
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7ff fef2 	bl	8008818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3324      	adds	r3, #36	; 0x24
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff feed 	bl	8008818 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a3e:	f001 ffe9 	bl	800aa14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a42:	2301      	movs	r3, #1
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	e000ed04 	.word	0xe000ed04

08008a50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08e      	sub	sp, #56	; 0x38
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10a      	bne.n	8008a7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <xQueueGenericCreateStatic+0x52>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <xQueueGenericCreateStatic+0x56>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e000      	b.n	8008aa8 <xQueueGenericCreateStatic+0x58>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10a      	bne.n	8008ac2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	623b      	str	r3, [r7, #32]
}
 8008abe:	bf00      	nop
 8008ac0:	e7fe      	b.n	8008ac0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <xQueueGenericCreateStatic+0x7e>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <xQueueGenericCreateStatic+0x82>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <xQueueGenericCreateStatic+0x84>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	61fb      	str	r3, [r7, #28]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008aee:	2348      	movs	r3, #72	; 0x48
 8008af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b48      	cmp	r3, #72	; 0x48
 8008af6:	d00a      	beq.n	8008b0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	61bb      	str	r3, [r7, #24]
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00d      	beq.n	8008b36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	68b9      	ldr	r1, [r7, #8]
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f83f 	bl	8008bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3730      	adds	r7, #48	; 0x30
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08a      	sub	sp, #40	; 0x28
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	613b      	str	r3, [r7, #16]
}
 8008b66:	bf00      	nop
 8008b68:	e7fe      	b.n	8008b68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	fb02 f303 	mul.w	r3, r2, r3
 8008b72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	3348      	adds	r3, #72	; 0x48
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f002 f83d 	bl	800abf8 <pvPortMalloc>
 8008b7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d011      	beq.n	8008baa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	3348      	adds	r3, #72	; 0x48
 8008b8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b98:	79fa      	ldrb	r2, [r7, #7]
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	68b9      	ldr	r1, [r7, #8]
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f805 	bl	8008bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008baa:	69bb      	ldr	r3, [r7, #24]
	}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d103      	bne.n	8008bd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	e002      	b.n	8008bd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008be2:	2101      	movs	r1, #1
 8008be4:	69b8      	ldr	r0, [r7, #24]
 8008be6:	f7ff fecb 	bl	8008980 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08e      	sub	sp, #56	; 0x38
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c02:	2300      	movs	r3, #0
 8008c04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <xQueueGenericSend+0x32>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d103      	bne.n	8008c34 <xQueueGenericSend+0x40>
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <xQueueGenericSend+0x44>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <xQueueGenericSend+0x46>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <xQueueGenericSend+0x60>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d103      	bne.n	8008c62 <xQueueGenericSend+0x6e>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <xQueueGenericSend+0x72>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <xQueueGenericSend+0x74>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <xQueueGenericSend+0x8e>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	623b      	str	r3, [r7, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c82:	f001 fb4b 	bl	800a31c <xTaskGetSchedulerState>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d102      	bne.n	8008c92 <xQueueGenericSend+0x9e>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <xQueueGenericSend+0xa2>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <xQueueGenericSend+0xa4>
 8008c96:	2300      	movs	r3, #0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10a      	bne.n	8008cb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	61fb      	str	r3, [r7, #28]
}
 8008cae:	bf00      	nop
 8008cb0:	e7fe      	b.n	8008cb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cb2:	f001 fe7f 	bl	800a9b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d302      	bcc.n	8008cc8 <xQueueGenericSend+0xd4>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d129      	bne.n	8008d1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cce:	f000 fac1 	bl	8009254 <prvCopyDataToQueue>
 8008cd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d010      	beq.n	8008cfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	3324      	adds	r3, #36	; 0x24
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 f95f 	bl	8009fa4 <xTaskRemoveFromEventList>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d013      	beq.n	8008d14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cec:	4b3f      	ldr	r3, [pc, #252]	; (8008dec <xQueueGenericSend+0x1f8>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	e00a      	b.n	8008d14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d04:	4b39      	ldr	r3, [pc, #228]	; (8008dec <xQueueGenericSend+0x1f8>)
 8008d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d14:	f001 fe7e 	bl	800aa14 <vPortExitCritical>
				return pdPASS;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e063      	b.n	8008de4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d103      	bne.n	8008d2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d22:	f001 fe77 	bl	800aa14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	e05c      	b.n	8008de4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d106      	bne.n	8008d3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d30:	f107 0314 	add.w	r3, r7, #20
 8008d34:	4618      	mov	r0, r3
 8008d36:	f001 f997 	bl	800a068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d3e:	f001 fe69 	bl	800aa14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d42:	f000 ff2b 	bl	8009b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d46:	f001 fe35 	bl	800a9b4 <vPortEnterCritical>
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d50:	b25b      	sxtb	r3, r3
 8008d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d56:	d103      	bne.n	8008d60 <xQueueGenericSend+0x16c>
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d66:	b25b      	sxtb	r3, r3
 8008d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6c:	d103      	bne.n	8008d76 <xQueueGenericSend+0x182>
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d76:	f001 fe4d 	bl	800aa14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d7a:	1d3a      	adds	r2, r7, #4
 8008d7c:	f107 0314 	add.w	r3, r7, #20
 8008d80:	4611      	mov	r1, r2
 8008d82:	4618      	mov	r0, r3
 8008d84:	f001 f986 	bl	800a094 <xTaskCheckForTimeOut>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d124      	bne.n	8008dd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d90:	f000 fb58 	bl	8009444 <prvIsQueueFull>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d018      	beq.n	8008dcc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	3310      	adds	r3, #16
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	4611      	mov	r1, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 f8da 	bl	8009f5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008daa:	f000 fae3 	bl	8009374 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008dae:	f000 ff03 	bl	8009bb8 <xTaskResumeAll>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f47f af7c 	bne.w	8008cb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008dba:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <xQueueGenericSend+0x1f8>)
 8008dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	e772      	b.n	8008cb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dce:	f000 fad1 	bl	8009374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dd2:	f000 fef1 	bl	8009bb8 <xTaskResumeAll>
 8008dd6:	e76c      	b.n	8008cb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dda:	f000 facb 	bl	8009374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dde:	f000 feeb 	bl	8009bb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008de2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3738      	adds	r7, #56	; 0x38
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	e000ed04 	.word	0xe000ed04

08008df0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08e      	sub	sp, #56	; 0x38
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	623b      	str	r3, [r7, #32]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	61fb      	str	r3, [r7, #28]
}
 8008e34:	bf00      	nop
 8008e36:	e7fe      	b.n	8008e36 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d103      	bne.n	8008e48 <xQueueGiveFromISR+0x58>
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <xQueueGiveFromISR+0x5c>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e000      	b.n	8008e4e <xQueueGiveFromISR+0x5e>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	61bb      	str	r3, [r7, #24]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e68:	f001 fe86 	bl	800ab78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e6c:	f3ef 8211 	mrs	r2, BASEPRI
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	617a      	str	r2, [r7, #20]
 8008e82:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e84:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e86:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d22b      	bcs.n	8008ef0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	1c5a      	adds	r2, r3, #1
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008eaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d112      	bne.n	8008eda <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d016      	beq.n	8008eea <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	3324      	adds	r3, #36	; 0x24
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f001 f86f 	bl	8009fa4 <xTaskRemoveFromEventList>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00e      	beq.n	8008eea <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00b      	beq.n	8008eea <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e007      	b.n	8008eea <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	b25a      	sxtb	r2, r3
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008eea:	2301      	movs	r3, #1
 8008eec:	637b      	str	r3, [r7, #52]	; 0x34
 8008eee:	e001      	b.n	8008ef4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008efe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3738      	adds	r7, #56	; 0x38
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08e      	sub	sp, #56	; 0x38
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10a      	bne.n	8008f3e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	623b      	str	r3, [r7, #32]
}
 8008f3a:	bf00      	nop
 8008f3c:	e7fe      	b.n	8008f3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	61fb      	str	r3, [r7, #28]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f5c:	f001 f9de 	bl	800a31c <xTaskGetSchedulerState>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d102      	bne.n	8008f6c <xQueueSemaphoreTake+0x60>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <xQueueSemaphoreTake+0x64>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <xQueueSemaphoreTake+0x66>
 8008f70:	2300      	movs	r3, #0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	61bb      	str	r3, [r7, #24]
}
 8008f88:	bf00      	nop
 8008f8a:	e7fe      	b.n	8008f8a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f8c:	f001 fd12 	bl	800a9b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f94:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d024      	beq.n	8008fe6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	1e5a      	subs	r2, r3, #1
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008fac:	f001 fb5e 	bl	800a66c <pvTaskIncrementMutexHeldCount>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00f      	beq.n	8008fde <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	3310      	adds	r3, #16
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 ffee 	bl	8009fa4 <xTaskRemoveFromEventList>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fce:	4b54      	ldr	r3, [pc, #336]	; (8009120 <xQueueSemaphoreTake+0x214>)
 8008fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fde:	f001 fd19 	bl	800aa14 <vPortExitCritical>
				return pdPASS;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e097      	b.n	8009116 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d111      	bne.n	8009010 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	617b      	str	r3, [r7, #20]
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009008:	f001 fd04 	bl	800aa14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800900c:	2300      	movs	r3, #0
 800900e:	e082      	b.n	8009116 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009012:	2b00      	cmp	r3, #0
 8009014:	d106      	bne.n	8009024 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009016:	f107 030c 	add.w	r3, r7, #12
 800901a:	4618      	mov	r0, r3
 800901c:	f001 f824 	bl	800a068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009020:	2301      	movs	r3, #1
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009024:	f001 fcf6 	bl	800aa14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009028:	f000 fdb8 	bl	8009b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800902c:	f001 fcc2 	bl	800a9b4 <vPortEnterCritical>
 8009030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009036:	b25b      	sxtb	r3, r3
 8009038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903c:	d103      	bne.n	8009046 <xQueueSemaphoreTake+0x13a>
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800904c:	b25b      	sxtb	r3, r3
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d103      	bne.n	800905c <xQueueSemaphoreTake+0x150>
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800905c:	f001 fcda 	bl	800aa14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009060:	463a      	mov	r2, r7
 8009062:	f107 030c 	add.w	r3, r7, #12
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f001 f813 	bl	800a094 <xTaskCheckForTimeOut>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d132      	bne.n	80090da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009076:	f000 f9cf 	bl	8009418 <prvIsQueueEmpty>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d026      	beq.n	80090ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d109      	bne.n	800909c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009088:	f001 fc94 	bl	800a9b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	4618      	mov	r0, r3
 8009092:	f001 f961 	bl	800a358 <xTaskPriorityInherit>
 8009096:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009098:	f001 fcbc 	bl	800aa14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909e:	3324      	adds	r3, #36	; 0x24
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	4611      	mov	r1, r2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 ff59 	bl	8009f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090ac:	f000 f962 	bl	8009374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090b0:	f000 fd82 	bl	8009bb8 <xTaskResumeAll>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f47f af68 	bne.w	8008f8c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80090bc:	4b18      	ldr	r3, [pc, #96]	; (8009120 <xQueueSemaphoreTake+0x214>)
 80090be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	e75e      	b.n	8008f8c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80090ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090d0:	f000 f950 	bl	8009374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090d4:	f000 fd70 	bl	8009bb8 <xTaskResumeAll>
 80090d8:	e758      	b.n	8008f8c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80090da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090dc:	f000 f94a 	bl	8009374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090e0:	f000 fd6a 	bl	8009bb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090e6:	f000 f997 	bl	8009418 <prvIsQueueEmpty>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f43f af4d 	beq.w	8008f8c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00d      	beq.n	8009114 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80090f8:	f001 fc5c 	bl	800a9b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80090fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090fe:	f000 f891 	bl	8009224 <prvGetDisinheritPriorityAfterTimeout>
 8009102:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800910a:	4618      	mov	r0, r3
 800910c:	f001 fa20 	bl	800a550 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009110:	f001 fc80 	bl	800aa14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009114:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009116:	4618      	mov	r0, r3
 8009118:	3738      	adds	r7, #56	; 0x38
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	e000ed04 	.word	0xe000ed04

08009124 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08e      	sub	sp, #56	; 0x38
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10a      	bne.n	8009150 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	623b      	str	r3, [r7, #32]
}
 800914c:	bf00      	nop
 800914e:	e7fe      	b.n	800914e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d103      	bne.n	800915e <xQueueReceiveFromISR+0x3a>
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <xQueueReceiveFromISR+0x3e>
 800915e:	2301      	movs	r3, #1
 8009160:	e000      	b.n	8009164 <xQueueReceiveFromISR+0x40>
 8009162:	2300      	movs	r3, #0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10a      	bne.n	800917e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	61fb      	str	r3, [r7, #28]
}
 800917a:	bf00      	nop
 800917c:	e7fe      	b.n	800917c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800917e:	f001 fcfb 	bl	800ab78 <vPortValidateInterruptPriority>
	__asm volatile
 8009182:	f3ef 8211 	mrs	r2, BASEPRI
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	61ba      	str	r2, [r7, #24]
 8009198:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800919a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800919c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d02f      	beq.n	800920a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091b8:	f000 f8b6 	bl	8009328 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	1e5a      	subs	r2, r3, #1
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80091c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091cc:	d112      	bne.n	80091f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d016      	beq.n	8009204 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	3310      	adds	r3, #16
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fee2 	bl	8009fa4 <xTaskRemoveFromEventList>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00e      	beq.n	8009204 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00b      	beq.n	8009204 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	e007      	b.n	8009204 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80091f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091f8:	3301      	adds	r3, #1
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	b25a      	sxtb	r2, r3
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009204:	2301      	movs	r3, #1
 8009206:	637b      	str	r3, [r7, #52]	; 0x34
 8009208:	e001      	b.n	800920e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800920a:	2300      	movs	r3, #0
 800920c:	637b      	str	r3, [r7, #52]	; 0x34
 800920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009210:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f383 8811 	msr	BASEPRI, r3
}
 8009218:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800921c:	4618      	mov	r0, r3
 800921e:	3738      	adds	r7, #56	; 0x38
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	2b00      	cmp	r3, #0
 8009232:	d006      	beq.n	8009242 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f1c3 0307 	rsb	r3, r3, #7
 800923e:	60fb      	str	r3, [r7, #12]
 8009240:	e001      	b.n	8009246 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009246:	68fb      	ldr	r3, [r7, #12]
	}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10d      	bne.n	800928e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d14d      	bne.n	8009316 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	4618      	mov	r0, r3
 8009280:	f001 f8e0 	bl	800a444 <xTaskPriorityDisinherit>
 8009284:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	609a      	str	r2, [r3, #8]
 800928c:	e043      	b.n	8009316 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d119      	bne.n	80092c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6858      	ldr	r0, [r3, #4]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929c:	461a      	mov	r2, r3
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	f001 feb8 	bl	800b014 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ac:	441a      	add	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d32b      	bcc.n	8009316 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	605a      	str	r2, [r3, #4]
 80092c6:	e026      	b.n	8009316 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	68d8      	ldr	r0, [r3, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d0:	461a      	mov	r2, r3
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	f001 fe9e 	bl	800b014 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e0:	425b      	negs	r3, r3
 80092e2:	441a      	add	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d207      	bcs.n	8009304 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	425b      	negs	r3, r3
 80092fe:	441a      	add	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d105      	bne.n	8009316 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	3b01      	subs	r3, #1
 8009314:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800931e:	697b      	ldr	r3, [r7, #20]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d018      	beq.n	800936c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	441a      	add	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	429a      	cmp	r2, r3
 8009352:	d303      	bcc.n	800935c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68d9      	ldr	r1, [r3, #12]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009364:	461a      	mov	r2, r3
 8009366:	6838      	ldr	r0, [r7, #0]
 8009368:	f001 fe54 	bl	800b014 <memcpy>
	}
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800937c:	f001 fb1a 	bl	800a9b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009386:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009388:	e011      	b.n	80093ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	d012      	beq.n	80093b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3324      	adds	r3, #36	; 0x24
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fe04 	bl	8009fa4 <xTaskRemoveFromEventList>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093a2:	f000 fed9 	bl	800a158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dce9      	bgt.n	800938a <prvUnlockQueue+0x16>
 80093b6:	e000      	b.n	80093ba <prvUnlockQueue+0x46>
					break;
 80093b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	22ff      	movs	r2, #255	; 0xff
 80093be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093c2:	f001 fb27 	bl	800aa14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093c6:	f001 faf5 	bl	800a9b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093d2:	e011      	b.n	80093f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d012      	beq.n	8009402 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3310      	adds	r3, #16
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fddf 	bl	8009fa4 <xTaskRemoveFromEventList>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093ec:	f000 feb4 	bl	800a158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	dce9      	bgt.n	80093d4 <prvUnlockQueue+0x60>
 8009400:	e000      	b.n	8009404 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009402:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	22ff      	movs	r2, #255	; 0xff
 8009408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800940c:	f001 fb02 	bl	800aa14 <vPortExitCritical>
}
 8009410:	bf00      	nop
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009420:	f001 fac8 	bl	800a9b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800942c:	2301      	movs	r3, #1
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	e001      	b.n	8009436 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009436:	f001 faed 	bl	800aa14 <vPortExitCritical>

	return xReturn;
 800943a:	68fb      	ldr	r3, [r7, #12]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800944c:	f001 fab2 	bl	800a9b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009458:	429a      	cmp	r2, r3
 800945a:	d102      	bne.n	8009462 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800945c:	2301      	movs	r3, #1
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	e001      	b.n	8009466 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009466:	f001 fad5 	bl	800aa14 <vPortExitCritical>

	return xReturn;
 800946a:	68fb      	ldr	r3, [r7, #12]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009474:	b580      	push	{r7, lr}
 8009476:	b08e      	sub	sp, #56	; 0x38
 8009478:	af04      	add	r7, sp, #16
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10a      	bne.n	800949e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	623b      	str	r3, [r7, #32]
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10a      	bne.n	80094ba <xTaskCreateStatic+0x46>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	61fb      	str	r3, [r7, #28]
}
 80094b6:	bf00      	nop
 80094b8:	e7fe      	b.n	80094b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094ba:	2354      	movs	r3, #84	; 0x54
 80094bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	2b54      	cmp	r3, #84	; 0x54
 80094c2:	d00a      	beq.n	80094da <xTaskCreateStatic+0x66>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	61bb      	str	r3, [r7, #24]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80094da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d01e      	beq.n	8009520 <xTaskCreateStatic+0xac>
 80094e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d01b      	beq.n	8009520 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	2202      	movs	r2, #2
 80094f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094fa:	2300      	movs	r3, #0
 80094fc:	9303      	str	r3, [sp, #12]
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	9302      	str	r3, [sp, #8]
 8009502:	f107 0314 	add.w	r3, r7, #20
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 f850 	bl	80095b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800951a:	f000 f8d5 	bl	80096c8 <prvAddNewTaskToReadyList>
 800951e:	e001      	b.n	8009524 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009520:	2300      	movs	r3, #0
 8009522:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009524:	697b      	ldr	r3, [r7, #20]
	}
 8009526:	4618      	mov	r0, r3
 8009528:	3728      	adds	r7, #40	; 0x28
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800952e:	b580      	push	{r7, lr}
 8009530:	b08c      	sub	sp, #48	; 0x30
 8009532:	af04      	add	r7, sp, #16
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	603b      	str	r3, [r7, #0]
 800953a:	4613      	mov	r3, r2
 800953c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4618      	mov	r0, r3
 8009544:	f001 fb58 	bl	800abf8 <pvPortMalloc>
 8009548:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00e      	beq.n	800956e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009550:	2054      	movs	r0, #84	; 0x54
 8009552:	f001 fb51 	bl	800abf8 <pvPortMalloc>
 8009556:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
 8009564:	e005      	b.n	8009572 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009566:	6978      	ldr	r0, [r7, #20]
 8009568:	f001 fc12 	bl	800ad90 <vPortFree>
 800956c:	e001      	b.n	8009572 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800956e:	2300      	movs	r3, #0
 8009570:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d017      	beq.n	80095a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009580:	88fa      	ldrh	r2, [r7, #6]
 8009582:	2300      	movs	r3, #0
 8009584:	9303      	str	r3, [sp, #12]
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	9302      	str	r3, [sp, #8]
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 f80e 	bl	80095b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800959c:	69f8      	ldr	r0, [r7, #28]
 800959e:	f000 f893 	bl	80096c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095a2:	2301      	movs	r3, #1
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	e002      	b.n	80095ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095a8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095ae:	69bb      	ldr	r3, [r7, #24]
	}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3720      	adds	r7, #32
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095d0:	3b01      	subs	r3, #1
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	f023 0307 	bic.w	r3, r3, #7
 80095de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00a      	beq.n	8009600 <prvInitialiseNewTask+0x48>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	617b      	str	r3, [r7, #20]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d01f      	beq.n	8009646 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009606:	2300      	movs	r3, #0
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	e012      	b.n	8009632 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	4413      	add	r3, r2
 8009612:	7819      	ldrb	r1, [r3, #0]
 8009614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	4413      	add	r3, r2
 800961a:	3334      	adds	r3, #52	; 0x34
 800961c:	460a      	mov	r2, r1
 800961e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	4413      	add	r3, r2
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	3301      	adds	r3, #1
 8009630:	61fb      	str	r3, [r7, #28]
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	2b0f      	cmp	r3, #15
 8009636:	d9e9      	bls.n	800960c <prvInitialiseNewTask+0x54>
 8009638:	e000      	b.n	800963c <prvInitialiseNewTask+0x84>
			{
				break;
 800963a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009644:	e003      	b.n	800964e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	2b06      	cmp	r3, #6
 8009652:	d901      	bls.n	8009658 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009654:	2306      	movs	r3, #6
 8009656:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800965c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009662:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	2200      	movs	r2, #0
 8009668:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	3304      	adds	r3, #4
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff f8f2 	bl	8008858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	3318      	adds	r3, #24
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff f8ed 	bl	8008858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009682:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	f1c3 0207 	rsb	r2, r3, #7
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800968e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009692:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	2200      	movs	r2, #0
 8009698:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	68f9      	ldr	r1, [r7, #12]
 80096a6:	69b8      	ldr	r0, [r7, #24]
 80096a8:	f001 f85a 	bl	800a760 <pxPortInitialiseStack>
 80096ac:	4602      	mov	r2, r0
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096be:	bf00      	nop
 80096c0:	3720      	adds	r7, #32
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096d0:	f001 f970 	bl	800a9b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096d4:	4b2a      	ldr	r3, [pc, #168]	; (8009780 <prvAddNewTaskToReadyList+0xb8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3301      	adds	r3, #1
 80096da:	4a29      	ldr	r2, [pc, #164]	; (8009780 <prvAddNewTaskToReadyList+0xb8>)
 80096dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096de:	4b29      	ldr	r3, [pc, #164]	; (8009784 <prvAddNewTaskToReadyList+0xbc>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d109      	bne.n	80096fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096e6:	4a27      	ldr	r2, [pc, #156]	; (8009784 <prvAddNewTaskToReadyList+0xbc>)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096ec:	4b24      	ldr	r3, [pc, #144]	; (8009780 <prvAddNewTaskToReadyList+0xb8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d110      	bne.n	8009716 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096f4:	f000 fd54 	bl	800a1a0 <prvInitialiseTaskLists>
 80096f8:	e00d      	b.n	8009716 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096fa:	4b23      	ldr	r3, [pc, #140]	; (8009788 <prvAddNewTaskToReadyList+0xc0>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d109      	bne.n	8009716 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009702:	4b20      	ldr	r3, [pc, #128]	; (8009784 <prvAddNewTaskToReadyList+0xbc>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	429a      	cmp	r2, r3
 800970e:	d802      	bhi.n	8009716 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009710:	4a1c      	ldr	r2, [pc, #112]	; (8009784 <prvAddNewTaskToReadyList+0xbc>)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009716:	4b1d      	ldr	r3, [pc, #116]	; (800978c <prvAddNewTaskToReadyList+0xc4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3301      	adds	r3, #1
 800971c:	4a1b      	ldr	r2, [pc, #108]	; (800978c <prvAddNewTaskToReadyList+0xc4>)
 800971e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	2201      	movs	r2, #1
 8009726:	409a      	lsls	r2, r3
 8009728:	4b19      	ldr	r3, [pc, #100]	; (8009790 <prvAddNewTaskToReadyList+0xc8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4313      	orrs	r3, r2
 800972e:	4a18      	ldr	r2, [pc, #96]	; (8009790 <prvAddNewTaskToReadyList+0xc8>)
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009736:	4613      	mov	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4a15      	ldr	r2, [pc, #84]	; (8009794 <prvAddNewTaskToReadyList+0xcc>)
 8009740:	441a      	add	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f7ff f892 	bl	8008872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800974e:	f001 f961 	bl	800aa14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009752:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <prvAddNewTaskToReadyList+0xc0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00e      	beq.n	8009778 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800975a:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <prvAddNewTaskToReadyList+0xbc>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	429a      	cmp	r2, r3
 8009766:	d207      	bcs.n	8009778 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009768:	4b0b      	ldr	r3, [pc, #44]	; (8009798 <prvAddNewTaskToReadyList+0xd0>)
 800976a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	200003e8 	.word	0x200003e8
 8009784:	200002e8 	.word	0x200002e8
 8009788:	200003f4 	.word	0x200003f4
 800978c:	20000404 	.word	0x20000404
 8009790:	200003f0 	.word	0x200003f0
 8009794:	200002ec 	.word	0x200002ec
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08a      	sub	sp, #40	; 0x28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80097a6:	2300      	movs	r3, #0
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10a      	bne.n	80097c6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	617b      	str	r3, [r7, #20]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <vTaskDelayUntil+0x46>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	613b      	str	r3, [r7, #16]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80097e2:	4b2a      	ldr	r3, [pc, #168]	; (800988c <vTaskDelayUntil+0xf0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <vTaskDelayUntil+0x64>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	60fb      	str	r3, [r7, #12]
}
 80097fc:	bf00      	nop
 80097fe:	e7fe      	b.n	80097fe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009800:	f000 f9cc 	bl	8009b9c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009804:	4b22      	ldr	r3, [pc, #136]	; (8009890 <vTaskDelayUntil+0xf4>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	4413      	add	r3, r2
 8009812:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6a3a      	ldr	r2, [r7, #32]
 800981a:	429a      	cmp	r2, r3
 800981c:	d20b      	bcs.n	8009836 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	429a      	cmp	r2, r3
 8009826:	d211      	bcs.n	800984c <vTaskDelayUntil+0xb0>
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	429a      	cmp	r2, r3
 800982e:	d90d      	bls.n	800984c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009830:	2301      	movs	r3, #1
 8009832:	627b      	str	r3, [r7, #36]	; 0x24
 8009834:	e00a      	b.n	800984c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69fa      	ldr	r2, [r7, #28]
 800983c:	429a      	cmp	r2, r3
 800983e:	d303      	bcc.n	8009848 <vTaskDelayUntil+0xac>
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	429a      	cmp	r2, r3
 8009846:	d901      	bls.n	800984c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009848:	2301      	movs	r3, #1
 800984a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	2b00      	cmp	r3, #0
 8009856:	d006      	beq.n	8009866 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	2100      	movs	r1, #0
 8009860:	4618      	mov	r0, r3
 8009862:	f000 ff17 	bl	800a694 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009866:	f000 f9a7 	bl	8009bb8 <xTaskResumeAll>
 800986a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d107      	bne.n	8009882 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009872:	4b08      	ldr	r3, [pc, #32]	; (8009894 <vTaskDelayUntil+0xf8>)
 8009874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009882:	bf00      	nop
 8009884:	3728      	adds	r7, #40	; 0x28
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20000410 	.word	0x20000410
 8009890:	200003ec 	.word	0x200003ec
 8009894:	e000ed04 	.word	0xe000ed04

08009898 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80098a0:	f001 f888 	bl	800a9b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <vTaskSuspend+0x18>
 80098aa:	4b3c      	ldr	r3, [pc, #240]	; (800999c <vTaskSuspend+0x104>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	e000      	b.n	80098b2 <vTaskSuspend+0x1a>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	3304      	adds	r3, #4
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff f837 	bl	800892c <uxListRemove>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d115      	bne.n	80098f0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c8:	4935      	ldr	r1, [pc, #212]	; (80099a0 <vTaskSuspend+0x108>)
 80098ca:	4613      	mov	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	440b      	add	r3, r1
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <vTaskSuspend+0x58>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098de:	2201      	movs	r2, #1
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	43da      	mvns	r2, r3
 80098e6:	4b2f      	ldr	r3, [pc, #188]	; (80099a4 <vTaskSuspend+0x10c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4013      	ands	r3, r2
 80098ec:	4a2d      	ldr	r2, [pc, #180]	; (80099a4 <vTaskSuspend+0x10c>)
 80098ee:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d004      	beq.n	8009902 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3318      	adds	r3, #24
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7ff f815 	bl	800892c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3304      	adds	r3, #4
 8009906:	4619      	mov	r1, r3
 8009908:	4827      	ldr	r0, [pc, #156]	; (80099a8 <vTaskSuspend+0x110>)
 800990a:	f7fe ffb2 	bl	8008872 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b01      	cmp	r3, #1
 8009918:	d103      	bne.n	8009922 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009922:	f001 f877 	bl	800aa14 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009926:	4b21      	ldr	r3, [pc, #132]	; (80099ac <vTaskSuspend+0x114>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d005      	beq.n	800993a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800992e:	f001 f841 	bl	800a9b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009932:	f000 fcd3 	bl	800a2dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009936:	f001 f86d 	bl	800aa14 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800993a:	4b18      	ldr	r3, [pc, #96]	; (800999c <vTaskSuspend+0x104>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	429a      	cmp	r2, r3
 8009942:	d127      	bne.n	8009994 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8009944:	4b19      	ldr	r3, [pc, #100]	; (80099ac <vTaskSuspend+0x114>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d017      	beq.n	800997c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800994c:	4b18      	ldr	r3, [pc, #96]	; (80099b0 <vTaskSuspend+0x118>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00a      	beq.n	800996a <vTaskSuspend+0xd2>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	60bb      	str	r3, [r7, #8]
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800996a:	4b12      	ldr	r3, [pc, #72]	; (80099b4 <vTaskSuspend+0x11c>)
 800996c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800997a:	e00b      	b.n	8009994 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800997c:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <vTaskSuspend+0x110>)
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	4b0d      	ldr	r3, [pc, #52]	; (80099b8 <vTaskSuspend+0x120>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	429a      	cmp	r2, r3
 8009986:	d103      	bne.n	8009990 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8009988:	4b04      	ldr	r3, [pc, #16]	; (800999c <vTaskSuspend+0x104>)
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
	}
 800998e:	e001      	b.n	8009994 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8009990:	f000 fa88 	bl	8009ea4 <vTaskSwitchContext>
	}
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	200002e8 	.word	0x200002e8
 80099a0:	200002ec 	.word	0x200002ec
 80099a4:	200003f0 	.word	0x200003f0
 80099a8:	200003d4 	.word	0x200003d4
 80099ac:	200003f4 	.word	0x200003f4
 80099b0:	20000410 	.word	0x20000410
 80099b4:	e000ed04 	.word	0xe000ed04
 80099b8:	200003e8 	.word	0x200003e8

080099bc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80099c4:	2300      	movs	r3, #0
 80099c6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	60fb      	str	r3, [r7, #12]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <prvTaskIsTaskSuspended+0x5c>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d10a      	bne.n	8009a08 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f6:	4a09      	ldr	r2, [pc, #36]	; (8009a1c <prvTaskIsTaskSuspended+0x60>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d005      	beq.n	8009a08 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8009a04:	2301      	movs	r3, #1
 8009a06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a08:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	371c      	adds	r7, #28
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	200003d4 	.word	0x200003d4
 8009a1c:	200003a8 	.word	0x200003a8

08009a20 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10a      	bne.n	8009a48 <vTaskResume+0x28>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	60bb      	str	r3, [r7, #8]
}
 8009a44:	bf00      	nop
 8009a46:	e7fe      	b.n	8009a46 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009a48:	4b20      	ldr	r3, [pc, #128]	; (8009acc <vTaskResume+0xac>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d037      	beq.n	8009ac2 <vTaskResume+0xa2>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d034      	beq.n	8009ac2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8009a58:	f000 ffac 	bl	800a9b4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f7ff ffad 	bl	80099bc <prvTaskIsTaskSuspended>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d02a      	beq.n	8009abe <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe ff5d 	bl	800892c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	2201      	movs	r2, #1
 8009a78:	409a      	lsls	r2, r3
 8009a7a:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <vTaskResume+0xb0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	4a13      	ldr	r2, [pc, #76]	; (8009ad0 <vTaskResume+0xb0>)
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4a10      	ldr	r2, [pc, #64]	; (8009ad4 <vTaskResume+0xb4>)
 8009a92:	441a      	add	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f7fe fee9 	bl	8008872 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa4:	4b09      	ldr	r3, [pc, #36]	; (8009acc <vTaskResume+0xac>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d307      	bcc.n	8009abe <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <vTaskResume+0xb8>)
 8009ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009abe:	f000 ffa9 	bl	800aa14 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ac2:	bf00      	nop
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	200002e8 	.word	0x200002e8
 8009ad0:	200003f0 	.word	0x200003f0
 8009ad4:	200002ec 	.word	0x200002ec
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08a      	sub	sp, #40	; 0x28
 8009ae0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009aea:	463a      	mov	r2, r7
 8009aec:	1d39      	adds	r1, r7, #4
 8009aee:	f107 0308 	add.w	r3, r7, #8
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f7 f92e 	bl	8000d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	9202      	str	r2, [sp, #8]
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	2300      	movs	r3, #0
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	2300      	movs	r3, #0
 8009b08:	460a      	mov	r2, r1
 8009b0a:	491e      	ldr	r1, [pc, #120]	; (8009b84 <vTaskStartScheduler+0xa8>)
 8009b0c:	481e      	ldr	r0, [pc, #120]	; (8009b88 <vTaskStartScheduler+0xac>)
 8009b0e:	f7ff fcb1 	bl	8009474 <xTaskCreateStatic>
 8009b12:	4603      	mov	r3, r0
 8009b14:	4a1d      	ldr	r2, [pc, #116]	; (8009b8c <vTaskStartScheduler+0xb0>)
 8009b16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b18:	4b1c      	ldr	r3, [pc, #112]	; (8009b8c <vTaskStartScheduler+0xb0>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b20:	2301      	movs	r3, #1
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	e001      	b.n	8009b2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d116      	bne.n	8009b5e <vTaskStartScheduler+0x82>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	613b      	str	r3, [r7, #16]
}
 8009b42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b44:	4b12      	ldr	r3, [pc, #72]	; (8009b90 <vTaskStartScheduler+0xb4>)
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b4c:	4b11      	ldr	r3, [pc, #68]	; (8009b94 <vTaskStartScheduler+0xb8>)
 8009b4e:	2201      	movs	r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b52:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <vTaskStartScheduler+0xbc>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b58:	f000 fe8a 	bl	800a870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b5c:	e00e      	b.n	8009b7c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b64:	d10a      	bne.n	8009b7c <vTaskStartScheduler+0xa0>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	60fb      	str	r3, [r7, #12]
}
 8009b78:	bf00      	nop
 8009b7a:	e7fe      	b.n	8009b7a <vTaskStartScheduler+0x9e>
}
 8009b7c:	bf00      	nop
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	0800b170 	.word	0x0800b170
 8009b88:	0800a171 	.word	0x0800a171
 8009b8c:	2000040c 	.word	0x2000040c
 8009b90:	20000408 	.word	0x20000408
 8009b94:	200003f4 	.word	0x200003f4
 8009b98:	200003ec 	.word	0x200003ec

08009b9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ba0:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <vTaskSuspendAll+0x18>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	4a03      	ldr	r2, [pc, #12]	; (8009bb4 <vTaskSuspendAll+0x18>)
 8009ba8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009baa:	bf00      	nop
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	20000410 	.word	0x20000410

08009bb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009bc6:	4b41      	ldr	r3, [pc, #260]	; (8009ccc <xTaskResumeAll+0x114>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	603b      	str	r3, [r7, #0]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009be4:	f000 fee6 	bl	800a9b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009be8:	4b38      	ldr	r3, [pc, #224]	; (8009ccc <xTaskResumeAll+0x114>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	4a37      	ldr	r2, [pc, #220]	; (8009ccc <xTaskResumeAll+0x114>)
 8009bf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf2:	4b36      	ldr	r3, [pc, #216]	; (8009ccc <xTaskResumeAll+0x114>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d161      	bne.n	8009cbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bfa:	4b35      	ldr	r3, [pc, #212]	; (8009cd0 <xTaskResumeAll+0x118>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d05d      	beq.n	8009cbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c02:	e02e      	b.n	8009c62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c04:	4b33      	ldr	r3, [pc, #204]	; (8009cd4 <xTaskResumeAll+0x11c>)
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3318      	adds	r3, #24
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe fe8b 	bl	800892c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe fe86 	bl	800892c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	2201      	movs	r2, #1
 8009c26:	409a      	lsls	r2, r3
 8009c28:	4b2b      	ldr	r3, [pc, #172]	; (8009cd8 <xTaskResumeAll+0x120>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	4a2a      	ldr	r2, [pc, #168]	; (8009cd8 <xTaskResumeAll+0x120>)
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c36:	4613      	mov	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4a27      	ldr	r2, [pc, #156]	; (8009cdc <xTaskResumeAll+0x124>)
 8009c40:	441a      	add	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f7fe fe12 	bl	8008872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c52:	4b23      	ldr	r3, [pc, #140]	; (8009ce0 <xTaskResumeAll+0x128>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d302      	bcc.n	8009c62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009c5c:	4b21      	ldr	r3, [pc, #132]	; (8009ce4 <xTaskResumeAll+0x12c>)
 8009c5e:	2201      	movs	r2, #1
 8009c60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c62:	4b1c      	ldr	r3, [pc, #112]	; (8009cd4 <xTaskResumeAll+0x11c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1cc      	bne.n	8009c04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c70:	f000 fb34 	bl	800a2dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c74:	4b1c      	ldr	r3, [pc, #112]	; (8009ce8 <xTaskResumeAll+0x130>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d010      	beq.n	8009ca2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c80:	f000 f858 	bl	8009d34 <xTaskIncrementTick>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d002      	beq.n	8009c90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009c8a:	4b16      	ldr	r3, [pc, #88]	; (8009ce4 <xTaskResumeAll+0x12c>)
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1f1      	bne.n	8009c80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009c9c:	4b12      	ldr	r3, [pc, #72]	; (8009ce8 <xTaskResumeAll+0x130>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ca2:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <xTaskResumeAll+0x12c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009caa:	2301      	movs	r3, #1
 8009cac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009cae:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <xTaskResumeAll+0x134>)
 8009cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cbe:	f000 fea9 	bl	800aa14 <vPortExitCritical>

	return xAlreadyYielded;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20000410 	.word	0x20000410
 8009cd0:	200003e8 	.word	0x200003e8
 8009cd4:	200003a8 	.word	0x200003a8
 8009cd8:	200003f0 	.word	0x200003f0
 8009cdc:	200002ec 	.word	0x200002ec
 8009ce0:	200002e8 	.word	0x200002e8
 8009ce4:	200003fc 	.word	0x200003fc
 8009ce8:	200003f8 	.word	0x200003f8
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cf6:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <xTaskGetTickCount+0x1c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009cfc:	687b      	ldr	r3, [r7, #4]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	200003ec 	.word	0x200003ec

08009d10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d16:	f000 ff2f 	bl	800ab78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009d1e:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <xTaskGetTickCountFromISR+0x20>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d24:	683b      	ldr	r3, [r7, #0]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	200003ec 	.word	0x200003ec

08009d34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d3e:	4b4e      	ldr	r3, [pc, #312]	; (8009e78 <xTaskIncrementTick+0x144>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f040 808e 	bne.w	8009e64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d48:	4b4c      	ldr	r3, [pc, #304]	; (8009e7c <xTaskIncrementTick+0x148>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d50:	4a4a      	ldr	r2, [pc, #296]	; (8009e7c <xTaskIncrementTick+0x148>)
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d120      	bne.n	8009d9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d5c:	4b48      	ldr	r3, [pc, #288]	; (8009e80 <xTaskIncrementTick+0x14c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <xTaskIncrementTick+0x48>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	603b      	str	r3, [r7, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	e7fe      	b.n	8009d7a <xTaskIncrementTick+0x46>
 8009d7c:	4b40      	ldr	r3, [pc, #256]	; (8009e80 <xTaskIncrementTick+0x14c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	4b40      	ldr	r3, [pc, #256]	; (8009e84 <xTaskIncrementTick+0x150>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a3e      	ldr	r2, [pc, #248]	; (8009e80 <xTaskIncrementTick+0x14c>)
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	4a3e      	ldr	r2, [pc, #248]	; (8009e84 <xTaskIncrementTick+0x150>)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	4b3d      	ldr	r3, [pc, #244]	; (8009e88 <xTaskIncrementTick+0x154>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3301      	adds	r3, #1
 8009d96:	4a3c      	ldr	r2, [pc, #240]	; (8009e88 <xTaskIncrementTick+0x154>)
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	f000 fa9f 	bl	800a2dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d9e:	4b3b      	ldr	r3, [pc, #236]	; (8009e8c <xTaskIncrementTick+0x158>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d348      	bcc.n	8009e3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009da8:	4b35      	ldr	r3, [pc, #212]	; (8009e80 <xTaskIncrementTick+0x14c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d104      	bne.n	8009dbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db2:	4b36      	ldr	r3, [pc, #216]	; (8009e8c <xTaskIncrementTick+0x158>)
 8009db4:	f04f 32ff 	mov.w	r2, #4294967295
 8009db8:	601a      	str	r2, [r3, #0]
					break;
 8009dba:	e03e      	b.n	8009e3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dbc:	4b30      	ldr	r3, [pc, #192]	; (8009e80 <xTaskIncrementTick+0x14c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d203      	bcs.n	8009ddc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009dd4:	4a2d      	ldr	r2, [pc, #180]	; (8009e8c <xTaskIncrementTick+0x158>)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009dda:	e02e      	b.n	8009e3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	3304      	adds	r3, #4
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fe fda3 	bl	800892c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	3318      	adds	r3, #24
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe fd9a 	bl	800892c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	409a      	lsls	r2, r3
 8009e00:	4b23      	ldr	r3, [pc, #140]	; (8009e90 <xTaskIncrementTick+0x15c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	4a22      	ldr	r2, [pc, #136]	; (8009e90 <xTaskIncrementTick+0x15c>)
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0e:	4613      	mov	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4a1f      	ldr	r2, [pc, #124]	; (8009e94 <xTaskIncrementTick+0x160>)
 8009e18:	441a      	add	r2, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4610      	mov	r0, r2
 8009e22:	f7fe fd26 	bl	8008872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2a:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <xTaskIncrementTick+0x164>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d3b9      	bcc.n	8009da8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009e34:	2301      	movs	r3, #1
 8009e36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e38:	e7b6      	b.n	8009da8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e3a:	4b17      	ldr	r3, [pc, #92]	; (8009e98 <xTaskIncrementTick+0x164>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	4914      	ldr	r1, [pc, #80]	; (8009e94 <xTaskIncrementTick+0x160>)
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	440b      	add	r3, r1
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d901      	bls.n	8009e56 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009e52:	2301      	movs	r3, #1
 8009e54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e56:	4b11      	ldr	r3, [pc, #68]	; (8009e9c <xTaskIncrementTick+0x168>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d007      	beq.n	8009e6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	e004      	b.n	8009e6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e64:	4b0e      	ldr	r3, [pc, #56]	; (8009ea0 <xTaskIncrementTick+0x16c>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	4a0d      	ldr	r2, [pc, #52]	; (8009ea0 <xTaskIncrementTick+0x16c>)
 8009e6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e6e:	697b      	ldr	r3, [r7, #20]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20000410 	.word	0x20000410
 8009e7c:	200003ec 	.word	0x200003ec
 8009e80:	200003a0 	.word	0x200003a0
 8009e84:	200003a4 	.word	0x200003a4
 8009e88:	20000400 	.word	0x20000400
 8009e8c:	20000408 	.word	0x20000408
 8009e90:	200003f0 	.word	0x200003f0
 8009e94:	200002ec 	.word	0x200002ec
 8009e98:	200002e8 	.word	0x200002e8
 8009e9c:	200003fc 	.word	0x200003fc
 8009ea0:	200003f8 	.word	0x200003f8

08009ea4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009eaa:	4b27      	ldr	r3, [pc, #156]	; (8009f48 <vTaskSwitchContext+0xa4>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009eb2:	4b26      	ldr	r3, [pc, #152]	; (8009f4c <vTaskSwitchContext+0xa8>)
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009eb8:	e03f      	b.n	8009f3a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009eba:	4b24      	ldr	r3, [pc, #144]	; (8009f4c <vTaskSwitchContext+0xa8>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec0:	4b23      	ldr	r3, [pc, #140]	; (8009f50 <vTaskSwitchContext+0xac>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	fab3 f383 	clz	r3, r3
 8009ecc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009ece:	7afb      	ldrb	r3, [r7, #11]
 8009ed0:	f1c3 031f 	rsb	r3, r3, #31
 8009ed4:	617b      	str	r3, [r7, #20]
 8009ed6:	491f      	ldr	r1, [pc, #124]	; (8009f54 <vTaskSwitchContext+0xb0>)
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	440b      	add	r3, r1
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10a      	bne.n	8009f00 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	607b      	str	r3, [r7, #4]
}
 8009efc:	bf00      	nop
 8009efe:	e7fe      	b.n	8009efe <vTaskSwitchContext+0x5a>
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	4613      	mov	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4a12      	ldr	r2, [pc, #72]	; (8009f54 <vTaskSwitchContext+0xb0>)
 8009f0c:	4413      	add	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	605a      	str	r2, [r3, #4]
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	3308      	adds	r3, #8
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d104      	bne.n	8009f30 <vTaskSwitchContext+0x8c>
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	605a      	str	r2, [r3, #4]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	4a08      	ldr	r2, [pc, #32]	; (8009f58 <vTaskSwitchContext+0xb4>)
 8009f38:	6013      	str	r3, [r2, #0]
}
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	20000410 	.word	0x20000410
 8009f4c:	200003fc 	.word	0x200003fc
 8009f50:	200003f0 	.word	0x200003f0
 8009f54:	200002ec 	.word	0x200002ec
 8009f58:	200002e8 	.word	0x200002e8

08009f5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	60fb      	str	r3, [r7, #12]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f82:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <vTaskPlaceOnEventList+0x44>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3318      	adds	r3, #24
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7fe fc95 	bl	80088ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f90:	2101      	movs	r1, #1
 8009f92:	6838      	ldr	r0, [r7, #0]
 8009f94:	f000 fb7e 	bl	800a694 <prvAddCurrentTaskToDelayedList>
}
 8009f98:	bf00      	nop
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	200002e8 	.word	0x200002e8

08009fa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10a      	bne.n	8009fd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	60fb      	str	r3, [r7, #12]
}
 8009fcc:	bf00      	nop
 8009fce:	e7fe      	b.n	8009fce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	3318      	adds	r3, #24
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fe fca9 	bl	800892c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fda:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <xTaskRemoveFromEventList+0xac>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d11c      	bne.n	800a01c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fca0 	bl	800892c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	409a      	lsls	r2, r3
 8009ff4:	4b17      	ldr	r3, [pc, #92]	; (800a054 <xTaskRemoveFromEventList+0xb0>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	4a16      	ldr	r2, [pc, #88]	; (800a054 <xTaskRemoveFromEventList+0xb0>)
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4a13      	ldr	r2, [pc, #76]	; (800a058 <xTaskRemoveFromEventList+0xb4>)
 800a00c:	441a      	add	r2, r3
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	3304      	adds	r3, #4
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f7fe fc2c 	bl	8008872 <vListInsertEnd>
 800a01a:	e005      	b.n	800a028 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	3318      	adds	r3, #24
 800a020:	4619      	mov	r1, r3
 800a022:	480e      	ldr	r0, [pc, #56]	; (800a05c <xTaskRemoveFromEventList+0xb8>)
 800a024:	f7fe fc25 	bl	8008872 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02c:	4b0c      	ldr	r3, [pc, #48]	; (800a060 <xTaskRemoveFromEventList+0xbc>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a032:	429a      	cmp	r2, r3
 800a034:	d905      	bls.n	800a042 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a036:	2301      	movs	r3, #1
 800a038:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a03a:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <xTaskRemoveFromEventList+0xc0>)
 800a03c:	2201      	movs	r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	e001      	b.n	800a046 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a046:	697b      	ldr	r3, [r7, #20]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	20000410 	.word	0x20000410
 800a054:	200003f0 	.word	0x200003f0
 800a058:	200002ec 	.word	0x200002ec
 800a05c:	200003a8 	.word	0x200003a8
 800a060:	200002e8 	.word	0x200002e8
 800a064:	200003fc 	.word	0x200003fc

0800a068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a070:	4b06      	ldr	r3, [pc, #24]	; (800a08c <vTaskInternalSetTimeOutState+0x24>)
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a078:	4b05      	ldr	r3, [pc, #20]	; (800a090 <vTaskInternalSetTimeOutState+0x28>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	605a      	str	r2, [r3, #4]
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	20000400 	.word	0x20000400
 800a090:	200003ec 	.word	0x200003ec

0800a094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10a      	bne.n	800a0ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	613b      	str	r3, [r7, #16]
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10a      	bne.n	800a0d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	60fb      	str	r3, [r7, #12]
}
 800a0d2:	bf00      	nop
 800a0d4:	e7fe      	b.n	800a0d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a0d6:	f000 fc6d 	bl	800a9b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a0da:	4b1d      	ldr	r3, [pc, #116]	; (800a150 <xTaskCheckForTimeOut+0xbc>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f2:	d102      	bne.n	800a0fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	61fb      	str	r3, [r7, #28]
 800a0f8:	e023      	b.n	800a142 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	4b15      	ldr	r3, [pc, #84]	; (800a154 <xTaskCheckForTimeOut+0xc0>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	429a      	cmp	r2, r3
 800a104:	d007      	beq.n	800a116 <xTaskCheckForTimeOut+0x82>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d302      	bcc.n	800a116 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a110:	2301      	movs	r3, #1
 800a112:	61fb      	str	r3, [r7, #28]
 800a114:	e015      	b.n	800a142 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d20b      	bcs.n	800a138 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	1ad2      	subs	r2, r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff ff9b 	bl	800a068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a132:	2300      	movs	r3, #0
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	e004      	b.n	800a142 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2200      	movs	r2, #0
 800a13c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a13e:	2301      	movs	r3, #1
 800a140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a142:	f000 fc67 	bl	800aa14 <vPortExitCritical>

	return xReturn;
 800a146:	69fb      	ldr	r3, [r7, #28]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3720      	adds	r7, #32
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	200003ec 	.word	0x200003ec
 800a154:	20000400 	.word	0x20000400

0800a158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a15c:	4b03      	ldr	r3, [pc, #12]	; (800a16c <vTaskMissedYield+0x14>)
 800a15e:	2201      	movs	r2, #1
 800a160:	601a      	str	r2, [r3, #0]
}
 800a162:	bf00      	nop
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	200003fc 	.word	0x200003fc

0800a170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a178:	f000 f852 	bl	800a220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a17c:	4b06      	ldr	r3, [pc, #24]	; (800a198 <prvIdleTask+0x28>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d9f9      	bls.n	800a178 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a184:	4b05      	ldr	r3, [pc, #20]	; (800a19c <prvIdleTask+0x2c>)
 800a186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a194:	e7f0      	b.n	800a178 <prvIdleTask+0x8>
 800a196:	bf00      	nop
 800a198:	200002ec 	.word	0x200002ec
 800a19c:	e000ed04 	.word	0xe000ed04

0800a1a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	607b      	str	r3, [r7, #4]
 800a1aa:	e00c      	b.n	800a1c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4a12      	ldr	r2, [pc, #72]	; (800a200 <prvInitialiseTaskLists+0x60>)
 800a1b8:	4413      	add	r3, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe fb2c 	bl	8008818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	607b      	str	r3, [r7, #4]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b06      	cmp	r3, #6
 800a1ca:	d9ef      	bls.n	800a1ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1cc:	480d      	ldr	r0, [pc, #52]	; (800a204 <prvInitialiseTaskLists+0x64>)
 800a1ce:	f7fe fb23 	bl	8008818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1d2:	480d      	ldr	r0, [pc, #52]	; (800a208 <prvInitialiseTaskLists+0x68>)
 800a1d4:	f7fe fb20 	bl	8008818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1d8:	480c      	ldr	r0, [pc, #48]	; (800a20c <prvInitialiseTaskLists+0x6c>)
 800a1da:	f7fe fb1d 	bl	8008818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a1de:	480c      	ldr	r0, [pc, #48]	; (800a210 <prvInitialiseTaskLists+0x70>)
 800a1e0:	f7fe fb1a 	bl	8008818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1e4:	480b      	ldr	r0, [pc, #44]	; (800a214 <prvInitialiseTaskLists+0x74>)
 800a1e6:	f7fe fb17 	bl	8008818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1ea:	4b0b      	ldr	r3, [pc, #44]	; (800a218 <prvInitialiseTaskLists+0x78>)
 800a1ec:	4a05      	ldr	r2, [pc, #20]	; (800a204 <prvInitialiseTaskLists+0x64>)
 800a1ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1f0:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <prvInitialiseTaskLists+0x7c>)
 800a1f2:	4a05      	ldr	r2, [pc, #20]	; (800a208 <prvInitialiseTaskLists+0x68>)
 800a1f4:	601a      	str	r2, [r3, #0]
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	200002ec 	.word	0x200002ec
 800a204:	20000378 	.word	0x20000378
 800a208:	2000038c 	.word	0x2000038c
 800a20c:	200003a8 	.word	0x200003a8
 800a210:	200003bc 	.word	0x200003bc
 800a214:	200003d4 	.word	0x200003d4
 800a218:	200003a0 	.word	0x200003a0
 800a21c:	200003a4 	.word	0x200003a4

0800a220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a226:	e019      	b.n	800a25c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a228:	f000 fbc4 	bl	800a9b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a22c:	4b10      	ldr	r3, [pc, #64]	; (800a270 <prvCheckTasksWaitingTermination+0x50>)
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3304      	adds	r3, #4
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fe fb77 	bl	800892c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a23e:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <prvCheckTasksWaitingTermination+0x54>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3b01      	subs	r3, #1
 800a244:	4a0b      	ldr	r2, [pc, #44]	; (800a274 <prvCheckTasksWaitingTermination+0x54>)
 800a246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a248:	4b0b      	ldr	r3, [pc, #44]	; (800a278 <prvCheckTasksWaitingTermination+0x58>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	4a0a      	ldr	r2, [pc, #40]	; (800a278 <prvCheckTasksWaitingTermination+0x58>)
 800a250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a252:	f000 fbdf 	bl	800aa14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f810 	bl	800a27c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a25c:	4b06      	ldr	r3, [pc, #24]	; (800a278 <prvCheckTasksWaitingTermination+0x58>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e1      	bne.n	800a228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	200003bc 	.word	0x200003bc
 800a274:	200003e8 	.word	0x200003e8
 800a278:	200003d0 	.word	0x200003d0

0800a27c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d108      	bne.n	800a2a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fd7c 	bl	800ad90 <vPortFree>
				vPortFree( pxTCB );
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fd79 	bl	800ad90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a29e:	e018      	b.n	800a2d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d103      	bne.n	800a2b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fd70 	bl	800ad90 <vPortFree>
	}
 800a2b0:	e00f      	b.n	800a2d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d00a      	beq.n	800a2d2 <prvDeleteTCB+0x56>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	60fb      	str	r3, [r7, #12]
}
 800a2ce:	bf00      	nop
 800a2d0:	e7fe      	b.n	800a2d0 <prvDeleteTCB+0x54>
	}
 800a2d2:	bf00      	nop
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2e2:	4b0c      	ldr	r3, [pc, #48]	; (800a314 <prvResetNextTaskUnblockTime+0x38>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d104      	bne.n	800a2f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <prvResetNextTaskUnblockTime+0x3c>)
 800a2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2f4:	e008      	b.n	800a308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2f6:	4b07      	ldr	r3, [pc, #28]	; (800a314 <prvResetNextTaskUnblockTime+0x38>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	4a04      	ldr	r2, [pc, #16]	; (800a318 <prvResetNextTaskUnblockTime+0x3c>)
 800a306:	6013      	str	r3, [r2, #0]
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	200003a0 	.word	0x200003a0
 800a318:	20000408 	.word	0x20000408

0800a31c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a322:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <xTaskGetSchedulerState+0x34>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d102      	bne.n	800a330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a32a:	2301      	movs	r3, #1
 800a32c:	607b      	str	r3, [r7, #4]
 800a32e:	e008      	b.n	800a342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a330:	4b08      	ldr	r3, [pc, #32]	; (800a354 <xTaskGetSchedulerState+0x38>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d102      	bne.n	800a33e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a338:	2302      	movs	r3, #2
 800a33a:	607b      	str	r3, [r7, #4]
 800a33c:	e001      	b.n	800a342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a33e:	2300      	movs	r3, #0
 800a340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a342:	687b      	ldr	r3, [r7, #4]
	}
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	200003f4 	.word	0x200003f4
 800a354:	20000410 	.word	0x20000410

0800a358 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a364:	2300      	movs	r3, #0
 800a366:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d05e      	beq.n	800a42c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a372:	4b31      	ldr	r3, [pc, #196]	; (800a438 <xTaskPriorityInherit+0xe0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a378:	429a      	cmp	r2, r3
 800a37a:	d24e      	bcs.n	800a41a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	db06      	blt.n	800a392 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a384:	4b2c      	ldr	r3, [pc, #176]	; (800a438 <xTaskPriorityInherit+0xe0>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	f1c3 0207 	rsb	r2, r3, #7
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	6959      	ldr	r1, [r3, #20]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4a26      	ldr	r2, [pc, #152]	; (800a43c <xTaskPriorityInherit+0xe4>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	4299      	cmp	r1, r3
 800a3a8:	d12f      	bne.n	800a40a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fabc 	bl	800892c <uxListRemove>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3be:	2201      	movs	r2, #1
 800a3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c4:	43da      	mvns	r2, r3
 800a3c6:	4b1e      	ldr	r3, [pc, #120]	; (800a440 <xTaskPriorityInherit+0xe8>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	4a1c      	ldr	r2, [pc, #112]	; (800a440 <xTaskPriorityInherit+0xe8>)
 800a3ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3d0:	4b19      	ldr	r3, [pc, #100]	; (800a438 <xTaskPriorityInherit+0xe0>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3de:	2201      	movs	r2, #1
 800a3e0:	409a      	lsls	r2, r3
 800a3e2:	4b17      	ldr	r3, [pc, #92]	; (800a440 <xTaskPriorityInherit+0xe8>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	4a15      	ldr	r2, [pc, #84]	; (800a440 <xTaskPriorityInherit+0xe8>)
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4a10      	ldr	r2, [pc, #64]	; (800a43c <xTaskPriorityInherit+0xe4>)
 800a3fa:	441a      	add	r2, r3
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4619      	mov	r1, r3
 800a402:	4610      	mov	r0, r2
 800a404:	f7fe fa35 	bl	8008872 <vListInsertEnd>
 800a408:	e004      	b.n	800a414 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a40a:	4b0b      	ldr	r3, [pc, #44]	; (800a438 <xTaskPriorityInherit+0xe0>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	e008      	b.n	800a42c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a41e:	4b06      	ldr	r3, [pc, #24]	; (800a438 <xTaskPriorityInherit+0xe0>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	429a      	cmp	r2, r3
 800a426:	d201      	bcs.n	800a42c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a428:	2301      	movs	r3, #1
 800a42a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a42c:	68fb      	ldr	r3, [r7, #12]
	}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	200002e8 	.word	0x200002e8
 800a43c:	200002ec 	.word	0x200002ec
 800a440:	200003f0 	.word	0x200003f0

0800a444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d06e      	beq.n	800a538 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a45a:	4b3a      	ldr	r3, [pc, #232]	; (800a544 <xTaskPriorityDisinherit+0x100>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	429a      	cmp	r2, r3
 800a462:	d00a      	beq.n	800a47a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	60fb      	str	r3, [r7, #12]
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60bb      	str	r3, [r7, #8]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a49c:	1e5a      	subs	r2, r3, #1
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d044      	beq.n	800a538 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d140      	bne.n	800a538 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe fa36 	bl	800892c <uxListRemove>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d115      	bne.n	800a4f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ca:	491f      	ldr	r1, [pc, #124]	; (800a548 <xTaskPriorityDisinherit+0x104>)
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	440b      	add	r3, r1
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <xTaskPriorityDisinherit+0xae>
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e6:	43da      	mvns	r2, r3
 800a4e8:	4b18      	ldr	r3, [pc, #96]	; (800a54c <xTaskPriorityDisinherit+0x108>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	4a17      	ldr	r2, [pc, #92]	; (800a54c <xTaskPriorityDisinherit+0x108>)
 800a4f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	f1c3 0207 	rsb	r2, r3, #7
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	2201      	movs	r2, #1
 800a50c:	409a      	lsls	r2, r3
 800a50e:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <xTaskPriorityDisinherit+0x108>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4313      	orrs	r3, r2
 800a514:	4a0d      	ldr	r2, [pc, #52]	; (800a54c <xTaskPriorityDisinherit+0x108>)
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4a08      	ldr	r2, [pc, #32]	; (800a548 <xTaskPriorityDisinherit+0x104>)
 800a526:	441a      	add	r2, r3
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	3304      	adds	r3, #4
 800a52c:	4619      	mov	r1, r3
 800a52e:	4610      	mov	r0, r2
 800a530:	f7fe f99f 	bl	8008872 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a534:	2301      	movs	r3, #1
 800a536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a538:	697b      	ldr	r3, [r7, #20]
	}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	200002e8 	.word	0x200002e8
 800a548:	200002ec 	.word	0x200002ec
 800a54c:	200003f0 	.word	0x200003f0

0800a550 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a55e:	2301      	movs	r3, #1
 800a560:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d077      	beq.n	800a658 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10a      	bne.n	800a586 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	60fb      	str	r3, [r7, #12]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d902      	bls.n	800a596 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	61fb      	str	r3, [r7, #28]
 800a594:	e002      	b.n	800a59c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a59a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a0:	69fa      	ldr	r2, [r7, #28]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d058      	beq.n	800a658 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d153      	bne.n	800a658 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a5b0:	4b2b      	ldr	r3, [pc, #172]	; (800a660 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d10a      	bne.n	800a5d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	60bb      	str	r3, [r7, #8]
}
 800a5cc:	bf00      	nop
 800a5ce:	e7fe      	b.n	800a5ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	69fa      	ldr	r2, [r7, #28]
 800a5da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	db04      	blt.n	800a5ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	f1c3 0207 	rsb	r2, r3, #7
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	6959      	ldr	r1, [r3, #20]
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4a19      	ldr	r2, [pc, #100]	; (800a664 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a5fe:	4413      	add	r3, r2
 800a600:	4299      	cmp	r1, r3
 800a602:	d129      	bne.n	800a658 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	3304      	adds	r3, #4
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fe f98f 	bl	800892c <uxListRemove>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a618:	2201      	movs	r2, #1
 800a61a:	fa02 f303 	lsl.w	r3, r2, r3
 800a61e:	43da      	mvns	r2, r3
 800a620:	4b11      	ldr	r3, [pc, #68]	; (800a668 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4013      	ands	r3, r2
 800a626:	4a10      	ldr	r2, [pc, #64]	; (800a668 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a628:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	2201      	movs	r2, #1
 800a630:	409a      	lsls	r2, r3
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4313      	orrs	r3, r2
 800a638:	4a0b      	ldr	r2, [pc, #44]	; (800a668 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a640:	4613      	mov	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4a06      	ldr	r2, [pc, #24]	; (800a664 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a64a:	441a      	add	r2, r3
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	3304      	adds	r3, #4
 800a650:	4619      	mov	r1, r3
 800a652:	4610      	mov	r0, r2
 800a654:	f7fe f90d 	bl	8008872 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a658:	bf00      	nop
 800a65a:	3720      	adds	r7, #32
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	200002e8 	.word	0x200002e8
 800a664:	200002ec 	.word	0x200002ec
 800a668:	200003f0 	.word	0x200003f0

0800a66c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a66c:	b480      	push	{r7}
 800a66e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a670:	4b07      	ldr	r3, [pc, #28]	; (800a690 <pvTaskIncrementMutexHeldCount+0x24>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d004      	beq.n	800a682 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a678:	4b05      	ldr	r3, [pc, #20]	; (800a690 <pvTaskIncrementMutexHeldCount+0x24>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a67e:	3201      	adds	r2, #1
 800a680:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a682:	4b03      	ldr	r3, [pc, #12]	; (800a690 <pvTaskIncrementMutexHeldCount+0x24>)
 800a684:	681b      	ldr	r3, [r3, #0]
	}
 800a686:	4618      	mov	r0, r3
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	200002e8 	.word	0x200002e8

0800a694 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a69e:	4b29      	ldr	r3, [pc, #164]	; (800a744 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6a4:	4b28      	ldr	r3, [pc, #160]	; (800a748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe f93e 	bl	800892c <uxListRemove>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10b      	bne.n	800a6ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a6b6:	4b24      	ldr	r3, [pc, #144]	; (800a748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	2201      	movs	r2, #1
 800a6be:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c2:	43da      	mvns	r2, r3
 800a6c4:	4b21      	ldr	r3, [pc, #132]	; (800a74c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	4a20      	ldr	r2, [pc, #128]	; (800a74c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a6cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d10a      	bne.n	800a6ec <prvAddCurrentTaskToDelayedList+0x58>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6dc:	4b1a      	ldr	r3, [pc, #104]	; (800a748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	481a      	ldr	r0, [pc, #104]	; (800a750 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a6e6:	f7fe f8c4 	bl	8008872 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a6ea:	e026      	b.n	800a73a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a6f4:	4b14      	ldr	r3, [pc, #80]	; (800a748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	429a      	cmp	r2, r3
 800a702:	d209      	bcs.n	800a718 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a704:	4b13      	ldr	r3, [pc, #76]	; (800a754 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3304      	adds	r3, #4
 800a70e:	4619      	mov	r1, r3
 800a710:	4610      	mov	r0, r2
 800a712:	f7fe f8d2 	bl	80088ba <vListInsert>
}
 800a716:	e010      	b.n	800a73a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a718:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	4b0a      	ldr	r3, [pc, #40]	; (800a748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3304      	adds	r3, #4
 800a722:	4619      	mov	r1, r3
 800a724:	4610      	mov	r0, r2
 800a726:	f7fe f8c8 	bl	80088ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a72a:	4b0c      	ldr	r3, [pc, #48]	; (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	429a      	cmp	r2, r3
 800a732:	d202      	bcs.n	800a73a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a734:	4a09      	ldr	r2, [pc, #36]	; (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	6013      	str	r3, [r2, #0]
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	200003ec 	.word	0x200003ec
 800a748:	200002e8 	.word	0x200002e8
 800a74c:	200003f0 	.word	0x200003f0
 800a750:	200003d4 	.word	0x200003d4
 800a754:	200003a4 	.word	0x200003a4
 800a758:	200003a0 	.word	0x200003a0
 800a75c:	20000408 	.word	0x20000408

0800a760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3b04      	subs	r3, #4
 800a770:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3b04      	subs	r3, #4
 800a77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f023 0201 	bic.w	r2, r3, #1
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3b04      	subs	r3, #4
 800a78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a790:	4a0c      	ldr	r2, [pc, #48]	; (800a7c4 <pxPortInitialiseStack+0x64>)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3b14      	subs	r3, #20
 800a79a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3b04      	subs	r3, #4
 800a7a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f06f 0202 	mvn.w	r2, #2
 800a7ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3b20      	subs	r3, #32
 800a7b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	0800a7c9 	.word	0x0800a7c9

0800a7c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7d2:	4b12      	ldr	r3, [pc, #72]	; (800a81c <prvTaskExitError+0x54>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7da:	d00a      	beq.n	800a7f2 <prvTaskExitError+0x2a>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	60fb      	str	r3, [r7, #12]
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <prvTaskExitError+0x28>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	60bb      	str	r3, [r7, #8]
}
 800a804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a806:	bf00      	nop
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0fc      	beq.n	800a808 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a80e:	bf00      	nop
 800a810:	bf00      	nop
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	20000020 	.word	0x20000020

0800a820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a820:	4b07      	ldr	r3, [pc, #28]	; (800a840 <pxCurrentTCBConst2>)
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	6808      	ldr	r0, [r1, #0]
 800a826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	f380 8809 	msr	PSP, r0
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f04f 0000 	mov.w	r0, #0
 800a836:	f380 8811 	msr	BASEPRI, r0
 800a83a:	4770      	bx	lr
 800a83c:	f3af 8000 	nop.w

0800a840 <pxCurrentTCBConst2>:
 800a840:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop

0800a848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a848:	4808      	ldr	r0, [pc, #32]	; (800a86c <prvPortStartFirstTask+0x24>)
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	6800      	ldr	r0, [r0, #0]
 800a84e:	f380 8808 	msr	MSP, r0
 800a852:	f04f 0000 	mov.w	r0, #0
 800a856:	f380 8814 	msr	CONTROL, r0
 800a85a:	b662      	cpsie	i
 800a85c:	b661      	cpsie	f
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	df00      	svc	0
 800a868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a86a:	bf00      	nop
 800a86c:	e000ed08 	.word	0xe000ed08

0800a870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a876:	4b46      	ldr	r3, [pc, #280]	; (800a990 <xPortStartScheduler+0x120>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a46      	ldr	r2, [pc, #280]	; (800a994 <xPortStartScheduler+0x124>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d10a      	bne.n	800a896 <xPortStartScheduler+0x26>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	613b      	str	r3, [r7, #16]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a896:	4b3e      	ldr	r3, [pc, #248]	; (800a990 <xPortStartScheduler+0x120>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a3f      	ldr	r2, [pc, #252]	; (800a998 <xPortStartScheduler+0x128>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d10a      	bne.n	800a8b6 <xPortStartScheduler+0x46>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	60fb      	str	r3, [r7, #12]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8b6:	4b39      	ldr	r3, [pc, #228]	; (800a99c <xPortStartScheduler+0x12c>)
 800a8b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	22ff      	movs	r2, #255	; 0xff
 800a8c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8d0:	78fb      	ldrb	r3, [r7, #3]
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	4b31      	ldr	r3, [pc, #196]	; (800a9a0 <xPortStartScheduler+0x130>)
 800a8dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8de:	4b31      	ldr	r3, [pc, #196]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a8e0:	2207      	movs	r2, #7
 800a8e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8e4:	e009      	b.n	800a8fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a8e6:	4b2f      	ldr	r3, [pc, #188]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	4a2d      	ldr	r2, [pc, #180]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a8ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8fa:	78fb      	ldrb	r3, [r7, #3]
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a902:	2b80      	cmp	r3, #128	; 0x80
 800a904:	d0ef      	beq.n	800a8e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a906:	4b27      	ldr	r3, [pc, #156]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f1c3 0307 	rsb	r3, r3, #7
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d00a      	beq.n	800a928 <xPortStartScheduler+0xb8>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	60bb      	str	r3, [r7, #8]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a928:	4b1e      	ldr	r3, [pc, #120]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	021b      	lsls	r3, r3, #8
 800a92e:	4a1d      	ldr	r2, [pc, #116]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a932:	4b1c      	ldr	r3, [pc, #112]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a93a:	4a1a      	ldr	r2, [pc, #104]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a93c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	b2da      	uxtb	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a946:	4b18      	ldr	r3, [pc, #96]	; (800a9a8 <xPortStartScheduler+0x138>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a17      	ldr	r2, [pc, #92]	; (800a9a8 <xPortStartScheduler+0x138>)
 800a94c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a952:	4b15      	ldr	r3, [pc, #84]	; (800a9a8 <xPortStartScheduler+0x138>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a14      	ldr	r2, [pc, #80]	; (800a9a8 <xPortStartScheduler+0x138>)
 800a958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a95c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a95e:	f000 f8dd 	bl	800ab1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a962:	4b12      	ldr	r3, [pc, #72]	; (800a9ac <xPortStartScheduler+0x13c>)
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a968:	f000 f8fc 	bl	800ab64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a96c:	4b10      	ldr	r3, [pc, #64]	; (800a9b0 <xPortStartScheduler+0x140>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a0f      	ldr	r2, [pc, #60]	; (800a9b0 <xPortStartScheduler+0x140>)
 800a972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a978:	f7ff ff66 	bl	800a848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a97c:	f7ff fa92 	bl	8009ea4 <vTaskSwitchContext>
	prvTaskExitError();
 800a980:	f7ff ff22 	bl	800a7c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	e000ed00 	.word	0xe000ed00
 800a994:	410fc271 	.word	0x410fc271
 800a998:	410fc270 	.word	0x410fc270
 800a99c:	e000e400 	.word	0xe000e400
 800a9a0:	20000414 	.word	0x20000414
 800a9a4:	20000418 	.word	0x20000418
 800a9a8:	e000ed20 	.word	0xe000ed20
 800a9ac:	20000020 	.word	0x20000020
 800a9b0:	e000ef34 	.word	0xe000ef34

0800a9b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	607b      	str	r3, [r7, #4]
}
 800a9cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9ce:	4b0f      	ldr	r3, [pc, #60]	; (800aa0c <vPortEnterCritical+0x58>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	4a0d      	ldr	r2, [pc, #52]	; (800aa0c <vPortEnterCritical+0x58>)
 800a9d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <vPortEnterCritical+0x58>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d10f      	bne.n	800aa00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9e0:	4b0b      	ldr	r3, [pc, #44]	; (800aa10 <vPortEnterCritical+0x5c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <vPortEnterCritical+0x4c>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	603b      	str	r3, [r7, #0]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <vPortEnterCritical+0x4a>
	}
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	20000020 	.word	0x20000020
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa1a:	4b12      	ldr	r3, [pc, #72]	; (800aa64 <vPortExitCritical+0x50>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10a      	bne.n	800aa38 <vPortExitCritical+0x24>
	__asm volatile
 800aa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	607b      	str	r3, [r7, #4]
}
 800aa34:	bf00      	nop
 800aa36:	e7fe      	b.n	800aa36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa38:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <vPortExitCritical+0x50>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	4a09      	ldr	r2, [pc, #36]	; (800aa64 <vPortExitCritical+0x50>)
 800aa40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa42:	4b08      	ldr	r3, [pc, #32]	; (800aa64 <vPortExitCritical+0x50>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d105      	bne.n	800aa56 <vPortExitCritical+0x42>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	f383 8811 	msr	BASEPRI, r3
}
 800aa54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa56:	bf00      	nop
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	20000020 	.word	0x20000020
	...

0800aa70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa70:	f3ef 8009 	mrs	r0, PSP
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	4b15      	ldr	r3, [pc, #84]	; (800aad0 <pxCurrentTCBConst>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	f01e 0f10 	tst.w	lr, #16
 800aa80:	bf08      	it	eq
 800aa82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8a:	6010      	str	r0, [r2, #0]
 800aa8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa94:	f380 8811 	msr	BASEPRI, r0
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f7ff fa00 	bl	8009ea4 <vTaskSwitchContext>
 800aaa4:	f04f 0000 	mov.w	r0, #0
 800aaa8:	f380 8811 	msr	BASEPRI, r0
 800aaac:	bc09      	pop	{r0, r3}
 800aaae:	6819      	ldr	r1, [r3, #0]
 800aab0:	6808      	ldr	r0, [r1, #0]
 800aab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab6:	f01e 0f10 	tst.w	lr, #16
 800aaba:	bf08      	it	eq
 800aabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aac0:	f380 8809 	msr	PSP, r0
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	f3af 8000 	nop.w

0800aad0 <pxCurrentTCBConst>:
 800aad0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop

0800aad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	607b      	str	r3, [r7, #4]
}
 800aaf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aaf2:	f7ff f91f 	bl	8009d34 <xTaskIncrementTick>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aafc:	4b06      	ldr	r3, [pc, #24]	; (800ab18 <SysTick_Handler+0x40>)
 800aafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	2300      	movs	r3, #0
 800ab06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	f383 8811 	msr	BASEPRI, r3
}
 800ab0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	e000ed04 	.word	0xe000ed04

0800ab1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab20:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <vPortSetupTimerInterrupt+0x34>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab26:	4b0b      	ldr	r3, [pc, #44]	; (800ab54 <vPortSetupTimerInterrupt+0x38>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab2c:	4b0a      	ldr	r3, [pc, #40]	; (800ab58 <vPortSetupTimerInterrupt+0x3c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a0a      	ldr	r2, [pc, #40]	; (800ab5c <vPortSetupTimerInterrupt+0x40>)
 800ab32:	fba2 2303 	umull	r2, r3, r2, r3
 800ab36:	099b      	lsrs	r3, r3, #6
 800ab38:	4a09      	ldr	r2, [pc, #36]	; (800ab60 <vPortSetupTimerInterrupt+0x44>)
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab3e:	4b04      	ldr	r3, [pc, #16]	; (800ab50 <vPortSetupTimerInterrupt+0x34>)
 800ab40:	2207      	movs	r2, #7
 800ab42:	601a      	str	r2, [r3, #0]
}
 800ab44:	bf00      	nop
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	e000e010 	.word	0xe000e010
 800ab54:	e000e018 	.word	0xe000e018
 800ab58:	20000014 	.word	0x20000014
 800ab5c:	10624dd3 	.word	0x10624dd3
 800ab60:	e000e014 	.word	0xe000e014

0800ab64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab74 <vPortEnableVFP+0x10>
 800ab68:	6801      	ldr	r1, [r0, #0]
 800ab6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab6e:	6001      	str	r1, [r0, #0]
 800ab70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab72:	bf00      	nop
 800ab74:	e000ed88 	.word	0xe000ed88

0800ab78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab7e:	f3ef 8305 	mrs	r3, IPSR
 800ab82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2b0f      	cmp	r3, #15
 800ab88:	d914      	bls.n	800abb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab8a:	4a17      	ldr	r2, [pc, #92]	; (800abe8 <vPortValidateInterruptPriority+0x70>)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	4413      	add	r3, r2
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab94:	4b15      	ldr	r3, [pc, #84]	; (800abec <vPortValidateInterruptPriority+0x74>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	7afa      	ldrb	r2, [r7, #11]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d20a      	bcs.n	800abb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	607b      	str	r3, [r7, #4]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abb4:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <vPortValidateInterruptPriority+0x78>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abbc:	4b0d      	ldr	r3, [pc, #52]	; (800abf4 <vPortValidateInterruptPriority+0x7c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d90a      	bls.n	800abda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	603b      	str	r3, [r7, #0]
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <vPortValidateInterruptPriority+0x60>
	}
 800abda:	bf00      	nop
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	e000e3f0 	.word	0xe000e3f0
 800abec:	20000414 	.word	0x20000414
 800abf0:	e000ed0c 	.word	0xe000ed0c
 800abf4:	20000418 	.word	0x20000418

0800abf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08a      	sub	sp, #40	; 0x28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac00:	2300      	movs	r3, #0
 800ac02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac04:	f7fe ffca 	bl	8009b9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac08:	4b5b      	ldr	r3, [pc, #364]	; (800ad78 <pvPortMalloc+0x180>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac10:	f000 f920 	bl	800ae54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac14:	4b59      	ldr	r3, [pc, #356]	; (800ad7c <pvPortMalloc+0x184>)
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f040 8093 	bne.w	800ad48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d01d      	beq.n	800ac64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ac28:	2208      	movs	r2, #8
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f003 0307 	and.w	r3, r3, #7
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d014      	beq.n	800ac64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f023 0307 	bic.w	r3, r3, #7
 800ac40:	3308      	adds	r3, #8
 800ac42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f003 0307 	and.w	r3, r3, #7
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00a      	beq.n	800ac64 <pvPortMalloc+0x6c>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	617b      	str	r3, [r7, #20]
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d06e      	beq.n	800ad48 <pvPortMalloc+0x150>
 800ac6a:	4b45      	ldr	r3, [pc, #276]	; (800ad80 <pvPortMalloc+0x188>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d869      	bhi.n	800ad48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac74:	4b43      	ldr	r3, [pc, #268]	; (800ad84 <pvPortMalloc+0x18c>)
 800ac76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac78:	4b42      	ldr	r3, [pc, #264]	; (800ad84 <pvPortMalloc+0x18c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac7e:	e004      	b.n	800ac8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d903      	bls.n	800ac9c <pvPortMalloc+0xa4>
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1f1      	bne.n	800ac80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac9c:	4b36      	ldr	r3, [pc, #216]	; (800ad78 <pvPortMalloc+0x180>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d050      	beq.n	800ad48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2208      	movs	r2, #8
 800acac:	4413      	add	r3, r2
 800acae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	6a3b      	ldr	r3, [r7, #32]
 800acb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	1ad2      	subs	r2, r2, r3
 800acc0:	2308      	movs	r3, #8
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d91f      	bls.n	800ad08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <pvPortMalloc+0xf8>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	613b      	str	r3, [r7, #16]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	1ad2      	subs	r2, r2, r3
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad02:	69b8      	ldr	r0, [r7, #24]
 800ad04:	f000 f908 	bl	800af18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad08:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <pvPortMalloc+0x188>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	4a1b      	ldr	r2, [pc, #108]	; (800ad80 <pvPortMalloc+0x188>)
 800ad14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad16:	4b1a      	ldr	r3, [pc, #104]	; (800ad80 <pvPortMalloc+0x188>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	4b1b      	ldr	r3, [pc, #108]	; (800ad88 <pvPortMalloc+0x190>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d203      	bcs.n	800ad2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad22:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <pvPortMalloc+0x188>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a18      	ldr	r2, [pc, #96]	; (800ad88 <pvPortMalloc+0x190>)
 800ad28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	4b13      	ldr	r3, [pc, #76]	; (800ad7c <pvPortMalloc+0x184>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	431a      	orrs	r2, r3
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad3e:	4b13      	ldr	r3, [pc, #76]	; (800ad8c <pvPortMalloc+0x194>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3301      	adds	r3, #1
 800ad44:	4a11      	ldr	r2, [pc, #68]	; (800ad8c <pvPortMalloc+0x194>)
 800ad46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad48:	f7fe ff36 	bl	8009bb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	f003 0307 	and.w	r3, r3, #7
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <pvPortMalloc+0x174>
	__asm volatile
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	60fb      	str	r3, [r7, #12]
}
 800ad68:	bf00      	nop
 800ad6a:	e7fe      	b.n	800ad6a <pvPortMalloc+0x172>
	return pvReturn;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3728      	adds	r7, #40	; 0x28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	20004024 	.word	0x20004024
 800ad7c:	20004038 	.word	0x20004038
 800ad80:	20004028 	.word	0x20004028
 800ad84:	2000401c 	.word	0x2000401c
 800ad88:	2000402c 	.word	0x2000402c
 800ad8c:	20004030 	.word	0x20004030

0800ad90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d04d      	beq.n	800ae3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ada2:	2308      	movs	r3, #8
 800ada4:	425b      	negs	r3, r3
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	4413      	add	r3, r2
 800adaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	4b24      	ldr	r3, [pc, #144]	; (800ae48 <vPortFree+0xb8>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4013      	ands	r3, r2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <vPortFree+0x44>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	60fb      	str	r3, [r7, #12]
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00a      	beq.n	800adf2 <vPortFree+0x62>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	60bb      	str	r3, [r7, #8]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	4b14      	ldr	r3, [pc, #80]	; (800ae48 <vPortFree+0xb8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4013      	ands	r3, r2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01e      	beq.n	800ae3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d11a      	bne.n	800ae3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <vPortFree+0xb8>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	43db      	mvns	r3, r3
 800ae12:	401a      	ands	r2, r3
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae18:	f7fe fec0 	bl	8009b9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <vPortFree+0xbc>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4413      	add	r3, r2
 800ae26:	4a09      	ldr	r2, [pc, #36]	; (800ae4c <vPortFree+0xbc>)
 800ae28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae2a:	6938      	ldr	r0, [r7, #16]
 800ae2c:	f000 f874 	bl	800af18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae30:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <vPortFree+0xc0>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3301      	adds	r3, #1
 800ae36:	4a06      	ldr	r2, [pc, #24]	; (800ae50 <vPortFree+0xc0>)
 800ae38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae3a:	f7fe febd 	bl	8009bb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae3e:	bf00      	nop
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	20004038 	.word	0x20004038
 800ae4c:	20004028 	.word	0x20004028
 800ae50:	20004034 	.word	0x20004034

0800ae54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae60:	4b27      	ldr	r3, [pc, #156]	; (800af00 <prvHeapInit+0xac>)
 800ae62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f003 0307 	and.w	r3, r3, #7
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00c      	beq.n	800ae88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	3307      	adds	r3, #7
 800ae72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f023 0307 	bic.w	r3, r3, #7
 800ae7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	4a1f      	ldr	r2, [pc, #124]	; (800af00 <prvHeapInit+0xac>)
 800ae84:	4413      	add	r3, r2
 800ae86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae8c:	4a1d      	ldr	r2, [pc, #116]	; (800af04 <prvHeapInit+0xb0>)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae92:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <prvHeapInit+0xb0>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aea0:	2208      	movs	r2, #8
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f023 0307 	bic.w	r3, r3, #7
 800aeae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4a15      	ldr	r2, [pc, #84]	; (800af08 <prvHeapInit+0xb4>)
 800aeb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aeb6:	4b14      	ldr	r3, [pc, #80]	; (800af08 <prvHeapInit+0xb4>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2200      	movs	r2, #0
 800aebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aebe:	4b12      	ldr	r3, [pc, #72]	; (800af08 <prvHeapInit+0xb4>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2200      	movs	r2, #0
 800aec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	1ad2      	subs	r2, r2, r3
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aed4:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <prvHeapInit+0xb4>)
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	4a0a      	ldr	r2, [pc, #40]	; (800af0c <prvHeapInit+0xb8>)
 800aee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	4a09      	ldr	r2, [pc, #36]	; (800af10 <prvHeapInit+0xbc>)
 800aeea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aeec:	4b09      	ldr	r3, [pc, #36]	; (800af14 <prvHeapInit+0xc0>)
 800aeee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aef2:	601a      	str	r2, [r3, #0]
}
 800aef4:	bf00      	nop
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	2000041c 	.word	0x2000041c
 800af04:	2000401c 	.word	0x2000401c
 800af08:	20004024 	.word	0x20004024
 800af0c:	2000402c 	.word	0x2000402c
 800af10:	20004028 	.word	0x20004028
 800af14:	20004038 	.word	0x20004038

0800af18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af20:	4b28      	ldr	r3, [pc, #160]	; (800afc4 <prvInsertBlockIntoFreeList+0xac>)
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	e002      	b.n	800af2c <prvInsertBlockIntoFreeList+0x14>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	429a      	cmp	r2, r3
 800af34:	d8f7      	bhi.n	800af26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	4413      	add	r3, r2
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	429a      	cmp	r2, r3
 800af46:	d108      	bne.n	800af5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	441a      	add	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	441a      	add	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d118      	bne.n	800afa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	4b15      	ldr	r3, [pc, #84]	; (800afc8 <prvInsertBlockIntoFreeList+0xb0>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d00d      	beq.n	800af96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	441a      	add	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	e008      	b.n	800afa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af96:	4b0c      	ldr	r3, [pc, #48]	; (800afc8 <prvInsertBlockIntoFreeList+0xb0>)
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	e003      	b.n	800afa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	429a      	cmp	r2, r3
 800afae:	d002      	beq.n	800afb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	2000401c 	.word	0x2000401c
 800afc8:	20004024 	.word	0x20004024

0800afcc <__libc_init_array>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	4d0d      	ldr	r5, [pc, #52]	; (800b004 <__libc_init_array+0x38>)
 800afd0:	4c0d      	ldr	r4, [pc, #52]	; (800b008 <__libc_init_array+0x3c>)
 800afd2:	1b64      	subs	r4, r4, r5
 800afd4:	10a4      	asrs	r4, r4, #2
 800afd6:	2600      	movs	r6, #0
 800afd8:	42a6      	cmp	r6, r4
 800afda:	d109      	bne.n	800aff0 <__libc_init_array+0x24>
 800afdc:	4d0b      	ldr	r5, [pc, #44]	; (800b00c <__libc_init_array+0x40>)
 800afde:	4c0c      	ldr	r4, [pc, #48]	; (800b010 <__libc_init_array+0x44>)
 800afe0:	f000 f82e 	bl	800b040 <_init>
 800afe4:	1b64      	subs	r4, r4, r5
 800afe6:	10a4      	asrs	r4, r4, #2
 800afe8:	2600      	movs	r6, #0
 800afea:	42a6      	cmp	r6, r4
 800afec:	d105      	bne.n	800affa <__libc_init_array+0x2e>
 800afee:	bd70      	pop	{r4, r5, r6, pc}
 800aff0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aff4:	4798      	blx	r3
 800aff6:	3601      	adds	r6, #1
 800aff8:	e7ee      	b.n	800afd8 <__libc_init_array+0xc>
 800affa:	f855 3b04 	ldr.w	r3, [r5], #4
 800affe:	4798      	blx	r3
 800b000:	3601      	adds	r6, #1
 800b002:	e7f2      	b.n	800afea <__libc_init_array+0x1e>
 800b004:	0800b198 	.word	0x0800b198
 800b008:	0800b198 	.word	0x0800b198
 800b00c:	0800b198 	.word	0x0800b198
 800b010:	0800b19c 	.word	0x0800b19c

0800b014 <memcpy>:
 800b014:	440a      	add	r2, r1
 800b016:	4291      	cmp	r1, r2
 800b018:	f100 33ff 	add.w	r3, r0, #4294967295
 800b01c:	d100      	bne.n	800b020 <memcpy+0xc>
 800b01e:	4770      	bx	lr
 800b020:	b510      	push	{r4, lr}
 800b022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b02a:	4291      	cmp	r1, r2
 800b02c:	d1f9      	bne.n	800b022 <memcpy+0xe>
 800b02e:	bd10      	pop	{r4, pc}

0800b030 <memset>:
 800b030:	4402      	add	r2, r0
 800b032:	4603      	mov	r3, r0
 800b034:	4293      	cmp	r3, r2
 800b036:	d100      	bne.n	800b03a <memset+0xa>
 800b038:	4770      	bx	lr
 800b03a:	f803 1b01 	strb.w	r1, [r3], #1
 800b03e:	e7f9      	b.n	800b034 <memset+0x4>

0800b040 <_init>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	bf00      	nop
 800b044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b046:	bc08      	pop	{r3}
 800b048:	469e      	mov	lr, r3
 800b04a:	4770      	bx	lr

0800b04c <_fini>:
 800b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04e:	bf00      	nop
 800b050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b052:	bc08      	pop	{r3}
 800b054:	469e      	mov	lr, r3
 800b056:	4770      	bx	lr
